/*! For license information please see index.bundle.js.LICENSE.txt */
(()=>{var e={350:e=>{var t;window,t=function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=42)}([function(e,t,n){"use strict";n.r(t),n.d(t,"__extends",(function(){return o})),n.d(t,"__assign",(function(){return i})),n.d(t,"__rest",(function(){return a})),n.d(t,"__decorate",(function(){return s})),n.d(t,"__param",(function(){return c})),n.d(t,"__metadata",(function(){return l})),n.d(t,"__awaiter",(function(){return u})),n.d(t,"__generator",(function(){return f})),n.d(t,"__createBinding",(function(){return d})),n.d(t,"__exportStar",(function(){return p})),n.d(t,"__values",(function(){return h})),n.d(t,"__read",(function(){return g})),n.d(t,"__spread",(function(){return m})),n.d(t,"__spreadArrays",(function(){return y})),n.d(t,"__spreadArray",(function(){return v})),n.d(t,"__await",(function(){return _})),n.d(t,"__asyncGenerator",(function(){return b})),n.d(t,"__asyncDelegator",(function(){return O})),n.d(t,"__asyncValues",(function(){return C})),n.d(t,"__makeTemplateObject",(function(){return w})),n.d(t,"__importStar",(function(){return A})),n.d(t,"__importDefault",(function(){return S})),n.d(t,"__classPrivateFieldGet",(function(){return k})),n.d(t,"__classPrivateFieldSet",(function(){return T}));var r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)};function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var i=function(){return i=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},i.apply(this,arguments)};function a(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n}function s(e,t,n,r){var o,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(a=(i<3?o(a):i>3?o(t,n,a):o(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a}function c(e,t){return function(n,r){t(n,r,e)}}function l(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}function u(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))}function f(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}}var d=Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]};function p(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||d(t,e,n)}function h(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function g(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a}function m(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(g(arguments[t]));return e}function y(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],a=0,s=i.length;a<s;a++,o++)r[o]=i[a];return r}function v(e,t,n){if(n||2===arguments.length)for(var r,o=0,i=t.length;o<i;o++)!r&&o in t||(r||(r=Array.prototype.slice.call(t,0,o)),r[o]=t[o]);return e.concat(r||Array.prototype.slice.call(t))}function _(e){return this instanceof _?(this.v=e,this):new _(e)}function b(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=n.apply(e,t||[]),i=[];return r={},a("next"),a("throw"),a("return"),r[Symbol.asyncIterator]=function(){return this},r;function a(e){o[e]&&(r[e]=function(t){return new Promise((function(n,r){i.push([e,t,n,r])>1||s(e,t)}))})}function s(e,t){try{(n=o[e](t)).value instanceof _?Promise.resolve(n.value.v).then(c,l):u(i[0][2],n)}catch(e){u(i[0][3],e)}var n}function c(e){s("next",e)}function l(e){s("throw",e)}function u(e,t){e(t),i.shift(),i.length&&s(i[0][0],i[0][1])}}function O(e){var t,n;return t={},r("next"),r("throw",(function(e){throw e})),r("return"),t[Symbol.iterator]=function(){return this},t;function r(r,o){t[r]=e[r]?function(t){return(n=!n)?{value:_(e[r](t)),done:"return"===r}:o?o(t):t}:o}}function C(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e=h(e),t={},r("next"),r("throw"),r("return"),t[Symbol.asyncIterator]=function(){return this},t);function r(n){t[n]=e[n]&&function(t){return new Promise((function(r,o){!function(e,t,n,r){Promise.resolve(r).then((function(t){e({value:t,done:n})}),t)}(r,o,(t=e[n](t)).done,t.value)}))}}}function w(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}var R=Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t};function A(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&d(t,e,n);return R(t,e),t}function S(e){return e&&e.__esModule?e:{default:e}}function k(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)}function T(e,t,n,r,o){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!o:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?o.call(e,n):o?o.value=n:t.set(e,n),n}},function(e,t,n){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0}),t.allToUpperCase=t.allToLowerCase=t.encodeBody=t.decodeBody=t.Format=t.promisify=t.trim=t.arrChooseN=t.randomHexString=t.randomString=t.cheapRandStr=t.dataSizeBytes=t.inspectBody=t.inspectError=t.isErrorInfoOrPartialErrorInfo=t.now=t.parseQueryString=t.toQueryString=t.arrPopRandomElement=t.defaultPostHeaders=t.defaultGetHeaders=t.allSame=t.arrEvery=t.arrFilter=t.arrMap=t.safeArrForEach=t.arrForEach=t.forInOwnNonNullProperties=t.valuesArray=t.keysArray=t.arrWithoutValue=t.arrDeleteValue=t.arrIn=t.arrIndexOf=t.arrSubtract=t.arrIntersectOb=t.arrIntersect=t.intersect=t.containsValue=t.inherits=t.prototypicalClone=t.shallowClone=t.isEmptyArg=t.isOnlyPropIn=t.isEmpty=t.isObject=t.ensureArray=t.isArray=t.copy=t.mixin=void 0,t.toBase64=t.matchDerivedChannel=t.shallowEquals=t.getGlobalObject=t.getRetryTime=t.getJitterCoefficient=t.getBackoffCoefficient=void 0;var r=n(0),o=r.__importDefault(n(3)),i=r.__importStar(n(8)),a=r.__importDefault(n(4)),s=n(11),c=n(31);function l(e){return Math.floor(Math.random()*e.length)}function u(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];for(var r=0;r<t.length;r++){var o=t[r];if(!o)break;var i=Object.prototype.hasOwnProperty;for(var a in o)i&&!i.call(o,a)||(e[a]=o[a])}return e}function f(e){return null==e}function d(e,t){var n=function(){};n.prototype=e;var r=new n;return t&&u(r,t),r}function p(e,n){for(var r=[],o=0;o<e.length;o++){var i=e[o];-1!=(0,t.arrIndexOf)(n,i)&&r.push(i)}return r}function h(e,t){for(var n=[],r=0;r<e.length;r++){var o=e[r];o in t&&n.push(o)}return n}function g(e,n){var r=(0,t.arrIndexOf)(e,n),o=-1!=r;return o&&e.splice(r,1),o}t.mixin=u,t.copy=function(e){return u({},e)},t.isArray=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)},t.ensureArray=function(e){return f(e)?[]:(0,t.isArray)(e)?e:[e]},t.isObject=function(e){return"[object Object]"==Object.prototype.toString.call(e)},t.isEmpty=function(e){for(var t in e)return!1;return!0},t.isOnlyPropIn=function(e,t){for(var n in e)if(n!==t)return!1;return!0},t.isEmptyArg=f,t.shallowClone=function(e){var t=new Object;for(var n in e)t[n]=e[n];return t},t.prototypicalClone=d,t.inherits=function(e,t){o.default.Config.inherits?o.default.Config.inherits(e,t):(e.super_=t,e.prototype=d(t.prototype,{constructor:e}))},t.containsValue=function(e,t){for(var n in e)if(e[n]==t)return!0;return!1},t.intersect=function(e,n){return(0,t.isArray)(n)?p(e,n):h(e,n)},t.arrIntersect=p,t.arrIntersectOb=h,t.arrSubtract=function(e,n){for(var r=[],o=0;o<e.length;o++){var i=e[o];-1==(0,t.arrIndexOf)(n,i)&&r.push(i)}return r},t.arrIndexOf=Array.prototype.indexOf?function(e,t,n){return e.indexOf(t,n)}:function(e,t,n){n=n||0;for(var r=e.length;n<r;n++)if(e[n]===t)return n;return-1},t.arrIn=function(e,n){return-1!==(0,t.arrIndexOf)(e,n)},t.arrDeleteValue=g,t.arrWithoutValue=function(e,t){var n=e.slice();return g(n,t),n},t.keysArray=function(e,t){var n=[];for(var r in e)t&&!Object.prototype.hasOwnProperty.call(e,r)||n.push(r);return n},t.valuesArray=function(e,t){var n=[];for(var r in e)t&&!Object.prototype.hasOwnProperty.call(e,r)||n.push(e[r]);return n},t.forInOwnNonNullProperties=function(e,t){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&e[n]&&t(n)},t.arrForEach=Array.prototype.forEach?function(e,t){e.forEach(t)}:function(e,t){for(var n=e.length,r=0;r<n;r++)t(e[r],r,e)},t.safeArrForEach=function(e,n){return(0,t.arrForEach)(e.slice(),n)},t.arrMap=Array.prototype.map?function(e,t){return e.map(t)}:function(e,t){for(var n=[],r=e.length,o=0;o<r;o++)n.push(t(e[o],o,e));return n},t.arrFilter=Array.prototype.filter?function(e,t){return e.filter(t)}:function(e,t){for(var n=[],r=e.length,o=0;o<r;o++)t(e[o])&&n.push(e[o]);return n},t.arrEvery=Array.prototype.every?function(e,t){return e.every(t)}:function(e,t){for(var n=e.length,r=0;r<n;r++)if(!t(e[r],r,e))return!1;return!0},t.allSame=function(e,n){if(0===e.length)return!0;var r=e[0][n];return(0,t.arrEvery)(e,(function(e){return e[n]===r}))};var m,y={json:"application/json",jsonp:"application/javascript",xml:"application/xml",html:"text/html",msgpack:"application/x-msgpack"};function v(e){return e.splice(l(e),1)[0]}function _(e){return Math.min((e+2)/3,2)}function b(){return 1-.2*Math.random()}t.defaultGetHeaders=function(e,t){return{accept:y[t||m.json],"X-Ably-Version":i.default.protocolVersion.toString(),"Ably-Agent":(0,i.getAgentString)(e)}},t.defaultPostHeaders=function(e,t){var n;return{accept:n=y[t||m.json],"content-type":n,"X-Ably-Version":i.default.protocolVersion.toString(),"Ably-Agent":(0,i.getAgentString)(e)}},t.arrPopRandomElement=v,t.toQueryString=function(e){var t=[];if(e)for(var n in e)t.push(encodeURIComponent(n)+"="+encodeURIComponent(e[n]));return t.length?"?"+t.join("&"):""},t.parseQueryString=function(e){for(var t,n=/([^?&=]+)=?([^&]*)/g,r={};t=n.exec(e);)r[decodeURIComponent(t[1])]=decodeURIComponent(t[2]);return r},t.now=Date.now||function(){return(new Date).getTime()},t.isErrorInfoOrPartialErrorInfo=function(e){return"object"==typeof e&&null!==e&&("ErrorInfo"==e.constructor.name||"PartialErrorInfo"==e.constructor.name)},t.inspectError=function(e){var t,n;return e instanceof Error||"ErrorInfo"===(null===(t=null==e?void 0:e.constructor)||void 0===t?void 0:t.name)||"PartialErrorInfo"===(null===(n=null==e?void 0:e.constructor)||void 0===n?void 0:n.name)?e.toString():o.default.Config.inspect(e)},t.inspectBody=function(e){return o.default.BufferUtils.isBuffer(e)?e.toString():"string"==typeof e?e:o.default.Config.inspect(e)},t.dataSizeBytes=function(e){if(o.default.BufferUtils.isBuffer(e))return o.default.BufferUtils.byteLength(e);if("string"==typeof e)return o.default.Config.stringByteSize(e);throw new Error("Expected input of Utils.dataSizeBytes to be a buffer or string, but was: "+typeof e)},t.cheapRandStr=function(){return String(Math.random()).substr(2)},t.randomString=function(e){if(o.default.Config.getRandomValues&&"undefined"!=typeof Uint8Array){var t=new Uint8Array(e);return o.default.Config.getRandomValues(t),o.default.BufferUtils.base64Encode(t)}for(var n=o.default.BufferUtils.base64CharSet,r=Math.round(4*e/3),i="",a=0;a<r;a++)i+=n[l(n)];return i},t.randomHexString=function(e){if(o.default.Config.getRandomValues&&"undefined"!=typeof Uint8Array){var t=new Uint8Array(e);return o.default.Config.getRandomValues(t),o.default.BufferUtils.hexEncode(t)}for(var n=o.default.BufferUtils.hexCharSet,r=2*e,i="",a=0;a<r;a++)i+=n[l(n)];return i},t.arrChooseN=function(e,t){for(var n=Math.min(t,e.length),r=e.slice(),o=[],i=0;i<n;i++)o.push(v(r));return o},t.trim=String.prototype.trim?function(e){return e.trim()}:function(e){return e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"")},t.promisify=function(e,t,n){return new Promise((function(o,i){e[t].apply(e,r.__spreadArray(r.__spreadArray([],n,!1),[function(e,t){e?i(e):o(t)}],!1))}))},function(e){e.msgpack="msgpack",e.json="json"}(m=t.Format||(t.Format={})),t.decodeBody=function(e,t){return"msgpack"==t?o.default.Config.msgpack.decode(e):JSON.parse(String(e))},t.encodeBody=function(e,t){return"msgpack"==t?o.default.Config.msgpack.encode(e,!0):JSON.stringify(e)},t.allToLowerCase=function(e){return e.map((function(e){return e&&e.toLowerCase()}))},t.allToUpperCase=function(e){return e.map((function(e){return e&&e.toUpperCase()}))},t.getBackoffCoefficient=_,t.getJitterCoefficient=b,t.getRetryTime=function(e,t){return e*_(t)*b()},t.getGlobalObject=function(){return e||("undefined"!=typeof window?window:self)},t.shallowEquals=function(e,t){return Object.keys(e).every((function(n){return e[n]===t[n]}))&&Object.keys(t).every((function(n){return t[n]===e[n]}))},t.matchDerivedChannel=function(e){var t=e.match(/^(\[([^?]*)(?:(.*))\])?(.+)$/);if(!t||!t.length||t.length<5)throw new a.default("regex match failed",400,40010);if(t[2])throw new a.default("cannot use a derived option with a ".concat(t[2]," channel"),400,40010);return{qualifierParam:t[3]||"",channelName:t[4]}},t.toBase64=function(e){return o.default.Config.createHmac?Buffer.from(e,"ascii").toString("base64"):(0,s.stringify)((0,c.parse)(e))}}).call(this,n(13))},function(e,t,n){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(0).__importDefault(n(3)),i=e||("undefined"!=typeof window?window:self);function a(e,t){return"".concat(e).padStart(t?3:2,"0")}function s(e){return o.default.Config.logTimestamps?function(t){var n=new Date;e(a(n.getHours())+":"+a(n.getMinutes())+":"+a(n.getSeconds())+"."+a(n.getMilliseconds(),1)+" "+t)}:e}!function(e){e[e.None=0]="None",e[e.Error=1]="Error",e[e.Major=2]="Major",e[e.Minor=3]="Minor",e[e.Micro=4]="Micro"}(r||(r={}));var c=function(){function e(){e.logLevel=e.LOG_DEFAULT}return e.initLogHandlers=function(){var e=function(){var e,t,n,r;return"undefined"==typeof Window&&"undefined"==typeof WorkerGlobalScope||"function"==typeof(null===(t=null===(e=null==i?void 0:i.console)||void 0===e?void 0:e.log)||void 0===t?void 0:t.apply)?(n=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];console.log.apply(console,e)},r=console.warn?function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];console.warn.apply(console,e)}:n):n=r=(null==i?void 0:i.console.log)?function(){Function.prototype.apply.call(console.log,console,arguments)}:function(){},[n,r].map(s)}(),t=e[0],n=e[1];this.logHandler=t,this.logErrorHandler=n},e.logLevel=r.Error,e.LOG_NONE=r.None,e.LOG_ERROR=r.Error,e.LOG_MAJOR=r.Major,e.LOG_MINOR=r.Minor,e.LOG_MICRO=r.Micro,e.LOG_DEFAULT=r.Error,e.LOG_DEBUG=r.Micro,e.logAction=function(t,n,o){e.shouldLog(t)&&(t===r.Error?e.logErrorHandler:e.logHandler)("Ably: "+n+": "+o)},e.deprecated=function(t,n){e.deprecatedWithMsg(t,"Please use '"+n+"' instead.")},e.deprecatedWithMsg=function(t,n){e.shouldLog(r.Error)&&e.logErrorHandler("Ably: Deprecation warning - '"+t+"' is deprecated and will be removed from a future version. "+n)},e.shouldLog=function(t){return t<=e.logLevel},e.setLog=function(t,n){void 0!==t&&(e.logLevel=t),void 0!==n&&(e.logHandler=e.logErrorHandler=n)},e}();t.default=c}).call(this,n(13))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(){}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PartialErrorInfo=void 0;var r=n(0),o=r.__importDefault(n(3)),i=r.__importStar(n(1));function a(e){var t="["+e.constructor.name;return e.message&&(t+=": "+e.message),e.statusCode&&(t+="; statusCode="+e.statusCode),e.code&&(t+="; code="+e.code),e.cause&&(t+="; cause="+i.inspectError(e.cause)),!e.href||e.message&&e.message.indexOf("help.ably.io")>-1||(t+="; see "+e.href+" "),t+"]"}var s=function(e){function t(n,r,o,i){var a=e.call(this,n)||this;return void 0!==Object.setPrototypeOf&&Object.setPrototypeOf(a,t.prototype),a.code=r,a.statusCode=o,a.cause=i,a}return r.__extends(t,e),t.prototype.toString=function(){return a(this)},t.fromValues=function(e){var n=e,r=n.message,i=n.code,a=n.statusCode;if("string"!=typeof r||"number"!=typeof i||"number"!=typeof a)throw new Error("ErrorInfo.fromValues(): invalid values: "+o.default.Config.inspect(e));var s=Object.assign(new t(r,i,a),e);return s.code&&!s.href&&(s.href="https://help.ably.io/error/"+s.code),s},t}(Error);t.default=s;var c=function(e){function t(n,r,o,i){var a=e.call(this,n)||this;return void 0!==Object.setPrototypeOf&&Object.setPrototypeOf(a,t.prototype),a.code=r,a.statusCode=o,a.cause=i,a}return r.__extends(t,e),t.prototype.toString=function(){return a(this)},t}(Error);t.PartialErrorInfo=c},function(e,t,n){var r;e.exports=(r=n(6),function(){if("function"==typeof ArrayBuffer){var e=r.lib.WordArray,t=e.init,n=e.init=function(e){if(e instanceof ArrayBuffer&&(e=new Uint8Array(e)),(e instanceof Int8Array||"undefined"!=typeof Uint8ClampedArray&&e instanceof Uint8ClampedArray||e instanceof Int16Array||e instanceof Uint16Array||e instanceof Int32Array||e instanceof Uint32Array||e instanceof Float32Array||e instanceof Float64Array)&&(e=new Uint8Array(e.buffer,e.byteOffset,e.byteLength)),e instanceof Uint8Array){for(var n=e.byteLength,r=[],o=0;o<n;o++)r[o>>>2]|=e[o]<<24-o%4*8;t.call(this,r,n)}else t.apply(this,arguments)};n.prototype=e}}(),r.lib.WordArray)},function(e,t,n){(function(t){var r;e.exports=(r=r||function(e,r){var o;if("undefined"!=typeof window&&window.crypto&&(o=window.crypto),!o&&"undefined"!=typeof window&&window.msCrypto&&(o=window.msCrypto),!o&&void 0!==t&&t.crypto&&(o=t.crypto),!o)try{o=n(44)}catch(e){}var i=function(){if(o){if("function"==typeof o.getRandomValues)try{return o.getRandomValues(new Uint32Array(1))[0]}catch(e){}if("function"==typeof o.randomBytes)try{return o.randomBytes(4).readInt32LE()}catch(e){}}throw new Error("Native crypto module could not be used to get secure random number.")},a=Object.create||function(){function e(){}return function(t){var n;return e.prototype=t,n=new e,e.prototype=null,n}}(),s={},c=s.lib={},l=c.Base={extend:function(e){var t=a(this);return e&&t.mixIn(e),t.hasOwnProperty("init")&&this.init!==t.init||(t.init=function(){t.$super.init.apply(this,arguments)}),t.init.prototype=t,t.$super=this,t},create:function(){var e=this.extend();return e.init.apply(e,arguments),e},init:function(){},mixIn:function(e){for(var t in e)e.hasOwnProperty(t)&&(this[t]=e[t]);e.hasOwnProperty("toString")&&(this.toString=e.toString)},clone:function(){return this.init.prototype.extend(this)}},u=c.WordArray=l.extend({init:function(e,t){e=this.words=e||[],this.sigBytes=null!=t?t:4*e.length},toString:function(e){return(e||d).stringify(this)},concat:function(e){var t=this.words,n=e.words,r=this.sigBytes,o=e.sigBytes;if(this.clamp(),r%4)for(var i=0;i<o;i++){var a=n[i>>>2]>>>24-i%4*8&255;t[r+i>>>2]|=a<<24-(r+i)%4*8}else for(i=0;i<o;i+=4)t[r+i>>>2]=n[i>>>2];return this.sigBytes+=o,this},clamp:function(){var t=this.words,n=this.sigBytes;t[n>>>2]&=4294967295<<32-n%4*8,t.length=e.ceil(n/4)},clone:function(){var e=l.clone.call(this);return e.words=this.words.slice(0),e},random:function(e){for(var t=[],n=0;n<e;n+=4)t.push(i());return new u.init(t,e)}}),f=s.enc={},d=f.Hex={stringify:function(e){for(var t=e.words,n=e.sigBytes,r=[],o=0;o<n;o++){var i=t[o>>>2]>>>24-o%4*8&255;r.push((i>>>4).toString(16)),r.push((15&i).toString(16))}return r.join("")},parse:function(e){for(var t=e.length,n=[],r=0;r<t;r+=2)n[r>>>3]|=parseInt(e.substr(r,2),16)<<24-r%8*4;return new u.init(n,t/2)}},p=f.Latin1={stringify:function(e){for(var t=e.words,n=e.sigBytes,r=[],o=0;o<n;o++){var i=t[o>>>2]>>>24-o%4*8&255;r.push(String.fromCharCode(i))}return r.join("")},parse:function(e){for(var t=e.length,n=[],r=0;r<t;r++)n[r>>>2]|=(255&e.charCodeAt(r))<<24-r%4*8;return new u.init(n,t)}},h=f.Utf8={stringify:function(e){try{return decodeURIComponent(escape(p.stringify(e)))}catch(e){throw new Error("Malformed UTF-8 data")}},parse:function(e){return p.parse(unescape(encodeURIComponent(e)))}},g=c.BufferedBlockAlgorithm=l.extend({reset:function(){this._data=new u.init,this._nDataBytes=0},_append:function(e){"string"==typeof e&&(e=h.parse(e)),this._data.concat(e),this._nDataBytes+=e.sigBytes},_process:function(t){var n,r=this._data,o=r.words,i=r.sigBytes,a=this.blockSize,s=i/(4*a),c=(s=t?e.ceil(s):e.max((0|s)-this._minBufferSize,0))*a,l=e.min(4*c,i);if(c){for(var f=0;f<c;f+=a)this._doProcessBlock(o,f);n=o.splice(0,c),r.sigBytes-=l}return new u.init(n,l)},clone:function(){var e=l.clone.call(this);return e._data=this._data.clone(),e},_minBufferSize:0}),m=(c.Hasher=g.extend({cfg:l.extend(),init:function(e){this.cfg=this.cfg.extend(e),this.reset()},reset:function(){g.reset.call(this),this._doReset()},update:function(e){return this._append(e),this._process(),this},finalize:function(e){return e&&this._append(e),this._doFinalize()},blockSize:16,_createHelper:function(e){return function(t,n){return new e.init(n).finalize(t)}},_createHmacHelper:function(e){return function(t,n){return new m.HMAC.init(e,n).finalize(t)}}}),s.algo={});return s}(Math),r)}).call(this,n(13))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=r.__importStar(n(1)),i=r.__importDefault(n(2)),a=r.__importDefault(n(3));function s(e,t,n){try{t.apply(e,n)}catch(e){i.default.logAction(i.default.LOG_ERROR,"EventEmitter.emit()","Unexpected listener exception: "+e+"; stack = "+(e&&e.stack))}}function c(e,t,n){for(var r,i,a,s=0;s<e.length;s++)if(r=e[s],n&&(r=r[n]),o.isArray(r)){for(;-1!==(i=o.arrIndexOf(r,t));)r.splice(i,1);n&&0===r.length&&delete e[s][n]}else if(o.isObject(r))for(a in r)Object.prototype.hasOwnProperty.call(r,a)&&o.isArray(r[a])&&c([r],t,a)}var l=function(){function e(){this.any=[],this.events=Object.create(null),this.anyOnce=[],this.eventsOnce=Object.create(null)}return e.prototype.on=function(){for(var e=this,t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];if(1===t.length){var r=t[0];if("function"!=typeof r)throw new Error("EventListener.on(): Invalid arguments: "+a.default.Config.inspect(t));this.any.push(r)}if(2===t.length){var i=t[0],s=t[1];if("function"!=typeof s)throw new Error("EventListener.on(): Invalid arguments: "+a.default.Config.inspect(t));if(o.isEmptyArg(i))this.any.push(s);else if(o.isArray(i))i.forEach((function(t){e.on(t,s)}));else{if("string"!=typeof i)throw new Error("EventListener.on(): Invalid arguments: "+a.default.Config.inspect(t));(this.events[i]||(this.events[i]=[])).push(s)}}},e.prototype.off=function(){for(var e,t=this,n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];if(0==n.length||o.isEmptyArg(n[0])&&o.isEmptyArg(n[1]))return this.any=[],this.events=Object.create(null),this.anyOnce=[],void(this.eventsOnce=Object.create(null));var i=n[0],s=n[1],l=null,u=null;if(1!==n.length&&s){if("function"!=typeof s)throw new Error("EventEmitter.off(): invalid arguments:"+a.default.Config.inspect(n));u=(e=[i,s])[0],l=e[1]}else"function"==typeof i?l=i:u=i;if(l&&o.isEmptyArg(u))c([this.any,this.events,this.anyOnce,this.eventsOnce],l);else if(o.isArray(u))u.forEach((function(e){t.off(e,l)}));else{if("string"!=typeof u)throw new Error("EventEmitter.off(): invalid arguments:"+a.default.Config.inspect(n));l?c([this.events,this.eventsOnce],l,u):(delete this.events[u],delete this.eventsOnce[u])}},e.prototype.listeners=function(e){if(e){var t=this.events[e]||[];return this.eventsOnce[e]&&Array.prototype.push.apply(t,this.eventsOnce[e]),t.length?t:null}return this.any.length?this.any:null},e.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var r={event:e},i=[];this.anyOnce.length&&(Array.prototype.push.apply(i,this.anyOnce),this.anyOnce=[]),this.any.length&&Array.prototype.push.apply(i,this.any);var a=this.eventsOnce[e];a&&(Array.prototype.push.apply(i,a),delete this.eventsOnce[e]);var c=this.events[e];c&&Array.prototype.push.apply(i,c),o.arrForEach(i,(function(e){s(r,e,t)}))},e.prototype.once=function(){for(var e=this,t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=t.length;if((0===r||1===r&&"function"!=typeof t[0])&&a.default.Config.Promise){var i=t[0];return new a.default.Config.Promise((function(t){e.once(i,t)}))}var s=t[0],c=t[1];if(1===t.length&&"function"==typeof s)this.anyOnce.push(s);else if(o.isEmptyArg(s)){if("function"!=typeof c)throw new Error("EventEmitter.once(): Invalid arguments:"+a.default.Config.inspect(t));this.anyOnce.push(c)}else if(o.isArray(s)){var l=this,u=function(){var e=Array.prototype.slice.call(arguments);if(o.arrForEach(s,(function(e){l.off(e,u)})),"function"!=typeof c)throw new Error("EventEmitter.once(): Invalid arguments:"+a.default.Config.inspect(t));c.apply(this,e)};o.arrForEach(s,(function(e){l.on(e,u)}))}else{if("string"!=typeof s)throw new Error("EventEmitter.once(): Invalid arguments:"+a.default.Config.inspect(t));var f=this.eventsOnce[s]||(this.eventsOnce[s]=[]);if(c){if("function"!=typeof c)throw new Error("EventEmitter.once(): Invalid arguments:"+a.default.Config.inspect(t));f.push(c)}}},e.prototype.whenState=function(t,n,r){for(var o=this,i=[],c=3;c<arguments.length;c++)i[c-3]=arguments[c];var l={event:t};if("string"!=typeof t||"string"!=typeof n)throw"whenState requires a valid event String argument";if("function"!=typeof r&&a.default.Config.Promise)return new a.default.Config.Promise((function(r){e.prototype.whenState.apply(o,[t,n,r].concat(i))}));t===n?s(l,r,i):this.once(t,r)},e}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getDefaults=t.normaliseOptions=t.objectifyOptions=t.getAgentString=t.getHosts=t.getFallbackHosts=t.environmentFallbackHosts=t.getHttpScheme=t.getPort=t.getHost=void 0;var r=n(0),o=r.__importDefault(n(3)),i=r.__importStar(n(1)),a=r.__importDefault(n(2)),s=r.__importDefault(n(4)),c=n(43),l="ably-js/"+c.version,u={ENVIRONMENT:"",REST_HOST:"rest.ably.io",REALTIME_HOST:"realtime.ably.io",FALLBACK_HOSTS:["A.ably-realtime.com","B.ably-realtime.com","C.ably-realtime.com","D.ably-realtime.com","E.ably-realtime.com"],PORT:80,TLS_PORT:443,TIMEOUTS:{disconnectedRetryTimeout:15e3,suspendedRetryTimeout:3e4,httpRequestTimeout:15e3,channelRetryTimeout:15e3,fallbackRetryTimeout:6e5,connectionStateTtl:12e4,realtimeRequestTimeout:1e4,recvTimeout:9e4,preferenceConnectTimeout:6e3,parallelUpgradeDelay:6e3},httpMaxRetryCount:3,maxMessageSize:65536,version:c.version,protocolVersion:2,agent:l,getHost:f,getPort:d,getHttpScheme:p,environmentFallbackHosts:h,getFallbackHosts:g,getHosts:m,checkHost:y,objectifyOptions:v,normaliseOptions:_};function f(e,t,n){return n?t==e.restHost&&e.realtimeHost||t||e.realtimeHost:t||e.restHost}function d(e,t){return t||e.tls?e.tlsPort:e.port}function p(e){return e.tls?"https://":"http://"}function h(e){return[e+"-a-fallback.ably-realtime.com",e+"-b-fallback.ably-realtime.com",e+"-c-fallback.ably-realtime.com",e+"-d-fallback.ably-realtime.com",e+"-e-fallback.ably-realtime.com"]}function g(e){var t=e.fallbackHosts,n=void 0!==e.httpMaxRetryCount?e.httpMaxRetryCount:u.httpMaxRetryCount;return t?i.arrChooseN(t,n):[]}function m(e){return[e.restHost].concat(g(e))}function y(e){if("string"!=typeof e)throw new s.default("host must be a string; was a "+typeof e,4e4,400);if(!e.length)throw new s.default("host must not be zero-length",4e4,400)}function v(e){return"string"==typeof e?-1==e.indexOf(":")?{token:e}:{key:e}:e}function _(e){if(e.host&&(a.default.deprecated("host","restHost"),e.restHost=e.host),e.wsHost&&(a.default.deprecated("wsHost","realtimeHost"),e.realtimeHost=e.wsHost),e.queueEvents&&(a.default.deprecated("queueEvents","queueMessages"),e.queueMessages=e.queueEvents),e.fallbackHostsUseDefault){if(e.fallbackHosts){var t="fallbackHosts and fallbackHostsUseDefault cannot both be set";throw a.default.logAction(a.default.LOG_ERROR,"Defaults.normaliseOptions",t),new s.default(t,4e4,400)}if(e.port||e.tlsPort)throw t="fallbackHostsUseDefault cannot be set when port or tlsPort are set",a.default.logAction(a.default.LOG_ERROR,"Defaults.normaliseOptions",t),new s.default(t,4e4,400);e.environment?a.default.deprecatedWithMsg("fallbackHostsUseDefault","There is no longer a need to set this when the environment option is also set since the library will now generate the correct fallback hosts using the environment option."):a.default.deprecated("fallbackHostsUseDefault","fallbackHosts: Ably.Defaults.FALLBACK_HOSTS"),e.fallbackHosts=u.FALLBACK_HOSTS}!0===e.recover&&(a.default.deprecated("{recover: true}","{recover: function(lastConnectionDetails, cb) { cb(true); }}"),e.recover=function(e,t){t(!0)}),"function"==typeof e.recover&&!0===e.closeOnUnload&&(a.default.logAction(a.default.LOG_ERROR,"Defaults.normaliseOptions","closeOnUnload was true and a session recovery function was set - these are mutually exclusive, so unsetting the latter"),e.recover=void 0),"closeOnUnload"in e||(e.closeOnUnload=!e.recover),e.transports&&i.arrIn(e.transports,"xhr")&&(a.default.deprecated('transports: ["xhr"]','transports: ["xhr_streaming"]'),i.arrDeleteValue(e.transports,"xhr"),e.transports.push("xhr_streaming")),"queueMessages"in e||(e.queueMessages=!0);var n=e.environment&&String(e.environment).toLowerCase()||u.ENVIRONMENT,c=!n||"production"===n;e.fallbackHosts||e.restHost||e.realtimeHost||e.port||e.tlsPort||(e.fallbackHosts=c?u.FALLBACK_HOSTS:h(n));var l=e.restHost||(c?u.REST_HOST:n+"-"+u.REST_HOST),f=function(e,t,n){return e.realtimeHost?e.realtimeHost:e.restHost?(a.default.logAction(a.default.LOG_MINOR,"Defaults.normaliseOptions",'restHost is set to "'+e.restHost+'" but realtimeHost is not set, so setting realtimeHost to "'+e.restHost+'" too. If this is not what you want, please set realtimeHost explicitly.'),e.restHost):t?u.REALTIME_HOST:n+"-"+u.REALTIME_HOST}(e,c,n);i.arrForEach((e.fallbackHosts||[]).concat(l,f),y),e.port=e.port||u.PORT,e.tlsPort=e.tlsPort||u.TLS_PORT,"tls"in e||(e.tls=!0);var d=function(e){var t={};for(var n in u.TIMEOUTS)t[n]=e[n]||u.TIMEOUTS[n];return t}(e);e.useBinaryProtocol="useBinaryProtocol"in e?o.default.Config.supportsBinary&&e.useBinaryProtocol:o.default.Config.preferBinary,e.clientId&&((e.headers=e.headers||{})["X-Ably-ClientId"]=o.default.BufferUtils.base64Encode(o.default.BufferUtils.utf8Encode(e.clientId))),"idempotentRestPublishing"in e||(e.idempotentRestPublishing=!0),e.promises&&!o.default.Config.Promise&&(a.default.logAction(a.default.LOG_ERROR,"Defaults.normaliseOptions","{promises: true} was specified, but no Promise constructor found; disabling promises"),e.promises=!1);var p=null,g=e.connectivityCheckUrl;if(e.connectivityCheckUrl){var m=e.connectivityCheckUrl.split("?"),v=m[0],_=m[1];p=_?i.parseQueryString(_):{},-1===v.indexOf("://")&&(v="https://"+v),g=v}return r.__assign(r.__assign({},e),{useBinaryProtocol:"useBinaryProtocol"in e?o.default.Config.supportsBinary&&e.useBinaryProtocol:o.default.Config.preferBinary,realtimeHost:f,restHost:l,maxMessageSize:e.maxMessageSize||u.maxMessageSize,timeouts:d,connectivityCheckParams:p,connectivityCheckUrl:g})}t.getHost=f,t.getPort=d,t.getHttpScheme=p,t.environmentFallbackHosts=h,t.getFallbackHosts=g,t.getHosts=m,t.getAgentString=function(e){var t=u.agent;if(e.agents)for(var n in e.agents)t+=" "+n+"/"+e.agents[n];return t},t.objectifyOptions=v,t.normaliseOptions=_,t.default=u,t.getDefaults=function(e){return Object.assign(u,e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=r.__importDefault(n(3)),i=r.__importDefault(n(2)),a=r.__importDefault(n(4)),s=r.__importStar(n(1));function c(e){var t=0;return e.name&&(t+=e.name.length),e.clientId&&(t+=e.clientId.length),e.extras&&(t+=JSON.stringify(e.extras).length),e.data&&(t+=s.dataSizeBytes(e.data)),t}var l=function(){function e(){}return e.prototype.toJSON=function(){var e=this.encoding,t=this.data;return t&&o.default.BufferUtils.isBuffer(t)&&(arguments.length>0?(e=e?e+"/base64":"base64",t=o.default.BufferUtils.base64Encode(t)):t=o.default.BufferUtils.toBuffer(t)),{name:this.name,id:this.id,clientId:this.clientId,connectionId:this.connectionId,connectionKey:this.connectionKey,extras:this.extras,encoding:e,data:t}},e.prototype.toString=function(){var e="[Message";return this.name&&(e+="; name="+this.name),this.id&&(e+="; id="+this.id),this.timestamp&&(e+="; timestamp="+this.timestamp),this.clientId&&(e+="; clientId="+this.clientId),this.connectionId&&(e+="; connectionId="+this.connectionId),this.encoding&&(e+="; encoding="+this.encoding),this.extras&&(e+="; extras ="+JSON.stringify(this.extras)),this.data&&("string"==typeof this.data?e+="; data="+this.data:o.default.BufferUtils.isBuffer(this.data)?e+="; data (buffer)="+o.default.BufferUtils.base64Encode(this.data):e+="; data (json)="+JSON.stringify(this.data)),this.extras&&(e+="; extras="+JSON.stringify(this.extras)),e+"]"},e.encrypt=function(e,t,n){var r=e.data,i=e.encoding,a=t.channelCipher;i=i?i+"/":"",o.default.BufferUtils.isBuffer(r)||(r=o.default.BufferUtils.utf8Encode(String(r)),i+="utf-8/"),a.encrypt(r,(function(t,r){t?n(t):(e.data=r,e.encoding=i+"cipher+"+a.algorithm,n(null,e))}))},e.encode=function(t,n,r){var i=t.data;if("string"!=typeof i&&!o.default.BufferUtils.isBuffer(i)&&null!=i){if(!s.isObject(i)&&!s.isArray(i))throw new a.default("Data type is unsupported",40013,400);t.data=JSON.stringify(i),t.encoding=t.encoding?t.encoding+"/json":"json"}null!=n&&n.cipher?e.encrypt(t,n,r):r(null,t)},e.encodeArray=function(t,n,r){for(var o=0,i=0;i<t.length;i++)e.encode(t[i],n,(function(e){e?r(e):++o==t.length&&r(null,t)}))},e.decode=function(e,t){var n=function(e){return e&&e.channelOptions?e:{channelOptions:e,plugins:{},baseEncodedPreviousPayload:void 0}}(t),r=e.data,i=e.encoding;if(i){var s=i.split("/"),c=void 0,l=s.length,u=e.data,f="";try{for(;(c=l)>0;){var d=s[--l].match(/([-\w]+)(\+([\w-]+))?/);if(!d)break;switch(f=d[1]){case"base64":u=o.default.BufferUtils.base64Decode(String(u)),c==s.length&&(r=u);continue;case"utf-8":u=o.default.BufferUtils.utf8Decode(u);continue;case"json":u=JSON.parse(u);continue;case"cipher":if(null!=n.channelOptions&&n.channelOptions.cipher&&n.channelOptions.channelCipher){var p=d[3],h=n.channelOptions.channelCipher;if(p!=h.algorithm)throw new Error("Unable to decrypt message with given cipher; incompatible cipher params");u=h.decrypt(u);continue}throw new Error("Unable to decrypt message; not an encrypted channel");case"vcdiff":if(!n.plugins||!n.plugins.vcdiff)throw new a.default("Missing Vcdiff decoder (https://github.com/ably-forks/vcdiff-decoder)",40019,400);if("undefined"==typeof Uint8Array)throw new a.default("Delta decoding not supported on this browser (need ArrayBuffer & Uint8Array)",40020,400);try{var g=n.baseEncodedPreviousPayload;"string"==typeof g&&(g=o.default.BufferUtils.utf8Encode(g)),g=o.default.BufferUtils.toBuffer(g),u=o.default.BufferUtils.toBuffer(u),r=u=o.default.BufferUtils.typedArrayToBuffer(n.plugins.vcdiff.decode(u,g))}catch(e){throw new a.default("Vcdiff delta decode failed with "+e,40018,400)}continue;default:throw new Error("Unknown encoding")}}}catch(e){var m=e;throw new a.default("Error processing the "+f+" encoding, decoder returned ‘"+m.message+"’",m.code||40013,400)}finally{e.encoding=c<=0?null:s.slice(0,c).join("/"),e.data=u}}n.baseEncodedPreviousPayload=r},e.fromResponseBody=function(t,n,r){r&&(t=s.decodeBody(t,r));for(var o=0;o<t.length;o++){var a=t[o]=e.fromValues(t[o]);try{e.decode(a,n)}catch(e){i.default.logAction(i.default.LOG_ERROR,"Message.fromResponseBody()",e.toString())}}return t},e.fromValues=function(t){return Object.assign(new e,t)},e.fromValuesArray=function(t){for(var n=t.length,r=new Array(n),o=0;o<n;o++)r[o]=e.fromValues(t[o]);return r},e.fromEncoded=function(t,n){var r=e.fromValues(t),a=function(e){if(e&&e.cipher){if(!o.default.Crypto)throw new Error("Encryption not enabled; use ably.encryption.js instead");var t=o.default.Crypto.getCipher(e.cipher);return{cipher:t.cipherParams,channelCipher:t.cipher}}return null!=e?e:{}}(null!=n?n:null);try{e.decode(r,a)}catch(e){i.default.logAction(i.default.LOG_ERROR,"Message.fromEncoded()",e.toString())}return r},e.fromEncodedArray=function(t,n){return t.map((function(t){return e.fromEncoded(t,n)}))},e.getMessagesSize=function(e){for(var t,n=0,r=0;r<e.length;r++)n+=(t=e[r]).size||(t.size=c(t));return n},e.serialize=s.encodeBody,e}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=r.__importStar(n(1)),i=r.__importDefault(n(4)),a=r.__importDefault(n(9)),s=r.__importDefault(n(15)),c={HEARTBEAT:0,ACK:1,NACK:2,CONNECT:3,CONNECTED:4,DISCONNECT:5,DISCONNECTED:6,CLOSE:7,CLOSED:8,ERROR:9,ATTACH:10,ATTACHED:11,DETACH:12,DETACHED:13,PRESENCE:14,MESSAGE:15,SYNC:16,AUTH:17,ACTIVATE:18},l=[];Object.keys(c).forEach((function(e){l[c[e]]=e}));var u={HAS_PRESENCE:1,HAS_BACKLOG:2,RESUMED:4,TRANSIENT:16,ATTACH_RESUME:32,PRESENCE:65536,PUBLISH:1<<17,SUBSCRIBE:1<<18,PRESENCE_SUBSCRIBE:1<<19},f=Object.keys(u);function d(e){var t=[];if(e)for(var n=0;n<e.length;n++)t.push(e[n].toString());return"[ "+t.join(", ")+" ]"}u.MODE_ALL=u.PRESENCE|u.PUBLISH|u.SUBSCRIBE|u.PRESENCE_SUBSCRIBE;var p="id channel channelSerial connectionId count msgSerial timestamp".split(" "),h=function(){function e(){var e=this;this.hasFlag=function(t){return(e.flags&u[t])>0}}return e.prototype.setFlag=function(e){return this.flags=this.flags|u[e]},e.prototype.getMode=function(){return this.flags&&this.flags&u.MODE_ALL},e.prototype.encodeModesToFlags=function(e){var t=this;e.forEach((function(e){return t.setFlag(e)}))},e.prototype.decodeModesFromFlags=function(){var t=this,n=[];return e.channelModes.forEach((function(e){t.hasFlag(e)&&n.push(e)})),n.length>0?n:void 0},e.fromValues=function(t){return Object.assign(new e,t)},e.Action=c,e.channelModes=["PRESENCE","PUBLISH","SUBSCRIBE","PRESENCE_SUBSCRIBE"],e.ActionName=l,e.serialize=o.encodeBody,e.deserialize=function(t,n){var r=o.decodeBody(t,n);return e.fromDeserialized(r)},e.fromDeserialized=function(t){var n=t.error;n&&(t.error=i.default.fromValues(n));var r=t.messages;if(r)for(var o=0;o<r.length;o++)r[o]=a.default.fromValues(r[o]);var c=t.presence;if(c)for(o=0;o<c.length;o++)c[o]=s.default.fromValues(c[o],!0);return Object.assign(new e,t)},e.stringify=function(t){var n,r="[ProtocolMessage";void 0!==t.action&&(r+="; action="+e.ActionName[t.action]||0);for(var c=0;c<p.length;c++)n=p[c],void 0!==t[n]&&(r+="; "+n+"="+t[n]);if(t.messages&&(r+="; messages="+d(a.default.fromValuesArray(t.messages))),t.presence&&(r+="; presence="+d(s.default.fromValuesArray(t.presence))),t.error&&(r+="; error="+i.default.fromValues(t.error).toString()),t.auth&&t.auth.accessToken&&(r+="; token="+t.auth.accessToken),t.flags&&(r+="; flags="+f.filter(t.hasFlag).join(",")),t.params){var l="";o.forInOwnNonNullProperties(t.params,(function(e){l.length>0&&(l+="; "),l+=e+"="+t.params[e]})),l.length>0&&(r+="; params=["+l+"]")}return r+"]"},e}();t.default=h},function(e,t,n){var r,o,i;e.exports=(r=n(6),i=(o=r).lib.WordArray,o.enc.Base64={stringify:function(e){var t=e.words,n=e.sigBytes,r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";e.clamp();for(var o=[],i=0;i<n;i+=3)for(var a=(t[i>>>2]>>>24-i%4*8&255)<<16|(t[i+1>>>2]>>>24-(i+1)%4*8&255)<<8|t[i+2>>>2]>>>24-(i+2)%4*8&255,s=0;s<4&&i+.75*s<n;s++)o.push(r.charAt(a>>>6*(3-s)&63));var c=r.charAt(64);if(c)for(;o.length%4;)o.push(c);return o.join("")},parse:function(e){var t=e.length,n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",r=this._reverseMap;if(!r){r=this._reverseMap=[];for(var o=0;o<65;o++)r[n.charCodeAt(o)]=o}var a=n.charAt(64);if(a){var s=e.indexOf(a);-1!==s&&(t=s)}return function(e,t,n){for(var r=[],o=0,a=0;a<t;a++)if(a%4){var s=n[e.charCodeAt(a-1)]<<a%4*2|n[e.charCodeAt(a)]>>>6-a%4*2;r[o>>>2]|=s<<24-o%4*8,o++}return i.create(r,o)}(e,t,r)}},r.enc.Base64)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=r.__importStar(n(1)),i=r.__importDefault(n(10)),a=r.__importDefault(n(26)),s=r.__importDefault(n(2)),c=r.__importDefault(n(8)),l=r.__importDefault(n(20)),u=r.__importDefault(n(17)),f=r.__importDefault(n(4)),d=r.__importDefault(n(21)),p=r.__importDefault(n(3));function h(e){return function(e){return!!e.code&&!u.default.isTokenErr(e)&&(!!o.arrIn([80015,80017,80030],e.code)||e.code>=4e4&&e.code<5e4)}(e)?[i.default.fromValues({action:i.default.Action.ERROR,error:e})]:[i.default.fromValues({action:i.default.Action.DISCONNECTED,error:e})]}var g=function(e){function t(t,n,r){var o=e.call(this,t,n,r,!0)||this;return o.onAuthUpdated=function(e){o.authParams={access_token:e.token}},o.stream=!("stream"in r)||r.stream,o.sendRequest=null,o.recvRequest=null,o.pendingCallback=null,o.pendingItems=null,o}return r.__extends(t,e),t.prototype.connect=function(){var e=this;s.default.logAction(s.default.LOG_MINOR,"CometTransport.connect()","starting"),a.default.prototype.connect.call(this);var t=this.params,n=t.options,r=c.default.getHost(n,t.host),i=c.default.getPort(n),l=n.tls?"https://":"http://";this.baseUri=l+r+":"+i+"/comet/";var u=this.baseUri+"connect";s.default.logAction(s.default.LOG_MINOR,"CometTransport.connect()","uri: "+u),this.auth.getAuthParams((function(t,n){if(t)e.disconnect(t);else if(!e.isDisposed){e.authParams=n;var r=e.params.getConnectParams(n);"stream"in r&&(e.stream=r.stream),s.default.logAction(s.default.LOG_MINOR,"CometTransport.connect()","connectParams:"+o.toQueryString(r));var i=!1,a=e.recvRequest=e.createRequest(u,null,r,null,e.stream?d.default.REQ_RECV_STREAM:d.default.REQ_RECV);a.on("data",(function(t){e.recvRequest&&(i||(i=!0,e.emit("preconnect")),e.onData(t))})),a.on("complete",(function(t){e.recvRequest||(t=t||new f.default("Request cancelled",80003,400)),e.recvRequest=null,i||t||(i=!0,e.emit("preconnect")),e.onActivity(),t?t.code?e.onData(h(t)):e.disconnect(t):p.default.Config.nextTick((function(){e.recv()}))})),a.exec()}}))},t.prototype.requestClose=function(){s.default.logAction(s.default.LOG_MINOR,"CometTransport.requestClose()"),this._requestCloseOrDisconnect(!0)},t.prototype.requestDisconnect=function(){s.default.logAction(s.default.LOG_MINOR,"CometTransport.requestDisconnect()"),this._requestCloseOrDisconnect(!1)},t.prototype._requestCloseOrDisconnect=function(e){var t=this,n=e?this.closeUri:this.disconnectUri;if(n){var r=this.createRequest(n,null,this.authParams,null,d.default.REQ_SEND);r.on("complete",(function(n){n&&(s.default.logAction(s.default.LOG_ERROR,"CometTransport.request"+(e?"Close()":"Disconnect()"),"request returned err = "+o.inspectError(n)),t.finish("disconnected",n))})),r.exec()}},t.prototype.dispose=function(){var e=this;s.default.logAction(s.default.LOG_MINOR,"CometTransport.dispose()",""),this.isDisposed||(this.isDisposed=!0,this.recvRequest&&(s.default.logAction(s.default.LOG_MINOR,"CometTransport.dispose()","aborting recv request"),this.recvRequest.abort(),this.recvRequest=null),this.finish("disconnected",l.default.disconnected()),p.default.Config.nextTick((function(){e.emit("disposed")})))},t.prototype.onConnect=function(e){var t;if(!this.isDisposed){var n=null===(t=e.connectionDetails)||void 0===t?void 0:t.connectionKey;a.default.prototype.onConnect.call(this,e);var r=this.baseUri+n;s.default.logAction(s.default.LOG_MICRO,"CometTransport.onConnect()","baseUri = "+r),this.sendUri=r+"/send",this.recvUri=r+"/recv",this.closeUri=r+"/close",this.disconnectUri=r+"/disconnect"}},t.prototype.send=function(e){if(this.sendRequest)return this.pendingItems=this.pendingItems||[],void this.pendingItems.push(e);var t=this.pendingItems||[];t.push(e),this.pendingItems=null,this.sendItems(t)},t.prototype.sendAnyPending=function(){var e=this.pendingItems;e&&(this.pendingItems=null,this.sendItems(e))},t.prototype.sendItems=function(e){var t=this,n=this.sendRequest=this.createRequest(this.sendUri,null,this.authParams,this.encodeRequest(e),d.default.REQ_SEND);n.on("complete",(function(e,n){e&&s.default.logAction(s.default.LOG_ERROR,"CometTransport.sendItems()","on complete: err = "+o.inspectError(e)),t.sendRequest=null,e?e.code?t.onData(h(e)):t.disconnect(e):(n&&t.onData(n),t.pendingItems&&p.default.Config.nextTick((function(){t.sendRequest||t.sendAnyPending()})))})),n.exec()},t.prototype.recv=function(){var e=this;if(!this.recvRequest&&this.isConnected){var t=this.recvRequest=this.createRequest(this.recvUri,null,this.authParams,null,this.stream?d.default.REQ_RECV_STREAM:d.default.REQ_RECV_POLL);t.on("data",(function(t){e.onData(t)})),t.on("complete",(function(t){e.recvRequest=null,e.onActivity(),t?t.code?e.onData(h(t)):e.disconnect(t):p.default.Config.nextTick((function(){e.recv()}))})),t.exec()}},t.prototype.onData=function(e){try{var t=this.decodeResponse(e);if(t&&t.length)for(var n=0;n<t.length;n++)this.onProtocolMessage(i.default.fromDeserialized(t[n]))}catch(e){s.default.logAction(s.default.LOG_ERROR,"CometTransport.onData()","Unexpected exception handing channel event: "+e.stack)}},t.prototype.encodeRequest=function(e){return JSON.stringify(e)},t.prototype.decodeResponse=function(e){return"string"==typeof e?JSON.parse(e):e},t}(a.default);t.default=g},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=r.__importDefault(n(3)),i=r.__importStar(n(1)),a=r.__importDefault(n(2)),s=r.__importDefault(n(17)),c=r.__importDefault(n(18)),l=n(4);function u(e,t,n,r,o){e.http.supportsAuthHeaders?e.auth.getAuthHeaders((function(e,a){e?r(e):o(i.mixin(a,t),n)})):e.auth.getAuthParams((function(e,a){e?r(e):o(t,i.mixin(a,n))}))}function f(e){var t=[];if(e)for(var n in e)t.push(n+"="+e[n]);return t.join("&")}function d(e,t){return e+(t?"?":"")+f(t)}var p=function(){function e(){}return e.get=function(t,n,r,o,i,a){e.do(c.default.Get,t,n,null,r,o,i,a)},e.delete=function(t,n,r,o,i,a){e.do(c.default.Delete,t,n,null,r,o,i,a)},e.post=function(t,n,r,o,i,a,s){e.do(c.default.Post,t,n,r,o,i,a,s)},e.patch=function(t,n,r,o,i,a,s){e.do(c.default.Patch,t,n,r,o,i,a,s)},e.put=function(t,n,r,o,i,a,s){e.do(c.default.Put,t,n,r,o,i,a,s)},e.do=function(e,t,n,r,c,p,h,g){a.default.shouldLog(a.default.LOG_MICRO)&&(g=function(e,t,n,r){return function(s,c,l,u,p){s?a.default.logAction(a.default.LOG_MICRO,"Resource."+t+"()","Received Error; "+d(n,r)+"; Error: "+i.inspectError(s)):a.default.logAction(a.default.LOG_MICRO,"Resource."+t+"()","Received; "+d(n,r)+"; Headers: "+f(l)+"; StatusCode: "+p+"; Body: "+(o.default.BufferUtils.isBuffer(c)?c.toString():c)),e&&e(s,c,l,u,p)}}(g,e,n,p)),h&&(g=g&&function(e,t){return function(n,r,o,a,s){if(!n||r){if(!a)try{r=i.decodeBody(r,t)}catch(t){return void(i.isErrorInfoOrPartialErrorInfo(t)?e(t):e(new l.PartialErrorInfo(i.inspectError(t),null)))}if(r){var c=r,u=c.statusCode,f=c.response,d=c.headers;if(void 0!==u){if(u<200||u>=300){var p=f&&f.error||n;return p||((p=new Error("Error in unenveloping "+r)).statusCode=u),void e(p,f,d,!0,u)}e(n,f,d,!0,u)}else e(n,r,o,!0,s)}else e(new l.PartialErrorInfo("unenvelope(): Response body is missing",null))}else e(n)}}(g,h),(p=p||{}).envelope=h),u(t,c,p,g,(function c(l,f){var p;if(a.default.shouldLog(a.default.LOG_MICRO)&&a.default.logAction(a.default.LOG_MICRO,"Resource."+e+"()","Sending; "+d(n,f)),a.default.shouldLog(a.default.LOG_MICRO)){var h=r;if((null===(p=l["content-type"])||void 0===p?void 0:p.indexOf("msgpack"))>0)try{h=o.default.Config.msgpack.decode(r)}catch(t){a.default.logAction(a.default.LOG_MICRO,"Resource."+e+"()","Sending MsgPack Decoding Error: "+i.inspectError(t))}a.default.logAction(a.default.LOG_MICRO,"Resource."+e+"()","Sending; "+d(n,f)+"; Body: "+h)}t.http.do(e,t,n,l,r,f,(function(e,n,r,o,i){e&&s.default.isTokenErr(e)?t.auth.authorize(null,null,(function(e){e?g(e):u(t,r,f,g,c)})):g(e,n,r,o,i)}))}))},e}();t.default=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=r.__importDefault(n(2)),i=r.__importDefault(n(3)),a=r.__importDefault(n(9)),s=r.__importStar(n(1));function c(e){return l.Actions.indexOf(e)}var l=function(){function e(){}return e.prototype.isSynthesized=function(){return!this.id||!this.connectionId||this.id.substring(this.connectionId.length,0)!==this.connectionId},e.prototype.parseId=function(){if(!this.id)throw new Error("parseId(): Presence message does not contain an id");var e=this.id.split(":");return{connectionId:e[0],msgSerial:parseInt(e[1],10),index:parseInt(e[2],10)}},e.prototype.toJSON=function(){var e=this.data,t=this.encoding;return e&&i.default.BufferUtils.isBuffer(e)&&(arguments.length>0?(t=t?t+"/base64":"base64",e=i.default.BufferUtils.base64Encode(e)):e=i.default.BufferUtils.toBuffer(e)),{id:this.id,clientId:this.clientId,action:c(this.action),data:e,encoding:t,extras:this.extras}},e.prototype.toString=function(){var e="[PresenceMessage";return e+="; action="+this.action,this.id&&(e+="; id="+this.id),this.timestamp&&(e+="; timestamp="+this.timestamp),this.clientId&&(e+="; clientId="+this.clientId),this.connectionId&&(e+="; connectionId="+this.connectionId),this.encoding&&(e+="; encoding="+this.encoding),this.data&&("string"==typeof this.data?e+="; data="+this.data:i.default.BufferUtils.isBuffer(this.data)?e+="; data (buffer)="+i.default.BufferUtils.base64Encode(this.data):e+="; data (json)="+JSON.stringify(this.data)),this.extras&&(e+="; extras="+JSON.stringify(this.extras)),e+"]"},e.fromResponseBody=function(t,n,r){var i=[];r&&(t=s.decodeBody(t,r));for(var a=0;a<t.length;a++){var c=i[a]=e.fromValues(t[a],!0);try{e.decode(c,n)}catch(e){o.default.logAction(o.default.LOG_ERROR,"PresenceMessage.fromResponseBody()",e.toString())}}return i},e.fromValues=function(t,n){return n&&(t.action=e.Actions[t.action]),Object.assign(new e,t)},e.fromValuesArray=function(t){for(var n=t.length,r=new Array(n),o=0;o<n;o++)r[o]=e.fromValues(t[o]);return r},e.fromEncoded=function(t,n){var r=e.fromValues(t,!0);try{e.decode(r,null!=n?n:{})}catch(e){o.default.logAction(o.default.LOG_ERROR,"PresenceMessage.fromEncoded()",e.toString())}return r},e.fromEncodedArray=function(t,n){return t.map((function(t){return e.fromEncoded(t,n)}))},e.fromData=function(t){return t instanceof e?t:e.fromValues({data:t})},e.Actions=["absent","present","enter","leave","update"],e.encode=a.default.encode,e.decode=a.default.decode,e.getMessagesSize=a.default.getMessagesSize,e}();t.default=l},function(e,t,n){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=r.__importStar(n(1)),i=r.__importDefault(n(7)),a=r.__importStar(n(4)),s=r.__importDefault(n(2)),c=r.__importDefault(n(8)),l=r.__importDefault(n(21)),u=r.__importDefault(n(3));var f=function(){},d=0,p={},h=void 0!==e&&e.XDomainRequest;var g=function(e){function t(t,n,r,i,a,s,c){var l,u,f=e.call(this)||this;return(r=r||{}).rnd=o.cheapRandStr(),h&&(l=(u=navigator.userAgent.toString().match(/MSIE\s([\d.]+)/))&&Number(u[1]))&&10===l&&!r.envelope&&(r.envelope="json"),f.uri=t+o.toQueryString(r),f.headers=n||{},f.body=i,f.method=c?c.toUpperCase():o.isEmptyArg(i)?"GET":"POST",f.requestMode=a,f.timeouts=s,f.timedOut=!1,f.requestComplete=!1,f.id=String(++d),p[f.id]=f,f}return r.__extends(t,e),t.createRequest=function(e,n,r,i,a,s,l){var u=s||c.default.TIMEOUTS;return new t(e,n,o.copy(r),i,a,u,l)},t.prototype.complete=function(e,t,n,r,o){this.requestComplete||(this.requestComplete=!0,!e&&t&&this.emit("data",t),this.emit("complete",e,t,n,r,o),this.dispose())},t.prototype.abort=function(){this.dispose()},t.prototype.exec=function(){var e=this,t=this.headers,n=this.requestMode==l.default.REQ_SEND?this.timeouts.httpRequestTimeout:this.timeouts.recvTimeout,r=this.timer=setTimeout((function(){e.timedOut=!0,c.abort()}),n),i=this.method,c=this.xhr=new XMLHttpRequest,f=t.accept,d=this.body,p="text";for(var h in f?0===f.indexOf("application/x-msgpack")&&(p="arraybuffer"):t.accept="application/json",d&&(t["content-type"]||(t["content-type"]="application/json")).indexOf("application/json")>-1&&"string"!=typeof d&&(d=JSON.stringify(d)),c.open(i,this.uri,!0),c.responseType=p,"authorization"in t&&(c.withCredentials=!0),t)c.setRequestHeader(h,t[h]);var g,m,y,v=function(t,n,r,o){var i,c=n+" (event type: "+t.type+")";(null===(i=null==e?void 0:e.xhr)||void 0===i?void 0:i.statusText)&&(c+=", current statusText is "+e.xhr.statusText),s.default.logAction(s.default.LOG_ERROR,"Request.on"+t.type+"()",c),e.complete(new a.PartialErrorInfo(c,r,o))};c.onerror=function(e){v(e,"XHR error occurred",null,400)},c.onabort=function(t){e.timedOut?v(t,"Request aborted due to request timeout expiring",null,408):v(t,"Request cancelled",null,400)},c.ontimeout=function(e){v(e,"Request timed out",null,408)};var _=0,b=!1,O=function(){var n;try{var r=function(e,t){return e.getResponseHeader&&e.getResponseHeader("content-type")}(c);if(r?r.indexOf("application/json")>=0:"text"==c.responseType){var i="arraybuffer"===c.responseType?u.default.BufferUtils.utf8Decode(c.response):String(c.responseText);n=i.length?JSON.parse(i):i,b=!0}else n=c.response;void 0!==n.response?(m=n.statusCode,y=m<400,t=n.headers,n=n.response):t=function(e){for(var t=o.trim(e.getAllResponseHeaders()).split("\r\n"),n={},r=0;r<t.length;r++){var i=t[r].split(":").map(o.trim);n[i[0].toLowerCase()]=i[1]}return n}(c)}catch(t){return void e.complete(new a.PartialErrorInfo("Malformed response body from server: "+t.message,null,400))}if(y||o.isArray(n))e.complete(null,n,t,b,m);else{var s=function(e,t){if(function(e,t){return o.arrIn(o.allToLowerCase(o.keysArray(t)),"x-ably-errorcode")}(0,t))return e.error&&a.default.fromValues(e.error)}(n,t);s||(s=new a.PartialErrorInfo("Error response received from server: "+m+" body was: "+u.default.Config.inspect(n),null,m)),e.complete(s,n,t,b,m)}};function C(){for(var e,t,n=c.responseText,r=n.length-1;_<r&&(e=n.indexOf("\n",_))>-1;)t=n.slice(_,e),_=e+1,w(t)}var w=function(t){try{t=JSON.parse(t)}catch(t){return void e.complete(new a.PartialErrorInfo("Malformed response body from server: "+t.message,null,400))}e.emit("data",t)};c.onreadystatechange=function(){var t=c.readyState;t<3||0!==c.status&&(void 0===m&&(1223===(m=c.status)&&(m=204),clearTimeout(r),y=m<400,204!=m?g=e.requestMode==l.default.REQ_RECV_STREAM&&y&&function(e){return e.getResponseHeader&&(e.getResponseHeader("transfer-encoding")||!e.getResponseHeader("content-length"))}(c):e.complete(null,null,null,null,m)),3==t&&g?C():4==t&&(g?(C(),e.streamComplete=!0,u.default.Config.nextTick((function(){e.complete()}))):O()))},c.send(d)},t.prototype.dispose=function(){var e=this.xhr;if(e){e.onreadystatechange=e.onerror=e.onabort=e.ontimeout=f,this.xhr=null;var t=this.timer;t&&(clearTimeout(t),this.timer=null),this.requestComplete||e.abort()}delete p[this.id]},t}(i.default);t.default=g}).call(this,n(13))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=r.__importDefault(n(2)),i=r.__importStar(n(1)),a=r.__importDefault(n(23)),s=r.__importDefault(n(4)),c=r.__importDefault(n(45)),l=n(11),u=r.__importDefault(n(18)),f=r.__importDefault(n(25)),d=r.__importDefault(n(3)),p=r.__importDefault(n(14)),h=Math.pow(2,17);function g(){}function m(e){return i.isErrorInfoOrPartialErrorInfo(e)?(e.code||(403===e.statusCode?e.code=40300:(e.code=40170,e.statusCode=401)),e):new s.default(i.inspectError(e),e.code||40170,e.statusCode||401)}var y=function(e,t){if(d.default.Config.createHmac){var n=d.default.Config.createHmac("SHA256",t);return n.update(e),n.digest("base64")}return(0,l.stringify)((0,c.default)(e,t))};function v(e){if(!e)return"";"string"==typeof e&&(e=JSON.parse(e));var t=Object.create(null),n=i.keysArray(e,!0);if(!n)return"";n.sort();for(var r=0;r<n.length;r++)t[n[r]]=e[n[r]].sort();return JSON.stringify(t)}function _(e){if(e.authCallback)o.default.logAction(o.default.LOG_MINOR,"Auth()","using token auth with authCallback");else if(e.authUrl)o.default.logAction(o.default.LOG_MINOR,"Auth()","using token auth with authUrl");else if(e.key)o.default.logAction(o.default.LOG_MINOR,"Auth()","using token auth with client-side signing");else{if(!e.tokenDetails){var t="authOptions must include valid authentication parameters";throw o.default.logAction(o.default.LOG_ERROR,"Auth()",t),new Error(t)}o.default.logAction(o.default.LOG_MINOR,"Auth()","using token auth with supplied token only")}}function b(e){return e.useTokenAuth||!function(e){return"useTokenAuth"in e&&!e.useTokenAuth}(e)&&(e.authCallback||e.authUrl||e.token||e.tokenDetails)}var O=0,C=function(){function e(e,t){if(this.authOptions={},this.client=e,this.tokenParams=t.defaultTokenParams||{},this.currentTokenRequestId=null,this.waitingForTokenRequest=null,b(t)){if(t.key&&!y){var n="client-side token request signing not supported";throw o.default.logAction(o.default.LOG_ERROR,"Auth()",n),new Error(n)}(function(e){return!e.key&&!e.authCallback&&!e.authUrl})(t)&&o.default.logAction(o.default.LOG_ERROR,"Auth()","Warning: library initialized with a token literal without any way to renew the token when it expires (no authUrl, authCallback, or key). See https://help.ably.io/error/40171 for help"),this._saveTokenOptions(t.defaultTokenParams,t),_(this.authOptions)}else{if(!t.key)throw n="No authentication options provided; need one of: key, authUrl, or authCallback (or for testing only, token or tokenDetails)",o.default.logAction(o.default.LOG_ERROR,"Auth()",n),new s.default(n,40160,401);o.default.logAction(o.default.LOG_MINOR,"Auth()","anonymous, using basic auth"),this._saveBasicOptions(t)}}return e.prototype.authorize=function(e,t,n){var r,a=this;if("function"!=typeof e||n?"function"!=typeof t||n?r=t:(n=t,r=null):(n=e,r=e=null),!n&&this.client.options.promises)return i.promisify(this,"authorize",arguments);if(r&&r.key&&this.authOptions.key!==r.key)throw new s.default("Unable to update auth options with incompatible key",40102,401);r&&"force"in r&&(o.default.logAction(o.default.LOG_ERROR,"Auth.authorize","Deprecation warning: specifying {force: true} in authOptions is no longer necessary, authorize() now always gets a new token. Please remove this, as in version 1.0 and later, having a non-null authOptions will overwrite stored library authOptions, which may not be what you want"),i.isOnlyPropIn(r,"force")&&(r=null)),this._forceNewToken(e,r,(function(e,t){if(e)return a.client.connection&&e.statusCode===f.default.Forbidden&&a.client.connection.connectionManager.actOnErrorFromAuthorize(e),void(null==n||n(e));a.client.connection?a.client.connection.connectionManager.onAuthUpdated(t,n||g):null==n||n(null,t)}))},e.prototype.authorise=function(e,t,n){o.default.deprecated("Auth.authorise","Auth.authorize"),this.authorize(e,t,n)},e.prototype._forceNewToken=function(e,t,n){var r=this;this.tokenDetails=null,this._saveTokenOptions(e,t),_(this.authOptions),this._ensureValidAuthCredentials(!0,(function(e,t){delete r.tokenParams.timestamp,delete r.authOptions.queryTime,n(e,t)}))},e.prototype.requestToken=function(e,t,n){var r=this;if("function"!=typeof e||n?"function"!=typeof t||n||(n=t,t=null):(n=e,t=e=null),!n&&this.client.options.promises)return i.promisify(this,"requestToken",arguments);t=t||this.authOptions,e=e||i.copy(this.tokenParams);var a,c=n||g,l=this.client;if(t.authCallback)o.default.logAction(o.default.LOG_MINOR,"Auth.requestToken()","using token auth with authCallback"),a=t.authCallback;else if(t.authUrl)o.default.logAction(o.default.LOG_MINOR,"Auth.requestToken()","using token auth with authUrl"),a=function(e,n){var a,c=i.mixin({accept:"application/json, text/plain"},t.authHeaders),f=t.authMethod&&"post"===t.authMethod.toLowerCase(),p=t.authUrl.indexOf("?");p>-1&&(a=i.parseQueryString(t.authUrl.slice(p)),t.authUrl=t.authUrl.slice(0,p),f||(t.authParams=i.mixin(a,t.authParams)));var g=i.mixin({},t.authParams||{},e),m=function(e,t,r,a){var c;if(e?o.default.logAction(o.default.LOG_MICRO,"Auth.requestToken().tokenRequestCallback","Received Error: "+i.inspectError(e)):(c=r["content-type"],o.default.logAction(o.default.LOG_MICRO,"Auth.requestToken().tokenRequestCallback","Received; content-type: "+c+"; body: "+i.inspectBody(t))),e||a)return n(e,t);if(d.default.BufferUtils.isBuffer(t)&&(t=t.toString()),c){var l=c.indexOf("application/json")>-1,u=c.indexOf("text/plain")>-1||c.indexOf("application/jwt")>-1;if(l||u){if(l){if(t.length>h)return void n(new s.default("authUrl response exceeded max permitted length",40170,401));try{t=JSON.parse(t)}catch(e){return void n(new s.default("Unexpected error processing authURL response; err = "+e.message,40170,401))}}n(null,t,c)}else n(new s.default("authUrl responded with unacceptable content-type "+c+", should be either text/plain, application/jwt or application/json",40170,401))}else n(new s.default("authUrl response is missing a content-type header",40170,401))};if(o.default.logAction(o.default.LOG_MICRO,"Auth.requestToken().tokenRequestCallback","Requesting token from "+t.authUrl+"; Params: "+JSON.stringify(g)+"; method: "+(f?"POST":"GET")),f){var y=c||{};y["content-type"]="application/x-www-form-urlencoded";var v=i.toQueryString(g).slice(1);r.client.http.doUri(u.default.Post,l,t.authUrl,y,v,a,m)}else r.client.http.doUri(u.default.Get,l,t.authUrl,c||{},null,g,m)};else{if(!t.key)return o.default.logAction(o.default.LOG_ERROR,"Auth()","library initialized with a token literal without any way to renew the token when it expires (no authUrl, authCallback, or key). See https://help.ably.io/error/40171 for help"),void c(new s.default("Need a new token, but authOptions does not include any way to request one (no authUrl, authCallback, or key)",40171,403));o.default.logAction(o.default.LOG_MINOR,"Auth.requestToken()","using token auth with client-side signing"),a=function(e,n){r.createTokenRequest(e,t,n)}}"capability"in e&&(e.capability=v(e.capability));var f=!1,p=this.client.options.timeouts.realtimeRequestTimeout,y=setTimeout((function(){f=!0;var e="Token request callback timed out after "+p/1e3+" seconds";o.default.logAction(o.default.LOG_ERROR,"Auth.requestToken()",e),c(new s.default(e,40170,401))}),p);a(e,(function(e,n,a){if(!f){if(clearTimeout(y),e)return o.default.logAction(o.default.LOG_ERROR,"Auth.requestToken()","token request signing call returned error; err = "+i.inspectError(e)),void c(m(e));if("string"!=typeof n){if("object"!=typeof n){var d="Expected token request callback to call back with a token string or token request/details object, but got a "+typeof n;return o.default.logAction(o.default.LOG_ERROR,"Auth.requestToken()",d),void c(new s.default(d,40170,401))}var p=JSON.stringify(n).length;if(p>h&&!t.suppressMaxLengthCheck)c(new s.default("Token request/details object exceeded max permitted stringified size (was "+p+" bytes)",40170,401));else if("issued"in n)c(null,n);else{if(!("keyName"in n))return d="Expected token request callback to call back with a token string, token request object, or token details object",o.default.logAction(o.default.LOG_ERROR,"Auth.requestToken()",d),void c(new s.default(d,40170,401));var g,v,_,b;v=function(e,t,n,r){if(e)return o.default.logAction(o.default.LOG_ERROR,"Auth.requestToken()","token request API call returned error; err = "+i.inspectError(e)),void c(m(e));r||(t=JSON.parse(t)),o.default.logAction(o.default.LOG_MINOR,"Auth.getToken()","token received"),c(null,t)},_="/keys/"+(g=n).keyName+"/requestToken",b=i.defaultPostHeaders(r.client.options),t.requestHeaders&&i.mixin(b,t.requestHeaders),o.default.logAction(o.default.LOG_MICRO,"Auth.requestToken().requestToken","Sending POST to "+_+"; Token params: "+JSON.stringify(g)),r.client.http.do(u.default.Post,l,(function(e){return l.baseUri(e)+_}),b,JSON.stringify(g),null,v)}}else 0===n.length?c(new s.default("Token string is empty",40170,401)):n.length>h?c(new s.default("Token string exceeded max permitted length (was "+n.length+" bytes)",40170,401)):"undefined"===n||"null"===n?c(new s.default("Token string was literal null/undefined",40170,401)):"{"!==n[0]||a&&a.indexOf("application/jwt")>-1?c(null,{token:n}):c(new s.default("Token was double-encoded; make sure you're not JSON-encoding an already encoded token request or details",40170,401))}}))},e.prototype.createTokenRequest=function(e,t,n){if("function"!=typeof e||n?"function"!=typeof t||n||(n=t,t=null):(n=e,t=e=null),!n&&this.client.options.promises)return i.promisify(this,"createTokenRequest",arguments);t=t||this.authOptions,e=e||i.copy(this.tokenParams);var r=t.key;if(r){var a=r.split(":"),c=a[0],l=a[1];if(l)if(""!==e.clientId){"capability"in e&&(e.capability=v(e.capability));var u,f=i.mixin({keyName:c},e),d=e.clientId||"",p=e.ttl||"",h=e.capability||"";u=function(){var e=f.nonce||(f.nonce=("000000"+Math.floor(1e16*Math.random())).slice(-16)),t=f.timestamp,r=f.keyName+"\n"+p+"\n"+h+"\n"+d+"\n"+t+"\n"+e+"\n";f.mac=f.mac||y(r,l),o.default.logAction(o.default.LOG_MINOR,"Auth.getTokenRequest()","generated signed request"),n(null,f)},f.timestamp?u():this.getTimestamp(t&&t.queryTime,(function(e,t){e?n(e):(f.timestamp=t,u())}))}else n(new s.default("clientId can’t be an empty string",40012,400));else n(new s.default("Invalid key specified",40101,403))}else n(new s.default("No key specified",40101,403))},e.prototype.getAuthParams=function(e){"basic"==this.method?e(null,{key:this.key}):this._ensureValidAuthCredentials(!1,(function(t,n){if(t)e(t);else{if(!n)throw new Error("Auth.getAuthParams(): _ensureValidAuthCredentials returned no error or tokenDetails");e(null,{access_token:n.token})}}))},e.prototype.getAuthHeaders=function(e){"basic"==this.method?e(null,{authorization:"Basic "+this.basicKey}):this._ensureValidAuthCredentials(!1,(function(t,n){if(t)e(t);else{if(!n)throw new Error("Auth.getAuthParams(): _ensureValidAuthCredentials returned no error or tokenDetails");e(null,{authorization:"Bearer "+i.toBase64(n.token)})}}))},e.prototype.getTimestamp=function(e,t){this.isTimeOffsetSet()||!e&&!this.authOptions.queryTime?t(null,this.getTimestampUsingOffset()):this.client.time(t)},e.prototype.getTimestampUsingOffset=function(){return i.now()+(this.client.serverTimeOffset||0)},e.prototype.isTimeOffsetSet=function(){return null!==this.client.serverTimeOffset},e.prototype._saveBasicOptions=function(e){this.method="basic",this.key=e.key,this.basicKey=i.toBase64(e.key),this.authOptions=e||{},"clientId"in e&&this._userSetClientId(e.clientId)},e.prototype._saveTokenOptions=function(e,t){this.method="token",e&&(this.tokenParams=e),t&&(t.token&&(t.tokenDetails="string"==typeof t.token?{token:t.token}:t.token),t.tokenDetails&&(this.tokenDetails=t.tokenDetails),"clientId"in t&&this._userSetClientId(t.clientId),this.authOptions=t)},e.prototype._ensureValidAuthCredentials=function(e,t){var n=this,r=this.tokenDetails;if(r){if(this._tokenClientIdMismatch(r.clientId))return void t(new s.default("Mismatch between clientId in token ("+r.clientId+") and current clientId ("+this.clientId+")",40102,403));if(!this.isTimeOffsetSet()||!r.expires||r.expires>=this.getTimestampUsingOffset())return o.default.logAction(o.default.LOG_MINOR,"Auth.getToken()","using cached token; expires = "+r.expires),void t(null,r);o.default.logAction(o.default.LOG_MINOR,"Auth.getToken()","deleting expired token"),this.tokenDetails=null}if((this.waitingForTokenRequest||(this.waitingForTokenRequest=a.default.create())).push(t),null===this.currentTokenRequestId||e){var i=this.currentTokenRequestId=O++;this.requestToken(this.tokenParams,this.authOptions,(function(e,t){if(n.currentTokenRequestId>i)o.default.logAction(o.default.LOG_MINOR,"Auth._ensureValidAuthCredentials()","Discarding token request response; overtaken by newer one");else{n.currentTokenRequestId=null;var r=n.waitingForTokenRequest||g;n.waitingForTokenRequest=null,e?r(e):r(null,n.tokenDetails=t)}}))}},e.prototype._userSetClientId=function(e){if("string"!=typeof e&&null!==e)throw new s.default("clientId must be either a string or null",40012,400);if("*"===e)throw new s.default('Can’t use "*" as a clientId as that string is reserved. (To change the default token request behaviour to use a wildcard clientId, instantiate the library with {defaultTokenParams: {clientId: "*"}}), or if calling authorize(), pass it in as a tokenParam: authorize({clientId: "*"}, authOptions)',40012,400);var t=this._uncheckedSetClientId(e);if(t)throw t},e.prototype._uncheckedSetClientId=function(e){if(this._tokenClientIdMismatch(e)){var t="Unexpected clientId mismatch: client has "+this.clientId+", requested "+e,n=new s.default(t,40102,401);return o.default.logAction(o.default.LOG_ERROR,"Auth._uncheckedSetClientId()",t),n}return this.clientId=this.tokenParams.clientId=e,null},e.prototype._tokenClientIdMismatch=function(e){return!(!this.clientId||"*"===this.clientId||!e||"*"===e||this.clientId===e)},e.isTokenErr=function(e){return e.code&&e.code>=40140&&e.code<40150},e.prototype.revokeTokens=function(e,t,n){if(b(this.client.options))throw new s.default("Cannot revoke tokens when using token auth",40162,401);var o,a=this.client.options.keyName;if("function"==typeof t?(n=t,o={}):o=null!=t?t:{},void 0===n){if(this.client.options.promises)return i.promisify(this,"revokeTokens",[e,o]);n=g}var c=n,l=r.__assign({targets:e.map((function(e){return"".concat(e.type,":").concat(e.value)}))},o),u=this.client.options.useBinaryProtocol?i.Format.msgpack:i.Format.json,f=i.defaultPostHeaders(this.client.options,u);this.client.options.headers&&i.mixin(f,this.client.options.headers);var d=i.encodeBody(l,u);p.default.post(this.client,"/keys/".concat(a,"/revokeTokens"),d,f,{newBatchResponse:"true"},null,(function(e,t,n,r){if(e)c(e);else{var o=r?t:i.decodeBody(t,u);c(null,o)}}))},e}();t.default=C},function(e,t,n){"use strict";var r;Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.Get="get",e.Delete="delete",e.Post="post",e.Put="put",e.Patch="patch"}(r||(r={})),t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.HttpPaginatedResponse=t.PaginatedResult=void 0;var r=n(0),o=r.__importStar(n(1)),i=r.__importDefault(n(2)),a=r.__importDefault(n(14)),s=function(){function e(e,t,n,r,o,i){this.rest=e,this.path=t,this.headers=n,this.envelope=null!=r?r:null,this.bodyHandler=o,this.useHttpPaginatedResponse=i||!1}return e.prototype.get=function(e,t){var n=this;a.default.get(this.rest,this.path,this.headers,e,this.envelope,(function(e,r,o,i,a){n.handlePage(e,r,o,i,a,t)}))},e.prototype.delete=function(e,t){var n=this;a.default.delete(this.rest,this.path,this.headers,e,this.envelope,(function(e,r,o,i,a){n.handlePage(e,r,o,i,a,t)}))},e.prototype.post=function(e,t,n){var r=this;a.default.post(this.rest,this.path,t,this.headers,e,this.envelope,(function(e,t,o,i,a){n&&r.handlePage(e,t,o,i,a,n)}))},e.prototype.put=function(e,t,n){var r=this;a.default.put(this.rest,this.path,t,this.headers,e,this.envelope,(function(e,t,o,i,a){n&&r.handlePage(e,t,o,i,a,n)}))},e.prototype.patch=function(e,t,n){var r=this;a.default.patch(this.rest,this.path,t,this.headers,e,this.envelope,(function(e,t,o,i,a){n&&r.handlePage(e,t,o,i,a,n)}))},e.prototype.handlePage=function(e,t,n,r,a,s){if(e&&function(e,t,n){return!(n&&(t||"number"==typeof e.code))}(e,t,this.useHttpPaginatedResponse))return i.default.logAction(i.default.LOG_ERROR,"PaginatedResource.handlePage()","Unexpected error getting resource: err = "+o.inspectError(e)),void(null==s||s(e));var u,f,d;try{u=this.bodyHandler(t,n||{},r)}catch(t){return void(null==s||s(e||t))}n&&(f=n.Link||n.link)&&(d=function(e){"string"==typeof e&&(e=e.split(","));for(var t,n={},r=0;r<e.length;r++){var i=e[r].match(/^\s*<(.+)>;\s*rel="(\w+)"$/);if(i){var a=(void 0,(t=i[1].match(/^\.\/(\w+)\?(.*)$/))&&t[2]&&o.parseQueryString(t[2]));a&&(n[i[2]]=a)}}return n}(f)),this.useHttpPaginatedResponse?s(null,new l(this,u,n||{},a,d,e)):s(null,new c(this,u,d))},e}(),c=function(){function e(e,t,n){var r=this;this.resource=e,this.items=t;var i=this;n&&("first"in n&&(this.first=function(e){if(!e&&i.resource.rest.options.promises)return o.promisify(i,"first",[]);i.get(n.first,e)}),"current"in n&&(this.current=function(e){if(!e&&i.resource.rest.options.promises)return o.promisify(i,"current",[]);i.get(n.current,e)}),this.next=function(e){if(!e&&i.resource.rest.options.promises)return o.promisify(i,"next",[]);"next"in n?i.get(n.next,e):e(null)},this.hasNext=function(){return"next"in n},this.isLast=function(){var e;return!(null===(e=r.hasNext)||void 0===e?void 0:e.call(r))})}return e.prototype.get=function(e,t){var n=this.resource;a.default.get(n.rest,n.path,n.headers,e,n.envelope,(function(e,r,o,i,a){n.handlePage(e,r,o,i,a,t)}))},e}();t.PaginatedResult=c;var l=function(e){function t(t,n,r,o,i,a){var s=e.call(this,t,n,i)||this;return s.statusCode=o,s.success=o<300&&o>=200,s.headers=r,s.errorCode=a&&a.code,s.errorMessage=a&&a.message,s}return r.__extends(t,e),t.prototype.toJSON=function(){return{items:this.items,statusCode:this.statusCode,success:this.success,headers:this.headers,errorCode:this.errorCode,errorMessage:this.errorMessage}},t}(c);t.HttpPaginatedResponse=l,t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isRetriable=void 0;var r=n(0).__importDefault(n(4)),o={DISCONNECTED:80003,SUSPENDED:80002,FAILED:8e4,CLOSING:80017,CLOSED:80017,UNKNOWN_CONNECTION_ERR:50002,UNKNOWN_CHANNEL_ERR:50001},i={disconnected:function(){return r.default.fromValues({statusCode:400,code:o.DISCONNECTED,message:"Connection to server temporarily unavailable"})},suspended:function(){return r.default.fromValues({statusCode:400,code:o.SUSPENDED,message:"Connection to server unavailable"})},failed:function(){return r.default.fromValues({statusCode:400,code:o.FAILED,message:"Connection failed or disconnected by server"})},closing:function(){return r.default.fromValues({statusCode:400,code:o.CLOSING,message:"Connection closing"})},closed:function(){return r.default.fromValues({statusCode:400,code:o.CLOSED,message:"Connection closed"})},unknownConnectionErr:function(){return r.default.fromValues({statusCode:500,code:o.UNKNOWN_CONNECTION_ERR,message:"Internal connection error"})},unknownChannelErr:function(){return r.default.fromValues({statusCode:500,code:o.UNKNOWN_CONNECTION_ERR,message:"Internal channel error"})}};t.isRetriable=function(e){return!e.statusCode||!e.code||e.statusCode>=500||Object.values(o).includes(e.code)},t.default=i},function(e,t,n){"use strict";var r;Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.REQ_SEND=0]="REQ_SEND",e[e.REQ_RECV=1]="REQ_RECV",e[e.REQ_RECV_POLL=2]="REQ_RECV_POLL",e[e.REQ_RECV_STREAM=3]="REQ_RECV_STREAM"}(r||(r={})),t.default=r},function(e,t,n){var r;e.exports=(r=n(6),n(5),n(58),n(11),n(40),n(32),n(24),n(27),n(28),n(59),n(60),r)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0).__importDefault(n(2)),o=function(){function e(e){this.members=e||[]}return e.prototype.call=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];for(var n=0,o=this.members;n<o.length;n++){var i=o[n];if(i)try{i.apply(void 0,e)}catch(e){r.default.logAction(r.default.LOG_ERROR,"Multicaster multiple callback handler","Unexpected exception: "+e+"; stack = "+e.stack)}}},e.prototype.push=function(){for(var e,t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];(e=this.members).push.apply(e,t)},e.create=function(t){var n=new e(t);return Object.assign((function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return n.call.apply(n,e)}),{push:function(e){return n.push(e)}})},e}();t.default=o},function(e,t,n){var r,o,i;e.exports=(o=(r=n(6)).lib.Base,i=r.enc.Utf8,void(r.algo.HMAC=o.extend({init:function(e,t){e=this._hasher=new e.init,"string"==typeof t&&(t=i.parse(t));var n=e.blockSize,r=4*n;t.sigBytes>r&&(t=e.finalize(t)),t.clamp();for(var o=this._oKey=t.clone(),a=this._iKey=t.clone(),s=o.words,c=a.words,l=0;l<n;l++)s[l]^=1549556828,c[l]^=909522486;o.sigBytes=a.sigBytes=r,this.reset()},reset:function(){var e=this._hasher;e.reset(),e.update(this._iKey)},update:function(e){return this._hasher.update(e),this},finalize:function(e){var t=this._hasher,n=t.finalize(e);return t.reset(),t.finalize(this._oKey.clone().concat(n))}})))},function(e,t,n){"use strict";var r;Object.defineProperty(t,"__esModule",{value:!0}),t.isSuccessCode=void 0,function(e){e[e.Success=200]="Success",e[e.NoContent=204]="NoContent",e[e.BadRequest=400]="BadRequest",e[e.Unauthorized=401]="Unauthorized",e[e.Forbidden=403]="Forbidden",e[e.RequestTimeout=408]="RequestTimeout",e[e.InternalServerError=500]="InternalServerError"}(r||(r={})),t.isSuccessCode=function(e){return e>=r.Success&&e<r.BadRequest},t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=r.__importDefault(n(10)),i=r.__importStar(n(1)),a=r.__importDefault(n(7)),s=r.__importDefault(n(2)),c=r.__importDefault(n(20)),l=r.__importDefault(n(4)),u=r.__importDefault(n(3)),f=o.default.Action,d=o.default.fromValues({action:f.CLOSE}),p=o.default.fromValues({action:f.DISCONNECT}),h=function(e){function t(t,n,r,o){var i=e.call(this)||this;return o&&(r.format=void 0,r.heartbeats=!0),i.connectionManager=t,t.registerProposedTransport(i),i.auth=n,i.params=r,i.timeouts=r.options.timeouts,i.format=r.format,i.isConnected=!1,i.isFinished=!1,i.isDisposed=!1,i.maxIdleInterval=null,i.idleTimer=null,i.lastActivity=null,i}return r.__extends(t,e),t.prototype.connect=function(){},t.prototype.close=function(){this.isConnected&&this.requestClose(),this.finish("closed",c.default.closed())},t.prototype.disconnect=function(e){this.isConnected&&this.requestDisconnect(),this.finish("disconnected",e||c.default.disconnected())},t.prototype.fail=function(e){this.isConnected&&this.requestDisconnect(),this.finish("failed",e||c.default.failed())},t.prototype.finish=function(e,t){var n;this.isFinished||(this.isFinished=!0,this.isConnected=!1,this.maxIdleInterval=null,clearTimeout(null!==(n=this.idleTimer)&&void 0!==n?n:void 0),this.idleTimer=null,this.emit(e,t),this.dispose())},t.prototype.onProtocolMessage=function(e){switch(s.default.shouldLog(s.default.LOG_MICRO)&&s.default.logAction(s.default.LOG_MICRO,"Transport.onProtocolMessage()","received on "+this.shortName+": "+o.default.stringify(e)+"; connectionId = "+this.connectionManager.connectionId),this.onActivity(),e.action){case f.HEARTBEAT:s.default.logAction(s.default.LOG_MICRO,"Transport.onProtocolMessage()",this.shortName+" heartbeat; connectionId = "+this.connectionManager.connectionId),this.emit("heartbeat",e.id);break;case f.CONNECTED:this.onConnect(e),this.emit("connected",e.error,e.connectionId,e.connectionDetails,e);break;case f.CLOSED:this.onClose(e);break;case f.DISCONNECTED:this.onDisconnect(e);break;case f.ACK:this.emit("ack",e.msgSerial,e.count);break;case f.NACK:this.emit("nack",e.msgSerial,e.count,e.error);break;case f.SYNC:this.connectionManager.onChannelMessage(e,this);break;case f.ACTIVATE:break;case f.AUTH:this.auth.authorize((function(e){e&&s.default.logAction(s.default.LOG_ERROR,"Transport.onProtocolMessage()","Ably requested re-authentication, but unable to obtain a new token: "+i.inspectError(e))}));break;case f.ERROR:if(s.default.logAction(s.default.LOG_MINOR,"Transport.onProtocolMessage()","received error action; connectionId = "+this.connectionManager.connectionId+"; err = "+u.default.Config.inspect(e.error)+(e.channel?", channel: "+e.channel:"")),void 0===e.channel){this.onFatalError(e);break}this.connectionManager.onChannelMessage(e,this);break;default:this.connectionManager.onChannelMessage(e,this)}},t.prototype.onConnect=function(e){if(this.isConnected=!0,!e.connectionDetails)throw new Error("Transport.onConnect(): Connect message recieved without connectionDetails");var t=e.connectionDetails.maxIdleInterval;t&&(this.maxIdleInterval=t+this.timeouts.realtimeRequestTimeout,this.onActivity())},t.prototype.onDisconnect=function(e){var t=e&&e.error;s.default.logAction(s.default.LOG_MINOR,"Transport.onDisconnect()","err = "+i.inspectError(t)),this.finish("disconnected",t)},t.prototype.onFatalError=function(e){var t=e&&e.error;s.default.logAction(s.default.LOG_MINOR,"Transport.onFatalError()","err = "+i.inspectError(t)),this.finish("failed",t)},t.prototype.onClose=function(e){var t=e&&e.error;s.default.logAction(s.default.LOG_MINOR,"Transport.onClose()","err = "+i.inspectError(t)),this.finish("closed",t)},t.prototype.requestClose=function(){s.default.logAction(s.default.LOG_MINOR,"Transport.requestClose()",""),this.send(d)},t.prototype.requestDisconnect=function(){s.default.logAction(s.default.LOG_MINOR,"Transport.requestDisconnect()",""),this.send(p)},t.prototype.ping=function(e){var t={action:o.default.Action.HEARTBEAT};e&&(t.id=e),this.send(o.default.fromValues(t))},t.prototype.dispose=function(){s.default.logAction(s.default.LOG_MINOR,"Transport.dispose()",""),this.isDisposed=!0,this.off()},t.prototype.onActivity=function(){this.maxIdleInterval&&(this.lastActivity=this.connectionManager.lastActivity=i.now(),this.setIdleTimer(this.maxIdleInterval+100))},t.prototype.setIdleTimer=function(e){var t=this;this.idleTimer||(this.idleTimer=setTimeout((function(){t.onIdleTimerExpire()}),e))},t.prototype.onIdleTimerExpire=function(){if(!this.lastActivity||!this.maxIdleInterval)throw new Error("Transport.onIdleTimerExpire(): lastActivity/maxIdleInterval not set");this.idleTimer=null;var e=i.now()-this.lastActivity,t=this.maxIdleInterval-e;if(t<=0){var n="No activity seen from realtime in "+e+"ms; assuming connection has dropped";s.default.logAction(s.default.LOG_ERROR,"Transport.onIdleTimerExpire()",n),this.disconnect(new l.default(n,80003,408))}else this.setIdleTimer(t+100)},t.tryConnect=function(e,t,n,r,o){var i,a=new e(t,n,r),c=function(e){clearTimeout(i),o({event:this.event,error:e})},u=t.options.timeouts.realtimeRequestTimeout;i=setTimeout((function(){a.off(["preconnect","disconnected","failed"]),a.dispose(),c.call({event:"disconnected"},new l.default("Timeout waiting for transport to indicate itself viable",5e4,500))}),u),a.on(["failed","disconnected"],c),a.on("preconnect",(function(){s.default.logAction(s.default.LOG_MINOR,"Transport.tryConnect()","viable transport "+a),clearTimeout(i),a.off(["failed","disconnected"],c),o(null,a)})),a.connect()},t}(a.default);t.default=h},function(e,t,n){var r,o,i,a,s,c,l,u;e.exports=(u=n(6),n(40),n(24),i=(o=(r=u).lib).Base,a=o.WordArray,c=(s=r.algo).MD5,l=s.EvpKDF=i.extend({cfg:i.extend({keySize:4,hasher:c,iterations:1}),init:function(e){this.cfg=this.cfg.extend(e)},compute:function(e,t){for(var n,r=this.cfg,o=r.hasher.create(),i=a.create(),s=i.words,c=r.keySize,l=r.iterations;s.length<c;){n&&o.update(n),n=o.update(e).finalize(t),o.reset();for(var u=1;u<l;u++)n=o.finalize(n),o.reset();i.concat(n)}return i.sigBytes=4*c,i}}),r.EvpKDF=function(e,t,n){return l.create(n).compute(e,t)},u.EvpKDF)},function(e,t,n){var r,o,i,a,s,c,l,u,f,d,p,h,g,m,y,v,_,b,O;e.exports=(r=n(6),n(27),void(r.lib.Cipher||(o=r,i=o.lib,a=i.Base,s=i.WordArray,c=i.BufferedBlockAlgorithm,l=o.enc,l.Utf8,u=l.Base64,f=o.algo.EvpKDF,d=i.Cipher=c.extend({cfg:a.extend(),createEncryptor:function(e,t){return this.create(this._ENC_XFORM_MODE,e,t)},createDecryptor:function(e,t){return this.create(this._DEC_XFORM_MODE,e,t)},init:function(e,t,n){this.cfg=this.cfg.extend(n),this._xformMode=e,this._key=t,this.reset()},reset:function(){c.reset.call(this),this._doReset()},process:function(e){return this._append(e),this._process()},finalize:function(e){return e&&this._append(e),this._doFinalize()},keySize:4,ivSize:4,_ENC_XFORM_MODE:1,_DEC_XFORM_MODE:2,_createHelper:function(){function e(e){return"string"==typeof e?O:_}return function(t){return{encrypt:function(n,r,o){return e(r).encrypt(t,n,r,o)},decrypt:function(n,r,o){return e(r).decrypt(t,n,r,o)}}}}()}),i.StreamCipher=d.extend({_doFinalize:function(){return this._process(!0)},blockSize:1}),p=o.mode={},h=i.BlockCipherMode=a.extend({createEncryptor:function(e,t){return this.Encryptor.create(e,t)},createDecryptor:function(e,t){return this.Decryptor.create(e,t)},init:function(e,t){this._cipher=e,this._iv=t}}),g=p.CBC=function(){var e=h.extend();function t(e,t,n){var r,o=this._iv;o?(r=o,this._iv=void 0):r=this._prevBlock;for(var i=0;i<n;i++)e[t+i]^=r[i]}return e.Encryptor=e.extend({processBlock:function(e,n){var r=this._cipher,o=r.blockSize;t.call(this,e,n,o),r.encryptBlock(e,n),this._prevBlock=e.slice(n,n+o)}}),e.Decryptor=e.extend({processBlock:function(e,n){var r=this._cipher,o=r.blockSize,i=e.slice(n,n+o);r.decryptBlock(e,n),t.call(this,e,n,o),this._prevBlock=i}}),e}(),m=(o.pad={}).Pkcs7={pad:function(e,t){for(var n=4*t,r=n-e.sigBytes%n,o=r<<24|r<<16|r<<8|r,i=[],a=0;a<r;a+=4)i.push(o);var c=s.create(i,r);e.concat(c)},unpad:function(e){var t=255&e.words[e.sigBytes-1>>>2];e.sigBytes-=t}},i.BlockCipher=d.extend({cfg:d.cfg.extend({mode:g,padding:m}),reset:function(){var e;d.reset.call(this);var t=this.cfg,n=t.iv,r=t.mode;this._xformMode==this._ENC_XFORM_MODE?e=r.createEncryptor:(e=r.createDecryptor,this._minBufferSize=1),this._mode&&this._mode.__creator==e?this._mode.init(this,n&&n.words):(this._mode=e.call(r,this,n&&n.words),this._mode.__creator=e)},_doProcessBlock:function(e,t){this._mode.processBlock(e,t)},_doFinalize:function(){var e,t=this.cfg.padding;return this._xformMode==this._ENC_XFORM_MODE?(t.pad(this._data,this.blockSize),e=this._process(!0)):(e=this._process(!0),t.unpad(e)),e},blockSize:4}),y=i.CipherParams=a.extend({init:function(e){this.mixIn(e)},toString:function(e){return(e||this.formatter).stringify(this)}}),v=(o.format={}).OpenSSL={stringify:function(e){var t=e.ciphertext,n=e.salt;return(n?s.create([1398893684,1701076831]).concat(n).concat(t):t).toString(u)},parse:function(e){var t,n=u.parse(e),r=n.words;return 1398893684==r[0]&&1701076831==r[1]&&(t=s.create(r.slice(2,4)),r.splice(0,4),n.sigBytes-=16),y.create({ciphertext:n,salt:t})}},_=i.SerializableCipher=a.extend({cfg:a.extend({format:v}),encrypt:function(e,t,n,r){r=this.cfg.extend(r);var o=e.createEncryptor(n,r),i=o.finalize(t),a=o.cfg;return y.create({ciphertext:i,key:n,iv:a.iv,algorithm:e,mode:a.mode,padding:a.padding,blockSize:e.blockSize,formatter:r.format})},decrypt:function(e,t,n,r){return r=this.cfg.extend(r),t=this._parse(t,r.format),e.createDecryptor(n,r).finalize(t.ciphertext)},_parse:function(e,t){return"string"==typeof e?t.parse(e,this):e}}),b=(o.kdf={}).OpenSSL={execute:function(e,t,n,r){r||(r=s.random(8));var o=f.create({keySize:t+n}).compute(e,r),i=s.create(o.words.slice(t),4*n);return o.sigBytes=4*t,y.create({key:o,iv:i,salt:r})}},O=i.PasswordBasedCipher=_.extend({cfg:_.cfg.extend({kdf:b}),encrypt:function(e,t,n,r){var o=(r=this.cfg.extend(r)).kdf.execute(n,e.keySize,e.ivSize);r.iv=o.iv;var i=_.encrypt.call(this,e,t,o.key,r);return i.mixIn(o),i},decrypt:function(e,t,n,r){r=this.cfg.extend(r),t=this._parse(t,r.format);var o=r.kdf.execute(n,e.keySize,e.ivSize,t.salt);return r.iv=o.iv,_.decrypt.call(this,e,t,o.key,r)}}))))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Request=t.createRequest=void 0;var r=n(0),o=r.__importStar(n(1)),i=r.__importDefault(n(12)),a=r.__importDefault(n(3)),s=r.__importDefault(n(7)),c=n(4),l=r.__importDefault(n(8)),u=r.__importDefault(n(2)),f=r.__importDefault(n(21)),d=o.getGlobalObject(),p=function(){},h=d._ablyjs_jsonp={};h._=function(e){return h["_"+e]||p};var g=1,m="jsonp";function y(e,t,n,r,i,a,s){return a=a||l.default.TIMEOUTS,new _(void 0,e,t,o.copy(n),r,i,a,s)}t.createRequest=y;var v=function(e){function t(t,n,r){var o=e.call(this,t,n,r)||this;return o.shortName=m,r.stream=!1,o}return r.__extends(t,e),t.isAvailable=function(){return a.default.Config.jsonpSupported&&a.default.Config.allowComet},t.prototype.toString=function(){return"JSONPTransport; uri="+this.baseUri+"; isConnected="+this.isConnected},t.prototype.createRequest=function(e,t,n,r,o,i,a){return y(e,t,n,r,o,i=(null==this?void 0:this.timeouts)||i||l.default.TIMEOUTS,a)},t}(i.default),_=function(e){function t(t,n,r,i,a,s,c,l){var u=e.call(this)||this;return void 0===t&&(t=g++),u.id=t,u.uri=n,u.params=i||{},u.params.rnd=o.cheapRandStr(),r&&(r["X-Ably-Version"]&&(u.params.v=r["X-Ably-Version"]),r["X-Ably-Lib"]&&(u.params.lib=r["X-Ably-Lib"])),u.body=a,u.method=l,u.requestMode=s,u.timeouts=c,u.requestComplete=!1,u}return r.__extends(t,e),t.prototype.exec=function(){var e=this,t=this.id,n=this.body,r=this.method,i=this.uri,s=this.params;s.callback="_ablyjs_jsonp._("+t+")",s.envelope="jsonp",n&&(s.body=n),r&&"get"!==r&&(s.method=r);var l=this.script=document.createElement("script"),d=i+o.toQueryString(s);l.src=d,l.src.split("/").slice(-1)[0]!==d.split("/").slice(-1)[0]&&u.default.logAction(u.default.LOG_ERROR,"JSONP Request.exec()","Warning: the browser appears to have truncated the script URI. This will likely result in the request failing due to an unparseable body param"),l.async=!0,l.type="text/javascript",l.charset="UTF-8",l.onerror=function(t){e.complete(new c.PartialErrorInfo("JSONP script error (event: "+a.default.Config.inspect(t)+")",null,400))},h["_"+t]=function(t){if(t.statusCode){var n=t.response;if(204==t.statusCode)e.complete(null,null,null,t.statusCode);else if(n)if(t.statusCode<400||o.isArray(n))e.complete(null,n,t.headers,t.statusCode);else{var r=n.error||new c.PartialErrorInfo("Error response received from server",null,t.statusCode);e.complete(r)}else e.complete(new c.PartialErrorInfo("Invalid server response: no envelope detected",null,500))}else e.complete(null,t)};var p=this.requestMode==f.default.REQ_SEND?this.timeouts.httpRequestTimeout:this.timeouts.recvTimeout;this.timer=setTimeout(this.abort.bind(this),p);var g=document.getElementsByTagName("head")[0];g.insertBefore(l,g.firstChild)},t.prototype.complete=function(e,t,n,r){if(n=n||{},!this.requestComplete){this.requestComplete=!0;var o=void 0;t&&(o="string"==typeof t?"text/plain":"application/json",n["content-type"]=o,this.emit("data",t)),this.emit("complete",e,t,n,!0,r),this.dispose()}},t.prototype.abort=function(){this.dispose()},t.prototype.dispose=function(){var e=this.timer;e&&(clearTimeout(e),this.timer=null);var t=this.script;t.parentNode&&t.parentNode.removeChild(t),delete h[this.id],this.emit("disposed")},t}(s.default);t.Request=_,t.default=function(e){return d.JSONPTransport=v,v.isAvailable()&&(e.supportedTransports[m]=v),v}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=r.__importStar(n(1)),i=r.__importDefault(n(2)),a=r.__importDefault(n(8)),s=r.__importDefault(n(17)),c=r.__importDefault(n(46)),l=r.__importDefault(n(19)),u=r.__importDefault(n(33)),f=r.__importDefault(n(4)),d=r.__importDefault(n(49)),p=r.__importDefault(n(18)),h=r.__importDefault(n(3)),g=r.__importDefault(n(9)),m=r.__importDefault(n(15)),y=r.__importDefault(n(14)),v=function(){},_=function(){function e(e){if(!e){var t="no options provided";throw i.default.logAction(i.default.LOG_ERROR,"Rest()",t),new Error(t)}var n=a.default.objectifyOptions(e);n.log&&i.default.setLog(n.log.level,n.log.handler),i.default.logAction(i.default.LOG_MICRO,"Rest()","initialized with clientOptions "+h.default.Config.inspect(e));var r=this.options=a.default.normaliseOptions(n);if(r.key){var o=r.key.match(/^([^:\s]+):([^:.\s]+)$/);if(!o)throw t="invalid key parameter",i.default.logAction(i.default.LOG_ERROR,"Rest()",t),new f.default(t,40400,404);r.keyName=o[1],r.keySecret=o[2]}if("clientId"in r){if("string"!=typeof r.clientId&&null!==r.clientId)throw new f.default("clientId must be either a string or null",40012,400);if("*"===r.clientId)throw new f.default('Can’t use "*" as a clientId as that string is reserved. (To change the default token request behaviour to use a wildcard clientId, use {defaultTokenParams: {clientId: "*"}})',40012,400)}i.default.logAction(i.default.LOG_MINOR,"Rest()","started; version = "+a.default.version),this.baseUri=this.authority=function(e){return a.default.getHttpScheme(r)+e+":"+a.default.getPort(r,!1)},this._currentFallback=null,this.serverTimeOffset=null,this.http=new h.default.Http(r),this.auth=new s.default(this,r),this.channels=new b(this),this.push=new c.default(this)}return e.prototype.stats=function(e,t){if(void 0===t)if("function"==typeof e)t=e,e=null;else{if(this.options.promises)return o.promisify(this,"stats",[e]);t=v}var n=o.defaultGetHeaders(this.options),r=this.options.useBinaryProtocol?o.Format.msgpack:o.Format.json,i=this.http.supportsLinkHeaders?void 0:r;this.options.headers&&o.mixin(n,this.options.headers),new l.default(this,"/stats",n,i,(function(e,t,n){for(var r=n?e:JSON.parse(e),o=0;o<r.length;o++)r[o]=d.default.fromValues(r[o]);return r})).get(e,t)},e.prototype.time=function(e,t){var n=this;if(void 0===t)if("function"==typeof e)t=e,e=null;else if(this.options.promises)return o.promisify(this,"time",[e]);var r=t||v,i=o.defaultGetHeaders(this.options);this.options.headers&&o.mixin(i,this.options.headers),this.http.do(p.default.Get,this,(function(e){return n.authority(e)+"/time"}),i,null,e,(function(e,t,i,a){if(e)r(e);else{a||(t=JSON.parse(t));var s=t[0];s?(n.serverTimeOffset=s-o.now(),r(null,s)):r(new f.default("Internal error (unexpected result type from GET /time)",5e4,500))}}))},e.prototype.request=function(e,t,n,r,i,a){var s=this.options.useBinaryProtocol,c=s?h.default.Config.msgpack.encode:JSON.stringify,u=s?h.default.Config.msgpack.decode:JSON.parse,d=s?o.Format.msgpack:o.Format.json,p=this.http.supportsLinkHeaders?void 0:d;n=n||{};var g=e.toLowerCase(),m="get"==g?o.defaultGetHeaders(this.options,d):o.defaultPostHeaders(this.options,d);if(void 0===a){if(this.options.promises)return o.promisify(this,"request",[e,t,n,r,i]);a=v}"string"!=typeof r&&(r=c(r)),this.options.headers&&o.mixin(m,this.options.headers),i&&o.mixin(m,i);var y=new l.default(this,t,m,p,(function(e,t,n){return o.ensureArray(n?e:u(e))}),!0);if(!o.arrIn(h.default.Http.methods,g))throw new f.default("Unsupported method "+g,40500,405);o.arrIn(h.default.Http.methodsWithBody,g)?y[g](n,r,a):y[g](n,a)},e.prototype.batchPublish=function(e,t){if(void 0===t){if(this.options.promises)return o.promisify(this,"batchPublish",[e]);t=v}var n,r,i=t;o.isArray(e)?(n=e,r=!1):(n=[e],r=!0);var a=this.options.useBinaryProtocol?o.Format.msgpack:o.Format.json,s=o.defaultPostHeaders(this.options,a);this.options.headers&&o.mixin(s,this.options.headers);var c=o.encodeBody(n,a);y.default.post(this,"/messages",c,s,{newBatchResponse:"true"},null,(function(e,t,n,s){if(e)i(e);else{var c=s?t:o.decodeBody(t,a);i(null,r?c[0]:c)}}))},e.prototype.batchPresence=function(e,t){if(void 0===t){if(this.options.promises)return o.promisify(this,"batchPresence",[e]);t=v}var n=t,r=this.options.useBinaryProtocol?o.Format.msgpack:o.Format.json,i=o.defaultPostHeaders(this.options,r);this.options.headers&&o.mixin(i,this.options.headers);var a=e.join(",");y.default.get(this,"/presence",i,{newBatchResponse:"true",channels:a},null,(function(e,t,i,a){if(e)n(e);else{var s=a?t:o.decodeBody(t,r);n(null,s)}}))},e.prototype.setLog=function(e){i.default.setLog(e.level,e.handler)},e.Promise=function(t){return(t=a.default.objectifyOptions(t)).promises=!0,new e(t)},e.Callbacks=e,e.Platform=h.default,e.Message=g.default,e.PresenceMessage=m.default,e}(),b=function(){function e(e){this.rest=e,this.all=Object.create(null)}return e.prototype.get=function(e,t){e=String(e);var n=this.all[e];return n?t&&n.setOptions(t):this.all[e]=n=new u.default(this.rest,e,t),n},e.prototype.release=function(e){delete this.all[String(e)]},e}();t.default=_},function(e,t,n){e.exports=n(6).enc.Utf8},function(e,t,n){var r;e.exports=(r=n(6),function(e){var t=r,n=t.lib,o=n.WordArray,i=n.Hasher,a=t.algo,s=[],c=[];!function(){function t(t){for(var n=e.sqrt(t),r=2;r<=n;r++)if(!(t%r))return!1;return!0}function n(e){return 4294967296*(e-(0|e))|0}for(var r=2,o=0;o<64;)t(r)&&(o<8&&(s[o]=n(e.pow(r,.5))),c[o]=n(e.pow(r,1/3)),o++),r++}();var l=[],u=a.SHA256=i.extend({_doReset:function(){this._hash=new o.init(s.slice(0))},_doProcessBlock:function(e,t){for(var n=this._hash.words,r=n[0],o=n[1],i=n[2],a=n[3],s=n[4],u=n[5],f=n[6],d=n[7],p=0;p<64;p++){if(p<16)l[p]=0|e[t+p];else{var h=l[p-15],g=(h<<25|h>>>7)^(h<<14|h>>>18)^h>>>3,m=l[p-2],y=(m<<15|m>>>17)^(m<<13|m>>>19)^m>>>10;l[p]=g+l[p-7]+y+l[p-16]}var v=r&o^r&i^o&i,_=(r<<30|r>>>2)^(r<<19|r>>>13)^(r<<10|r>>>22),b=d+((s<<26|s>>>6)^(s<<21|s>>>11)^(s<<7|s>>>25))+(s&u^~s&f)+c[p]+l[p];d=f,f=u,u=s,s=a+b|0,a=i,i=o,o=r,r=b+(_+v)|0}n[0]=n[0]+r|0,n[1]=n[1]+o|0,n[2]=n[2]+i|0,n[3]=n[3]+a|0,n[4]=n[4]+s|0,n[5]=n[5]+u|0,n[6]=n[6]+f|0,n[7]=n[7]+d|0},_doFinalize:function(){var t=this._data,n=t.words,r=8*this._nDataBytes,o=8*t.sigBytes;return n[o>>>5]|=128<<24-o%32,n[14+(o+64>>>9<<4)]=e.floor(r/4294967296),n[15+(o+64>>>9<<4)]=r,t.sigBytes=4*n.length,this._process(),this._hash},clone:function(){var e=i.clone.call(this);return e._hash=this._hash.clone(),e}});t.SHA256=i._createHelper(u),t.HmacSHA256=i._createHmacHelper(u)}(Math),r.SHA256)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=r.__importStar(n(1)),i=r.__importDefault(n(7)),a=r.__importDefault(n(2)),s=r.__importDefault(n(34)),c=r.__importDefault(n(9)),l=r.__importDefault(n(4)),u=r.__importDefault(n(19)),f=r.__importDefault(n(14)),d=r.__importDefault(n(3));function p(){}function h(e){var t=e||{};if(t.cipher){if(!d.default.Crypto)throw new Error("Encryption not enabled; use ably.encryption.js instead");var n=d.default.Crypto.getCipher(t.cipher);t.cipher=n.cipherParams,t.channelCipher=n.cipher}else"cipher"in t&&(t.cipher=void 0,t.channelCipher=null);return t}var g=function(e){function t(t,n,r){var o=e.call(this)||this;return a.default.logAction(a.default.LOG_MINOR,"Channel()","started; name = "+n),o.rest=t,o.name=n,o.basePath="/channels/"+encodeURIComponent(n),o.presence=new s.default(o),o.channelOptions=h(r),o}return r.__extends(t,e),t.prototype.setOptions=function(e){this.channelOptions=h(e)},t.prototype.history=function(e,t){if(a.default.logAction(a.default.LOG_MICRO,"Channel.history()","channel = "+this.name),void 0===t)if("function"==typeof e)t=e,e=null;else{if(this.rest.options.promises)return o.promisify(this,"history",arguments);t=p}this._history(e,t)},t.prototype._history=function(e,t){var n=this.rest,r=n.options.useBinaryProtocol?o.Format.msgpack:o.Format.json,i=this.rest.http.supportsLinkHeaders?void 0:r,a=o.defaultGetHeaders(n.options,r);n.options.headers&&o.mixin(a,n.options.headers);var s=this.channelOptions;new u.default(n,this.basePath+"/messages",a,i,(function(e,t,n){return c.default.fromResponseBody(e,s,n?void 0:r)})).get(e,t)},t.prototype.publish=function(){var e,t,n=this,r=arguments[0],i=arguments[1],a=arguments[arguments.length-1];if("function"!=typeof a){if(this.rest.options.promises)return o.promisify(this,"publish",arguments);a=p}if("string"==typeof r||null===r)e=[c.default.fromValues({name:r,data:i})],t=arguments[2];else if(o.isObject(r))e=[c.default.fromValues(r)],t=arguments[1];else{if(!o.isArray(r))throw new l.default("The single-argument form of publish() expects a message object or an array of message objects",40013,400);e=c.default.fromValuesArray(r),t=arguments[1]}"object"==typeof t&&t||(t={});var s=this.rest,u=s.options,f=u.useBinaryProtocol?o.Format.msgpack:o.Format.json,d=s.options.idempotentRestPublishing,h=o.defaultPostHeaders(s.options,f);if(u.headers&&o.mixin(h,u.headers),d&&function(e){return o.arrEvery(e,(function(e){return!e.id}))}(e)){var g=o.randomString(9);o.arrForEach(e,(function(e,t){e.id=g+":"+t.toString()}))}c.default.encodeArray(e,this.channelOptions,(function(r){if(r)a(r);else{var o=c.default.getMessagesSize(e),i=u.maxMessageSize;o>i?a(new l.default("Maximum size of messages that can be published at once exceeded ( was "+o+" bytes; limit is "+i+" bytes)",40009,400)):n._publish(c.default.serialize(e,f),h,t,a)}}))},t.prototype._publish=function(e,t,n,r){f.default.post(this.rest,this.basePath+"/messages",e,t,n,null,r)},t.prototype.status=function(e){if("function"!=typeof e&&this.rest.options.promises)return o.promisify(this,"status",[]);var t=this.rest.options.useBinaryProtocol?o.Format.msgpack:o.Format.json,n=o.defaultPostHeaders(this.rest.options,t);f.default.get(this.rest,this.basePath,n,{},t,e||p)},t}(i.default);t.default=g},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=r.__importStar(n(1)),i=r.__importDefault(n(7)),a=r.__importDefault(n(2)),s=r.__importDefault(n(19)),c=r.__importDefault(n(15));function l(){}var u=function(e){function t(t){var n=e.call(this)||this;return n.channel=t,n.basePath=t.basePath+"/presence",n}return r.__extends(t,e),t.prototype.get=function(e,t){if(a.default.logAction(a.default.LOG_MICRO,"Presence.get()","channel = "+this.channel.name),void 0===t)if("function"==typeof e)t=e,e=null;else{if(this.channel.rest.options.promises)return o.promisify(this,"get",arguments);t=l}var n=this.channel.rest,r=n.options.useBinaryProtocol?o.Format.msgpack:o.Format.json,i=this.channel.rest.http.supportsLinkHeaders?void 0:r,u=o.defaultGetHeaders(n.options,r);n.options.headers&&o.mixin(u,n.options.headers);var f=this.channel.channelOptions;new s.default(n,this.basePath,u,i,(function(e,t,n){return c.default.fromResponseBody(e,f,n?void 0:r)})).get(e,t)},t.prototype.history=function(e,t){return a.default.logAction(a.default.LOG_MICRO,"Presence.history()","channel = "+this.channel.name),this._history(e,t)},t.prototype._history=function(e,t){if(void 0===t)if("function"==typeof e)t=e,e=null;else{if(this.channel.rest.options.promises)return o.promisify(this,"_history",[e]);t=l}var n=this.channel.rest,r=n.options.useBinaryProtocol?o.Format.msgpack:o.Format.json,i=this.channel.rest.http.supportsLinkHeaders?void 0:r,a=o.defaultGetHeaders(n.options,r);n.options.headers&&o.mixin(a,n.options.headers);var u=this.channel.channelOptions;new s.default(n,this.basePath+"/history",a,i,(function(e,t,n){return c.default.fromResponseBody(e,u,n?void 0:r)})).get(e,t)},t}(i.default);t.default=u},function(e,t,n){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0}),t.TransportParams=void 0;var r=n(0),o=r.__importDefault(n(10)),i=r.__importStar(n(1)),a=r.__importStar(n(52)),s=r.__importStar(n(8)),c=r.__importDefault(n(3)),l=r.__importDefault(n(7)),u=r.__importDefault(n(36)),f=r.__importDefault(n(2)),d=r.__importDefault(n(37)),p=r.__importStar(n(20)),h=r.__importStar(n(4)),g=r.__importDefault(n(17)),m=r.__importDefault(n(9)),y=r.__importDefault(n(23)),v=r.__importDefault(n(53)),_=r.__importDefault(n(26)),b=r.__importDefault(n(25)),O=function(){var e;return void 0!==c.default.WebStorage&&(null===(e=c.default.WebStorage)||void 0===e?void 0:e.localSupported)},C=function(){var e;return void 0!==c.default.WebStorage&&(null===(e=c.default.WebStorage)||void 0===e?void 0:e.sessionSupported)},w=o.default.Action,R=function(){},A="ably-transport-preference",S="ably-connection-recovery";function k(e){try{return JSON.parse(e)}catch(e){return null}}var T=function(){function e(e,t,n,r){this.options=e,this.host=t,this.mode=n,this.connectionKey=r,this.format=e.useBinaryProtocol?i.Format.msgpack:i.Format.json}return e.prototype.getConnectParams=function(e){var t=e?i.copy(e):{},n=this.options;switch(this.mode){case"upgrade":t.upgrade=this.connectionKey;break;case"resume":t.resume=this.connectionKey;break;case"recover":var r=k(n.recover);r&&(t.recover=r.connectionKey)}return void 0!==n.clientId&&(t.clientId=n.clientId),!1===n.echoMessages&&(t.echo="false"),void 0!==this.format&&(t.format=this.format),void 0!==this.stream&&(t.stream=this.stream),void 0!==this.heartbeats&&(t.heartbeats=this.heartbeats),t.v=s.default.protocolVersion,t.agent=encodeURIComponent((0,s.getAgentString)(this.options)),void 0!==n.transportParams&&i.mixin(t,n.transportParams),t},e.prototype.toString=function(){var e="[mode="+this.mode;return this.host&&(e+=",host="+this.host),this.connectionKey&&(e+=",connectionKey="+this.connectionKey),this.format&&(e+=",format="+this.format),e+"]"},e}();t.TransportParams=T;var M=function(t){function n(e,r){var o=t.call(this)||this;o.disconnectedRetryCount=0,n.initTransports(),o.realtime=e,o.options=r;var a=r.timeouts,l=a.preferenceConnectTimeout+a.realtimeRequestTimeout;if(o.states={initialized:{state:"initialized",terminal:!1,queueEvents:!0,sendEvents:!1,failState:"disconnected"},connecting:{state:"connecting",terminal:!1,queueEvents:!0,sendEvents:!1,retryDelay:l,failState:"disconnected"},connected:{state:"connected",terminal:!1,queueEvents:!1,sendEvents:!0,failState:"disconnected"},synchronizing:{state:"connected",terminal:!1,queueEvents:!0,sendEvents:!1,forceQueueEvents:!0,failState:"disconnected"},disconnected:{state:"disconnected",terminal:!1,queueEvents:!0,sendEvents:!1,retryDelay:a.disconnectedRetryTimeout,failState:"disconnected"},suspended:{state:"suspended",terminal:!1,queueEvents:!1,sendEvents:!1,retryDelay:a.suspendedRetryTimeout,failState:"suspended"},closing:{state:"closing",terminal:!1,queueEvents:!1,sendEvents:!1,retryDelay:a.realtimeRequestTimeout,failState:"closed"},closed:{state:"closed",terminal:!0,queueEvents:!1,sendEvents:!1,failState:"closed"},failed:{state:"failed",terminal:!0,queueEvents:!1,sendEvents:!1,failState:"failed"}},o.state=o.states.initialized,o.errorReason=null,o.queuedMessages=new u.default,o.msgSerial=0,o.connectionDetails=void 0,o.connectionId=void 0,o.connectionKey=void 0,o.connectionStateTtl=a.connectionStateTtl,o.maxIdleInterval=null,o.transports=i.intersect(r.transports||s.default.defaultTransports,n.supportedTransports),o.baseTransport=i.intersect(s.default.baseTransportOrder,o.transports)[0],o.upgradeTransports=i.intersect(o.transports,s.default.upgradeTransports),o.transportPreference=null,o.httpHosts=s.default.getHosts(r),o.activeProtocol=null,o.proposedTransports=[],o.pendingTransports=[],o.host=null,o.lastAutoReconnectAttempt=null,o.lastActivity=null,o.forceFallbackHost=!1,o.connectCounter=0,f.default.logAction(f.default.LOG_MINOR,"Realtime.ConnectionManager()","started"),f.default.logAction(f.default.LOG_MICRO,"Realtime.ConnectionManager()","requested transports = ["+(r.transports||s.default.defaultTransports)+"]"),f.default.logAction(f.default.LOG_MICRO,"Realtime.ConnectionManager()","available transports = ["+o.transports+"]"),f.default.logAction(f.default.LOG_MICRO,"Realtime.ConnectionManager()","http hosts = ["+o.httpHosts+"]"),!o.transports.length){var d="no requested transports available";throw f.default.logAction(f.default.LOG_ERROR,"realtime.ConnectionManager()",d),new Error(d)}var p=c.default.Config.addEventListener;return p&&(C()&&"function"==typeof r.recover&&p("beforeunload",o.persistConnection.bind(o)),!0===r.closeOnUnload&&p("beforeunload",(function(){f.default.logAction(f.default.LOG_MAJOR,"Realtime.ConnectionManager()","beforeunload event has triggered the connection to close as closeOnUnload is true"),o.requestState({state:"closing"})})),p("online",(function(){o.state==o.states.disconnected||o.state==o.states.suspended?(f.default.logAction(f.default.LOG_MINOR,"ConnectionManager caught browser ‘online’ event","reattempting connection"),o.requestState({state:"connecting"})):o.state==o.states.connecting&&(o.pendingTransports.forEach((function(e){e.off()})),o.disconnectAllTransports(),o.startConnect())})),p("offline",(function(){o.state==o.states.connected&&(f.default.logAction(f.default.LOG_MINOR,"ConnectionManager caught browser ‘offline’ event","disconnecting active transport"),o.disconnectAllTransports())}))),o}return r.__extends(n,t),n.initTransports=function(){(0,v.default)(n),i.arrForEach(c.default.Transports,(function(e){e(n)}))},n.prototype.createTransportParams=function(e,t){return new T(this.options,e,t,this.connectionKey)},n.prototype.getTransportParams=function(e){var t=this;!function(e){if(t.connectionKey)e("resume");else if("string"!=typeof t.options.recover){var n,r,o=t.options.recover,i=C()&&(null===(r=null===(n=c.default.WebStorage)||void 0===n?void 0:n.getSession)||void 0===r?void 0:r.call(n,S));if(i&&"function"==typeof o)return f.default.logAction(f.default.LOG_MINOR,"ConnectionManager.getTransportParams()","Calling clientOptions-provided recover function with last session data"),void o(i,(function(n){n?(t.options.recover=i.recoveryKey,e("recover")):e("clean")}));e("clean")}else e("recover")}((function(n){var r=t.createTransportParams(null,n);if("recover"===n){f.default.logAction(f.default.LOG_MINOR,"ConnectionManager.getTransportParams()","Transport recovery mode = recover; recoveryKey = "+t.options.recover);var o=k(t.options.recover);o&&(t.msgSerial=o.msgSerial)}else f.default.logAction(f.default.LOG_MINOR,"ConnectionManager.getTransportParams()","Transport params = "+r.toString());e(r)}))},n.prototype.tryATransport=function(e,t,r){var o=this;f.default.logAction(f.default.LOG_MICRO,"ConnectionManager.tryATransport()","trying "+t),_.default.tryConnect(n.supportedTransports[t],this,this.realtime.auth,e,(function(n,i){var a=o.state;return a==o.states.closing||a==o.states.closed||a==o.states.failed?(i&&(f.default.logAction(f.default.LOG_MINOR,"ConnectionManager.tryATransport()","connection "+a.state+" while we were attempting the transport; closing "+i),i.close()),void r(!0)):n?(f.default.logAction(f.default.LOG_MINOR,"ConnectionManager.tryATransport()","transport "+t+" "+n.event+", err: "+n.error.toString()),void(!g.default.isTokenErr(n.error)||o.errorReason&&g.default.isTokenErr(o.errorReason)?"failed"===n.event?(o.notifyState({state:"failed",error:n.error}),r(!0)):"disconnected"===n.event&&((0,p.isRetriable)(n.error)?r(!1):(o.notifyState({state:o.states.connecting.failState,error:n.error}),r(!0))):(o.errorReason=n.error,o.realtime.auth._forceNewToken(null,null,(function(n){n?o.actOnErrorFromAuthorize(n):o.tryATransport(e,t,r)}))))):(f.default.logAction(f.default.LOG_MICRO,"ConnectionManager.tryATransport()","viable transport "+t+"; setting pending"),o.setTransportPending(i,e),void r(null,i))}))},n.prototype.setTransportPending=function(e,t){var n=this,r=t.mode;f.default.logAction(f.default.LOG_MINOR,"ConnectionManager.setTransportPending()","transport = "+e+"; mode = "+r),i.arrDeleteValue(this.proposedTransports,e),this.pendingTransports.push(e);var o=c.default.Defaults.transportPreferenceOrder[c.default.Defaults.transportPreferenceOrder.length-1];e.once("connected",(function(a,s,l){"upgrade"==r&&n.activeProtocol?e.shortName!==o&&i.arrIn(n.getUpgradePossibilities(),o)&&n.activeProtocol?setTimeout((function(){n.scheduleTransportActivation(a,e,s,l)}),n.options.timeouts.parallelUpgradeDelay):n.scheduleTransportActivation(a,e,s,l):(n.activateTransport(a,e,s,l),c.default.Config.nextTick((function(){n.connectImpl(t)}))),"recover"===r&&n.options.recover&&(n.options.recover=null,n.unpersistConnection())}));var a=this;e.on(["disconnected","closed","failed"],(function(t){a.deactivateTransport(e,this.event,t)})),this.emit("transport.pending",e)},n.prototype.scheduleTransportActivation=function(e,t,n,r){var a,s,l=this,u=this.activeProtocol&&this.activeProtocol.getTransport(),d=function(){t.disconnect(),i.arrDeleteValue(l.pendingTransports,t)};if(this.state!==this.states.connected&&this.state!==this.states.connecting)return f.default.logAction(f.default.LOG_MINOR,"ConnectionManager.scheduleTransportActivation()","Current connection state ("+this.state.state+(this.state===this.states.synchronizing?", but with an upgrade already in progress":"")+") is not valid to upgrade in; abandoning upgrade to "+t.shortName),void d();if(u&&(a=t,s=u,!(i.arrIndexOf(c.default.Defaults.transportPreferenceOrder,a.shortName)>i.arrIndexOf(c.default.Defaults.transportPreferenceOrder,s.shortName))))return f.default.logAction(f.default.LOG_MINOR,"ConnectionManager.scheduleTransportActivation()","Proposed transport "+t.shortName+" is no better than current active transport "+u.shortName+" - abandoning upgrade"),void d();f.default.logAction(f.default.LOG_MINOR,"ConnectionManager.scheduleTransportActivation()","Scheduling transport upgrade; transport = "+t);var p=null;if(!t.isConnected)return f.default.logAction(f.default.LOG_MINOR,"ConnectionManager.scheduleTransportActivation()","Proposed transport "+t.shortName+"is no longer connected; abandoning upgrade"),void d();if(this.state===this.states.connected)f.default.logAction(f.default.LOG_MICRO,"ConnectionManager.scheduleTransportActivation()","Currently connected, so temporarily pausing events until the upgrade is complete"),this.state=this.states.synchronizing,p=this.activeProtocol;else if(this.state!==this.states.connecting)return f.default.logAction(f.default.LOG_MINOR,"ConnectionManager.scheduleTransportActivation()","Current connection state ("+this.state.state+(this.state===this.states.synchronizing?", but with an upgrade already in progress":"")+") is not valid to upgrade in; abandoning upgrade to "+t.shortName),void d();f.default.logAction(f.default.LOG_MINOR,"ConnectionManager.scheduleTransportActivation()","Syncing transport; transport = "+t);var h=function(){f.default.logAction(f.default.LOG_MINOR,"ConnectionManager.scheduleTransportActivation()","Activating transport; transport = "+t),t.send(o.default.fromValues({action:w.ACTIVATE})),l.activateTransport(e,t,n,r),l.state===l.states.synchronizing?(f.default.logAction(f.default.LOG_MICRO,"ConnectionManager.scheduleTransportActivation()","Pre-upgrade protocol idle, sending queued messages on upgraded transport; transport = "+t),l.state=l.states.connected):f.default.logAction(f.default.LOG_MINOR,"ConnectionManager.scheduleTransportActivation()","Pre-upgrade protocol idle, but state is now "+l.state.state+", so leaving unchanged"),l.state.sendEvents&&l.sendQueuedMessages()};p?p.onceIdle(h):h()},n.prototype.activateTransport=function(e,t,n,r){var o=this;f.default.logAction(f.default.LOG_MINOR,"ConnectionManager.activateTransport()","transport = "+t),e&&f.default.logAction(f.default.LOG_ERROR,"ConnectionManager.activateTransport()","error = "+e),n&&f.default.logAction(f.default.LOG_MICRO,"ConnectionManager.activateTransport()","connectionId =  "+n),r&&f.default.logAction(f.default.LOG_MICRO,"ConnectionManager.activateTransport()","connectionDetails =  "+JSON.stringify(r)),this.persistTransportPreference(t);var s=this.state,l=this.states.connected.state;if(f.default.logAction(f.default.LOG_MINOR,"ConnectionManager.activateTransport()","current state = "+s.state),s.state==this.states.closing.state||s.state==this.states.closed.state||s.state==this.states.failed.state)return f.default.logAction(f.default.LOG_MINOR,"ConnectionManager.activateTransport()","Disconnecting transport and abandoning"),t.disconnect(),!1;if(i.arrDeleteValue(this.pendingTransports,t),!t.isConnected)return f.default.logAction(f.default.LOG_MINOR,"ConnectionManager.activateTransport()","Declining to activate transport "+t+" since it appears to no longer be connected"),!1;var u=this.activeProtocol;this.activeProtocol=new a.default(t),this.host=t.params.host;var p=r.connectionKey;if(p&&this.connectionKey!=p&&this.setConnection(n,r,!!e),this.onConnectionDetailsUpdate(r,t),c.default.Config.nextTick((function(){t.on("connected",(function(e,n,r){o.onConnectionDetailsUpdate(r,t),o.emit("update",new d.default(l,l,null,e))}))})),s.state===this.states.connected.state?e&&(this.errorReason=this.realtime.connection.errorReason=e,this.emit("update",new d.default(l,l,null,e))):(this.notifyState({state:"connected",error:e}),this.errorReason=this.realtime.connection.errorReason=e||null),this.emit("transport.active",t),u)if(u.messageQueue.count()>0&&f.default.logAction(f.default.LOG_ERROR,"ConnectionManager.activateTransport()","Previous active protocol (for transport "+u.transport.shortName+", new one is "+t.shortName+") finishing with "+u.messageQueue.count()+" messages still pending"),u.transport===t){var h="Assumption violated: activating a transport that was also the transport for the previous active protocol; transport = "+t.shortName+"; stack = "+(new Error).stack;f.default.logAction(f.default.LOG_ERROR,"ConnectionManager.activateTransport()",h)}else u.finish();return i.safeArrForEach(this.pendingTransports,(function(e){if(e===t){var n="Assumption violated: activating a transport that is still marked as a pending transport; transport = "+t.shortName+"; stack = "+(new Error).stack;f.default.logAction(f.default.LOG_ERROR,"ConnectionManager.activateTransport()",n),i.arrDeleteValue(o.pendingTransports,t)}else e.disconnect()})),i.safeArrForEach(this.proposedTransports,(function(e){e===t?(f.default.logAction(f.default.LOG_ERROR,"ConnectionManager.activateTransport()","Assumption violated: activating a transport that is still marked as a proposed transport; transport = "+t.shortName+"; stack = "+(new Error).stack),i.arrDeleteValue(o.proposedTransports,t)):e.dispose()})),!0},n.prototype.deactivateTransport=function(e,t,n){var r=this.activeProtocol,o=r&&r.getTransport()===e,a=i.arrDeleteValue(this.pendingTransports,e),s=i.arrDeleteValue(this.proposedTransports,e),l=this.noTransportsScheduledForActivation();if(f.default.logAction(f.default.LOG_MINOR,"ConnectionManager.deactivateTransport()","transport = "+e),f.default.logAction(f.default.LOG_MINOR,"ConnectionManager.deactivateTransport()","state = "+t+(o?"; was active":a?"; was pending":s?"; was proposed":"")+(l?"":"; another transport is scheduled for activation")),n&&n.message&&f.default.logAction(f.default.LOG_MICRO,"ConnectionManager.deactivateTransport()","reason =  "+n.message),o&&(f.default.logAction(f.default.LOG_MICRO,"ConnectionManager.deactivateTransport()","Getting, clearing, and requeuing "+this.activeProtocol.messageQueue.count()+" pending messages"),this.queuePendingMessages(r.getPendingMessages()),c.default.Config.nextTick((function(){r.clearPendingMessages()})),this.activeProtocol=this.host=null),this.emit("transport.inactive",e),o&&l||o&&"failed"===t||"closed"===t||null===r&&a&&0===this.pendingTransports.length){if("disconnected"===t&&n&&n.statusCode>500&&this.httpHosts.length>1)return this.unpersistTransportPreference(),this.forceFallbackHost=!0,void this.notifyState({state:t,error:n,retryImmediately:!0});var u="failed"===t&&g.default.isTokenErr(n)?"disconnected":t;this.notifyState({state:u,error:n})}else o&&"disconnected"===t&&this.state!==this.states.synchronizing&&(f.default.logAction(f.default.LOG_MICRO,"ConnectionManager.deactivateTransport()","wasActive but another transport is connected and scheduled for activation, so going into the connecting state until it activates"),this.startSuspendTimer(),this.startTransitionTimer(this.states.connecting),this.notifyState({state:"connecting",error:n}))},n.prototype.noTransportsScheduledForActivation=function(){return i.isEmpty(this.pendingTransports)||this.pendingTransports.every((function(e){return!e.isConnected}))},n.prototype.setConnection=function(e,t,n){var r=this.connectionId;(r&&r!==e||!r&&n)&&(f.default.logAction(f.default.LOG_MINOR,"ConnectionManager.setConnection()","Resetting msgSerial"),this.msgSerial=0,this.queuedMessages.resetSendAttempted()),this.connectionId!==e&&f.default.logAction(f.default.LOG_MINOR,"ConnectionManager.setConnection()","New connectionId; reattaching any attached channels"),this.realtime.connection.id=this.connectionId=e,this.realtime.connection.key=this.connectionKey=t.connectionKey},n.prototype.clearConnection=function(){this.realtime.connection.id=this.connectionId=void 0,this.realtime.connection.key=this.connectionKey=void 0,this.msgSerial=0,this.unpersistConnection()},n.prototype.createRecoveryKey=function(){return this.connectionKey?JSON.stringify({connectionKey:this.connectionKey,msgSerial:this.msgSerial,channelSerials:this.realtime.channels.channelSerials()}):null},n.prototype.checkConnectionStateFreshness=function(){if(this.lastActivity&&this.connectionId){var e=i.now()-this.lastActivity;e>this.connectionStateTtl+this.maxIdleInterval&&(f.default.logAction(f.default.LOG_MINOR,"ConnectionManager.checkConnectionStateFreshness()","Last known activity from realtime was "+e+"ms ago; discarding connection state"),this.clearConnection(),this.states.connecting.failState="suspended")}},n.prototype.persistConnection=function(){if(C()){var t=this.createRecoveryKey();t&&(n={recoveryKey:t,disconnectedAt:i.now(),location:e.location,clientId:this.realtime.auth.clientId},C()&&(null===(o=null===(r=c.default.WebStorage)||void 0===r?void 0:r.setSession)||void 0===o||o.call(r,S,n)))}var n,r,o},n.prototype.unpersistConnection=function(){var e,t;C()&&(null===(t=null===(e=c.default.WebStorage)||void 0===e?void 0:e.removeSession)||void 0===t||t.call(e,S))},n.prototype.getError=function(){return this.errorReason||this.getStateError()},n.prototype.getStateError=function(){var e,t;return null===(t=(e=p.default)[this.state.state])||void 0===t?void 0:t.call(e)},n.prototype.activeState=function(){return this.state.queueEvents||this.state.sendEvents},n.prototype.enactStateChange=function(e){var t="failed"===e.current?f.default.LOG_ERROR:f.default.LOG_MAJOR;f.default.logAction(t,"Connection state",e.current+(e.reason?"; reason: "+e.reason:"")),f.default.logAction(f.default.LOG_MINOR,"ConnectionManager.enactStateChange","setting new state: "+e.current+"; reason = "+(e.reason&&e.reason.message));var n=this.state=this.states[e.current];e.reason&&(this.errorReason=e.reason,this.realtime.connection.errorReason=e.reason),(n.terminal||"suspended"===n.state)&&this.clearConnection(),this.emit("connectionstate",e)},n.prototype.startTransitionTimer=function(e){var t=this;f.default.logAction(f.default.LOG_MINOR,"ConnectionManager.startTransitionTimer()","transitionState: "+e.state),this.transitionTimer&&(f.default.logAction(f.default.LOG_MINOR,"ConnectionManager.startTransitionTimer()","clearing already-running timer"),clearTimeout(this.transitionTimer)),this.transitionTimer=setTimeout((function(){t.transitionTimer&&(t.transitionTimer=null,f.default.logAction(f.default.LOG_MINOR,"ConnectionManager "+e.state+" timer expired","requesting new state: "+e.failState),t.notifyState({state:e.failState}))}),e.retryDelay)},n.prototype.cancelTransitionTimer=function(){f.default.logAction(f.default.LOG_MINOR,"ConnectionManager.cancelTransitionTimer()",""),this.transitionTimer&&(clearTimeout(this.transitionTimer),this.transitionTimer=null)},n.prototype.startSuspendTimer=function(){var e=this;this.suspendTimer||(this.suspendTimer=setTimeout((function(){e.suspendTimer&&(e.suspendTimer=null,f.default.logAction(f.default.LOG_MINOR,"ConnectionManager suspend timer expired","requesting new state: suspended"),e.states.connecting.failState="suspended",e.notifyState({state:"suspended"}))}),this.connectionStateTtl))},n.prototype.checkSuspendTimer=function(e){"disconnected"!==e&&"suspended"!==e&&"connecting"!==e&&this.cancelSuspendTimer()},n.prototype.cancelSuspendTimer=function(){this.states.connecting.failState="disconnected",this.suspendTimer&&(clearTimeout(this.suspendTimer),this.suspendTimer=null)},n.prototype.startRetryTimer=function(e){var t=this;this.retryTimer=setTimeout((function(){f.default.logAction(f.default.LOG_MINOR,"ConnectionManager retry timer expired","retrying"),t.retryTimer=null,t.requestState({state:"connecting"})}),e)},n.prototype.cancelRetryTimer=function(){this.retryTimer&&(clearTimeout(this.retryTimer),this.retryTimer=null)},n.prototype.notifyState=function(e){var t,n,r=this,o=e.state,a="disconnected"===o&&(this.state===this.states.connected||this.state===this.states.synchronizing||e.retryImmediately||this.state===this.states.connecting&&e.error&&g.default.isTokenErr(e.error)&&!(this.errorReason&&g.default.isTokenErr(this.errorReason)));if(f.default.logAction(f.default.LOG_MINOR,"ConnectionManager.notifyState()","new state: "+o+(a?"; will retry connection immediately":"")),o!=this.state.state&&(this.cancelTransitionTimer(),this.cancelRetryTimer(),this.checkSuspendTimer(e.state),"suspended"!==o&&"connected"!==o||(this.disconnectedRetryCount=0),!this.state.terminal)){var s=this.states[e.state],l=s.retryDelay;"disconnected"===s.state&&(this.disconnectedRetryCount++,l=i.getRetryTime(s.retryDelay,this.disconnectedRetryCount));var u=new d.default(this.state.state,s.state,l,e.error||(null===(n=(t=p.default)[s.state])||void 0===n?void 0:n.call(t)));if(a){var h=function(){r.state===r.states.disconnected&&(r.lastAutoReconnectAttempt=i.now(),r.requestState({state:"connecting"}))},m=this.lastAutoReconnectAttempt&&i.now()-this.lastAutoReconnectAttempt+1;m&&m<1e3?(f.default.logAction(f.default.LOG_MICRO,"ConnectionManager.notifyState()","Last reconnect attempt was only "+m+"ms ago, waiting another "+(1e3-m)+"ms before trying again"),setTimeout(h,1e3-m)):c.default.Config.nextTick(h)}else"disconnected"!==o&&"suspended"!==o||this.startRetryTimer(l);("disconnected"===o&&!a||"suspended"===o||s.terminal)&&c.default.Config.nextTick((function(){r.disconnectAllTransports()})),"connected"!=o||this.activeProtocol||f.default.logAction(f.default.LOG_ERROR,"ConnectionManager.notifyState()","Broken invariant: attempted to go into connected state, but there is no active protocol"),this.enactStateChange(u),this.state.sendEvents?this.sendQueuedMessages():this.state.queueEvents||(this.realtime.channels.propogateConnectionInterruption(o,u.reason),this.failQueuedMessages(u.reason))}},n.prototype.requestState=function(e){var t,n,r=this,o=e.state;if(f.default.logAction(f.default.LOG_MINOR,"ConnectionManager.requestState()","requested state: "+o+"; current state: "+this.state.state),o!=this.state.state&&(this.cancelTransitionTimer(),this.cancelRetryTimer(),this.checkSuspendTimer(o),!("connecting"==o&&"connected"==this.state.state||"closing"==o&&"closed"==this.state.state))){var i=this.states[o],a=new d.default(this.state.state,i.state,null,e.error||(null===(n=(t=p.default)[i.state])||void 0===n?void 0:n.call(t)));this.enactStateChange(a),"connecting"==o&&c.default.Config.nextTick((function(){r.startConnect()})),"closing"==o&&this.closeImpl()}},n.prototype.startConnect=function(){var e=this;if(this.state===this.states.connecting){var t=this.realtime.auth,n=++this.connectCounter,r=function(){e.checkConnectionStateFreshness(),e.getTransportParams((function(t){if("recover"===t.mode&&t.options.recover){var r=k(t.options.recover);r&&e.realtime.channels.recoverChannels(r.channelSerials)}n===e.connectCounter&&e.connectImpl(t,n)}))};if(f.default.logAction(f.default.LOG_MINOR,"ConnectionManager.startConnect()","starting connection"),this.startSuspendTimer(),this.startTransitionTimer(this.states.connecting),"basic"===t.method)r();else{var o=function(t){n===e.connectCounter&&(t?e.actOnErrorFromAuthorize(t):r())};this.errorReason&&g.default.isTokenErr(this.errorReason)?t._forceNewToken(null,null,o):t._ensureValidAuthCredentials(!1,o)}}else f.default.logAction(f.default.LOG_MINOR,"ConnectionManager.startConnect()","Must be in connecting state to connect, but was "+this.state.state)},n.prototype.connectImpl=function(e,t){var n=this.state.state;n!==this.states.connecting.state&&n!==this.states.connected.state?f.default.logAction(f.default.LOG_MINOR,"ConnectionManager.connectImpl()","Must be in connecting state to connect (or connected to upgrade), but was "+n):this.pendingTransports.length?f.default.logAction(f.default.LOG_MINOR,"ConnectionManager.connectImpl()","Transports "+this.pendingTransports[0].toString()+" currently pending; taking no action"):n==this.states.connected.state?this.upgradeIfNeeded(e):this.transports.length>1&&this.getTransportPreference()?this.connectPreference(e,t):this.connectBase(e,t)},n.prototype.connectPreference=function(e,t){var n=this,r=this.getTransportPreference(),o=!1;i.arrIn(this.transports,r)||(this.unpersistTransportPreference(),this.connectImpl(e,t)),f.default.logAction(f.default.LOG_MINOR,"ConnectionManager.connectPreference()","Trying to connect with stored transport preference "+r);var a=setTimeout((function(){o=!0,n.state.state!==n.states.connected.state&&(f.default.logAction(f.default.LOG_MINOR,"ConnectionManager.connectPreference()","Shortcircuit connection attempt with "+r+" failed; clearing preference and trying from scratch"),n.disconnectAllTransports(),n.unpersistTransportPreference()),n.connectImpl(e,t)}),this.options.timeouts.preferenceConnectTimeout);e.host=this.httpHosts[0],this.tryATransport(e,r,(function(r,s){clearTimeout(a),o&&s?(s.off(),s.disconnect(),i.arrDeleteValue(n.pendingTransports,s)):s||r||(n.unpersistTransportPreference(),n.connectImpl(e,t))}))},n.prototype.connectBase=function(e,t){var n=this,r=function(e){n.notifyState({state:n.states.connecting.failState,error:e})},o=this.httpHosts.slice(),a=function(e,r){t===n.connectCounter&&(r||e||c())};f.default.logAction(f.default.LOG_MINOR,"ConnectionManager.connectBase()","Trying to connect with base transport "+this.baseTransport);var s=o.shift();if(s){e.host=s;var c=function(){o.length?n.realtime.http.checkConnectivity?n.realtime.http.checkConnectivity((function(s,c){t===n.connectCounter&&(s?r(s):c?(e.host=i.arrPopRandomElement(o),n.tryATransport(e,n.baseTransport,a)):r(new h.default("Unable to connect (network unreachable)",80003,404)))})):r(new h.PartialErrorInfo("Internal error: Http.checkConnectivity not set",null,500)):r(new h.default("Unable to connect (and no more fallback hosts to try)",80003,404))};if(this.forceFallbackHost&&o.length)return this.forceFallbackHost=!1,void c();this.tryATransport(e,this.baseTransport,a)}else r(new h.default("Unable to connect (no available host)",80003,404))},n.prototype.getUpgradePossibilities=function(){var e=this.activeProtocol.getTransport().shortName,t=i.arrIndexOf(this.upgradeTransports,e);return this.upgradeTransports.slice(t+1)},n.prototype.upgradeIfNeeded=function(e){var t=this,n=this.getUpgradePossibilities();f.default.logAction(f.default.LOG_MINOR,"ConnectionManager.upgradeIfNeeded()","upgrade possibilities: "+c.default.Config.inspect(n)),n.length&&i.arrForEach(n,(function(n){var r=t.createTransportParams(e.host,"upgrade");t.tryATransport(r,n,R)}))},n.prototype.closeImpl=function(){f.default.logAction(f.default.LOG_MINOR,"ConnectionManager.closeImpl()","closing connection"),this.cancelSuspendTimer(),this.startTransitionTimer(this.states.closing),i.safeArrForEach(this.pendingTransports,(function(e){f.default.logAction(f.default.LOG_MICRO,"ConnectionManager.closeImpl()","Closing pending transport: "+e),e&&e.close()})),i.safeArrForEach(this.proposedTransports,(function(e){f.default.logAction(f.default.LOG_MICRO,"ConnectionManager.closeImpl()","Disposing of proposed transport: "+e),e&&e.dispose()})),this.activeProtocol&&(f.default.logAction(f.default.LOG_MICRO,"ConnectionManager.closeImpl()","Closing active transport: "+this.activeProtocol.getTransport()),this.activeProtocol.getTransport().close()),this.notifyState({state:"closed"})},n.prototype.onAuthUpdated=function(e,t){var n,r=this;switch(this.state.state){case"connected":if(f.default.logAction(f.default.LOG_MICRO,"ConnectionManager.onAuthUpdated()","Sending AUTH message on active transport"),(this.pendingTransports.length||this.proposedTransports.length)&&this.state!==this.states.synchronizing){this.disconnectAllTransports(!0);var i=this.activeProtocol.getTransport().params;c.default.Config.nextTick((function(){"connected"===r.state.state&&r.upgradeIfNeeded(i)}))}var a=null===(n=this.activeProtocol)||void 0===n?void 0:n.getTransport();a&&a.onAuthUpdated&&a.onAuthUpdated(e);var s=o.default.fromValues({action:w.AUTH,auth:{accessToken:e.token}});this.send(s);var l=function(){r.off(u),t(null,e)},u=function(e){"failed"===e.current&&(r.off(l),r.off(u),t(e.reason||r.getStateError()))};this.once("connectiondetails",l),this.on("connectionstate",u);break;case"connecting":f.default.logAction(f.default.LOG_MICRO,"ConnectionManager.onAuthUpdated()","Aborting current connection attempts in order to start again with the new auth details"),this.disconnectAllTransports();default:f.default.logAction(f.default.LOG_MICRO,"ConnectionManager.onAuthUpdated()","Connection state is "+this.state.state+"; waiting until either connected or failed");var d=function(n){switch(n.current){case"connected":r.off(d),t(null,e);break;case"failed":case"closed":case"suspended":r.off(d),t(n.reason||r.getStateError())}};this.on("connectionstate",d),"connecting"===this.state.state?this.startConnect():this.requestState({state:"connecting"})}},n.prototype.disconnectAllTransports=function(e){f.default.logAction(f.default.LOG_MINOR,"ConnectionManager.disconnectAllTransports()","Disconnecting all transports"+(e?" except the active transport":"")),this.connectCounter++,i.safeArrForEach(this.pendingTransports,(function(e){f.default.logAction(f.default.LOG_MICRO,"ConnectionManager.disconnectAllTransports()","Disconnecting pending transport: "+e),e&&e.disconnect()})),this.pendingTransports=[],i.safeArrForEach(this.proposedTransports,(function(e){f.default.logAction(f.default.LOG_MICRO,"ConnectionManager.disconnectAllTransports()","Disposing of proposed transport: "+e),e&&e.dispose()})),this.proposedTransports=[],this.activeProtocol&&!e&&(f.default.logAction(f.default.LOG_MICRO,"ConnectionManager.disconnectAllTransports()","Disconnecting active transport: "+this.activeProtocol.getTransport()),this.activeProtocol.getTransport().disconnect())},n.prototype.send=function(e,t,n){n=n||R;var r=this.state;if(r.sendEvents)return f.default.logAction(f.default.LOG_MICRO,"ConnectionManager.send()","sending event"),void this.sendImpl(new a.PendingMessage(e,n));if(!(t&&r.queueEvents||r.forceQueueEvents)){var i="rejecting event, queueEvent was "+t+", state was "+r.state;return f.default.logAction(f.default.LOG_MICRO,"ConnectionManager.send()",i),void n(this.errorReason||new h.default(i,9e4,400))}f.default.shouldLog(f.default.LOG_MICRO)&&f.default.logAction(f.default.LOG_MICRO,"ConnectionManager.send()","queueing msg; "+o.default.stringify(e)),this.queue(e,n)},n.prototype.sendImpl=function(e){var t=e.message;e.ackRequired&&!e.sendAttempted&&(t.msgSerial=this.msgSerial++);try{this.activeProtocol.send(e)}catch(e){f.default.logAction(f.default.LOG_ERROR,"ConnectionManager.sendImpl()","Unexpected exception in transport.send(): "+e.stack)}},n.prototype.queue=function(e,t){f.default.logAction(f.default.LOG_MICRO,"ConnectionManager.queue()","queueing event");var n=this.queuedMessages.last(),r=this.options.maxMessageSize;n&&!n.sendAttempted&&function(e,t,n){var r;if(e.channel!==t.channel)return!1;if((r=e.action)!==w.PRESENCE&&r!==w.MESSAGE)return!1;if(r!==t.action)return!1;var o=r===w.PRESENCE?"presence":"messages",a=e[o].concat(t[o]);return!(m.default.getMessagesSize(a)>n||!i.allSame(a,"clientId")||!i.arrEvery(a,(function(e){return!e.id}))||(e[o]=a,0))}(n.message,e,r)?(n.merged||(n.callback=y.default.create([n.callback]),n.merged=!0),n.callback.push(t)):this.queuedMessages.push(new a.PendingMessage(e,t))},n.prototype.sendQueuedMessages=function(){var e;for(f.default.logAction(f.default.LOG_MICRO,"ConnectionManager.sendQueuedMessages()","sending "+this.queuedMessages.count()+" queued messages");e=this.queuedMessages.shift();)this.sendImpl(e)},n.prototype.queuePendingMessages=function(e){e&&e.length&&(f.default.logAction(f.default.LOG_MICRO,"ConnectionManager.queuePendingMessages()","queueing "+e.length+" pending messages"),this.queuedMessages.prepend(e))},n.prototype.failQueuedMessages=function(e){var t=this.queuedMessages.count();t>0&&(f.default.logAction(f.default.LOG_ERROR,"ConnectionManager.failQueuedMessages()","failing "+t+" queued messages, err = "+i.inspectError(e)),this.queuedMessages.completeAllMessages(e))},n.prototype.onChannelMessage=function(e,t){var n=this.activeProtocol&&t===this.activeProtocol.getTransport(),r=i.arrIn(this.pendingTransports,t)&&this.state==this.states.synchronizing;n||r||i.arrIndexOf([w.ACK,w.NACK,w.ERROR],e.action)>-1?this.realtime.channels.onChannelMessage(e):f.default.logAction(f.default.LOG_MICRO,"ConnectionManager.onChannelMessage()","received message "+JSON.stringify(e)+"on defunct transport; discarding")},n.prototype.ping=function(e,t){var n=this;if(e){f.default.logAction(f.default.LOG_MINOR,"ConnectionManager.ping()","transport = "+e);var r=i.now(),o=i.cheapRandStr(),a=function(n){if(n===o){e.off("heartbeat",a),clearTimeout(s);var c=i.now()-r;t(null,c)}},s=setTimeout((function(){e.off("heartbeat",a),t(new h.default("Timeout waiting for heartbeat response",5e4,500))}),this.options.timeouts.realtimeRequestTimeout);return e.on("heartbeat",a),void e.ping(o)}if("connected"===this.state.state){var l=!1,u=function(){l||(l=!0,c.default.Config.nextTick((function(){n.ping(null,t)})))};this.on("transport.active",u),this.ping(this.activeProtocol.getTransport(),(function(e,r){n.off("transport.active",u),l||(l=!0,t(e,r))}))}else t(new h.default("Unable to ping service; not connected",4e4,400))},n.prototype.abort=function(e){this.activeProtocol.getTransport().fail(e)},n.prototype.registerProposedTransport=function(e){this.proposedTransports.push(e)},n.prototype.getTransportPreference=function(){var e,t;return this.transportPreference||O()&&(null===(t=null===(e=c.default.WebStorage)||void 0===e?void 0:e.get)||void 0===t?void 0:t.call(e,A))},n.prototype.persistTransportPreference=function(e){var t,n;i.arrIn(s.default.upgradeTransports,e.shortName)&&(this.transportPreference=e.shortName,O()&&(null===(n=null===(t=c.default.WebStorage)||void 0===t?void 0:t.set)||void 0===n||n.call(t,A,e.shortName)))},n.prototype.unpersistTransportPreference=function(){var e,t;this.transportPreference=null,O()&&(null===(t=null===(e=c.default.WebStorage)||void 0===e?void 0:e.remove)||void 0===t||t.call(e,A))},n.prototype.actOnErrorFromAuthorize=function(e){if(40171===e.code)this.notifyState({state:"failed",error:e});else if(40102===e.code)this.notifyState({state:"failed",error:e});else if(e.statusCode===b.default.Forbidden){var t="Client configured authentication provider returned 403; failing the connection";f.default.logAction(f.default.LOG_ERROR,"ConnectionManager.actOnErrorFromAuthorize()",t),this.notifyState({state:"failed",error:new h.default(t,80019,403,e)})}else t="Client configured authentication provider request failed",f.default.logAction(f.default.LOG_MINOR,"ConnectionManager.actOnErrorFromAuthorize",t),this.notifyState({state:this.state.failState,error:new h.default(t,80019,401,e)})},n.prototype.onConnectionDetailsUpdate=function(e,t){if(e){this.connectionDetails=e,e.maxMessageSize&&(this.options.maxMessageSize=e.maxMessageSize);var n=e.clientId;if(n){var r=this.realtime.auth._uncheckedSetClientId(n);if(r)return f.default.logAction(f.default.LOG_ERROR,"ConnectionManager.onConnectionDetailsUpdate()",r.message),void t.fail(r)}var o=e.connectionStateTtl;o&&(this.connectionStateTtl=o),this.maxIdleInterval=e.maxIdleInterval,this.emit("connectiondetails",e)}},n.supportedTransports={},n}(l.default);t.default=M}).call(this,n(13))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=r.__importDefault(n(7)),i=r.__importDefault(n(2)),a=function(e){function t(){var t=e.call(this)||this;return t.messages=[],t}return r.__extends(t,e),t.prototype.count=function(){return this.messages.length},t.prototype.push=function(e){this.messages.push(e)},t.prototype.shift=function(){return this.messages.shift()},t.prototype.last=function(){return this.messages[this.messages.length-1]},t.prototype.copyAll=function(){return this.messages.slice()},t.prototype.append=function(e){this.messages.push.apply(this.messages,e)},t.prototype.prepend=function(e){this.messages.unshift.apply(this.messages,e)},t.prototype.completeMessages=function(e,t,n){i.default.logAction(i.default.LOG_MICRO,"MessageQueue.completeMessages()","serial = "+e+"; count = "+t),n=n||null;var r=this.messages;if(0===r.length)throw new Error("MessageQueue.completeMessages(): completeMessages called on any empty MessageQueue");var o=r[0];if(o){var a=o.message.msgSerial,s=e+t;if(s>a)for(var c=0,l=r.splice(0,s-a);c<l.length;c++)l[c].callback(n);0==r.length&&this.emit("idle")}},t.prototype.completeAllMessages=function(e){this.completeMessages(0,Number.MAX_SAFE_INTEGER||Number.MAX_VALUE,e)},t.prototype.resetSendAttempted=function(){for(var e=0,t=this.messages;e<t.length;e++)t[e].sendAttempted=!1},t.prototype.clear=function(){i.default.logAction(i.default.LOG_MICRO,"MessageQueue.clear()","clearing "+this.messages.length+" messages"),this.messages=[],this.emit("idle")},t}(o.default);t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e,t,n,r){this.previous=e,this.current=t,n&&(this.retryIn=n),r&&(this.reason=r)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=r.__importDefault(n(10)),i=r.__importDefault(n(7)),a=r.__importStar(n(1)),s=r.__importDefault(n(33)),c=r.__importDefault(n(2)),l=r.__importDefault(n(54)),u=r.__importDefault(n(9)),f=r.__importDefault(n(39)),d=r.__importStar(n(4)),p=r.__importDefault(n(15)),h=r.__importDefault(n(20)),g=o.default.Action,m=function(){},y=function(e){function t(t,n,r){var o=e.call(this,t,n,r)||this;return o.retryCount=0,o.history=function(e,t){if(c.default.logAction(c.default.LOG_MICRO,"RealtimeChannel.history()","channel = "+this.name),void 0===t)if("function"==typeof e)t=e,e=null;else{if(this.rest.options.promises)return a.promisify(this,"history",arguments);t=m}if(e&&e.untilAttach){if("attached"!==this.state)return void t(new d.default("option untilAttach requires the channel to be attached",4e4,400));if(!this.properties.attachSerial)return void t(new d.default("untilAttach was specified and channel is attached, but attachSerial is not defined",4e4,400));delete e.untilAttach,e.from_serial=this.properties.attachSerial}s.default.prototype._history.call(this,e,t)},o.whenState=function(e,t){return i.default.prototype.whenState.call(o,e,o.state,t)},c.default.logAction(c.default.LOG_MINOR,"RealtimeChannel()","started; name = "+n),o.realtime=t,o.presence=new l.default(o),o.connectionManager=t.connection.connectionManager,o.state="initialized",o.subscriptions=new i.default,o.syncChannelSerial=void 0,o.properties={attachSerial:void 0,channelSerial:void 0},o.setOptions(r),o.errorReason=null,o._requestedFlags=null,o._mode=null,o._attachResume=!1,o._decodingContext={channelOptions:o.channelOptions,plugins:t.options.plugins||{},baseEncodedPreviousPayload:void 0},o._lastPayload={messageId:null,protocolMessageChannelSerial:null,decodeFailureRecoveryInProgress:null},o._allChannelChanges=new i.default,o}return r.__extends(t,e),t.prototype.invalidStateError=function(){return new d.default("Channel operation failed as channel state is "+this.state,90001,400,this.errorReason||void 0)},t.processListenerArgs=function(e){return"function"==typeof(e=Array.prototype.slice.call(e))[0]&&e.unshift(null),null==e[e.length-1]&&e.pop(),e},t.prototype.setOptions=function(e,t){if(!t&&this.rest.options.promises)return a.promisify(this,"setOptions",arguments);var n=t||function(e){e&&c.default.logAction(c.default.LOG_ERROR,"RealtimeChannel.setOptions()","Set options failed: "+e.toString())},r=function(e){if(e&&"params"in e&&!a.isObject(e.params))return new d.default("options.params must be an object",4e4,400);if(e&&"modes"in e){if(!a.isArray(e.modes))return new d.default("options.modes must be an array",4e4,400);for(var t=0;t<e.modes.length;t++){var n=e.modes[t];if(!n||"string"!=typeof n||!a.arrIn(o.default.channelModes,String.prototype.toUpperCase.call(n)))return new d.default("Invalid channel mode: "+n,4e4,400)}}}(e);r?n(r):(s.default.prototype.setOptions.call(this,e),this._decodingContext&&(this._decodingContext.channelOptions=this.channelOptions),this._shouldReattachToSetOptions(e)?(this.attachImpl(),this._allChannelChanges.once(["attached","update","detached","failed"],(function(e){switch(this.event){case"update":case"attached":return void(null==n||n(null));default:return void(null==n||n(e.reason))}}))):n())},t.prototype._shouldReattachToSetOptions=function(e){return("attached"===this.state||"attaching"===this.state)&&((null==e?void 0:e.params)||(null==e?void 0:e.modes))},t.prototype.publish=function(){for(var e=this,t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=t[0],o=t.length,i=t[o-1];if("function"!=typeof i){if(this.realtime.options.promises)return a.promisify(this,"publish",arguments);i=m,++o}if(this.connectionManager.activeState()){if(2==o)if(a.isObject(r))r=[u.default.fromValues(r)];else{if(!a.isArray(r))throw new d.default("The single-argument form of publish() expects a message object or an array of message objects",40013,400);r=u.default.fromValuesArray(r)}else r=[u.default.fromValues({name:t[0],data:t[1]})];var s=this.realtime.options.maxMessageSize;u.default.encodeArray(r,this.channelOptions,(function(t){if(t)i(t);else{var n=u.default.getMessagesSize(r);n>s?i(new d.default("Maximum size of messages that can be published at once exceeded ( was "+n+" bytes; limit is "+s+" bytes)",40009,400)):e.__publish(r,i)}}))}else i(this.connectionManager.getError())},t.prototype.__publish=function(e,t){c.default.logAction(c.default.LOG_MICRO,"RealtimeChannel.publish()","message count = "+e.length);var n=this.state;switch(n){case"failed":case"suspended":t(d.default.fromValues(this.invalidStateError()));break;default:c.default.logAction(c.default.LOG_MICRO,"RealtimeChannel.publish()","sending message; channel state is "+n);var r=new o.default;r.action=g.MESSAGE,r.channel=this.name,r.messages=e,this.sendMessage(r,t)}},t.prototype.onEvent=function(e){c.default.logAction(c.default.LOG_MICRO,"RealtimeChannel.onEvent()","received message");for(var t=this.subscriptions,n=0;n<e.length;n++){var r=e[n];t.emit(r.name,r)}},t.prototype.attach=function(e,t){var n;if("function"==typeof e?(t=e,n=null):n=e,!t){if(this.realtime.options.promises)return a.promisify(this,"attach",arguments);t=function(e){e&&c.default.logAction(c.default.LOG_MAJOR,"RealtimeChannel.attach()","Channel attach failed: "+e.toString())}}if(n)c.default.deprecated("channel.attach() with flags","channel.setOptions() with channelOptions.params"),this._requestedFlags=n;else if("attached"===this.state)return void t(null,null);this._attach(!1,null,t)},t.prototype._attach=function(e,t,n){n||(n=function(e){e&&c.default.logAction(c.default.LOG_ERROR,"RealtimeChannel._attach()","Channel attach failed: "+e.toString())});var r=this.connectionManager;r.activeState()?(("attaching"!==this.state||e)&&this.requestState("attaching",t),this.once((function(e){switch(this.event){case"attached":null==n||n(null,e);break;case"detached":case"suspended":case"failed":null==n||n(e.reason||r.getError()||new d.default("Unable to attach; reason unknown; state = "+this.event,9e4,500));break;case"detaching":null==n||n(new d.default("Attach request superseded by a subsequent detach request",9e4,409))}}))):n(r.getError())},t.prototype.attachImpl=function(){c.default.logAction(c.default.LOG_MICRO,"RealtimeChannel.attachImpl()","sending ATTACH message");var e=o.default.fromValues({action:g.ATTACH,channel:this.name,params:this.channelOptions.params,channelSerial:this.properties.channelSerial});this._requestedFlags?e.encodeModesToFlags(this._requestedFlags):this.channelOptions.modes&&e.encodeModesToFlags(a.allToUpperCase(this.channelOptions.modes)),this._attachResume&&e.setFlag("ATTACH_RESUME"),this._lastPayload.decodeFailureRecoveryInProgress&&(e.channelSerial=this._lastPayload.protocolMessageChannelSerial),this.sendMessage(e,m)},t.prototype.detach=function(e){if(!e){if(this.realtime.options.promises)return a.promisify(this,"detach",arguments);e=m}var t=this.connectionManager;if(t.activeState())switch(this.state){case"suspended":this.notifyState("detached"),e();break;case"detached":e();break;case"failed":e(new d.default("Unable to detach; channel state = failed",90001,400));break;default:this.requestState("detaching");case"detaching":this.once((function(n){switch(this.event){case"detached":e();break;case"attached":case"suspended":case"failed":e(n.reason||t.getError()||new d.default("Unable to detach; reason unknown; state = "+this.event,9e4,500));break;case"attaching":e(new d.default("Detach request superseded by a subsequent attach request",9e4,409))}}))}else e(t.getError())},t.prototype.detachImpl=function(e){c.default.logAction(c.default.LOG_MICRO,"RealtimeChannel.detach()","sending DETACH message");var t=o.default.fromValues({action:g.DETACH,channel:this.name});this.sendMessage(t,e||m)},t.prototype.subscribe=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];var r=t.processListenerArgs(e),o=r[0],i=r[1],s=r[2];return!s&&this.realtime.options.promises?a.promisify(this,"subscribe",[o,i]):"failed"!==this.state?(o&&"object"==typeof o&&!Array.isArray(o)?this._subscribeFilter(o,i):this.subscriptions.on(o,i),this.attach(s||m)):void(null==s||s(d.default.fromValues(this.invalidStateError())))},t.prototype._subscribeFilter=function(e,t){var n=function(n){var r,o,i,a,s,c,l={name:n.name,refTimeserial:null===(o=null===(r=n.extras)||void 0===r?void 0:r.ref)||void 0===o?void 0:o.timeserial,refType:null===(a=null===(i=n.extras)||void 0===i?void 0:i.ref)||void 0===a?void 0:a.type,isRef:!!(null===(c=null===(s=n.extras)||void 0===s?void 0:s.ref)||void 0===c?void 0:c.timeserial),clientId:n.clientId};Object.entries(e).find((function(e){var t=e[0],n=e[1];return void 0!==n&&l[t]!==n}))||t(n)};this._addFilteredSubscription(e,t,n),this.subscriptions.on(n)},t.prototype._addFilteredSubscription=function(e,t,n){var r;if(this.filteredSubscriptions||(this.filteredSubscriptions=new Map),this.filteredSubscriptions.has(t)){var o=this.filteredSubscriptions.get(t);o.set(e,(null===(r=null==o?void 0:o.get(e))||void 0===r?void 0:r.concat(n))||[n])}else this.filteredSubscriptions.set(t,new Map([[e,[n]]]))},t.prototype._getAndDeleteFilteredSubscriptions=function(e,t){var n=this;if(!this.filteredSubscriptions)return[];if(!t&&e)return Array.from(this.filteredSubscriptions.entries()).map((function(t){var r,o=t[0],i=t[1],a=i.get(e);return i.delete(e),0===i.size&&(null===(r=n.filteredSubscriptions)||void 0===r||r.delete(o)),a})).reduce((function(e,t){var n;return t?(n=e).concat.apply(n,t):e}),[]);if(!t||!this.filteredSubscriptions.has(t))return[];var r=this.filteredSubscriptions.get(t);if(!e){var o=Array.from(r.values()).reduce((function(e,t){return e.concat.apply(e,t)}),[]);return this.filteredSubscriptions.delete(t),o}var i=r.get(e);return r.delete(e),i||[]},t.prototype.unsubscribe=function(){for(var e,n=this,r=[],o=0;o<arguments.length;o++)r[o]=arguments[o];var i=t.processListenerArgs(r),a=i[0],s=i[1];"object"==typeof a&&!s||(null===(e=this.filteredSubscriptions)||void 0===e?void 0:e.has(s))?this._getAndDeleteFilteredSubscriptions(a,s).forEach((function(e){return n.subscriptions.off(e)})):this.subscriptions.off(a,s)},t.prototype.sync=function(){switch(this.state){case"initialized":case"detaching":case"detached":throw new d.PartialErrorInfo("Unable to sync to channel; not attached",4e4)}var e=this.connectionManager;if(!e.activeState())throw e.getError();var t=o.default.fromValues({action:g.SYNC,channel:this.name});this.syncChannelSerial&&(t.channelSerial=this.syncChannelSerial),e.send(t)},t.prototype.sendMessage=function(e,t){this.connectionManager.send(e,this.realtime.options.queueMessages,t)},t.prototype.sendPresence=function(e,t){var n=o.default.fromValues({action:g.PRESENCE,channel:this.name,presence:a.isArray(e)?p.default.fromValuesArray(e):[p.default.fromValues(e)]});this.sendMessage(n,t)},t.prototype.onMessage=function(e){e.action!==g.ATTACHED&&e.action!==g.MESSAGE&&e.action!==g.PRESENCE||this.setChannelSerial(e.channelSerial);var t,n=!1;switch(e.action){case g.ATTACHED:this.properties.attachSerial=e.channelSerial,this._mode=e.getMode(),this.params=e.params||{};var r=e.decodeModesFromFlags();this.modes=r&&a.allToLowerCase(r)||void 0;var o=e.hasFlag("RESUMED"),i=e.hasFlag("HAS_PRESENCE"),s=e.hasFlag("HAS_BACKLOG");if("attached"===this.state){o||this.presence.onAttached(i);var l=new f.default(this.state,this.state,o,s,e.error);this._allChannelChanges.emit("update",l),o&&!this.channelOptions.updateOnAttached||this.emit("update",l)}else"detaching"===this.state?this.checkPendingState():this.notifyState("attached",e.error,o,i,s);break;case g.DETACHED:var m=e.error?d.default.fromValues(e.error):new d.default("Channel detached",90001,404);"detaching"===this.state?this.notifyState("detached",m):"attaching"===this.state?this.notifyState("suspended",m):this.requestState("attaching",m);break;case g.SYNC:if(n=!0,t=this.syncChannelSerial=e.channelSerial,!e.presence)break;case g.PRESENCE:for(var y=e.presence,v=e.id,_=e.connectionId,b=e.timestamp,O=this.channelOptions,C=void 0,w=0;w<y.length;w++)try{C=y[w],p.default.decode(C,O),C.connectionId||(C.connectionId=_),C.timestamp||(C.timestamp=b),C.id||(C.id=v+":"+w)}catch(e){c.default.logAction(c.default.LOG_ERROR,"RealtimeChannel.onMessage()",e.toString())}this.presence.setPresence(y,n,t);break;case g.MESSAGE:if("attached"!==this.state)return void c.default.logAction(c.default.LOG_MAJOR,"RealtimeChannel.onMessage()",'Message "'+e.id+'" skipped as this channel "'+this.name+'" state is not "attached" (state is "'+this.state+'").');var R=e.messages,A=R[0],S=R[R.length-1];if(v=e.id,_=e.connectionId,b=e.timestamp,A.extras&&A.extras.delta&&A.extras.delta.from!==this._lastPayload.messageId){var k='Delta message decode failure - previous message not available for message "'+e.id+'" on this channel "'+this.name+'".';c.default.logAction(c.default.LOG_ERROR,"RealtimeChannel.onMessage()",k),this._startDecodeFailureRecovery(new d.default(k,40018,400));break}for(w=0;w<R.length;w++){k=R[w];try{u.default.decode(k,this._decodingContext)}catch(e){switch(c.default.logAction(c.default.LOG_ERROR,"RealtimeChannel.onMessage()",e.toString()),e.code){case 40018:return void this._startDecodeFailureRecovery(e);case 40019:case 40021:return void this.notifyState("failed",e)}}k.connectionId||(k.connectionId=_),k.timestamp||(k.timestamp=b),k.id||(k.id=v+":"+w)}this._lastPayload.messageId=S.id,this._lastPayload.protocolMessageChannelSerial=e.channelSerial,this.onEvent(R);break;case g.ERROR:var T=e.error;T&&80016==T.code?this.checkPendingState():this.notifyState("failed",d.default.fromValues(T));break;default:c.default.logAction(c.default.LOG_ERROR,"RealtimeChannel.onMessage()","Fatal protocol error: unrecognised action ("+e.action+")"),this.connectionManager.abort(h.default.unknownChannelErr())}},t.prototype._startDecodeFailureRecovery=function(e){var t=this;this._lastPayload.decodeFailureRecoveryInProgress||(c.default.logAction(c.default.LOG_MAJOR,"RealtimeChannel.onMessage()","Starting decode failure recovery process."),this._lastPayload.decodeFailureRecoveryInProgress=!0,this._attach(!0,e,(function(){t._lastPayload.decodeFailureRecoveryInProgress=!1})))},t.prototype.onAttached=function(){c.default.logAction(c.default.LOG_MINOR,"RealtimeChannel.onAttached","activating channel; name = "+this.name)},t.prototype.notifyState=function(e,t,n,r,o){if(c.default.logAction(c.default.LOG_MICRO,"RealtimeChannel.notifyState","name = "+this.name+", current state = "+this.state+", notifying state "+e),this.clearStateTimer(),a.arrIn(["detached","suspended","failed"],e)&&(this.properties.channelSerial=null),e!==this.state){this.presence.actOnChannelState(e,r,t),"suspended"===e&&this.connectionManager.state.sendEvents?this.startRetryTimer():this.cancelRetryTimer(),t&&(this.errorReason=t);var i=new f.default(this.state,e,n,o,t),s="failed"===e?c.default.LOG_ERROR:c.default.LOG_MAJOR;c.default.logAction(s,'Channel state for channel "'+this.name+'"',e+(t?"; reason: "+t:"")),"attaching"!==e&&"suspended"!==e&&(this.retryCount=0),"attached"===e&&this.onAttached(),"attached"===e?this._attachResume=!0:"detaching"!==e&&"failed"!==e||(this._attachResume=!1),this.state=e,this._allChannelChanges.emit(e,i),this.emit(e,i)}},t.prototype.requestState=function(e,t){c.default.logAction(c.default.LOG_MINOR,"RealtimeChannel.requestState","name = "+this.name+", state = "+e),this.notifyState(e,t),this.checkPendingState()},t.prototype.checkPendingState=function(){var e=this.connectionManager.state;if(e.sendEvents||e.forceQueueEvents)switch(c.default.logAction(c.default.LOG_MINOR,"RealtimeChannel.checkPendingState","name = "+this.name+", state = "+this.state),this.state){case"attaching":this.startStateTimerIfNotRunning(),this.attachImpl();break;case"detaching":this.startStateTimerIfNotRunning(),this.detachImpl();break;case"attached":this.sync()}else c.default.logAction(c.default.LOG_MINOR,"RealtimeChannel.checkPendingState","sendEvents is false; state is "+this.connectionManager.state.state)},t.prototype.timeoutPendingState=function(){switch(this.state){case"attaching":var e=new d.default("Channel attach timed out",90007,408);this.notifyState("suspended",e);break;case"detaching":e=new d.default("Channel detach timed out",90007,408),this.notifyState("attached",e);break;default:this.checkPendingState()}},t.prototype.startStateTimerIfNotRunning=function(){var e=this;this.stateTimer||(this.stateTimer=setTimeout((function(){c.default.logAction(c.default.LOG_MINOR,"RealtimeChannel.startStateTimerIfNotRunning","timer expired"),e.stateTimer=null,e.timeoutPendingState()}),this.realtime.options.timeouts.realtimeRequestTimeout))},t.prototype.clearStateTimer=function(){var e=this.stateTimer;e&&(clearTimeout(e),this.stateTimer=null)},t.prototype.startRetryTimer=function(){var e=this;if(!this.retryTimer){this.retryCount++;var t=a.getRetryTime(this.realtime.options.timeouts.channelRetryTimeout,this.retryCount);this.retryTimer=setTimeout((function(){"suspended"===e.state&&e.connectionManager.state.sendEvents&&(e.retryTimer=null,c.default.logAction(c.default.LOG_MINOR,"RealtimeChannel retry timer expired","attempting a new attach"),e.requestState("attaching"))}),t)}},t.prototype.cancelRetryTimer=function(){this.retryTimer&&(clearTimeout(this.retryTimer),this.retryTimer=null)},t.prototype.getReleaseErr=function(){var e=this.state;return"initialized"===e||"detached"===e||"failed"===e?null:new d.default("Can only release a channel in a state where there is no possibility of further updates from the server being received (initialized, detached, or failed); was "+e,90001,400)},t.prototype.setChannelSerial=function(e){c.default.logAction(c.default.LOG_MICRO,"RealtimeChannel.setChannelSerial()","Updating channel serial; serial = "+e+"; previous = "+this.properties.channelSerial),e&&(this.properties.channelSerial=e)},t}(s.default);t.default=y},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e,t,n,r,o){this.previous=e,this.current=t,"attached"===t&&(this.resumed=n,this.hasBacklog=r),o&&(this.reason=o)}},function(e,t,n){var r,o,i,a,s,c,l,u;e.exports=(o=(r=u=n(6)).lib,i=o.WordArray,a=o.Hasher,s=r.algo,c=[],l=s.SHA1=a.extend({_doReset:function(){this._hash=new i.init([1732584193,4023233417,2562383102,271733878,3285377520])},_doProcessBlock:function(e,t){for(var n=this._hash.words,r=n[0],o=n[1],i=n[2],a=n[3],s=n[4],l=0;l<80;l++){if(l<16)c[l]=0|e[t+l];else{var u=c[l-3]^c[l-8]^c[l-14]^c[l-16];c[l]=u<<1|u>>>31}var f=(r<<5|r>>>27)+s+c[l];f+=l<20?1518500249+(o&i|~o&a):l<40?1859775393+(o^i^a):l<60?(o&i|o&a|i&a)-1894007588:(o^i^a)-899497514,s=a,a=i,i=o<<30|o>>>2,o=r,r=f}n[0]=n[0]+r|0,n[1]=n[1]+o|0,n[2]=n[2]+i|0,n[3]=n[3]+a|0,n[4]=n[4]+s|0},_doFinalize:function(){var e=this._data,t=e.words,n=8*this._nDataBytes,r=8*e.sigBytes;return t[r>>>5]|=128<<24-r%32,t[14+(r+64>>>9<<4)]=Math.floor(n/4294967296),t[15+(r+64>>>9<<4)]=n,e.sigBytes=4*t.length,this._process(),this._hash},clone:function(){var e=a.clone.call(this);return e._hash=this._hash.clone(),e}}),r.SHA1=a._createHelper(l),r.HmacSHA1=a._createHmacHelper(l),u.SHA1)},function(e,t,n){"use strict";function r(e,t,n){for(var r=0,o=n.length;r<o;r++){var i=n.charCodeAt(r);if(i<128)e.setUint8(t++,i>>>0&127|0);else if(i<2048)e.setUint8(t++,i>>>6&31|192),e.setUint8(t++,i>>>0&63|128);else if(i<65536)e.setUint8(t++,i>>>12&15|224),e.setUint8(t++,i>>>6&63|128),e.setUint8(t++,i>>>0&63|128);else{if(!(i<1114112))throw new Error("bad codepoint "+i);e.setUint8(t++,i>>>18&7|240),e.setUint8(t++,i>>>12&63|128),e.setUint8(t++,i>>>6&63|128),e.setUint8(t++,i>>>0&63|128)}}}function o(e,t,n){for(var r="",o=t,i=t+n;o<i;o++){var a=e.getUint8(o);if(0!=(128&a))if(192!=(224&a))if(224!=(240&a)){if(240!=(248&a))throw new Error("Invalid byte "+a.toString(16));r+=String.fromCharCode((7&a)<<18|(63&e.getUint8(++o))<<12|(63&e.getUint8(++o))<<6|(63&e.getUint8(++o))<<0)}else r+=String.fromCharCode((15&a)<<12|(63&e.getUint8(++o))<<6|(63&e.getUint8(++o))<<0);else r+=String.fromCharCode((15&a)<<6|63&e.getUint8(++o));else r+=String.fromCharCode(a)}return r}function i(e){for(var t=0,n=0,r=e.length;n<r;n++){var o=e.charCodeAt(n);if(o<128)t+=1;else if(o<2048)t+=2;else if(o<65536)t+=3;else{if(!(o<1114112))throw new Error("bad codepoint "+o);t+=4}}return t}Object.defineProperty(t,"__esModule",{value:!0});var a=4294967296,s=1/a,c=function(e,t){var n=this;this.map=function(e){for(var t={},r=0;r<e;r++)t[n.parse()]=n.parse();return t},this.bin=function(e){var t=new ArrayBuffer(e);return new Uint8Array(t).set(new Uint8Array(n.view.buffer,n.offset,e),0),n.offset+=e,t},this.buf=this.bin,this.str=function(e){var t=o(n.view,n.offset,e);return n.offset+=e,t},this.array=function(e){for(var t=new Array(e),r=0;r<e;r++)t[r]=n.parse();return t},this.ext=function(e){return n.offset+=e,{type:n.view.getInt8(n.offset),data:n.buf(e)}},this.parse=function(){var e,t,r=n.view.getUint8(n.offset);if(0==(128&r))return n.offset++,r;if(128==(240&r))return t=15&r,n.offset++,n.map(t);if(144==(240&r))return t=15&r,n.offset++,n.array(t);if(160==(224&r))return t=31&r,n.offset++,n.str(t);if(224==(224&r))return e=n.view.getInt8(n.offset),n.offset++,e;switch(r){case 192:return n.offset++,null;case 193:return void n.offset++;case 194:return n.offset++,!1;case 195:return n.offset++,!0;case 196:return t=n.view.getUint8(n.offset+1),n.offset+=2,n.bin(t);case 197:return t=n.view.getUint16(n.offset+1),n.offset+=3,n.bin(t);case 198:return t=n.view.getUint32(n.offset+1),n.offset+=5,n.bin(t);case 199:return t=n.view.getUint8(n.offset+1),n.offset+=2,n.ext(t);case 200:return t=n.view.getUint16(n.offset+1),n.offset+=3,n.ext(t);case 201:return t=n.view.getUint32(n.offset+1),n.offset+=5,n.ext(t);case 202:return e=n.view.getFloat32(n.offset+1),n.offset+=5,e;case 203:return e=n.view.getFloat64(n.offset+1),n.offset+=9,e;case 204:return e=n.view.getUint8(n.offset+1),n.offset+=2,e;case 205:return e=n.view.getUint16(n.offset+1),n.offset+=3,e;case 206:return e=n.view.getUint32(n.offset+1),n.offset+=5,e;case 207:return e=function(e,t){return t=t||0,e.getUint32(t)*a+e.getUint32(t+4)}(n.view,n.offset+1),n.offset+=9,e;case 208:return e=n.view.getInt8(n.offset+1),n.offset+=2,e;case 209:return e=n.view.getInt16(n.offset+1),n.offset+=3,e;case 210:return e=n.view.getInt32(n.offset+1),n.offset+=5,e;case 211:return e=function(e,t){return t=t||0,e.getInt32(t)*a+e.getUint32(t+4)}(n.view,n.offset+1),n.offset+=9,e;case 212:return t=1,n.offset++,n.ext(t);case 213:return t=2,n.offset++,n.ext(t);case 214:return t=4,n.offset++,n.ext(t);case 215:return t=8,n.offset++,n.ext(t);case 216:return t=16,n.offset++,n.ext(t);case 217:return t=n.view.getUint8(n.offset+1),n.offset+=2,n.str(t);case 218:return t=n.view.getUint16(n.offset+1),n.offset+=3,n.str(t);case 219:return t=n.view.getUint32(n.offset+1),n.offset+=5,n.str(t);case 220:return t=n.view.getUint16(n.offset+1),n.offset+=3,n.array(t);case 221:return t=n.view.getUint32(n.offset+1),n.offset+=5,n.array(t);case 222:return t=n.view.getUint16(n.offset+1),n.offset+=3,n.map(t);case 223:return t=n.view.getUint32(n.offset+1),n.offset+=5,n.map(t)}throw new Error("Unknown type 0x"+r.toString(16))},this.offset=t||0,this.view=e};function l(e,t){return Object.keys(e).filter((function(n){var r=e[n];return!(t&&null==r||"function"==typeof r&&!r.toJSON)}))}function u(e,t,n,o){var a=typeof e;if("string"==typeof e){var c=i(e);if(c<32)return t.setUint8(n,160|c),r(t,n+1,e),1+c;if(c<256)return t.setUint8(n,217),t.setUint8(n+1,c),r(t,n+2,e),2+c;if(c<65536)return t.setUint8(n,218),t.setUint16(n+1,c),r(t,n+3,e),3+c;if(c<4294967296)return t.setUint8(n,219),t.setUint32(n+1,c),r(t,n+5,e),5+c}if(ArrayBuffer.isView&&ArrayBuffer.isView(e)&&(e=e.buffer),e instanceof ArrayBuffer){var f=e.byteLength;if(f<256)return t.setUint8(n,196),t.setUint8(n+1,f),new Uint8Array(t.buffer).set(new Uint8Array(e),n+2),2+f;if(f<65536)return t.setUint8(n,197),t.setUint16(n+1,f),new Uint8Array(t.buffer).set(new Uint8Array(e),n+3),3+f;if(f<4294967296)return t.setUint8(n,198),t.setUint32(n+1,f),new Uint8Array(t.buffer).set(new Uint8Array(e),n+5),5+f}if("number"==typeof e){if(Math.floor(e)!==e)return t.setUint8(n,203),t.setFloat64(n+1,e),9;if(e>=0){if(e<128)return t.setUint8(n,e),1;if(e<256)return t.setUint8(n,204),t.setUint8(n+1,e),2;if(e<65536)return t.setUint8(n,205),t.setUint16(n+1,e),3;if(e<4294967296)return t.setUint8(n,206),t.setUint32(n+1,e),5;if(e<0x10000000000000000)return t.setUint8(n,207),function(e,t,n){n<0x10000000000000000?(e.setUint32(t,Math.floor(n*s)),e.setInt32(t+4,-1&n)):(e.setUint32(t,4294967295),e.setUint32(t+4,4294967295))}(t,n+1,e),9;throw new Error("Number too big 0x"+e.toString(16))}if(e>=-32)return t.setInt8(n,e),1;if(e>=-128)return t.setUint8(n,208),t.setInt8(n+1,e),2;if(e>=-32768)return t.setUint8(n,209),t.setInt16(n+1,e),3;if(e>=-2147483648)return t.setUint8(n,210),t.setInt32(n+1,e),5;if(e>=-0x8000000000000000)return t.setUint8(n,211),function(e,t,n){n<0x8000000000000000?(e.setInt32(t,Math.floor(n*s)),e.setInt32(t+4,-1&n)):(e.setUint32(t,2147483647),e.setUint32(t+4,2147483647))}(t,n+1,e),9;throw new Error("Number too small -0x"+(-e).toString(16).substr(1))}if("undefined"===a)return o?0:(t.setUint8(n,212),t.setUint8(n+1,0),t.setUint8(n+2,0),3);if(null===e)return o?0:(t.setUint8(n,192),1);if("boolean"===a)return t.setUint8(n,e?195:194),1;if("function"==typeof e.toJSON)return u(e.toJSON(),t,n,o);if("object"===a){var d,p=0,h=void 0,g=Array.isArray(e);if((d=g?e.length:(h=l(e,o)).length)<16?(t.setUint8(n,d|(g?144:128)),p=1):d<65536?(t.setUint8(n,g?220:222),t.setUint16(n+1,d),p=3):d<4294967296&&(t.setUint8(n,g?221:223),t.setUint32(n+1,d),p=5),g)for(var m=0;m<d;m++)p+=u(e[m],t,n+p,o);else if(h)for(m=0;m<d;m++){var y=h[m];p+=u(y,t,n+p),p+=u(e[y],t,n+p,o)}return p}if("function"===a)return 0;throw new Error("Unknown type "+a)}function f(e,t){var n=typeof e;if("string"===n){var r=i(e);if(r<32)return 1+r;if(r<256)return 2+r;if(r<65536)return 3+r;if(r<4294967296)return 5+r}if(ArrayBuffer.isView&&ArrayBuffer.isView(e)&&(e=e.buffer),e instanceof ArrayBuffer){var o=e.byteLength;if(o<256)return 2+o;if(o<65536)return 3+o;if(o<4294967296)return 5+o}if("number"==typeof e){if(Math.floor(e)!==e)return 9;if(e>=0){if(e<128)return 1;if(e<256)return 2;if(e<65536)return 3;if(e<4294967296)return 5;if(e<0x10000000000000000)return 9;throw new Error("Number too big 0x"+e.toString(16))}if(e>=-32)return 1;if(e>=-128)return 2;if(e>=-32768)return 3;if(e>=-2147483648)return 5;if(e>=-0x8000000000000000)return 9;throw new Error("Number too small -0x"+e.toString(16).substr(1))}if("boolean"===n)return 1;if(null===e)return t?0:1;if(void 0===e)return t?0:3;if("function"==typeof e.toJSON)return f(e.toJSON(),t);if("object"===n){var a,s=0;if(Array.isArray(e)){a=e.length;for(var c=0;c<a;c++)s+=f(e[c],t)}else{var u=l(e,t);for(a=u.length,c=0;c<a;c++){var d=u[c];s+=f(d)+f(e[d],t)}}if(a<16)return 1+s;if(a<65536)return 3+s;if(a<4294967296)return 5+s;throw new Error("Array or object too long 0x"+a.toString(16))}if("function"===n)return 0;throw new Error("Unknown type "+n)}t.default={encode:function(e,t){var n=f(e,t);if(0!==n){var r=new ArrayBuffer(n);return u(e,new DataView(r),0,t),r}},decode:function(e){var t=new DataView(e),n=new c(t),r=n.parse();if(n.offset!==e.byteLength)throw new Error(e.byteLength-n.offset+" trailing bytes");return r},inspect:function(e){if(void 0===e)return"undefined";var t,n;if(e instanceof ArrayBuffer?(n="ArrayBuffer",t=new DataView(e)):e instanceof DataView&&(n="DataView",t=e),!t)return JSON.stringify(e);for(var r=[],o=0;o<e.byteLength;o++){if(o>20){r.push("...");break}var i=t.getUint8(o).toString(16);1===i.length&&(i="0"+i),r.push(i)}return"<"+n+" "+r.join(" ")+">"},utf8Write:r,utf8Read:o,utf8ByteCount:i}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=r.__importDefault(n(30)),i=r.__importDefault(n(50)),a=r.__importDefault(n(3)),s=r.__importDefault(n(55)),c=r.__importDefault(n(57)),l=r.__importDefault(n(62)),u=r.__importDefault(n(64)),f=r.__importDefault(n(68)),d=r.__importDefault(n(2)),p=n(8),h=r.__importDefault(n(65)),g=r.__importDefault(n(66)),m=r.__importDefault(n(41)),y=(0,c.default)(u.default,s.default);a.default.Crypto=y,a.default.BufferUtils=s.default,a.default.Http=l.default,a.default.Config=u.default,a.default.Transports=f.default,a.default.WebStorage=h.default,o.default.Crypto=y,i.default.Crypto=y,d.default.initLogHandlers(),a.default.Defaults=(0,p.getDefaults)(g.default),a.default.Config.agent&&(a.default.Defaults.agent+=" "+a.default.Config.agent),a.default.Config.noUpgrade&&(a.default.Defaults.upgradeTransports=[]),t.default={Rest:o.default,Realtime:i.default,msgpack:m.default}},function(e){e.exports=JSON.parse('{"name":"ably","description":"Realtime client library for Ably, the realtime messaging service","version":"1.2.43","license":"Apache-2.0","bugs":{"url":"https://github.com/ably/ably-js/issues","email":"support@ably.com"},"main":"./build/ably-node.js","typings":"./ably.d.ts","react-native":{"./build/ably-node.js":"./build/ably-reactnative.js"},"browser":{"./build/ably-node.js":"./build/ably-commonjs.js"},"files":["build/**","ably.d.ts","callbacks.d.ts","callbacks.js","promises.d.ts","promises.js","resources/**"],"dependencies":{"@ably/msgpack-js":"^0.4.0","got":"^11.8.5","ws":"^5.1"},"devDependencies":{"@ably/vcdiff-decoder":"1.0.4","@types/crypto-js":"^4.0.1","@types/node":"^15.0.0","@types/request":"^2.48.7","@types/ws":"^8.2.0","@typescript-eslint/eslint-plugin":"^5.14.0","@typescript-eslint/parser":"^5.14.0","async":"ably-forks/async#requirejs","aws-sdk":"^2.1413.0","chai":"^4.2.0","copy-webpack-plugin":"^6.4.1","cors":"^2.8.5","crypto-js":"ably-forks/crypto-js#crypto-lite","eslint":"^7.13.0","eslint-plugin-jsdoc":"^40.0.0","eslint-plugin-security":"^1.4.0","express":"^4.17.1","glob":"~4.4","google-closure-compiler":"^20180610.0.1","grunt":"^1.6.1","grunt-bump":"^0.3.1","grunt-cli":"~1.2.0","grunt-closure-tools":"^1.0.0","grunt-contrib-concat":"~0.5","grunt-shell":"~1.1","grunt-webpack":"^4.0.2","hexy":"~0.2","kexec":"ably-forks/node-kexec#update-for-node-12","minimist":"^1.2.5","mocha":"^8.1.3","null-loader":"^4.0.1","playwright":"^1.10.0","prettier":"^2.5.1","requirejs":"~2.1","shelljs":"~0.8","source-map-explorer":"^2.5.2","ts-loader":"^8.2.0","tsconfig-paths-webpack-plugin":"^4.0.1","tslib":"^2.3.1","typedoc":"^0.23.8","typescript":"^4.6.4","webpack":"^4.44.2","webpack-cli":"^4.2.0"},"engines":{"node":">=5.10.x"},"repository":"ably/ably-js","jspm":{"registry":"npm","directories":{"lib":"build"},"main":"ably"},"scripts":{"grunt":"grunt","test":"grunt test","test:node":"grunt test:node","test:node:skip-build":"grunt mocha","test:webserver":"grunt test:webserver","test:playwright":"node test/support/runPlaywrightTests.js","concat":"grunt concat","build":"grunt build:all","build:node":"grunt build:node","build:browser":"grunt build:browser","requirejs":"grunt requirejs","lint":"eslint .","lint:fix":"eslint --fix .","check-closure-compiler":"grunt check-closure-compiler","prepare":"npm run build","format":"prettier --write --ignore-path .gitignore --ignore-path .prettierignore src test ably.d.ts webpack.config.js Gruntfile.js scripts/cdn_deploy.js docs/chrome-mv3.md","format:check":"prettier --check --ignore-path .gitignore --ignore-path .prettierignore src test ably.d.ts webpack.config.js Gruntfile.js scripts/cdn_deploy.js","sourcemap":"source-map-explorer build/ably.min.js","sourcemap:noencryption":"source-map-explorer build/ably.noencryption.min.js","docs":"typedoc --entryPoints ably.d.ts --out docs/generated/default --readme docs/landing-pages/default.md && typedoc --entryPoints promises.d.ts --out docs/generated/promises --name \\"ably (Promise-based)\\" --readme docs/landing-pages/promises.md && cp docs/landing-pages/choose-library.html docs/generated/index.html"}}')},function(e,t){},function(e,t,n){var r;e.exports=(r=n(6),n(32),n(24),r.HmacSHA256)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=r.__importStar(n(1)),i=r.__importDefault(n(47)),a=r.__importDefault(n(14)),s=r.__importDefault(n(19)),c=r.__importDefault(n(4)),l=r.__importDefault(n(48)),u=function(){},f=function(){function e(e){this.rest=e,this.deviceRegistrations=new d(e),this.channelSubscriptions=new p(e)}return e.prototype.publish=function(e,t,n){var r=this.rest,i=r.options.useBinaryProtocol?o.Format.msgpack:o.Format.json,s=o.defaultPostHeaders(r.options,i),c={},l=o.mixin({recipient:e},t);if("function"!=typeof n){if(this.rest.options.promises)return o.promisify(this,"publish",arguments);n=u}r.options.headers&&o.mixin(s,r.options.headers),r.options.pushFullWait&&o.mixin(c,{fullWait:"true"});var f=o.encodeBody(l,i);a.default.post(r,"/push/publish",f,s,c,null,(function(e){return n(e)}))},e}(),d=function(){function e(e){this.rest=e}return e.prototype.save=function(e,t){var n=this.rest,r=i.default.fromValues(e),s=n.options.useBinaryProtocol?o.Format.msgpack:o.Format.json,c=o.defaultPostHeaders(n.options,s),l={};if("function"!=typeof t){if(this.rest.options.promises)return o.promisify(this,"save",arguments);t=u}n.options.headers&&o.mixin(c,n.options.headers),n.options.pushFullWait&&o.mixin(l,{fullWait:"true"});var f=o.encodeBody(r,s);a.default.put(n,"/push/deviceRegistrations/"+encodeURIComponent(e.id),f,c,l,null,(function(e,n,r,o){t(e,e?void 0:i.default.fromResponseBody(n,o?void 0:s))}))},e.prototype.get=function(e,t){var n=this.rest,r=n.options.useBinaryProtocol?o.Format.msgpack:o.Format.json,s=o.defaultGetHeaders(n.options,r),l=e.id||e;if("function"!=typeof t){if(this.rest.options.promises)return o.promisify(this,"get",arguments);t=u}"string"==typeof l&&l.length?(n.options.headers&&o.mixin(s,n.options.headers),a.default.get(n,"/push/deviceRegistrations/"+encodeURIComponent(l),s,{},null,(function(e,n,o,a){t(e,e?void 0:i.default.fromResponseBody(n,a?void 0:r))}))):t(new c.default("First argument to DeviceRegistrations#get must be a deviceId string or DeviceDetails",4e4,400))},e.prototype.list=function(e,t){var n=this.rest,r=n.options.useBinaryProtocol?o.Format.msgpack:o.Format.json,a=this.rest.http.supportsLinkHeaders?void 0:r,c=o.defaultGetHeaders(n.options,r);if("function"!=typeof t){if(this.rest.options.promises)return o.promisify(this,"list",arguments);t=u}n.options.headers&&o.mixin(c,n.options.headers),new s.default(n,"/push/deviceRegistrations",c,a,(function(e,t,n){return i.default.fromResponseBody(e,n?void 0:r)})).get(e,t)},e.prototype.remove=function(e,t){var n=this.rest,r=n.options.useBinaryProtocol?o.Format.msgpack:o.Format.json,i=o.defaultGetHeaders(n.options,r),s={},l=e.id||e;if("function"!=typeof t){if(this.rest.options.promises)return o.promisify(this,"remove",arguments);t=u}"string"==typeof l&&l.length?(n.options.headers&&o.mixin(i,n.options.headers),n.options.pushFullWait&&o.mixin(s,{fullWait:"true"}),a.default.delete(n,"/push/deviceRegistrations/"+encodeURIComponent(l),i,s,null,(function(e){return t(e)}))):t(new c.default("First argument to DeviceRegistrations#remove must be a deviceId string or DeviceDetails",4e4,400))},e.prototype.removeWhere=function(e,t){var n=this.rest,r=n.options.useBinaryProtocol?o.Format.msgpack:o.Format.json,i=o.defaultGetHeaders(n.options,r);if("function"!=typeof t){if(this.rest.options.promises)return o.promisify(this,"removeWhere",arguments);t=u}n.options.headers&&o.mixin(i,n.options.headers),n.options.pushFullWait&&o.mixin(e,{fullWait:"true"}),a.default.delete(n,"/push/deviceRegistrations",i,e,null,(function(e){return t(e)}))},e}(),p=function(){function e(t){this.remove=e.prototype.removeWhere,this.rest=t}return e.prototype.save=function(e,t){var n=this.rest,r=l.default.fromValues(e),i=n.options.useBinaryProtocol?o.Format.msgpack:o.Format.json,s=o.defaultPostHeaders(n.options,i),c={};if("function"!=typeof t){if(this.rest.options.promises)return o.promisify(this,"save",arguments);t=u}n.options.headers&&o.mixin(s,n.options.headers),n.options.pushFullWait&&o.mixin(c,{fullWait:"true"});var f=o.encodeBody(r,i);a.default.post(n,"/push/channelSubscriptions",f,s,c,null,(function(e,n,r,o){t(e,!e&&l.default.fromResponseBody(n,o?void 0:i))}))},e.prototype.list=function(e,t){var n=this.rest,r=n.options.useBinaryProtocol?o.Format.msgpack:o.Format.json,i=this.rest.http.supportsLinkHeaders?void 0:r,a=o.defaultGetHeaders(n.options,r);if("function"!=typeof t){if(this.rest.options.promises)return o.promisify(this,"list",arguments);t=u}n.options.headers&&o.mixin(a,n.options.headers),new s.default(n,"/push/channelSubscriptions",a,i,(function(e,t,n){return l.default.fromResponseBody(e,n?void 0:r)})).get(e,t)},e.prototype.removeWhere=function(e,t){var n=this.rest,r=n.options.useBinaryProtocol?o.Format.msgpack:o.Format.json,i=o.defaultGetHeaders(n.options,r);if("function"!=typeof t){if(this.rest.options.promises)return o.promisify(this,"removeWhere",arguments);t=u}n.options.headers&&o.mixin(i,n.options.headers),n.options.pushFullWait&&o.mixin(e,{fullWait:"true"}),a.default.delete(n,"/push/channelSubscriptions",i,e,null,(function(e){return t(e)}))},e.prototype.listChannels=function(e,t){var n=this.rest,r=n.options.useBinaryProtocol?o.Format.msgpack:o.Format.json,i=this.rest.http.supportsLinkHeaders?void 0:r,a=o.defaultGetHeaders(n.options,r);if("function"!=typeof t){if(this.rest.options.promises)return o.promisify(this,"listChannels",arguments);t=u}n.options.headers&&o.mixin(a,n.options.headers),n.options.pushFullWait&&o.mixin(e,{fullWait:"true"}),new s.default(n,"/push/channels",a,i,(function(e,t,n){for(var i=!n&&r?o.decodeBody(e,r):e,a=0;a<i.length;a++)i[a]=String(i[a]);return i})).get(e,t)},e}();t.default=function(e){this.rest=e,this.admin=new f(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o,i=n(0),a=i.__importStar(n(1)),s=i.__importDefault(n(4));!function(e){e.Phone="phone",e.Tablet="tablet",e.Desktop="desktop",e.TV="tv",e.Watch="watch",e.Car="car",e.Embedded="embedded",e.Other="other"}(r||(r={})),function(e){e.Android="android",e.IOS="ios",e.Browser="browser"}(o||(o={}));var c=function(){function e(){}return e.prototype.toJSON=function(){var e,t,n;return{id:this.id,deviceSecret:this.deviceSecret,platform:this.platform,formFactor:this.formFactor,clientId:this.clientId,metadata:this.metadata,deviceIdentityToken:this.deviceIdentityToken,push:{recipient:null===(e=this.push)||void 0===e?void 0:e.recipient,state:null===(t=this.push)||void 0===t?void 0:t.state,error:null===(n=this.push)||void 0===n?void 0:n.error}}},e.prototype.toString=function(){var e,t,n,r,o="[DeviceDetails";return this.id&&(o+="; id="+this.id),this.platform&&(o+="; platform="+this.platform),this.formFactor&&(o+="; formFactor="+this.formFactor),this.clientId&&(o+="; clientId="+this.clientId),this.metadata&&(o+="; metadata="+this.metadata),this.deviceIdentityToken&&(o+="; deviceIdentityToken="+JSON.stringify(this.deviceIdentityToken)),(null===(e=this.push)||void 0===e?void 0:e.recipient)&&(o+="; push.recipient="+JSON.stringify(this.push.recipient)),(null===(t=this.push)||void 0===t?void 0:t.state)&&(o+="; push.state="+this.push.state),(null===(n=this.push)||void 0===n?void 0:n.error)&&(o+="; push.error="+JSON.stringify(this.push.error)),(null===(r=this.push)||void 0===r?void 0:r.metadata)&&(o+="; push.metadata="+this.push.metadata),o+"]"},e.fromResponseBody=function(t,n){return n&&(t=a.decodeBody(t,n)),a.isArray(t)?e.fromValuesArray(t):e.fromValues(t)},e.fromValues=function(t){return t.error=t.error&&s.default.fromValues(t.error),Object.assign(new e,t)},e.fromValuesArray=function(t){for(var n=t.length,r=new Array(n),o=0;o<n;o++)r[o]=e.fromValues(t[o]);return r},e.toRequestBody=a.encodeBody,e}();t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0).__importStar(n(1)),o=function(){function e(){}return e.prototype.toJSON=function(){return{channel:this.channel,deviceId:this.deviceId,clientId:this.clientId}},e.prototype.toString=function(){var e="[PushChannelSubscription";return this.channel&&(e+="; channel="+this.channel),this.deviceId&&(e+="; deviceId="+this.deviceId),this.clientId&&(e+="; clientId="+this.clientId),e+"]"},e.fromResponseBody=function(t,n){return n&&(t=r.decodeBody(t,n)),r.isArray(t)?e.fromValuesArray(t):e.fromValues(t)},e.fromValues=function(t){return Object.assign(new e,t)},e.fromValuesArray=function(t){for(var n=t.length,r=new Array(n),o=0;o<n;o++)r[o]=e.fromValues(t[o]);return r},e.toRequestBody=r.encodeBody,e}();t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=r.__importStar(n(1)),i=function(e){this.count=e&&e.count||0,this.data=e&&e.data||0,this.uncompressedData=e&&e.uncompressedData||0,this.failed=e&&e.failed||0,this.refused=e&&e.refused||0},a=function(e){function t(t){var n=e.call(this,t)||this;return t&&t.category&&(n.category={},o.forInOwnNonNullProperties(t.category,(function(e){n.category[e]=new i(t.category[e])}))),n}return r.__extends(t,e),t}(i),s=function(e){this.peak=e&&e.peak||0,this.min=e&&e.min||0,this.mean=e&&e.mean||0,this.opened=e&&e.opened||0,this.refused=e&&e.refused||0},c=function(e){this.succeeded=e&&e.succeeded||0,this.failed=e&&e.failed||0,this.refused=e&&e.refused||0},l=function(e){this.plain=new s(e&&e.plain),this.tls=new s(e&&e.tls),this.all=new s(e&&e.all)},u=function(e){this.messages=new a(e&&e.messages),this.presence=new a(e&&e.presence),this.all=new a(e&&e.all)},f=function(e){this.realtime=new u(e&&e.realtime),this.rest=new u(e&&e.rest),this.webhook=new u(e&&e.webhook),this.sharedQueue=new u(e&&e.sharedQueue),this.externalQueue=new u(e&&e.externalQueue),this.httpEvent=new u(e&&e.httpEvent),this.push=new u(e&&e.push),this.all=new u(e&&e.all)},d=function(e){this.all=new u(e&&e.all),this.inbound=new f(e&&e.inbound),this.outbound=new f(e&&e.outbound)},p=function(e){this.all=new u(e&&e.all),this.producerPaid=new d(e&&e.producerPaid),this.consumerPaid=new d(e&&e.consumerPaid)},h=function(e){this.messages=e&&e.messages||0;var t=e&&e.notifications;this.notifications={invalid:t&&t.invalid||0,attempted:t&&t.attempted||0,successful:t&&t.successful||0,failed:t&&t.failed||0},this.directPublishes=e&&e.directPublishes||0},g=function(e){this.succeeded=e&&e.succeeded||0,this.skipped=e&&e.skipped||0,this.failed=e&&e.failed||0},m=function(e){var t=this;this.delta=void 0,e&&e.delta&&(this.delta={},o.forInOwnNonNullProperties(e.delta,(function(n){t.delta[n]=new g(e.delta[n])})))},y=function(e){function t(t){var n=e.call(this,t)||this;return n.persisted=new u(t&&t.persisted),n.connections=new l(t&&t.connections),n.channels=new s(t&&t.channels),n.apiRequests=new c(t&&t.apiRequests),n.tokenRequests=new c(t&&t.tokenRequests),n.xchgProducer=new p(t&&t.xchgProducer),n.xchgConsumer=new p(t&&t.xchgConsumer),n.push=new h(t&&t.pushStats),n.processed=new m(t&&t.processed),n.inProgress=t&&t.inProgress||void 0,n.unit=t&&t.unit||void 0,n.intervalId=t&&t.intervalId||void 0,n}return r.__extends(t,e),t.fromValues=function(e){return new t(e)},t}(d);t.default=y},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=r.__importStar(n(1)),i=r.__importDefault(n(30)),a=r.__importDefault(n(7)),s=r.__importDefault(n(2)),c=r.__importDefault(n(51)),l=r.__importDefault(n(38)),u=r.__importDefault(n(8)),f=r.__importDefault(n(4)),d=r.__importDefault(n(10)),p=r.__importDefault(n(35)),h=r.__importDefault(n(3)),g=r.__importDefault(n(9)),m=function(e){function t(t){var n=e.call(this,t)||this;return s.default.logAction(s.default.LOG_MINOR,"Realtime()",""),n.connection=new c.default(n,n.options),n.channels=new y(n),!1!==t.autoConnect&&n.connect(),n}return r.__extends(t,e),t.prototype.connect=function(){s.default.logAction(s.default.LOG_MINOR,"Realtime.connect()",""),this.connection.connect()},t.prototype.close=function(){s.default.logAction(s.default.LOG_MINOR,"Realtime.close()",""),this.connection.close()},t.Promise=function(e){return(e=u.default.objectifyOptions(e)).promises=!0,new t(e)},t.Callbacks=t,t.Utils=o,t.ConnectionManager=p.default,t.Platform=h.default,t.ProtocolMessage=d.default,t.Message=g.default,t}(i.default),y=function(e){function t(t){var n=e.call(this)||this;return n.realtime=t,n.all=Object.create(null),t.connection.connectionManager.on("transport.active",(function(){n.onTransportActive()})),n}return r.__extends(t,e),t.prototype.channelSerials=function(){for(var e={},t=0,n=o.keysArray(this.all,!0);t<n.length;t++){var r=n[t],i=this.all[r];i.properties.channelSerial&&(e[r]=i.properties.channelSerial)}return e},t.prototype.recoverChannels=function(e){for(var t=0,n=o.keysArray(e,!0);t<n.length;t++){var r=n[t];this.get(r).properties.channelSerial=e[r]}},t.prototype.onChannelMessage=function(e){var t=e.channel;if(void 0!==t){var n=this.all[t];n?n.onMessage(e):s.default.logAction(s.default.LOG_ERROR,"Channels.onChannelMessage()","received event for non-existent channel: "+t)}else s.default.logAction(s.default.LOG_ERROR,"Channels.onChannelMessage()","received event unspecified channel, action = "+e.action)},t.prototype.onTransportActive=function(){for(var e in this.all){var t=this.all[e];"attaching"===t.state||"detaching"===t.state?t.checkPendingState():"suspended"===t.state?t._attach(!1,null):"attached"===t.state&&t.requestState("attaching")}},t.prototype.propogateConnectionInterruption=function(e,t){var n=["attaching","attached","detaching","suspended"],r={closing:"detached",closed:"detached",failed:"failed",suspended:"suspended"}[e];for(var i in this.all){var a=this.all[i];o.arrIn(n,a.state)&&a.notifyState(r,t)}},t.prototype.get=function(e,t){e=String(e);var n=this.all[e];if(n){if(t){if(n._shouldReattachToSetOptions(t))throw new f.default("Channels.get() cannot be used to set channel options that would cause the channel to reattach. Please, use RealtimeChannel.setOptions() instead.",4e4,400);n.setOptions(t)}}else n=this.all[e]=new l.default(this.realtime,e,t);return n},t.prototype.getDerived=function(e,t,n){if(t.filter){var r=o.toBase64(t.filter),i=o.matchDerivedChannel(e);e="[filter=".concat(r).concat(i.qualifierParam,"]").concat(i.channelName)}return this.get(e,n)},t.prototype.release=function(e){e=String(e);var t=this.all[e];if(t){var n=t.getReleaseErr();if(n)throw n;delete this.all[e]}},t}(a.default);t.default=m},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=r.__importStar(n(1)),i=r.__importDefault(n(7)),a=r.__importDefault(n(35)),s=r.__importDefault(n(2)),c=r.__importDefault(n(37)),l=r.__importDefault(n(3));function u(){}var f=function(e){function t(t,n){var r=e.call(this)||this;return r.whenState=function(e,t){return i.default.prototype.whenState.call(r,e,r.state,t,new c.default(void 0,e))},r.ably=t,r.connectionManager=new a.default(t,n),r.state=r.connectionManager.state.state,r.key=void 0,r.id=void 0,r.errorReason=null,r.connectionManager.on("connectionstate",(function(e){var t=r.state=e.current;l.default.Config.nextTick((function(){r.emit(t,e)}))})),r.connectionManager.on("update",(function(e){l.default.Config.nextTick((function(){r.emit("update",e)}))})),r}return r.__extends(t,e),t.prototype.connect=function(){s.default.logAction(s.default.LOG_MINOR,"Connection.connect()",""),this.connectionManager.requestState({state:"connecting"})},t.prototype.ping=function(e){if(s.default.logAction(s.default.LOG_MINOR,"Connection.ping()",""),!e){if(this.ably.options.promises)return o.promisify(this,"ping",arguments);e=u}this.connectionManager.ping(null,e)},t.prototype.close=function(){s.default.logAction(s.default.LOG_MINOR,"Connection.close()","connectionKey = "+this.key),this.connectionManager.requestState({state:"closing"})},Object.defineProperty(t.prototype,"recoveryKey",{get:function(){return this.createRecoveryKey()},enumerable:!1,configurable:!0}),t.prototype.createRecoveryKey=function(){return this.connectionManager.createRecoveryKey()},t}(i.default);t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PendingMessage=void 0;var r=n(0),o=r.__importDefault(n(10)),i=r.__importStar(n(1)),a=r.__importDefault(n(7)),s=r.__importDefault(n(2)),c=r.__importDefault(n(36)),l=r.__importDefault(n(4)),u=o.default.Action;t.PendingMessage=function(e,t){this.message=e,this.callback=t,this.merged=!1;var n=e.action;this.sendAttempted=!1,this.ackRequired=n==u.MESSAGE||n==u.PRESENCE};var f=function(e){function t(t){var n=e.call(this)||this;return n.transport=t,n.messageQueue=new c.default,t.on("ack",(function(e,t){n.onAck(e,t)})),t.on("nack",(function(e,t,r){n.onNack(e,t,r)})),n}return r.__extends(t,e),t.prototype.onAck=function(e,t){s.default.logAction(s.default.LOG_MICRO,"Protocol.onAck()","serial = "+e+"; count = "+t),this.messageQueue.completeMessages(e,t)},t.prototype.onNack=function(e,t,n){s.default.logAction(s.default.LOG_ERROR,"Protocol.onNack()","serial = "+e+"; count = "+t+"; err = "+i.inspectError(n)),n||(n=new l.default("Unable to send message; channel not responding",50001,500)),this.messageQueue.completeMessages(e,t,n)},t.prototype.onceIdle=function(e){var t=this.messageQueue;0!==t.count()?t.once("idle",e):e()},t.prototype.send=function(e){e.ackRequired&&this.messageQueue.push(e),s.default.shouldLog(s.default.LOG_MICRO)&&s.default.logAction(s.default.LOG_MICRO,"Protocol.send()","sending msg; "+o.default.stringify(e.message)),e.sendAttempted=!0,this.transport.send(e.message)},t.prototype.getTransport=function(){return this.transport},t.prototype.getPendingMessages=function(){return this.messageQueue.copyAll()},t.prototype.clearPendingMessages=function(){return this.messageQueue.clear()},t.prototype.finish=function(){var e=this.transport;this.onceIdle((function(){e.disconnect()}))},t}(a.default);t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=r.__importDefault(n(3)),i=r.__importStar(n(1)),a=r.__importDefault(n(26)),s=r.__importDefault(n(8)),c=r.__importDefault(n(2)),l=r.__importDefault(n(10)),u=r.__importDefault(n(4)),f="web_socket",d=function(e){function t(t,n,r){var i=e.call(this,t,n,r)||this;return i.shortName=f,r.heartbeats=o.default.Config.useProtocolHeartbeats,i.wsHost=s.default.getHost(r.options,r.host,!0),i}return r.__extends(t,e),t.isAvailable=function(){return!!o.default.Config.WebSocket},t.prototype.createWebSocket=function(e,t){return this.uri=e+i.toQueryString(t),new o.default.Config.WebSocket(this.uri)},t.prototype.toString=function(){return"WebSocketTransport; uri="+this.uri},t.prototype.connect=function(){c.default.logAction(c.default.LOG_MINOR,"WebSocketTransport.connect()","starting"),a.default.prototype.connect.call(this);var e=this,t=this.params,n=t.options,r=(n.tls?"wss://":"ws://")+this.wsHost+":"+s.default.getPort(n)+"/";c.default.logAction(c.default.LOG_MINOR,"WebSocketTransport.connect()","uri: "+r),this.auth.getAuthParams((function(n,i){if(!e.isDisposed){var a="";for(var s in i)a+=" "+s+": "+i[s]+";";if(c.default.logAction(c.default.LOG_MINOR,"WebSocketTransport.connect()","authParams:"+a+" err: "+n),n)e.disconnect(n);else{var l=t.getConnectParams(i);try{var u=e.wsConnection=e.createWebSocket(r,l);u.binaryType=o.default.Config.binaryType,u.onopen=function(){e.onWsOpen()},u.onclose=function(t){e.onWsClose(t)},u.onmessage=function(t){e.onWsData(t.data)},u.onerror=function(t){e.onWsError(t)},u.on&&u.on("ping",(function(){e.onActivity()}))}catch(t){c.default.logAction(c.default.LOG_ERROR,"WebSocketTransport.connect()","Unexpected exception creating websocket: err = "+(t.stack||t.message)),e.disconnect(t)}}}}))},t.prototype.send=function(e){var t=this.wsConnection;if(t)try{t.send(l.default.serialize(e,this.params.format))}catch(e){var n="Exception from ws connection when trying to send: "+i.inspectError(e);c.default.logAction(c.default.LOG_ERROR,"WebSocketTransport.send()",n),this.finish("disconnected",new u.default(n,5e4,500))}else c.default.logAction(c.default.LOG_ERROR,"WebSocketTransport.send()","No socket connection")},t.prototype.onWsData=function(e){c.default.logAction(c.default.LOG_MICRO,"WebSocketTransport.onWsData()","data received; length = "+e.length+"; type = "+typeof e);try{this.onProtocolMessage(l.default.deserialize(e,this.format))}catch(e){c.default.logAction(c.default.LOG_ERROR,"WebSocketTransport.onWsData()","Unexpected exception handing channel message: "+e.stack)}},t.prototype.onWsOpen=function(){c.default.logAction(c.default.LOG_MINOR,"WebSocketTransport.onWsOpen()","opened WebSocket"),this.emit("preconnect")},t.prototype.onWsClose=function(e){var t,n;if("object"==typeof e?(n=e.code,t=e.wasClean||1e3===n):t=1e3==(n=e),delete this.wsConnection,t){c.default.logAction(c.default.LOG_MINOR,"WebSocketTransport.onWsClose()","Cleanly closed WebSocket");var r=new u.default("Websocket closed",80003,400);this.finish("disconnected",r)}else{var o="Unclean disconnection of WebSocket ; code = "+n;r=new u.default(o,80003,400),c.default.logAction(c.default.LOG_MINOR,"WebSocketTransport.onWsClose()",o),this.finish("disconnected",r)}this.emit("disposed")},t.prototype.onWsError=function(e){var t=this;c.default.logAction(c.default.LOG_MINOR,"WebSocketTransport.onError()","Error from WebSocket: "+e.message),o.default.Config.nextTick((function(){t.disconnect(Error(e.message))}))},t.prototype.dispose=function(){c.default.logAction(c.default.LOG_MINOR,"WebSocketTransport.dispose()",""),this.isDisposed=!0;var e=this.wsConnection;e&&(e.onmessage=function(){},delete this.wsConnection,o.default.Config.nextTick((function(){if(c.default.logAction(c.default.LOG_MICRO,"WebSocketTransport.dispose()","closing websocket"),!e)throw new Error("WebSocketTransport.dispose(): wsConnection is not defined");e.close()})))},t}(a.default);t.default=function(e){return d.isAvailable()&&(e.supportedTransports[f]=d),d}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=r.__importStar(n(1)),i=r.__importDefault(n(34)),a=r.__importDefault(n(7)),s=r.__importDefault(n(2)),c=r.__importDefault(n(15)),l=r.__importStar(n(4)),u=r.__importDefault(n(38)),f=r.__importDefault(n(23)),d=r.__importDefault(n(39)),p=function(){};function h(e){var t=e.channel.realtime,n=t.auth.clientId;return(!n||"*"===n)&&"connected"===t.connection.state}function g(e,t){if(e.isSynthesized()||t.isSynthesized())return e.timestamp>=t.timestamp;var n=e.parseId(),r=t.parseId();return n.msgSerial===r.msgSerial?n.index>r.index:n.msgSerial>r.msgSerial}var m=function(e){function t(t){var n=e.call(this,t)||this;return n.channel=t,n.syncComplete=!1,n.members=new y(n,(function(e){return e.clientId+":"+e.connectionId})),n._myMembers=new y(n,(function(e){return e.clientId})),n.subscriptions=new a.default,n.pendingPresence=[],n}return r.__extends(t,e),t.prototype.enter=function(e,t){if(h(this))throw new l.default("clientId must be specified to enter a presence channel",40012,400);return this._enterOrUpdateClient(void 0,void 0,e,"enter",t)},t.prototype.update=function(e,t){if(h(this))throw new l.default("clientId must be specified to update presence data",40012,400);return this._enterOrUpdateClient(void 0,void 0,e,"update",t)},t.prototype.enterClient=function(e,t,n){return this._enterOrUpdateClient(void 0,e,t,"enter",n)},t.prototype.updateClient=function(e,t,n){return this._enterOrUpdateClient(void 0,e,t,"update",n)},t.prototype._enterOrUpdateClient=function(e,t,n,r,i){var a=this;if(!i)if("function"==typeof n)i=n,n=null;else{if(this.channel.realtime.options.promises)return o.promisify(this,"_enterOrUpdateClient",[e,t,n,r]);i=p}var u=this.channel;if(u.connectionManager.activeState()){s.default.logAction(s.default.LOG_MICRO,"RealtimePresence."+r+"Client()","channel = "+u.name+", id = "+e+", client = "+(t||"(implicit) "+this.channel.realtime.auth.clientId));var f=c.default.fromData(n);f.action=r,e&&(f.id=e),t&&(f.clientId=t),c.default.encode(f,u.channelOptions,(function(e){if(e)i(e);else switch(u.state){case"attached":u.sendPresence(f,i);break;case"initialized":case"detached":u.attach();case"attaching":a.pendingPresence.push({presence:f,callback:i});break;default:(e=new l.PartialErrorInfo("Unable to "+r+" presence channel while in "+u.state+" state",90001)).code=90001,i(e)}}))}else i(u.connectionManager.getError())},t.prototype.leave=function(e,t){if(h(this))throw new l.default("clientId must have been specified to enter or leave a presence channel",40012,400);return this.leaveClient(void 0,e,t)},t.prototype.leaveClient=function(e,t,n){if(!n)if("function"==typeof t)n=t,t=null;else{if(this.channel.realtime.options.promises)return o.promisify(this,"leaveClient",[e,t]);n=p}var r=this.channel;if(r.connectionManager.activeState()){s.default.logAction(s.default.LOG_MICRO,"RealtimePresence.leaveClient()","leaving; channel = "+this.channel.name+", client = "+e);var i=c.default.fromValues({action:"leave",data:t});switch(e&&(i.clientId=e),r.state){case"attached":r.sendPresence(i,n);break;case"attaching":this.pendingPresence.push({presence:i,callback:n});break;case"initialized":case"failed":var a=new l.PartialErrorInfo("Unable to leave presence channel (incompatible state)",90001);null==n||n(a);break;default:null==n||n(r.invalidStateError())}}else null==n||n(r.connectionManager.getError())},t.prototype.get=function(e,t){var n=this,r=Array.prototype.slice.call(arguments);1==r.length&&"function"==typeof r[0]&&r.unshift(null),e=r[0],t=r[1];var i=!e||!("waitForSync"in e)||e.waitForSync;if(!t){if(this.channel.realtime.options.promises)return o.promisify(this,"get",r);t=p}function a(n){t(null,e?n.list(e):n.values())}"suspended"!==this.channel.state?function(e,t,n){switch(e.state){case"attached":case"suspended":n();break;case"initialized":case"detached":case"detaching":case"attaching":e.attach((function(e){e?t(e):n()}));break;default:t(l.default.fromValues(e.invalidStateError()))}}(this.channel,t,(function(){var e=n.members;i?e.waitSync((function(){a(e)})):a(e)})):i?t(l.default.fromValues({statusCode:400,code:91005,message:"Presence state is out of sync due to channel being in the SUSPENDED state"})):a(this.members)},t.prototype.history=function(e,t){if(s.default.logAction(s.default.LOG_MICRO,"RealtimePresence.history()","channel = "+this.name),void 0===t)if("function"==typeof e)t=e,e=null;else{if(this.channel.realtime.options.promises)return o.promisify(this,"history",arguments);t=p}e&&e.untilAttach&&("attached"===this.channel.state?(delete e.untilAttach,e.from_serial=this.channel.properties.attachSerial):t(new l.default("option untilAttach requires the channel to be attached, was: "+this.channel.state,4e4,400))),i.default.prototype._history.call(this,e,t)},t.prototype.setPresence=function(e,t,n){var r,o;s.default.logAction(s.default.LOG_MICRO,"RealtimePresence.setPresence()","received presence for "+e.length+" participants; syncChannelSerial = "+n);var i=this.members,a=this._myMembers,l=[],u=this.channel.connectionManager.connectionId;t&&(this.members.startSync(),n&&(o=n.match(/^[\w-]+:(.*)$/))&&(r=o[1]));for(var f=0;f<e.length;f++)switch((d=c.default.fromValues(e[f])).action){case"leave":i.remove(d)&&l.push(d),d.connectionId!==u||d.isSynthesized()||a.remove(d);break;case"enter":case"present":case"update":i.put(d)&&l.push(d),d.connectionId===u&&a.put(d)}for(t&&!r&&(i.endSync(),this.channel.syncChannelSerial=null),f=0;f<l.length;f++){var d=l[f];this.subscriptions.emit(d.action,d)}},t.prototype.onAttached=function(e){s.default.logAction(s.default.LOG_MINOR,"RealtimePresence.onAttached()","channel = "+this.channel.name+", hasPresence = "+e),e?this.members.startSync():(this._synthesizeLeaves(this.members.values()),this.members.clear()),this._ensureMyMembersPresent();var t=this.pendingPresence,n=t.length;if(n){this.pendingPresence=[];var r=[],o=f.default.create();s.default.logAction(s.default.LOG_MICRO,"RealtimePresence.onAttached","sending "+n+" queued presence messages");for(var i=0;i<n;i++){var a=t[i];r.push(a.presence),o.push(a.callback)}this.channel.sendPresence(r,o)}},t.prototype.actOnChannelState=function(e,t,n){switch(e){case"attached":this.onAttached(t);break;case"detached":case"failed":this._clearMyMembers(),this.members.clear();case"suspended":this.failPendingPresence(n)}},t.prototype.failPendingPresence=function(e){if(this.pendingPresence.length){s.default.logAction(s.default.LOG_MINOR,"RealtimeChannel.failPendingPresence","channel; name = "+this.channel.name+", err = "+o.inspectError(e));for(var t=0;t<this.pendingPresence.length;t++)try{this.pendingPresence[t].callback(e)}catch(e){}this.pendingPresence=[]}},t.prototype._clearMyMembers=function(){this._myMembers.clear()},t.prototype._ensureMyMembersPresent=function(){var e=this,t=this._myMembers,n=function(t){if(t){var n="Presence auto-re-enter failed: "+t.toString(),r=new l.default(n,91004,400);s.default.logAction(s.default.LOG_ERROR,"RealtimePresence._ensureMyMembersPresent()",n);var o=new d.default(e.channel.state,e.channel.state,!0,!1,r);e.channel.emit("update",o)}};for(var r in t.map){var o=t.map[r];s.default.logAction(s.default.LOG_MICRO,"RealtimePresence._ensureMyMembersPresent()",'Auto-reentering clientId "'+o.clientId+'" into the presence set'),this._enterOrUpdateClient(o.id,o.clientId,o.data,"enter",n)}},t.prototype._synthesizeLeaves=function(e){var t=this.subscriptions;o.arrForEach(e,(function(e){var n=c.default.fromValues({action:"leave",connectionId:e.connectionId,clientId:e.clientId,data:e.data,encoding:e.encoding,timestamp:o.now()});t.emit("leave",n)}))},t.prototype.on=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];s.default.deprecated("presence.on","presence.subscribe"),this.subscribe.apply(this,e)},t.prototype.off=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];s.default.deprecated("presence.off","presence.unsubscribe"),this.unsubscribe.apply(this,e)},t.prototype.subscribe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=u.default.processListenerArgs(e),r=n[0],i=n[1],a=n[2],s=this.channel;if(!a){if(this.channel.realtime.options.promises)return o.promisify(this,"subscribe",[r,i]);a=p}"failed"!==s.state?(this.subscriptions.on(r,i),s.attach(a)):a(l.default.fromValues(s.invalidStateError()))},t.prototype.unsubscribe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=u.default.processListenerArgs(e),r=n[0],o=n[1];this.subscriptions.off(r,o)},t}(i.default),y=function(e){function t(t,n){var r=e.call(this)||this;return r.presence=t,r.map=Object.create(null),r.syncInProgress=!1,r.residualMembers=null,r.memberKey=n,r}return r.__extends(t,e),t.prototype.get=function(e){return this.map[e]},t.prototype.getClient=function(e){var t=this.map,n=[];for(var r in t){var o=t[r];o.clientId==e&&"absent"!=o.action&&n.push(o)}return n},t.prototype.list=function(e){var t=this.map,n=e&&e.clientId,r=e&&e.connectionId,o=[];for(var i in t){var a=t[i];"absent"!==a.action&&(n&&n!=a.clientId||r&&r!=a.connectionId||o.push(a))}return o},t.prototype.put=function(e){"enter"!==e.action&&"update"!==e.action||((e=c.default.fromValues(e)).action="present");var t=this.map,n=this.memberKey(e);this.residualMembers&&delete this.residualMembers[n];var r=t[n];return!(r&&!g(e,r)||(t[n]=e,0))},t.prototype.values=function(){var e=this.map,t=[];for(var n in e){var r=e[n];"absent"!=r.action&&t.push(r)}return t},t.prototype.remove=function(e){var t=this.map,n=this.memberKey(e),r=t[n];return!(r&&!g(e,r)||(this.syncInProgress?((e=c.default.fromValues(e)).action="absent",t[n]=e):delete t[n],0))},t.prototype.startSync=function(){var e=this.map,t=this.syncInProgress;s.default.logAction(s.default.LOG_MINOR,"PresenceMap.startSync()","channel = "+this.presence.channel.name+"; syncInProgress = "+t),this.syncInProgress||(this.residualMembers=o.copy(e),this.setInProgress(!0))},t.prototype.endSync=function(){var e=this.map,t=this.syncInProgress;if(s.default.logAction(s.default.LOG_MINOR,"PresenceMap.endSync()","channel = "+this.presence.channel.name+"; syncInProgress = "+t),t){for(var n in e)"absent"===e[n].action&&delete e[n];for(var n in this.presence._synthesizeLeaves(o.valuesArray(this.residualMembers)),this.residualMembers)delete e[n];this.residualMembers=null,this.setInProgress(!1)}this.emit("sync")},t.prototype.waitSync=function(e){var t=this.syncInProgress;s.default.logAction(s.default.LOG_MINOR,"PresenceMap.waitSync()","channel = "+this.presence.channel.name+"; syncInProgress = "+t),t?this.once("sync",e):e()},t.prototype.clear=function(){this.map={},this.setInProgress(!1),this.residualMembers=null},t.prototype.setInProgress=function(e){s.default.logAction(s.default.LOG_MICRO,"PresenceMap.setInProgress()","inProgress = "+e),this.syncInProgress=e,this.presence.syncComplete=!e},t}(a.default);t.default=m},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=n(56),i=n(31),a=n(11),s=r.__importDefault(n(5)),c=r.__importDefault(n(3)),l=function(){function e(){this.base64CharSet="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",this.hexCharSet="0123456789abcdef"}return e.prototype.isWordArray=function(e){return null!=e&&void 0!==e.sigBytes},e.prototype.isArrayBuffer=function(e){return null!=e&&e.constructor===ArrayBuffer},e.prototype.isTypedArray=function(e){return!!ArrayBuffer&&ArrayBuffer.isView&&ArrayBuffer.isView(e)},e.prototype.uint8ViewToBase64=function(e){for(var t,n,r,o,i="",a=this.base64CharSet,s=e.byteLength,c=s%3,l=s-c,u=0;u<l;u+=3)t=(258048&(o=e[u]<<16|e[u+1]<<8|e[u+2]))>>12,n=(4032&o)>>6,r=63&o,i+=a[(16515072&o)>>18]+a[t]+a[n]+a[r];return 1==c?(t=(3&(o=e[l]))<<4,i+=a[(252&o)>>2]+a[t]+"=="):2==c&&(t=(1008&(o=e[l]<<8|e[l+1]))>>4,n=(15&o)<<2,i+=a[(64512&o)>>10]+a[t]+a[n]+"="),i},e.prototype.base64ToArrayBuffer=function(e){for(var t=null===atob||void 0===atob?void 0:atob(e),n=t.length,r=new Uint8Array(n),o=0;o<n;o++){var i=t.charCodeAt(o);r[o]=i}return r.buffer},e.prototype.isBuffer=function(e){return this.isArrayBuffer(e)||this.isWordArray(e)||this.isTypedArray(e)},e.prototype.toBuffer=function(e){if(!ArrayBuffer)throw new Error("Can't convert to Buffer: browser does not support the necessary types");if(this.isArrayBuffer(e))return new Uint8Array(e);if(this.isTypedArray(e))return new Uint8Array(e.buffer);if(this.isWordArray(e)){for(var t=new ArrayBuffer(e.sigBytes),n=new Uint8Array(t),r=0;r<e.sigBytes;r++)n[r]=e.words[r>>>2]>>>24-r%4*8&255;return n}throw new Error("BufferUtils.toBuffer expected an arraybuffer, typed array, or CryptoJS wordarray")},e.prototype.toArrayBuffer=function(e){return this.isArrayBuffer(e)?e:this.toBuffer(e).buffer},e.prototype.toWordArray=function(e){return this.isTypedArray(e)&&(e=e.buffer),this.isWordArray(e)?e:s.default.create(e)},e.prototype.base64Encode=function(e){return this.isWordArray(e)?(0,a.stringify)(e):this.uint8ViewToBase64(this.toBuffer(e))},e.prototype.base64Decode=function(e){return ArrayBuffer&&c.default.Config.atob?this.base64ToArrayBuffer(e):(0,a.parse)(e)},e.prototype.hexEncode=function(e){return(0,o.stringify)(this.toWordArray(e))},e.prototype.hexDecode=function(e){var t=(0,o.parse)(e);return ArrayBuffer?this.toArrayBuffer(t):t},e.prototype.utf8Encode=function(e){return c.default.Config.TextEncoder?(new c.default.Config.TextEncoder).encode(e).buffer:(0,i.parse)(e)},e.prototype.utf8Decode=function(e){if(!this.isBuffer(e))throw new Error("Expected input of utf8decode to be an arraybuffer, typed array, or CryptoJS wordarray");return TextDecoder&&!this.isWordArray(e)?(new TextDecoder).decode(e):(e=this.toWordArray(e),(0,i.stringify)(e))},e.prototype.bufferCompare=function(e,t){if(!e)return-1;if(!t)return 1;var n=this.toWordArray(e),r=this.toWordArray(t);n.clamp(),r.clamp();var o=n.sigBytes-r.sigBytes;if(0!=o)return o;for(var i=n.words,a=r.words,s=0;s<i.length;s++)if(0!=(o=i[s]-a[s]))return o;return 0},e.prototype.byteLength=function(e){return this.isArrayBuffer(e)||this.isTypedArray(e)?e.byteLength:this.isWordArray(e)?e.sigBytes:-1},e.prototype.typedArrayToBuffer=function(e){return e.buffer},e}();t.default=new l},function(e,t,n){e.exports=n(6).enc.Hex},function(e,t,n){"use strict";n.r(t);var r=n(5),o=n.n(r),i=n(11),a=n(22),s=n.n(a),c=n(2),l=n.n(c),u=n(4),f=n.n(u);t.default=function(e,t){var n;if(e.getRandomWordArray)n=e.getRandomWordArray;else if("undefined"!=typeof Uint32Array&&e.getRandomValues){var r=new Uint32Array(4);n=function(n,o){var i=n/4,a=4==i?r:new Uint32Array(i);e.getRandomValues(a,(function(e){void 0!==o&&o(e,t.toWordArray(a))}))}}else n=function(e,t){l.a.logAction(l.a.LOG_MAJOR,"Ably.Crypto.generateRandom()","Warning: the browser you are using does not support secure cryptographically secure randomness generation; falling back to insecure Math.random()");for(var n=e/4,r=new Array(n),i=0;i<n;i++)r[i]=Math.floor(4294967296*Math.random())-2147483648;t(null,o.a.create(r))};var a=[o.a.create([269488144,269488144,269488144,269488144],16),o.a.create([16777216],1),o.a.create([33685504],2),o.a.create([50529024],3),o.a.create([67372036],4),o.a.create([84215045,83886080],5),o.a.create([101058054,101056512],6),o.a.create([117901063,117901056],7),o.a.create([134744072,134744072],8),o.a.create([151587081,151587081,150994944],9),o.a.create([168430090,168430090,168427520],10),o.a.create([185273099,185273099,185273088],11),o.a.create([202116108,202116108,202116108],12),o.a.create([218959117,218959117,218959117,218103808],13),o.a.create([235802126,235802126,235802126,235798528],14),o.a.create([252645135,252645135,252645135,252645135],15),o.a.create([269488144,269488144,269488144,269488144],16)];function c(){}function u(){this.algorithm=null,this.keyLength=null,this.mode=null,this.key=null}function d(e,n,r){this.algorithm=e.algorithm+"-"+String(e.keyLength)+"-"+e.mode,this.cjsAlgorithm=e.algorithm.toUpperCase().replace(/-\d+$/,""),this.key=t.toWordArray(e.key),r&&(this.iv=t.toWordArray(r).clone()),this.blockLengthWords=n}return c.CipherParams=u,c.getDefaultParams=function(e){var n;if("function"!=typeof e&&"string"!=typeof e){if(!e.key)throw new Error("Crypto.getDefaultParams: a key is required");n="string"==typeof e.key?Object(i.parse)(e.key.replace("_","/").replace("-","+")):t.toWordArray(e.key);var r=new u;if(r.key=n,r.algorithm=e.algorithm||"aes",r.keyLength=32*n.words.length,r.mode=e.mode||"cbc",e.keyLength&&e.keyLength!==r.keyLength)throw new Error("Crypto.getDefaultParams: a keyLength of "+e.keyLength+" was specified, but the key actually has length "+r.keyLength);return function(e){if("aes"===e.algorithm&&"cbc"===e.mode){if(128===e.keyLength||256===e.keyLength)return;throw new Error("Unsupported key length "+e.keyLength+" for aes-cbc encryption. Encryption key must be 128 or 256 bits (16 or 32 ASCII characters)")}}(r),r}if(l.a.deprecated("Crypto.getDefaultParams(key, callback)","Crypto.getDefaultParams({key: key})"),"function"==typeof e)c.generateRandomKey((function(t){e(null,c.getDefaultParams({key:t}))}));else{if("function"!=typeof arguments[1])throw new Error("Invalid arguments for Crypto.getDefaultParams");arguments[1](null,c.getDefaultParams({key:e}))}},c.generateRandomKey=function(e,t){1==arguments.length&&"function"==typeof e&&(t=e,e=void 0),n((e||256)/8,(function(e,n){void 0!==t&&t(e?f.a.fromValues(e):null,n)}))},c.getCipher=function(e){var t=e instanceof u?e:c.getDefaultParams(e);return{cipherParams:t,cipher:new d(t,4,e.iv)}},d.prototype.encrypt=function(e,r){l.a.logAction(l.a.LOG_MICRO,"CBCCipher.encrypt()","");var o=(e=t.toWordArray(e)).sigBytes,i=function(e){return e+16&-16}(o),c=this,u=function(){c.getIv((function(t,n){if(t)r(t);else{var s=c.encryptCipher.process(e.concat(a[i-o])),l=n.concat(s);r(null,l)}}))};this.encryptCipher?u():this.iv?(this.encryptCipher=s.a.algo[this.cjsAlgorithm].createEncryptor(this.key,{iv:this.iv}),u()):n(16,(function(e,t){e?r(e):(c.encryptCipher=s.a.algo[c.cjsAlgorithm].createEncryptor(c.key,{iv:t}),c.iv=t,u())}))},d.prototype.decrypt=function(e){l.a.logAction(l.a.LOG_MICRO,"CBCCipher.decrypt()",""),e=t.toWordArray(e);var n=this.blockLengthWords,r=e.words,i=o.a.create(r.slice(0,n)),a=o.a.create(r.slice(n)),c=s.a.algo[this.cjsAlgorithm].createDecryptor(this.key,{iv:i}),u=c.process(a),f=c.finalize();return c.reset(),f&&f.sigBytes&&u.concat(f),u},d.prototype.getIv=function(e){if(this.iv){var t=this.iv;return this.iv=null,void e(null,t)}var r=this;n(16,(function(t,n){t?e(t):e(null,r.encryptCipher.process(n))}))},c}},function(e,t,n){var r;e.exports=(r=n(6),function(){var e=r,t=e.lib.WordArray,n=e.enc;function o(e){return e<<8&4278255360|e>>>8&16711935}n.Utf16=n.Utf16BE={stringify:function(e){for(var t=e.words,n=e.sigBytes,r=[],o=0;o<n;o+=2){var i=t[o>>>2]>>>16-o%4*8&65535;r.push(String.fromCharCode(i))}return r.join("")},parse:function(e){for(var n=e.length,r=[],o=0;o<n;o++)r[o>>>1]|=e.charCodeAt(o)<<16-o%2*16;return t.create(r,2*n)}},n.Utf16LE={stringify:function(e){for(var t=e.words,n=e.sigBytes,r=[],i=0;i<n;i+=2){var a=o(t[i>>>2]>>>16-i%4*8&65535);r.push(String.fromCharCode(a))}return r.join("")},parse:function(e){for(var n=e.length,r=[],i=0;i<n;i++)r[i>>>1]|=o(e.charCodeAt(i)<<16-i%2*16);return t.create(r,2*n)}}}(),r.enc.Utf16)},function(e,t,n){var r,o,i,a;e.exports=(a=n(6),n(28),o=(r=a).lib.CipherParams,i=r.enc.Hex,r.format.Hex={stringify:function(e){return e.ciphertext.toString(i)},parse:function(e){var t=i.parse(e);return o.create({ciphertext:t})}},a.format.Hex)},function(e,t,n){var r;e.exports=(r=n(6),n(11),n(61),n(27),n(28),function(){var e=r,t=e.lib.BlockCipher,n=e.algo,o=[],i=[],a=[],s=[],c=[],l=[],u=[],f=[],d=[],p=[];!function(){for(var e=[],t=0;t<256;t++)e[t]=t<128?t<<1:t<<1^283;var n=0,r=0;for(t=0;t<256;t++){var h=r^r<<1^r<<2^r<<3^r<<4;h=h>>>8^255&h^99,o[n]=h,i[h]=n;var g=e[n],m=e[g],y=e[m],v=257*e[h]^16843008*h;a[n]=v<<24|v>>>8,s[n]=v<<16|v>>>16,c[n]=v<<8|v>>>24,l[n]=v,v=16843009*y^65537*m^257*g^16843008*n,u[h]=v<<24|v>>>8,f[h]=v<<16|v>>>16,d[h]=v<<8|v>>>24,p[h]=v,n?(n=g^e[e[e[y^g]]],r^=e[e[r]]):n=r=1}}();var h=[0,1,2,4,8,16,32,64,128,27,54],g=n.AES=t.extend({_doReset:function(){if(!this._nRounds||this._keyPriorReset!==this._key){for(var e=this._keyPriorReset=this._key,t=e.words,n=e.sigBytes/4,r=4*((this._nRounds=n+6)+1),i=this._keySchedule=[],a=0;a<r;a++)a<n?i[a]=t[a]:(l=i[a-1],a%n?n>6&&a%n==4&&(l=o[l>>>24]<<24|o[l>>>16&255]<<16|o[l>>>8&255]<<8|o[255&l]):(l=o[(l=l<<8|l>>>24)>>>24]<<24|o[l>>>16&255]<<16|o[l>>>8&255]<<8|o[255&l],l^=h[a/n|0]<<24),i[a]=i[a-n]^l);for(var s=this._invKeySchedule=[],c=0;c<r;c++){if(a=r-c,c%4)var l=i[a];else l=i[a-4];s[c]=c<4||a<=4?l:u[o[l>>>24]]^f[o[l>>>16&255]]^d[o[l>>>8&255]]^p[o[255&l]]}}},encryptBlock:function(e,t){this._doCryptBlock(e,t,this._keySchedule,a,s,c,l,o)},decryptBlock:function(e,t){var n=e[t+1];e[t+1]=e[t+3],e[t+3]=n,this._doCryptBlock(e,t,this._invKeySchedule,u,f,d,p,i),n=e[t+1],e[t+1]=e[t+3],e[t+3]=n},_doCryptBlock:function(e,t,n,r,o,i,a,s){for(var c=this._nRounds,l=e[t]^n[0],u=e[t+1]^n[1],f=e[t+2]^n[2],d=e[t+3]^n[3],p=4,h=1;h<c;h++){var g=r[l>>>24]^o[u>>>16&255]^i[f>>>8&255]^a[255&d]^n[p++],m=r[u>>>24]^o[f>>>16&255]^i[d>>>8&255]^a[255&l]^n[p++],y=r[f>>>24]^o[d>>>16&255]^i[l>>>8&255]^a[255&u]^n[p++],v=r[d>>>24]^o[l>>>16&255]^i[u>>>8&255]^a[255&f]^n[p++];l=g,u=m,f=y,d=v}g=(s[l>>>24]<<24|s[u>>>16&255]<<16|s[f>>>8&255]<<8|s[255&d])^n[p++],m=(s[u>>>24]<<24|s[f>>>16&255]<<16|s[d>>>8&255]<<8|s[255&l])^n[p++],y=(s[f>>>24]<<24|s[d>>>16&255]<<16|s[l>>>8&255]<<8|s[255&u])^n[p++],v=(s[d>>>24]<<24|s[l>>>16&255]<<16|s[u>>>8&255]<<8|s[255&f])^n[p++],e[t]=g,e[t+1]=m,e[t+2]=y,e[t+3]=v},keySize:8});e.AES=t._createHelper(g)}(),r.AES)},function(e,t,n){var r;e.exports=(r=n(6),function(e){var t=r,n=t.lib,o=n.WordArray,i=n.Hasher,a=t.algo,s=[];!function(){for(var t=0;t<64;t++)s[t]=4294967296*e.abs(e.sin(t+1))|0}();var c=a.MD5=i.extend({_doReset:function(){this._hash=new o.init([1732584193,4023233417,2562383102,271733878])},_doProcessBlock:function(e,t){for(var n=0;n<16;n++){var r=t+n,o=e[r];e[r]=16711935&(o<<8|o>>>24)|4278255360&(o<<24|o>>>8)}var i=this._hash.words,a=e[t+0],c=e[t+1],p=e[t+2],h=e[t+3],g=e[t+4],m=e[t+5],y=e[t+6],v=e[t+7],_=e[t+8],b=e[t+9],O=e[t+10],C=e[t+11],w=e[t+12],R=e[t+13],A=e[t+14],S=e[t+15],k=i[0],T=i[1],M=i[2],I=i[3];k=l(k,T,M,I,a,7,s[0]),I=l(I,k,T,M,c,12,s[1]),M=l(M,I,k,T,p,17,s[2]),T=l(T,M,I,k,h,22,s[3]),k=l(k,T,M,I,g,7,s[4]),I=l(I,k,T,M,m,12,s[5]),M=l(M,I,k,T,y,17,s[6]),T=l(T,M,I,k,v,22,s[7]),k=l(k,T,M,I,_,7,s[8]),I=l(I,k,T,M,b,12,s[9]),M=l(M,I,k,T,O,17,s[10]),T=l(T,M,I,k,C,22,s[11]),k=l(k,T,M,I,w,7,s[12]),I=l(I,k,T,M,R,12,s[13]),M=l(M,I,k,T,A,17,s[14]),k=u(k,T=l(T,M,I,k,S,22,s[15]),M,I,c,5,s[16]),I=u(I,k,T,M,y,9,s[17]),M=u(M,I,k,T,C,14,s[18]),T=u(T,M,I,k,a,20,s[19]),k=u(k,T,M,I,m,5,s[20]),I=u(I,k,T,M,O,9,s[21]),M=u(M,I,k,T,S,14,s[22]),T=u(T,M,I,k,g,20,s[23]),k=u(k,T,M,I,b,5,s[24]),I=u(I,k,T,M,A,9,s[25]),M=u(M,I,k,T,h,14,s[26]),T=u(T,M,I,k,_,20,s[27]),k=u(k,T,M,I,R,5,s[28]),I=u(I,k,T,M,p,9,s[29]),M=u(M,I,k,T,v,14,s[30]),k=f(k,T=u(T,M,I,k,w,20,s[31]),M,I,m,4,s[32]),I=f(I,k,T,M,_,11,s[33]),M=f(M,I,k,T,C,16,s[34]),T=f(T,M,I,k,A,23,s[35]),k=f(k,T,M,I,c,4,s[36]),I=f(I,k,T,M,g,11,s[37]),M=f(M,I,k,T,v,16,s[38]),T=f(T,M,I,k,O,23,s[39]),k=f(k,T,M,I,R,4,s[40]),I=f(I,k,T,M,a,11,s[41]),M=f(M,I,k,T,h,16,s[42]),T=f(T,M,I,k,y,23,s[43]),k=f(k,T,M,I,b,4,s[44]),I=f(I,k,T,M,w,11,s[45]),M=f(M,I,k,T,S,16,s[46]),k=d(k,T=f(T,M,I,k,p,23,s[47]),M,I,a,6,s[48]),I=d(I,k,T,M,v,10,s[49]),M=d(M,I,k,T,A,15,s[50]),T=d(T,M,I,k,m,21,s[51]),k=d(k,T,M,I,w,6,s[52]),I=d(I,k,T,M,h,10,s[53]),M=d(M,I,k,T,O,15,s[54]),T=d(T,M,I,k,c,21,s[55]),k=d(k,T,M,I,_,6,s[56]),I=d(I,k,T,M,S,10,s[57]),M=d(M,I,k,T,y,15,s[58]),T=d(T,M,I,k,R,21,s[59]),k=d(k,T,M,I,g,6,s[60]),I=d(I,k,T,M,C,10,s[61]),M=d(M,I,k,T,p,15,s[62]),T=d(T,M,I,k,b,21,s[63]),i[0]=i[0]+k|0,i[1]=i[1]+T|0,i[2]=i[2]+M|0,i[3]=i[3]+I|0},_doFinalize:function(){var t=this._data,n=t.words,r=8*this._nDataBytes,o=8*t.sigBytes;n[o>>>5]|=128<<24-o%32;var i=e.floor(r/4294967296),a=r;n[15+(o+64>>>9<<4)]=16711935&(i<<8|i>>>24)|4278255360&(i<<24|i>>>8),n[14+(o+64>>>9<<4)]=16711935&(a<<8|a>>>24)|4278255360&(a<<24|a>>>8),t.sigBytes=4*(n.length+1),this._process();for(var s=this._hash,c=s.words,l=0;l<4;l++){var u=c[l];c[l]=16711935&(u<<8|u>>>24)|4278255360&(u<<24|u>>>8)}return s},clone:function(){var e=i.clone.call(this);return e._hash=this._hash.clone(),e}});function l(e,t,n,r,o,i,a){var s=e+(t&n|~t&r)+o+a;return(s<<i|s>>>32-i)+t}function u(e,t,n,r,o,i,a){var s=e+(t&r|n&~r)+o+a;return(s<<i|s>>>32-i)+t}function f(e,t,n,r,o,i,a){var s=e+(t^n^r)+o+a;return(s<<i|s>>>32-i)+t}function d(e,t,n,r,o,i,a){var s=e+(n^(t|~r))+o+a;return(s<<i|s>>>32-i)+t}t.MD5=i._createHelper(c),t.HmacMD5=i._createHmacHelper(c)}(Math),r.MD5)},function(e,t,n){"use strict";var r;Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),i=o.__importDefault(n(3)),a=o.__importStar(n(1)),s=o.__importDefault(n(8)),c=n(4),l=o.__importDefault(n(18)),u=o.__importDefault(n(16)),f=o.__importDefault(n(21)),d=o.__importDefault(n(2)),p=n(29),h=o.__importDefault(n(63)),g=n(25);function m(e){var t=e.statusCode;return 408===t&&!e.code||400===t&&!e.code||t>=500&&t<=504}function y(e){var t=e.connection,n=t&&t.connectionManager.host;return n?[n].concat(s.default.getFallbackHosts(e.options)):s.default.getHosts(e.options)}var v=(r=function(){function e(e){this.checksInProgress=null,this.checkConnectivity=void 0,this.supportsAuthHeaders=!1,this.supportsLinkHeaders=!1,this._getHosts=y,this.options=e||{};var t=this.options.connectivityCheckUrl||s.default.connectivityCheckUrl,n=this.options.connectivityCheckParams,r=!this.options.connectivityCheckUrl;i.default.Config.xhrSupported?(this.supportsAuthHeaders=!0,this.Request=function(e,t,n,r,o,i,a){var s=u.default.createRequest(n,r,o,i,f.default.REQ_SEND,t&&t.options.timeouts,e);return s.once("complete",a),s.exec(),s},this.options.disableConnectivityCheck?this.checkConnectivity=function(e){e(null,!0)}:this.checkConnectivity=function(e){d.default.logAction(d.default.LOG_MICRO,"(XHRRequest)Http.checkConnectivity()","Sending; "+t),this.doUri(l.default.Get,null,t,null,null,n,(function(t,n,o,i,a){var s;s=r?!t&&"yes"==(null==n?void 0:n.replace(/\n/,"")):!t&&(0,g.isSuccessCode)(a),d.default.logAction(d.default.LOG_MICRO,"(XHRRequest)Http.checkConnectivity()","Result: "+s),e(null,s)}))}):i.default.Config.jsonpSupported?(this.Request=function(e,t,n,r,o,a,s){var c=(0,p.createRequest)(n,r,o,a,f.default.REQ_SEND,t&&t.options.timeouts,e);return c.once("complete",s),i.default.Config.nextTick((function(){c.exec()})),c},this.options.disableConnectivityCheck?this.checkConnectivity=function(e){e(null,!0)}:this.checkConnectivity=function(e){var t=this,n=s.default.jsonpInternetUpUrl;if(this.checksInProgress)this.checksInProgress.push(e);else{this.checksInProgress=[e],d.default.logAction(d.default.LOG_MICRO,"(JSONP)Http.checkConnectivity()","Sending; "+n);var r=new p.Request("isTheInternetUp",n,null,null,null,f.default.REQ_SEND,s.default.TIMEOUTS);r.once("complete",(function(e,n){var r=!e&&n;d.default.logAction(d.default.LOG_MICRO,"(JSONP)Http.checkConnectivity()","Result: "+r);for(var o=0;o<t.checksInProgress.length;o++)t.checksInProgress[o](null,r);t.checksInProgress=null})),i.default.Config.nextTick((function(){r.exec()}))}}):i.default.Config.fetchSupported?(this.supportsAuthHeaders=!0,this.Request=h.default,this.checkConnectivity=function(e){d.default.logAction(d.default.LOG_MICRO,"(Fetch)Http.checkConnectivity()","Sending; "+t),this.doUri(l.default.Get,null,t,null,null,null,(function(t,n){var r=!t&&"yes"==(null==n?void 0:n.replace(/\n/,""));d.default.logAction(d.default.LOG_MICRO,"(Fetch)Http.checkConnectivity()","Result: "+r),e(null,r)}))}):this.Request=function(e,t,n,r,o,i,a){a(new c.PartialErrorInfo("no supported HTTP transports available",null,400),null)}}return e.prototype.do=function(e,t,n,r,i,s,l){var u=this,f="function"==typeof n?n:function(e){return t.baseUri(e)+n},d=t._currentFallback;if(d){if(d.validUntil>a.now())return this.Request?void this.Request(e,t,f(d.host),r,s,i,(function(a){for(var c=[],f=1;f<arguments.length;f++)c[f-1]=arguments[f];if(a&&m(a))return t._currentFallback=null,void u.do(e,t,n,r,i,s,l);null==l||l.apply(void 0,o.__spreadArray([a],c,!1))})):void(null==l||l(new c.PartialErrorInfo("Request invoked before assigned to",null,500)));t._currentFallback=null}var p=y(t);if(1!==p.length){var h=function(n,c){var d=n.shift();u.doUri(e,t,f(d),r,i,s,(function(e){for(var r=[],i=1;i<arguments.length;i++)r[i-1]=arguments[i];e&&m(e)&&n.length?h(n,!0):(c&&(t._currentFallback={host:d,validUntil:a.now()+t.options.timeouts.fallbackRetryTimeout}),null==l||l.apply(void 0,o.__spreadArray([e],r,!1)))}))};h(p)}else this.doUri(e,t,f(p[0]),r,i,s,l)},e.prototype.doUri=function(e,t,n,r,o,i,a){this.Request?this.Request(e,t,n,r,i,o,a):a(new c.PartialErrorInfo("Request invoked before assigned to",null,500))},e}(),r.methods=[l.default.Get,l.default.Delete,l.default.Post,l.default.Put,l.default.Patch],r.methodsWithoutBody=[l.default.Get,l.default.Delete],r.methodsWithBody=[l.default.Post,l.default.Put,l.default.Patch],r);t.default=v},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=r.__importStar(n(4)),i=r.__importDefault(n(3)),a=r.__importDefault(n(8)),s=r.__importStar(n(1)),c=n(1);t.default=function(e,t,n,r,l,u,f){var d=new Headers(r||{}),p=e?e.toUpperCase():s.isEmptyArg(u)?"GET":"POST",h=new AbortController,g=setTimeout((function(){h.abort(),f(new o.PartialErrorInfo("Request timed out",null,408))}),t?t.options.timeouts.httpRequestTimeout:a.default.TIMEOUTS.httpRequestTimeout),m={method:p,headers:d,body:u};i.default.Config.isWebworker||(m.credentials=d.has("authorization")?"include":"same-origin"),(0,c.getGlobalObject)().fetch(n+"?"+new URLSearchParams(l||{}),m).then((function(e){clearTimeout(g);var t=e.headers.get("Content-Type");(t&&t.indexOf("application/x-msgpack")>-1?e.arrayBuffer():t&&t.indexOf("application/json")>-1?e.json():e.text()).then((function(n){var r=!!t&&-1===t.indexOf("application/x-msgpack");if(e.ok)f(null,n,e.headers,r,e.status);else{var a=function(e,t){if(function(e,t){return!!t.get("x-ably-errorcode")}(0,t))return e.error&&o.default.fromValues(e.error)}(n,e.headers)||new o.PartialErrorInfo("Error response received from server: "+e.status+" body was: "+i.default.Config.inspect(n),null,e.status);f(a,n,e.headers,r,e.status)}}))})).catch((function(e){clearTimeout(g),f(e)}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=r.__importDefault(n(41)),i=r.__importStar(n(1)).getGlobalObject();"undefined"==typeof Window&&"undefined"==typeof WorkerGlobalScope&&console.log("Warning: this distribution of Ably is intended for browsers. On nodejs, please use the 'ably' package on npm");var a,s=i.navigator&&i.navigator.userAgent.toString(),c={agent:"browser",logTimestamps:!0,userAgent:s,currentUrl:i.location&&i.location.href,noUpgrade:s&&!!s.match(/MSIE\s8\.0/),binaryType:"arraybuffer",WebSocket:i.WebSocket,fetchSupported:!!i.fetch,xhrSupported:i.XMLHttpRequest&&"withCredentials"in new XMLHttpRequest,jsonpSupported:"undefined"!=typeof document,allowComet:(a=i.location,!i.WebSocket||!a||!a.origin||a.origin.indexOf("http")>-1),streamingSupported:!0,useProtocolHeartbeats:!0,createHmac:null,msgpack:o.default,supportsBinary:!!i.TextDecoder,preferBinary:!1,ArrayBuffer:i.ArrayBuffer,atob:i.atob,nextTick:void 0!==i.setImmediate?i.setImmediate.bind(i):function(e){setTimeout(e,0)},addEventListener:i.addEventListener,inspect:JSON.stringify,stringByteSize:function(e){return i.TextDecoder&&(new i.TextEncoder).encode(e).length||e.length},TextEncoder:i.TextEncoder,TextDecoder:i.TextDecoder,Promise:i.Promise,getRandomValues:function(e){if(void 0!==e)return function(t,n){e.getRandomValues(t),n&&n(null)}}(i.crypto||msCrypto)};t.default=c},function(e,t,n){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0});var r=n(0).__importStar(n(1)),o="ablyjs-storage-test",i=function(){function t(){try{e.sessionStorage.setItem(o,o),e.sessionStorage.removeItem(o),this.sessionSupported=!0}catch(e){this.sessionSupported=!1}try{e.localStorage.setItem(o,o),e.localStorage.removeItem(o),this.localSupported=!0}catch(e){this.localSupported=!1}}return t.prototype.get=function(e){return this._get(e,!1)},t.prototype.getSession=function(e){return this._get(e,!0)},t.prototype.remove=function(e){return this._remove(e,!1)},t.prototype.removeSession=function(e){return this._remove(e,!0)},t.prototype.set=function(e,t,n){return this._set(e,t,n,!1)},t.prototype.setSession=function(e,t,n){return this._set(e,t,n,!0)},t.prototype._set=function(e,t,n,o){var i={value:t};return n&&(i.expires=r.now()+n),this.storageInterface(o).setItem(e,JSON.stringify(i))},t.prototype._get=function(e,t){if(t&&!this.sessionSupported)throw new Error("Session Storage not supported");if(!t&&!this.localSupported)throw new Error("Local Storage not supported");var n=this.storageInterface(t).getItem(e);if(!n)return null;var o=JSON.parse(n);return o.expires&&o.expires<r.now()?(this.storageInterface(t).removeItem(e),null):o.value},t.prototype._remove=function(e,t){return this.storageInterface(t).removeItem(e)},t.prototype.storageInterface=function(t){return t?e.sessionStorage:e.localStorage},t}();t.default=new i}).call(this,n(13))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0).__importDefault(n(67)),o={connectivityCheckUrl:"https://internet-up.ably-realtime.com/is-the-internet-up.txt",jsonpInternetUpUrl:"https://internet-up.ably-realtime.com/is-the-internet-up-0-9.js",defaultTransports:[r.default.XhrPolling,r.default.XhrStreaming,r.default.JsonP,r.default.WebSocket],baseTransportOrder:[r.default.XhrPolling,r.default.XhrStreaming,r.default.JsonP,r.default.WebSocket],transportPreferenceOrder:[r.default.JsonP,r.default.XhrPolling,r.default.XhrStreaming,r.default.WebSocket],upgradeTransports:[r.default.XhrStreaming,r.default.WebSocket]};t.default=o},function(e,t,n){"use strict";var r;Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.WebSocket="web_socket",e.Comet="comet",e.XhrStreaming="xhr_streaming",e.XhrPolling="xhr_polling",e.JsonP="jsonp"}(r||(r={})),t.default=r},function(e,t,n){"use strict";n.r(t);var r=n(29),o=n.n(r),i=n(1),a=n(3),s=n.n(a),c=n(12),l=n.n(c),u=n(16),f=n.n(u);t.default=[o.a,function(e){var t="xhr_polling";function n(e,n,r){r.stream=!1,l.a.call(this,e,n,r),this.shortName=t}return i.inherits(n,l.a),n.isAvailable=function(){return s.a.Config.xhrSupported&&s.a.Config.allowComet},n.prototype.toString=function(){return"XHRPollingTransport; uri="+this.baseUri+"; isConnected="+this.isConnected},n.prototype.createRequest=function(e,t,n,r,o){return f.a.createRequest(e,t,n,r,o,this.timeouts)},void 0!==e&&n.isAvailable()&&(e.supportedTransports[t]=n),n},function(e){var t="xhr_streaming";function n(e,n,r){l.a.call(this,e,n,r),this.shortName=t}return i.inherits(n,l.a),n.isAvailable=function(){return s.a.Config.xhrSupported&&s.a.Config.streamingSupported&&s.a.Config.allowComet},n.prototype.toString=function(){return"XHRStreamingTransport; uri="+this.baseUri+"; isConnected="+this.isConnected},n.prototype.createRequest=function(e,t,n,r,o){return f.a.createRequest(e,t,n,r,o,this.timeouts)},void 0!==e&&n.isAvailable()&&(e.supportedTransports[t]=n),n}]}]).default},e.exports=t()},182:(e,t,n)=>{"use strict";function r(e){return"string"==typeof e&&(e=-1==e.indexOf(":")?{token:e}:{key:e}),e.promises=!0,e}var o=n(350),i=function(e){return new o.Rest(r(e))};Object.assign(i,o.Rest);var a=function(e){return new o.Realtime(r(e))};Object.assign(a,o.Realtime),e.exports={Rest:i,Realtime:a}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={exports:{}};return e[r](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";var e=n(182),t=n.n(e);const r="move",o=new class{async init(){this.server=await this.connect(),await this.createChannel("game")}async connect(){const e=new(t().Realtime.Promise)("Z9oq-w.SeC0sA:RWchQVoe5OW6HCx_ogk-pRt_g2qoBkzE3huhxdsSI_A");return await e.connection.once("connected"),console.log("Connected to Ably!"),window.addEventListener("beforeunload",(()=>t().close())),e}async createChannel(e){this.channel=this.server.channels.get(e),await this.channel.subscribe(r,(e=>this.onServerMessage(e)))}async makeMove(e){await this.channel.publish(r,JSON.stringify(e))}},i=new class{allCellsFull=0;cells=[];constructor(){this.parent=document.getElementById("parent");const e=this.createDiv("tictactoeDiv");this.parent.appendChild(e),this.buttonTopic=this.createButton("buttonTopic"),e.appendChild(this.buttonTopic);const t=this.createDiv("playerDiv");e.appendChild(t),this.player=this.createDiv("player"),this.player.innerHTML="X Turn",t.appendChild(this.player),this.comments=this.createDiv("playerP"),t.appendChild(this.comments);const n=this.createDiv("cellDiv");e.appendChild(n),this.createCells(n)}createDiv(e){const t=document.createElement("div");return t.classList.add(e),t}createCells(e){for(let t=0;t<9;t++){const t=this.createButton("cell full");t.onclick=()=>this.onCellPress(t),e.appendChild(t),this.cells.push(t)}}createButton(e,t){const n=document.createElement("button");return n.className=e,n}setStyle(e){"dark"===e?this.parent.classList.add("dark"):"light"===e&&this.parent.classList.remove("dark")}updateCell(e,t){"x"===t?(e.classList.add("x","empty","stepX"),e.classList.remove("full"),this.player.innerHTML="O Turn"):"o"===t&&(e.classList.add("o","empty","stepO"),e.classList.remove("cellWait","full"),this.player.innerHTML="X Turn")}setWin(e){"x"===e&&(this.player.innerHTML="X Won!",this.parent.classList.add("win"),this.comments.innerHTML="Next turn O"),"o"===e&&(this.player.innerHTML="O Won!",this.parent.classList.add("win"),this.comments.innerHTML="Next turn X")}setDraw(e){this.player.innerHTML="Draw!",this.parent.classList.add("draw"),"x"===e?this.comments.innerHTML="Next turn X":"o"===e&&(this.comments.innerHTML="Next turn O")}clearCells(e){for(const e of this.cells)e.classList.add("full"),e.classList.remove("o","x","stepX","stepO","empty");"x"===e?this.player.innerHTML="X Turn":"o"===e&&(this.player.innerHTML="O Turn"),this.parent.classList.remove("win","draw"),this.comments.innerHTML="",console.log("clear")}};new class{style=localStorage.getItem("style")??"light";step="x";cellsData=["empty","empty","empty","empty","empty","empty","empty","empty","empty"];cells=i.cells;constructor(){o.init(),o.onServerMessage=e=>this.onServerMessage(e),i.setStyle(this.style),i.buttonTopic.onclick=()=>{"light"===this.style?(i.setStyle("dark"),this.style="dark"):(i.setStyle("light"),this.style="light"),localStorage.setItem("style",this.style)},i.onCellPress=e=>this.onCellPress(e)}resetGame(){this.cellsData.fill("empty"),i.clearCells(this.step)}onServerMessage(e){const t=JSON.parse(e.data);this.step=t.step,this.cell=this.cells[t.cell],"x"===this.step&&"empty"===this.cellsData[t.cell]?(i.updateCell(this.cells[t.cell],this.step),this.cellsData[t.cell]="x",this.step="o"):"o"===this.step&&"empty"===this.cellsData[t.cell]&&(i.updateCell(this.cells[t.cell],this.step),this.cellsData[t.cell]="o",this.step="x"),this.checkDraw(),this.checkWin()}onCellPress(e){o.makeMove({cell:this.cells.indexOf(e),step:this.step})}checkWin(){this.checkWinningPositions("x")?(i.setWin("x"),this.cellsData.fill("full"),console.log(this.step),setTimeout((()=>this.resetGame()),5e3),console.log("win!!X")):this.checkWinningPositions("o")&&(i.setWin("o"),this.cellsData.fill("full"),setTimeout((()=>this.resetGame()),5e3),console.log("win!!O"))}checkWinningPositions(e){let t=[[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6]];for(let n=0;n<t.length;n++){const[r,o,i]=t[n];if(this.cellsData[r]===e&&this.cellsData[o]===e&&this.cellsData[i]===e)return!0}return!1}checkDraw(){for(let e=0;e<this.cellsData.length;e++)if("x"!==this.cellsData[e]&&"o"!==this.cellsData[e])return!1;console.log("DRAW"),i.setDraw(this.step),setTimeout((()=>this.resetGame()),5e3)}}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUt3M0QsVUFBVVMsS0FBVUgsR0FDekI5M0QsS0FBS3czRCxVQUFVVSxLQUFVSixFQUV6QixPQUFPLENBRWYsQ0FFQSxPQUFPLENBQ1gsQ0FFQSxTQUFBSCxHQUNJLElBQUssSUFBSTE3RCxFQUFJLEVBQUdBLEVBQUkrRCxLQUFLdzNELFVBQVVwM0QsT0FBUW5FLElBQ3ZDLEdBQTBCLE1BQXRCK0QsS0FBS3czRCxVQUFVdjdELElBQW9DLE1BQXRCK0QsS0FBS3czRCxVQUFVdjdELEdBQzVDLE9BQU8sRUFHZmlWLFFBQVFDLElBQUksUUFFWm1wQyxFQUFLK2MsUUFBUXIzRCxLQUFLNkIsTUFFbEIydUIsWUFBVyxJQUFNeHdCLEtBQUt5M0QsYUFBYSxJQUN2QyIsInNvdXJjZXMiOlsid2VicGFjazovL3RpY3R0YWMtdG9lLy4vbm9kZV9tb2R1bGVzL2FibHkvYnVpbGQvYWJseS1jb21tb25qcy5qcyIsIndlYnBhY2s6Ly90aWN0dGFjLXRvZS8uL25vZGVfbW9kdWxlcy9hYmx5L3Byb21pc2VzLmpzIiwid2VicGFjazovL3RpY3R0YWMtdG9lL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3RpY3R0YWMtdG9lL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3RpY3R0YWMtdG9lL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly90aWN0dGFjLXRvZS93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3RpY3R0YWMtdG9lLy4vc3JjL3NlcnZlci5qcyIsIndlYnBhY2s6Ly90aWN0dGFjLXRvZS8uL3NyYy92aWV3LmpzIiwid2VicGFjazovL3RpY3R0YWMtdG9lLy4vc3JjL2NvbnRyb2xsZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZSBDb3B5cmlnaHQgMjAxNS0yMDIyIEFibHkgUmVhbC10aW1lIEx0ZCAoYWJseS5jb20pXG4gKiBcbiAqIEFibHkgSmF2YVNjcmlwdCBMaWJyYXJ5IHYxLjIuNDNcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hYmx5L2FibHktanNcbiAqIFxuICogUmVsZWFzZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbmNlIHYyLjBcbiAqL1xuKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wiQWJseVwiXSA9IGZhY3RvcnkoKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJBYmx5XCJdID0gZmFjdG9yeSgpO1xufSkod2luZG93LCBmdW5jdGlvbigpIHtcbnJldHVybiAvKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGk6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bDogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuLyoqKioqKi8gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuLyoqKioqKi8gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuLyoqKioqKi8gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3Rcbi8qKioqKiovIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4vKioqKioqLyBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuLyoqKioqKi8gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3Rcbi8qKioqKiovIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuLyoqKioqKi8gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuLyoqKioqKi8gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4vKioqKioqLyBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbi8qKioqKiovIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4vKioqKioqLyBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuLyoqKioqKi8gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbi8qKioqKiovIFx0XHRyZXR1cm4gbnM7XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbi8qKioqKiovIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbi8qKioqKiovIFx0XHRyZXR1cm4gZ2V0dGVyO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG4vKioqKioqL1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDQyKTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKFtcbi8qIDAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiX19leHRlbmRzXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gX19leHRlbmRzOyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJfX2Fzc2lnblwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIF9fYXNzaWduOyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJfX3Jlc3RcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBfX3Jlc3Q7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIl9fZGVjb3JhdGVcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBfX2RlY29yYXRlOyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJfX3BhcmFtXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gX19wYXJhbTsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiX19tZXRhZGF0YVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIF9fbWV0YWRhdGE7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIl9fYXdhaXRlclwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIF9fYXdhaXRlcjsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiX19nZW5lcmF0b3JcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBfX2dlbmVyYXRvcjsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiX19jcmVhdGVCaW5kaW5nXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gX19jcmVhdGVCaW5kaW5nOyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJfX2V4cG9ydFN0YXJcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBfX2V4cG9ydFN0YXI7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIl9fdmFsdWVzXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gX192YWx1ZXM7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIl9fcmVhZFwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIF9fcmVhZDsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiX19zcHJlYWRcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBfX3NwcmVhZDsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiX19zcHJlYWRBcnJheXNcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBfX3NwcmVhZEFycmF5czsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiX19zcHJlYWRBcnJheVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIF9fc3ByZWFkQXJyYXk7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIl9fYXdhaXRcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBfX2F3YWl0OyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJfX2FzeW5jR2VuZXJhdG9yXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gX19hc3luY0dlbmVyYXRvcjsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiX19hc3luY0RlbGVnYXRvclwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIF9fYXN5bmNEZWxlZ2F0b3I7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIl9fYXN5bmNWYWx1ZXNcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBfX2FzeW5jVmFsdWVzOyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJfX21ha2VUZW1wbGF0ZU9iamVjdFwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIF9fbWFrZVRlbXBsYXRlT2JqZWN0OyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJfX2ltcG9ydFN0YXJcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBfX2ltcG9ydFN0YXI7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIl9faW1wb3J0RGVmYXVsdFwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIF9faW1wb3J0RGVmYXVsdDsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiX19jbGFzc1ByaXZhdGVGaWVsZEdldFwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIF9fY2xhc3NQcml2YXRlRmllbGRHZXQ7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIl9fY2xhc3NQcml2YXRlRmllbGRTZXRcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0OyB9KTtcbi8qISAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cclxuXHJcblBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxyXG5wdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXHJcblxyXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIXHJcblJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxyXG5BTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsXHJcbklORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTVxyXG5MT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxyXG5PVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SXHJcblBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcbi8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlICovXHJcblxyXG52YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG59O1xyXG5cclxuZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcclxuICAgIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xyXG4gICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59XHJcblxyXG52YXIgX19hc3NpZ24gPSBmdW5jdGlvbigpIHtcclxuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XHJcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIF9fcmVzdChzLCBlKSB7XHJcbiAgICB2YXIgdCA9IHt9O1xyXG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXHJcbiAgICAgICAgdFtwXSA9IHNbcF07XHJcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXHJcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcclxuICAgICAgICB9XHJcbiAgICByZXR1cm4gdDtcclxufVxyXG5cclxuZnVuY3Rpb24gX19kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxufVxyXG5cclxuZnVuY3Rpb24gX19wYXJhbShwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBfX21ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBfX2dlbmVyYXRvcih0aGlzQXJnLCBib2R5KSB7XHJcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufVxyXG5cclxudmFyIF9fY3JlYXRlQmluZGluZyA9IE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcclxuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XHJcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XHJcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xyXG4gICAgb1trMl0gPSBtW2tdO1xyXG59KTtcclxuXHJcbmZ1bmN0aW9uIF9fZXhwb3J0U3RhcihtLCBvKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG8sIHApKSBfX2NyZWF0ZUJpbmRpbmcobywgbSwgcCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIF9fdmFsdWVzKG8pIHtcclxuICAgIHZhciBzID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5pdGVyYXRvciwgbSA9IHMgJiYgb1tzXSwgaSA9IDA7XHJcbiAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcclxuICAgIGlmIChvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgcmV0dXJuIHtcclxuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChvICYmIGkgPj0gby5sZW5ndGgpIG8gPSB2b2lkIDA7XHJcbiAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBvICYmIG9baSsrXSwgZG9uZTogIW8gfTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihzID8gXCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiIDogXCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBfX3JlYWQobywgbikge1xyXG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xyXG4gICAgaWYgKCFtKSByZXR1cm4gbztcclxuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxyXG4gICAgZmluYWxseSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG4vKiogQGRlcHJlY2F0ZWQgKi9cclxuZnVuY3Rpb24gX19zcHJlYWQoKSB7XHJcbiAgICBmb3IgKHZhciBhciA9IFtdLCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcclxuICAgICAgICBhciA9IGFyLmNvbmNhdChfX3JlYWQoYXJndW1lbnRzW2ldKSk7XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbi8qKiBAZGVwcmVjYXRlZCAqL1xyXG5mdW5jdGlvbiBfX3NwcmVhZEFycmF5cygpIHtcclxuICAgIGZvciAodmFyIHMgPSAwLCBpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgcyArPSBhcmd1bWVudHNbaV0ubGVuZ3RoO1xyXG4gICAgZm9yICh2YXIgciA9IEFycmF5KHMpLCBrID0gMCwgaSA9IDA7IGkgPCBpbDsgaSsrKVxyXG4gICAgICAgIGZvciAodmFyIGEgPSBhcmd1bWVudHNbaV0sIGogPSAwLCBqbCA9IGEubGVuZ3RoOyBqIDwgamw7IGorKywgaysrKVxyXG4gICAgICAgICAgICByW2tdID0gYVtqXTtcclxuICAgIHJldHVybiByO1xyXG59XHJcblxyXG5mdW5jdGlvbiBfX3NwcmVhZEFycmF5KHRvLCBmcm9tLCBwYWNrKSB7XHJcbiAgICBpZiAocGFjayB8fCBhcmd1bWVudHMubGVuZ3RoID09PSAyKSBmb3IgKHZhciBpID0gMCwgbCA9IGZyb20ubGVuZ3RoLCBhcjsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgIGlmIChhciB8fCAhKGkgaW4gZnJvbSkpIHtcclxuICAgICAgICAgICAgaWYgKCFhcikgYXIgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tLCAwLCBpKTtcclxuICAgICAgICAgICAgYXJbaV0gPSBmcm9tW2ldO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0by5jb25jYXQoYXIgfHwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSkpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBfX2F3YWl0KHYpIHtcclxuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgX19hd2FpdCA/ICh0aGlzLnYgPSB2LCB0aGlzKSA6IG5ldyBfX2F3YWl0KHYpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBfX2FzeW5jR2VuZXJhdG9yKHRoaXNBcmcsIF9hcmd1bWVudHMsIGdlbmVyYXRvcikge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBnID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pLCBpLCBxID0gW107XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaWYgKGdbbl0pIGlbbl0gPSBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKGEsIGIpIHsgcS5wdXNoKFtuLCB2LCBhLCBiXSkgPiAxIHx8IHJlc3VtZShuLCB2KTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHJlc3VtZShuLCB2KSB7IHRyeSB7IHN0ZXAoZ1tuXSh2KSk7IH0gY2F0Y2ggKGUpIHsgc2V0dGxlKHFbMF1bM10sIGUpOyB9IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAocikgeyByLnZhbHVlIGluc3RhbmNlb2YgX19hd2FpdCA/IFByb21pc2UucmVzb2x2ZShyLnZhbHVlLnYpLnRoZW4oZnVsZmlsbCwgcmVqZWN0KSA6IHNldHRsZShxWzBdWzJdLCByKTsgfVxyXG4gICAgZnVuY3Rpb24gZnVsZmlsbCh2YWx1ZSkgeyByZXN1bWUoXCJuZXh0XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gcmVqZWN0KHZhbHVlKSB7IHJlc3VtZShcInRocm93XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKGYsIHYpIHsgaWYgKGYodiksIHEuc2hpZnQoKSwgcS5sZW5ndGgpIHJlc3VtZShxWzBdWzBdLCBxWzBdWzFdKTsgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBfX2FzeW5jRGVsZWdhdG9yKG8pIHtcclxuICAgIHZhciBpLCBwO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiLCBmdW5jdGlvbiAoZSkgeyB0aHJvdyBlOyB9KSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobiwgZikgeyBpW25dID0gb1tuXSA/IGZ1bmN0aW9uICh2KSB7IHJldHVybiAocCA9ICFwKSA/IHsgdmFsdWU6IF9fYXdhaXQob1tuXSh2KSksIGRvbmU6IG4gPT09IFwicmV0dXJuXCIgfSA6IGYgPyBmKHYpIDogdjsgfSA6IGY7IH1cclxufVxyXG5cclxuZnVuY3Rpb24gX19hc3luY1ZhbHVlcyhvKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIG0gPSBvW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSwgaTtcclxuICAgIHJldHVybiBtID8gbS5jYWxsKG8pIDogKG8gPSB0eXBlb2YgX192YWx1ZXMgPT09IFwiZnVuY3Rpb25cIiA/IF9fdmFsdWVzKG8pIDogb1tTeW1ib2wuaXRlcmF0b3JdKCksIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpKTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpW25dID0gb1tuXSAmJiBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2ID0gb1tuXSh2KSwgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgdi5kb25lLCB2LnZhbHVlKTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIGQsIHYpIHsgUHJvbWlzZS5yZXNvbHZlKHYpLnRoZW4oZnVuY3Rpb24odikgeyByZXNvbHZlKHsgdmFsdWU6IHYsIGRvbmU6IGQgfSk7IH0sIHJlamVjdCk7IH1cclxufVxyXG5cclxuZnVuY3Rpb24gX19tYWtlVGVtcGxhdGVPYmplY3QoY29va2VkLCByYXcpIHtcclxuICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgXCJyYXdcIiwgeyB2YWx1ZTogcmF3IH0pOyB9IGVsc2UgeyBjb29rZWQucmF3ID0gcmF3OyB9XHJcbiAgICByZXR1cm4gY29va2VkO1xyXG59O1xyXG5cclxudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9IE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xyXG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcclxuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcclxufTtcclxuXHJcbmZ1bmN0aW9uIF9faW1wb3J0U3Rhcihtb2QpIHtcclxuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XHJcbiAgICB2YXIgcmVzdWx0ID0ge307XHJcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XHJcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuZnVuY3Rpb24gX19pbXBvcnREZWZhdWx0KG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBkZWZhdWx0OiBtb2QgfTtcclxufVxyXG5cclxuZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEdldChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcclxuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcclxuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xyXG4gICAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcclxufVxyXG5cclxuZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZFNldChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XHJcbiAgICBpZiAoa2luZCA9PT0gXCJtXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIG1ldGhvZCBpcyBub3Qgd3JpdGFibGVcIik7XHJcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7XHJcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xyXG4gICAgcmV0dXJuIChraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlciwgdmFsdWUpIDogZiA/IGYudmFsdWUgPSB2YWx1ZSA6IHN0YXRlLnNldChyZWNlaXZlciwgdmFsdWUpKSwgdmFsdWU7XHJcbn1cclxuXG5cbi8qKiovIH0pLFxuLyogMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihnbG9iYWwpIHtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuYWxsVG9VcHBlckNhc2UgPSBleHBvcnRzLmFsbFRvTG93ZXJDYXNlID0gZXhwb3J0cy5lbmNvZGVCb2R5ID0gZXhwb3J0cy5kZWNvZGVCb2R5ID0gZXhwb3J0cy5Gb3JtYXQgPSBleHBvcnRzLnByb21pc2lmeSA9IGV4cG9ydHMudHJpbSA9IGV4cG9ydHMuYXJyQ2hvb3NlTiA9IGV4cG9ydHMucmFuZG9tSGV4U3RyaW5nID0gZXhwb3J0cy5yYW5kb21TdHJpbmcgPSBleHBvcnRzLmNoZWFwUmFuZFN0ciA9IGV4cG9ydHMuZGF0YVNpemVCeXRlcyA9IGV4cG9ydHMuaW5zcGVjdEJvZHkgPSBleHBvcnRzLmluc3BlY3RFcnJvciA9IGV4cG9ydHMuaXNFcnJvckluZm9PclBhcnRpYWxFcnJvckluZm8gPSBleHBvcnRzLm5vdyA9IGV4cG9ydHMucGFyc2VRdWVyeVN0cmluZyA9IGV4cG9ydHMudG9RdWVyeVN0cmluZyA9IGV4cG9ydHMuYXJyUG9wUmFuZG9tRWxlbWVudCA9IGV4cG9ydHMuZGVmYXVsdFBvc3RIZWFkZXJzID0gZXhwb3J0cy5kZWZhdWx0R2V0SGVhZGVycyA9IGV4cG9ydHMuYWxsU2FtZSA9IGV4cG9ydHMuYXJyRXZlcnkgPSBleHBvcnRzLmFyckZpbHRlciA9IGV4cG9ydHMuYXJyTWFwID0gZXhwb3J0cy5zYWZlQXJyRm9yRWFjaCA9IGV4cG9ydHMuYXJyRm9yRWFjaCA9IGV4cG9ydHMuZm9ySW5Pd25Ob25OdWxsUHJvcGVydGllcyA9IGV4cG9ydHMudmFsdWVzQXJyYXkgPSBleHBvcnRzLmtleXNBcnJheSA9IGV4cG9ydHMuYXJyV2l0aG91dFZhbHVlID0gZXhwb3J0cy5hcnJEZWxldGVWYWx1ZSA9IGV4cG9ydHMuYXJySW4gPSBleHBvcnRzLmFyckluZGV4T2YgPSBleHBvcnRzLmFyclN1YnRyYWN0ID0gZXhwb3J0cy5hcnJJbnRlcnNlY3RPYiA9IGV4cG9ydHMuYXJySW50ZXJzZWN0ID0gZXhwb3J0cy5pbnRlcnNlY3QgPSBleHBvcnRzLmNvbnRhaW5zVmFsdWUgPSBleHBvcnRzLmluaGVyaXRzID0gZXhwb3J0cy5wcm90b3R5cGljYWxDbG9uZSA9IGV4cG9ydHMuc2hhbGxvd0Nsb25lID0gZXhwb3J0cy5pc0VtcHR5QXJnID0gZXhwb3J0cy5pc09ubHlQcm9wSW4gPSBleHBvcnRzLmlzRW1wdHkgPSBleHBvcnRzLmlzT2JqZWN0ID0gZXhwb3J0cy5lbnN1cmVBcnJheSA9IGV4cG9ydHMuaXNBcnJheSA9IGV4cG9ydHMuY29weSA9IGV4cG9ydHMubWl4aW4gPSB2b2lkIDA7XG5leHBvcnRzLnRvQmFzZTY0ID0gZXhwb3J0cy5tYXRjaERlcml2ZWRDaGFubmVsID0gZXhwb3J0cy5zaGFsbG93RXF1YWxzID0gZXhwb3J0cy5nZXRHbG9iYWxPYmplY3QgPSBleHBvcnRzLmdldFJldHJ5VGltZSA9IGV4cG9ydHMuZ2V0Sml0dGVyQ29lZmZpY2llbnQgPSBleHBvcnRzLmdldEJhY2tvZmZDb2VmZmljaWVudCA9IHZvaWQgMDtcbnZhciB0c2xpYl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciBwbGF0Zm9ybV8xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygzKSk7XG52YXIgZGVmYXVsdHNfMSA9IHRzbGliXzEuX19pbXBvcnRTdGFyKF9fd2VicGFja19yZXF1aXJlX18oOCkpO1xudmFyIGVycm9yaW5mb18xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXyg0KSk7XG52YXIgZW5jX2Jhc2U2NF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMSk7XG52YXIgZW5jX3V0ZjhfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMzEpO1xuZnVuY3Rpb24gcmFuZG9tUG9zbihhcnJPclN0cikge1xuICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBhcnJPclN0ci5sZW5ndGgpO1xufVxuLypcbiAqIEFkZCBhIHNldCBvZiBwcm9wZXJ0aWVzIHRvIGEgdGFyZ2V0IG9iamVjdFxuICogdGFyZ2V0OiB0aGUgdGFyZ2V0IG9iamVjdFxuICogcHJvcHM6ICBhbiBvYmplY3Qgd2hvc2UgZW51bWVyYWJsZSBwcm9wZXJ0aWVzIGFyZVxuICogICAgICAgICBhZGRlZCwgYnkgcmVmZXJlbmNlIG9ubHlcbiAqL1xuZnVuY3Rpb24gbWl4aW4odGFyZ2V0KSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBhcmdzW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IGFyZ3NbaV07XG4gICAgICAgIGlmICghc291cmNlKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICB2YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3BlcnR5IHx8IGhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xufVxuZXhwb3J0cy5taXhpbiA9IG1peGluO1xuLypcbiAqIEFkZCBhIHNldCBvZiBwcm9wZXJ0aWVzIHRvIGEgdGFyZ2V0IG9iamVjdFxuICogdGFyZ2V0OiB0aGUgdGFyZ2V0IG9iamVjdFxuICogcHJvcHM6ICBhbiBvYmplY3Qgd2hvc2UgZW51bWVyYWJsZSBwcm9wZXJ0aWVzIGFyZVxuICogICAgICAgICBhZGRlZCwgYnkgcmVmZXJlbmNlIG9ubHlcbiAqL1xuZnVuY3Rpb24gY29weShzcmMpIHtcbiAgICByZXR1cm4gbWl4aW4oe30sIHNyYyk7XG59XG5leHBvcnRzLmNvcHkgPSBjb3B5O1xuLypcbiAqIERldGVybWluZSB3aGV0aGVyIG9yIG5vdCBhIGdpdmVuIG9iamVjdCBpc1xuICogYW4gYXJyYXkuXG4gKi9cbmV4cG9ydHMuaXNBcnJheSA9IEFycmF5LmlzQXJyYXkgfHxcbiAgICBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT0gJ1tvYmplY3QgQXJyYXldJztcbiAgICB9O1xuLypcbiAqIEVuc3VyZXMgdGhhdCBhbiBBcnJheSBvYmplY3QgaXMgYWx3YXlzIHJldHVybmVkXG4gKiByZXR1cm5pbmcgdGhlIG9yaWdpbmFsIEFycmF5IG9mIG9iaiBpcyBhbiBBcnJheVxuICogZWxzZSB3cmFwcGluZyB0aGUgb2JqIGluIGEgc2luZ2xlIGVsZW1lbnQgQXJyYXlcbiAqL1xuZnVuY3Rpb24gZW5zdXJlQXJyYXkob2JqKSB7XG4gICAgaWYgKGlzRW1wdHlBcmcob2JqKSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGlmICgoMCwgZXhwb3J0cy5pc0FycmF5KShvYmopKSB7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfVxuICAgIHJldHVybiBbb2JqXTtcbn1cbmV4cG9ydHMuZW5zdXJlQXJyYXkgPSBlbnN1cmVBcnJheTtcbmZ1bmN0aW9uIGlzT2JqZWN0KG9iKSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYikgPT0gJ1tvYmplY3QgT2JqZWN0XSc7XG59XG5leHBvcnRzLmlzT2JqZWN0ID0gaXNPYmplY3Q7XG4vKlxuICogRGV0ZXJtaW5lIHdoZXRoZXIgb3Igbm90IGFuIG9iamVjdCBjb250YWluc1xuICogYW55IGVudW1lcmFibGUgcHJvcGVydGllcy5cbiAqIG9iOiB0aGUgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGlzRW1wdHkob2IpIHtcbiAgICBmb3IgKHZhciBwcm9wIGluIG9iKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRydWU7XG59XG5leHBvcnRzLmlzRW1wdHkgPSBpc0VtcHR5O1xuZnVuY3Rpb24gaXNPbmx5UHJvcEluKG9iLCBwcm9wZXJ0eSkge1xuICAgIGZvciAodmFyIHByb3AgaW4gb2IpIHtcbiAgICAgICAgaWYgKHByb3AgIT09IHByb3BlcnR5KSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5leHBvcnRzLmlzT25seVByb3BJbiA9IGlzT25seVByb3BJbjtcbi8qXG4gKiBEZXRlcm1pbmUgd2hldGhlciBvciBub3QgYW4gYXJndW1lbnQgdG8gYW4gb3ZlcmxvYWRlZCBmdW5jdGlvbiBpc1xuICogdW5kZWZpbmVkIChtaXNzaW5nKSBvciBudWxsLlxuICogVGhpcyBtZXRob2QgaXMgdXNlZnVsIHdoZW4gY29uc3RydWN0aW5nIGZ1bmN0aW9ucyBzdWNoIGFzIChXZWJJREwgdGVybWlub2xvZ3kpOlxuICogICBvZmYoW1RyZWF0VW5kZWZpbmVkQXM9TnVsbF0gRE9NU3RyaW5nPyBldmVudClcbiAqIGFzIHlvdSBjYW4gdGhlbiBjb25maXJtIHRoZSBhcmd1bWVudCB1c2luZzpcbiAqICAgVXRpbHMuaXNFbXB0eUFyZyhldmVudClcbiAqL1xuZnVuY3Rpb24gaXNFbXB0eUFyZyhhcmcpIHtcbiAgICByZXR1cm4gYXJnID09PSBudWxsIHx8IGFyZyA9PT0gdW5kZWZpbmVkO1xufVxuZXhwb3J0cy5pc0VtcHR5QXJnID0gaXNFbXB0eUFyZztcbi8qXG4gKiBQZXJmb3JtIGEgc2ltcGxlIHNoYWxsb3cgY2xvbmUgb2YgYW4gb2JqZWN0LlxuICogUmVzdWx0IGlzIGFuIG9iamVjdCBpcnJlc3BlY3RpdmUgb2Ygd2hldGhlclxuICogdGhlIGlucHV0IGlzIGFuIG9iamVjdCBvciBhcnJheS4gQWxsXG4gKiBlbnVtZXJhYmxlIHByb3BlcnRpZXMgYXJlIGNvcGllZC5cbiAqIG9iOiB0aGUgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIHNoYWxsb3dDbG9uZShvYikge1xuICAgIHZhciByZXN1bHQgPSBuZXcgT2JqZWN0KCk7XG4gICAgZm9yICh2YXIgcHJvcCBpbiBvYilcbiAgICAgICAgcmVzdWx0W3Byb3BdID0gb2JbcHJvcF07XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydHMuc2hhbGxvd0Nsb25lID0gc2hhbGxvd0Nsb25lO1xuLypcbiAqIENsb25lIGFuIG9iamVjdCBieSBjcmVhdGluZyBhIG5ldyBvYmplY3Qgd2l0aCB0aGVcbiAqIGdpdmVuIG9iamVjdCBhcyBpdHMgcHJvdG90eXBlLiBPcHRpb25hbGx5XG4gKiBhIHNldCBvZiBhZGRpdGlvbmFsIG93biBwcm9wZXJ0aWVzIGNhbiBiZVxuICogc3VwcGxpZWQgdG8gYmUgYWRkZWQgdG8gdGhlIG5ld2x5IGNyZWF0ZWQgY2xvbmUuXG4gKiBvYjogICAgICAgICAgICB0aGUgb2JqZWN0IHRvIGJlIGNsb25lZFxuICogb3duUHJvcGVydGllczogb3B0aW9uYWwgb2JqZWN0IHdpdGggYWRkaXRpb25hbFxuICogICAgICAgICAgICAgICAgcHJvcGVydGllcyB0byBhZGRcbiAqL1xuZnVuY3Rpb24gcHJvdG90eXBpY2FsQ2xvbmUob2IsIG93blByb3BlcnRpZXMpIHtcbiAgICB2YXIgRiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gRigpIHtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gRjtcbiAgICB9KCkpO1xuICAgIEYucHJvdG90eXBlID0gb2I7XG4gICAgdmFyIHJlc3VsdCA9IG5ldyBGKCk7XG4gICAgaWYgKG93blByb3BlcnRpZXMpXG4gICAgICAgIG1peGluKHJlc3VsdCwgb3duUHJvcGVydGllcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydHMucHJvdG90eXBpY2FsQ2xvbmUgPSBwcm90b3R5cGljYWxDbG9uZTtcbi8qXG4gKiBEZWNsYXJlIGEgY29uc3RydWN0b3IgdG8gcmVwcmVzZW50IGEgc3ViY2xhc3NcbiAqIG9mIGFub3RoZXIgY29uc3RydWN0b3JcbiAqIElmIHBsYXRmb3JtIGhhcyBhIGJ1aWx0LWluIHZlcnNpb24gd2UgdXNlIHRoYXQgZnJvbSBQbGF0Zm9ybSwgZWxzZSB3ZVxuICogZGVmaW5lIGhlcmUgKHNvIGNhbiBtYWtlIHVzZSBvZiBvdGhlciBVdGlscyBmbnMpXG4gKiBTZWUgbm9kZS5qcyB1dGlsLmluaGVyaXRzXG4gKi9cbnZhciBpbmhlcml0cyA9IGZ1bmN0aW9uIChjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBpZiAocGxhdGZvcm1fMS5kZWZhdWx0LkNvbmZpZy5pbmhlcml0cykge1xuICAgICAgICBwbGF0Zm9ybV8xLmRlZmF1bHQuQ29uZmlnLmluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcik7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3I7XG4gICAgY3Rvci5wcm90b3R5cGUgPSBwcm90b3R5cGljYWxDbG9uZShzdXBlckN0b3IucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiBjdG9yIH0pO1xufTtcbmV4cG9ydHMuaW5oZXJpdHMgPSBpbmhlcml0cztcbi8qXG4gKiBEZXRlcm1pbmUgd2hldGhlciBvciBub3QgYW4gb2JqZWN0IGhhcyBhbiBlbnVtZXJhYmxlXG4gKiBwcm9wZXJ0eSB3aG9zZSB2YWx1ZSBlcXVhbHMgYSBnaXZlbiB2YWx1ZS5cbiAqIG9iOiAgdGhlIG9iamVjdFxuICogdmFsOiB0aGUgdmFsdWUgdG8gZmluZFxuICovXG5mdW5jdGlvbiBjb250YWluc1ZhbHVlKG9iLCB2YWwpIHtcbiAgICBmb3IgKHZhciBpIGluIG9iKSB7XG4gICAgICAgIGlmIChvYltpXSA9PSB2YWwpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZXhwb3J0cy5jb250YWluc1ZhbHVlID0gY29udGFpbnNWYWx1ZTtcbmZ1bmN0aW9uIGludGVyc2VjdChhcnIsIG9iKSB7XG4gICAgcmV0dXJuICgwLCBleHBvcnRzLmlzQXJyYXkpKG9iKSA/IGFyckludGVyc2VjdChhcnIsIG9iKSA6IGFyckludGVyc2VjdE9iKGFyciwgb2IpO1xufVxuZXhwb3J0cy5pbnRlcnNlY3QgPSBpbnRlcnNlY3Q7XG5mdW5jdGlvbiBhcnJJbnRlcnNlY3QoYXJyMSwgYXJyMikge1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycjEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIG1lbWJlciA9IGFycjFbaV07XG4gICAgICAgIGlmICgoMCwgZXhwb3J0cy5hcnJJbmRleE9mKShhcnIyLCBtZW1iZXIpICE9IC0xKVxuICAgICAgICAgICAgcmVzdWx0LnB1c2gobWVtYmVyKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydHMuYXJySW50ZXJzZWN0ID0gYXJySW50ZXJzZWN0O1xuZnVuY3Rpb24gYXJySW50ZXJzZWN0T2IoYXJyLCBvYikge1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgbWVtYmVyID0gYXJyW2ldO1xuICAgICAgICBpZiAobWVtYmVyIGluIG9iKVxuICAgICAgICAgICAgcmVzdWx0LnB1c2gobWVtYmVyKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydHMuYXJySW50ZXJzZWN0T2IgPSBhcnJJbnRlcnNlY3RPYjtcbmZ1bmN0aW9uIGFyclN1YnRyYWN0KGFycjEsIGFycjIpIHtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIxLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBlbGVtZW50ID0gYXJyMVtpXTtcbiAgICAgICAgaWYgKCgwLCBleHBvcnRzLmFyckluZGV4T2YpKGFycjIsIGVsZW1lbnQpID09IC0xKVxuICAgICAgICAgICAgcmVzdWx0LnB1c2goZWxlbWVudCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnRzLmFyclN1YnRyYWN0ID0gYXJyU3VidHJhY3Q7XG5leHBvcnRzLmFyckluZGV4T2YgPSBBcnJheS5wcm90b3R5cGUuaW5kZXhPZlxuICAgID8gZnVuY3Rpb24gKGFyciwgZWxlbSwgZnJvbUluZGV4KSB7XG4gICAgICAgIHJldHVybiBhcnIuaW5kZXhPZihlbGVtLCBmcm9tSW5kZXgpO1xuICAgIH1cbiAgICA6IGZ1bmN0aW9uIChhcnIsIGVsZW0sIGZyb21JbmRleCkge1xuICAgICAgICBmcm9tSW5kZXggPSBmcm9tSW5kZXggfHwgMDtcbiAgICAgICAgdmFyIGxlbiA9IGFyci5sZW5ndGg7XG4gICAgICAgIGZvciAoOyBmcm9tSW5kZXggPCBsZW47IGZyb21JbmRleCsrKSB7XG4gICAgICAgICAgICBpZiAoYXJyW2Zyb21JbmRleF0gPT09IGVsZW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZnJvbUluZGV4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9O1xuZnVuY3Rpb24gYXJySW4oYXJyLCB2YWwpIHtcbiAgICByZXR1cm4gKDAsIGV4cG9ydHMuYXJySW5kZXhPZikoYXJyLCB2YWwpICE9PSAtMTtcbn1cbmV4cG9ydHMuYXJySW4gPSBhcnJJbjtcbmZ1bmN0aW9uIGFyckRlbGV0ZVZhbHVlKGFyciwgdmFsKSB7XG4gICAgdmFyIGlkeCA9ICgwLCBleHBvcnRzLmFyckluZGV4T2YpKGFyciwgdmFsKTtcbiAgICB2YXIgcmVzID0gaWR4ICE9IC0xO1xuICAgIGlmIChyZXMpXG4gICAgICAgIGFyci5zcGxpY2UoaWR4LCAxKTtcbiAgICByZXR1cm4gcmVzO1xufVxuZXhwb3J0cy5hcnJEZWxldGVWYWx1ZSA9IGFyckRlbGV0ZVZhbHVlO1xuZnVuY3Rpb24gYXJyV2l0aG91dFZhbHVlKGFyciwgdmFsKSB7XG4gICAgdmFyIG5ld0FyciA9IGFyci5zbGljZSgpO1xuICAgIGFyckRlbGV0ZVZhbHVlKG5ld0FyciwgdmFsKTtcbiAgICByZXR1cm4gbmV3QXJyO1xufVxuZXhwb3J0cy5hcnJXaXRob3V0VmFsdWUgPSBhcnJXaXRob3V0VmFsdWU7XG4vKlxuICogQ29uc3RydWN0IGFuIGFycmF5IG9mIHRoZSBrZXlzIG9mIHRoZSBlbnVtZXJhYmxlXG4gKiBwcm9wZXJ0aWVzIG9mIGEgZ2l2ZW4gb2JqZWN0LCBvcHRpb25hbGx5IGxpbWl0ZWRcbiAqIHRvIG9ubHkgdGhlIG93biBwcm9wZXJ0aWVzLlxuICogb2I6ICAgICAgdGhlIG9iamVjdFxuICogb3duT25seTogYm9vbGVhbiwgZ2V0IG93biBwcm9wZXJ0aWVzIG9ubHlcbiAqL1xuZnVuY3Rpb24ga2V5c0FycmF5KG9iLCBvd25Pbmx5KSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIGZvciAodmFyIHByb3AgaW4gb2IpIHtcbiAgICAgICAgaWYgKG93bk9ubHkgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYiwgcHJvcCkpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgcmVzdWx0LnB1c2gocHJvcCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnRzLmtleXNBcnJheSA9IGtleXNBcnJheTtcbi8qXG4gKiBDb25zdHJ1Y3QgYW4gYXJyYXkgb2YgdGhlIHZhbHVlcyBvZiB0aGUgZW51bWVyYWJsZVxuICogcHJvcGVydGllcyBvZiBhIGdpdmVuIG9iamVjdCwgb3B0aW9uYWxseSBsaW1pdGVkXG4gKiB0byBvbmx5IHRoZSBvd24gcHJvcGVydGllcy5cbiAqIG9iOiAgICAgIHRoZSBvYmplY3RcbiAqIG93bk9ubHk6IGJvb2xlYW4sIGdldCBvd24gcHJvcGVydGllcyBvbmx5XG4gKi9cbmZ1bmN0aW9uIHZhbHVlc0FycmF5KG9iLCBvd25Pbmx5KSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIGZvciAodmFyIHByb3AgaW4gb2IpIHtcbiAgICAgICAgaWYgKG93bk9ubHkgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYiwgcHJvcCkpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgcmVzdWx0LnB1c2gob2JbcHJvcF0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0cy52YWx1ZXNBcnJheSA9IHZhbHVlc0FycmF5O1xuZnVuY3Rpb24gZm9ySW5Pd25Ob25OdWxsUHJvcGVydGllcyhvYiwgZm4pIHtcbiAgICBmb3IgKHZhciBwcm9wIGluIG9iKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2IsIHByb3ApICYmIG9iW3Byb3BdKSB7XG4gICAgICAgICAgICBmbihwcm9wKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuZm9ySW5Pd25Ob25OdWxsUHJvcGVydGllcyA9IGZvckluT3duTm9uTnVsbFByb3BlcnRpZXM7XG5leHBvcnRzLmFyckZvckVhY2ggPSBBcnJheS5wcm90b3R5cGUuZm9yRWFjaFxuICAgID8gZnVuY3Rpb24gKGFyciwgZm4pIHtcbiAgICAgICAgYXJyLmZvckVhY2goZm4pO1xuICAgIH1cbiAgICA6IGZ1bmN0aW9uIChhcnIsIGZuKSB7XG4gICAgICAgIHZhciBsZW4gPSBhcnIubGVuZ3RoO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBmbihhcnJbaV0sIGksIGFycik7XG4gICAgICAgIH1cbiAgICB9O1xuLyogVXNlZnVsIHdoZW4gdGhlIGZ1bmN0aW9uIG1heSBtdXRhdGUgdGhlIGFycmF5ICovXG5mdW5jdGlvbiBzYWZlQXJyRm9yRWFjaChhcnIsIGZuKSB7XG4gICAgcmV0dXJuICgwLCBleHBvcnRzLmFyckZvckVhY2gpKGFyci5zbGljZSgpLCBmbik7XG59XG5leHBvcnRzLnNhZmVBcnJGb3JFYWNoID0gc2FmZUFyckZvckVhY2g7XG5leHBvcnRzLmFyck1hcCA9IEFycmF5LnByb3RvdHlwZS5tYXBcbiAgICA/IGZ1bmN0aW9uIChhcnIsIGZuKSB7XG4gICAgICAgIHJldHVybiBhcnIubWFwKGZuKTtcbiAgICB9XG4gICAgOiBmdW5jdGlvbiAoYXJyLCBmbikge1xuICAgICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICAgIHZhciBsZW4gPSBhcnIubGVuZ3RoO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChmbihhcnJbaV0sIGksIGFycikpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbmV4cG9ydHMuYXJyRmlsdGVyID0gQXJyYXkucHJvdG90eXBlLmZpbHRlclxuICAgID8gZnVuY3Rpb24gKGFyciwgZm4pIHtcbiAgICAgICAgcmV0dXJuIGFyci5maWx0ZXIoZm4pO1xuICAgIH1cbiAgICA6IGZ1bmN0aW9uIChhcnIsIGZuKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBbXSwgbGVuID0gYXJyLmxlbmd0aDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgaWYgKGZuKGFycltpXSkpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChhcnJbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbmV4cG9ydHMuYXJyRXZlcnkgPSBBcnJheS5wcm90b3R5cGUuZXZlcnlcbiAgICA/IGZ1bmN0aW9uIChhcnIsIGZuKSB7XG4gICAgICAgIHJldHVybiBhcnIuZXZlcnkoZm4pO1xuICAgIH1cbiAgICA6IGZ1bmN0aW9uIChhcnIsIGZuKSB7XG4gICAgICAgIHZhciBsZW4gPSBhcnIubGVuZ3RoO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoIWZuKGFycltpXSwgaSwgYXJyKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuZnVuY3Rpb24gYWxsU2FtZShhcnIsIHByb3ApIHtcbiAgICBpZiAoYXJyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgdmFyIGZpcnN0ID0gYXJyWzBdW3Byb3BdO1xuICAgIHJldHVybiAoMCwgZXhwb3J0cy5hcnJFdmVyeSkoYXJyLCBmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gaXRlbVtwcm9wXSA9PT0gZmlyc3Q7XG4gICAgfSk7XG59XG5leHBvcnRzLmFsbFNhbWUgPSBhbGxTYW1lO1xudmFyIGNvbnRlbnRUeXBlcyA9IHtcbiAgICBqc29uOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAganNvbnA6ICdhcHBsaWNhdGlvbi9qYXZhc2NyaXB0JyxcbiAgICB4bWw6ICdhcHBsaWNhdGlvbi94bWwnLFxuICAgIGh0bWw6ICd0ZXh0L2h0bWwnLFxuICAgIG1zZ3BhY2s6ICdhcHBsaWNhdGlvbi94LW1zZ3BhY2snLFxufTtcbmZ1bmN0aW9uIGRlZmF1bHRHZXRIZWFkZXJzKG9wdGlvbnMsIGZvcm1hdCkge1xuICAgIHZhciBhY2NlcHQgPSBjb250ZW50VHlwZXNbZm9ybWF0IHx8IEZvcm1hdC5qc29uXTtcbiAgICByZXR1cm4ge1xuICAgICAgICBhY2NlcHQ6IGFjY2VwdCxcbiAgICAgICAgJ1gtQWJseS1WZXJzaW9uJzogZGVmYXVsdHNfMS5kZWZhdWx0LnByb3RvY29sVmVyc2lvbi50b1N0cmluZygpLFxuICAgICAgICAnQWJseS1BZ2VudCc6ICgwLCBkZWZhdWx0c18xLmdldEFnZW50U3RyaW5nKShvcHRpb25zKSxcbiAgICB9O1xufVxuZXhwb3J0cy5kZWZhdWx0R2V0SGVhZGVycyA9IGRlZmF1bHRHZXRIZWFkZXJzO1xuZnVuY3Rpb24gZGVmYXVsdFBvc3RIZWFkZXJzKG9wdGlvbnMsIGZvcm1hdCkge1xuICAgIHZhciBjb250ZW50VHlwZTtcbiAgICB2YXIgYWNjZXB0ID0gKGNvbnRlbnRUeXBlID0gY29udGVudFR5cGVzW2Zvcm1hdCB8fCBGb3JtYXQuanNvbl0pO1xuICAgIHJldHVybiB7XG4gICAgICAgIGFjY2VwdDogYWNjZXB0LFxuICAgICAgICAnY29udGVudC10eXBlJzogY29udGVudFR5cGUsXG4gICAgICAgICdYLUFibHktVmVyc2lvbic6IGRlZmF1bHRzXzEuZGVmYXVsdC5wcm90b2NvbFZlcnNpb24udG9TdHJpbmcoKSxcbiAgICAgICAgJ0FibHktQWdlbnQnOiAoMCwgZGVmYXVsdHNfMS5nZXRBZ2VudFN0cmluZykob3B0aW9ucyksXG4gICAgfTtcbn1cbmV4cG9ydHMuZGVmYXVsdFBvc3RIZWFkZXJzID0gZGVmYXVsdFBvc3RIZWFkZXJzO1xuZnVuY3Rpb24gYXJyUG9wUmFuZG9tRWxlbWVudChhcnIpIHtcbiAgICByZXR1cm4gYXJyLnNwbGljZShyYW5kb21Qb3NuKGFyciksIDEpWzBdO1xufVxuZXhwb3J0cy5hcnJQb3BSYW5kb21FbGVtZW50ID0gYXJyUG9wUmFuZG9tRWxlbWVudDtcbmZ1bmN0aW9uIHRvUXVlcnlTdHJpbmcocGFyYW1zKSB7XG4gICAgdmFyIHBhcnRzID0gW107XG4gICAgaWYgKHBhcmFtcykge1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gcGFyYW1zKVxuICAgICAgICAgICAgcGFydHMucHVzaChlbmNvZGVVUklDb21wb25lbnQoa2V5KSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudChwYXJhbXNba2V5XSkpO1xuICAgIH1cbiAgICByZXR1cm4gcGFydHMubGVuZ3RoID8gJz8nICsgcGFydHMuam9pbignJicpIDogJyc7XG59XG5leHBvcnRzLnRvUXVlcnlTdHJpbmcgPSB0b1F1ZXJ5U3RyaW5nO1xuZnVuY3Rpb24gcGFyc2VRdWVyeVN0cmluZyhxdWVyeSkge1xuICAgIHZhciBtYXRjaDtcbiAgICB2YXIgc2VhcmNoID0gLyhbXj8mPV0rKT0/KFteJl0qKS9nO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICB3aGlsZSAoKG1hdGNoID0gc2VhcmNoLmV4ZWMocXVlcnkpKSlcbiAgICAgICAgcmVzdWx0W2RlY29kZVVSSUNvbXBvbmVudChtYXRjaFsxXSldID0gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzJdKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0cy5wYXJzZVF1ZXJ5U3RyaW5nID0gcGFyc2VRdWVyeVN0cmluZztcbmV4cG9ydHMubm93ID0gRGF0ZS5ub3cgfHxcbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8qIElFIDggKi9cbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgIH07XG5mdW5jdGlvbiBpc0Vycm9ySW5mb09yUGFydGlhbEVycm9ySW5mbyhlcnIpIHtcbiAgICByZXR1cm4gKHR5cGVvZiBlcnIgPT0gJ29iamVjdCcgJiZcbiAgICAgICAgZXJyICE9PSBudWxsICYmXG4gICAgICAgIChlcnIuY29uc3RydWN0b3IubmFtZSA9PSAnRXJyb3JJbmZvJyB8fCBlcnIuY29uc3RydWN0b3IubmFtZSA9PSAnUGFydGlhbEVycm9ySW5mbycpKTtcbn1cbmV4cG9ydHMuaXNFcnJvckluZm9PclBhcnRpYWxFcnJvckluZm8gPSBpc0Vycm9ySW5mb09yUGFydGlhbEVycm9ySW5mbztcbmZ1bmN0aW9uIGluc3BlY3RFcnJvcihlcnIpIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIGlmIChlcnIgaW5zdGFuY2VvZiBFcnJvciB8fFxuICAgICAgICAoKF9hID0gZXJyID09PSBudWxsIHx8IGVyciA9PT0gdm9pZCAwID8gdm9pZCAwIDogZXJyLmNvbnN0cnVjdG9yKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubmFtZSkgPT09ICdFcnJvckluZm8nIHx8XG4gICAgICAgICgoX2IgPSBlcnIgPT09IG51bGwgfHwgZXJyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBlcnIuY29uc3RydWN0b3IpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5uYW1lKSA9PT0gJ1BhcnRpYWxFcnJvckluZm8nKVxuICAgICAgICByZXR1cm4gZXJyLnRvU3RyaW5nKCk7XG4gICAgcmV0dXJuIHBsYXRmb3JtXzEuZGVmYXVsdC5Db25maWcuaW5zcGVjdChlcnIpO1xufVxuZXhwb3J0cy5pbnNwZWN0RXJyb3IgPSBpbnNwZWN0RXJyb3I7XG5mdW5jdGlvbiBpbnNwZWN0Qm9keShib2R5KSB7XG4gICAgaWYgKHBsYXRmb3JtXzEuZGVmYXVsdC5CdWZmZXJVdGlscy5pc0J1ZmZlcihib2R5KSkge1xuICAgICAgICByZXR1cm4gYm9keS50b1N0cmluZygpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgYm9keSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIGJvZHk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gcGxhdGZvcm1fMS5kZWZhdWx0LkNvbmZpZy5pbnNwZWN0KGJvZHkpO1xuICAgIH1cbn1cbmV4cG9ydHMuaW5zcGVjdEJvZHkgPSBpbnNwZWN0Qm9keTtcbi8qIERhdGEgaXMgYXNzdW1lZCB0byBiZSBlaXRoZXIgYSBzdHJpbmcgb3IgYSBidWZmZXIuICovXG5mdW5jdGlvbiBkYXRhU2l6ZUJ5dGVzKGRhdGEpIHtcbiAgICBpZiAocGxhdGZvcm1fMS5kZWZhdWx0LkJ1ZmZlclV0aWxzLmlzQnVmZmVyKGRhdGEpKSB7XG4gICAgICAgIHJldHVybiBwbGF0Zm9ybV8xLmRlZmF1bHQuQnVmZmVyVXRpbHMuYnl0ZUxlbmd0aChkYXRhKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gcGxhdGZvcm1fMS5kZWZhdWx0LkNvbmZpZy5zdHJpbmdCeXRlU2l6ZShkYXRhKTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBpbnB1dCBvZiBVdGlscy5kYXRhU2l6ZUJ5dGVzIHRvIGJlIGEgYnVmZmVyIG9yIHN0cmluZywgYnV0IHdhczogJyArIHR5cGVvZiBkYXRhKTtcbn1cbmV4cG9ydHMuZGF0YVNpemVCeXRlcyA9IGRhdGFTaXplQnl0ZXM7XG5mdW5jdGlvbiBjaGVhcFJhbmRTdHIoKSB7XG4gICAgcmV0dXJuIFN0cmluZyhNYXRoLnJhbmRvbSgpKS5zdWJzdHIoMik7XG59XG5leHBvcnRzLmNoZWFwUmFuZFN0ciA9IGNoZWFwUmFuZFN0cjtcbi8qIFRha2VzIHBhcmFtIHRoZSBtaW5pbXVtIG51bWJlciBvZiBieXRlcyBvZiBlbnRyb3B5IHRoZSBzdHJpbmcgbXVzdFxuICogaW5jbHVkZSwgbm90IHRoZSBsZW5ndGggb2YgdGhlIHN0cmluZy4gU3RyaW5nIGxlbmd0aCBwcm9kdWNlZCBpcyBub3RcbiAqIGd1YXJhbnRlZWQuICovXG52YXIgcmFuZG9tU3RyaW5nID0gZnVuY3Rpb24gKG51bUJ5dGVzKSB7XG4gICAgaWYgKHBsYXRmb3JtXzEuZGVmYXVsdC5Db25maWcuZ2V0UmFuZG9tVmFsdWVzICYmIHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB2YXIgdUludEFyciA9IG5ldyBVaW50OEFycmF5KG51bUJ5dGVzKTtcbiAgICAgICAgcGxhdGZvcm1fMS5kZWZhdWx0LkNvbmZpZy5nZXRSYW5kb21WYWx1ZXModUludEFycik7XG4gICAgICAgIHJldHVybiBwbGF0Zm9ybV8xLmRlZmF1bHQuQnVmZmVyVXRpbHMuYmFzZTY0RW5jb2RlKHVJbnRBcnIpO1xuICAgIH1cbiAgICAvKiBPbGQgYnJvd3NlcjsgZmFsbCBiYWNrIHRvIE1hdGgucmFuZG9tLiBDb3VsZCBqdXN0IHVzZSBhXG4gICAgICogQ3J5cHRvSlMgdmVyc2lvbiBvZiB0aGUgYWJvdmUsIGJ1dCB3YW50IHRoaXMgdG8gc3RpbGwgd29yayBpbiBub2NyeXB0b1xuICAgICAqIHZlcnNpb25zIG9mIHRoZSBsaWJyYXJ5ICovXG4gICAgdmFyIGNoYXJzZXQgPSBwbGF0Zm9ybV8xLmRlZmF1bHQuQnVmZmVyVXRpbHMuYmFzZTY0Q2hhclNldDtcbiAgICAvKiBiYXNlNjQgaGFzIDMzJSBvdmVyaGVhZDsgcm91bmQgbGVuZ3RoIHVwICovXG4gICAgdmFyIGxlbmd0aCA9IE1hdGgucm91bmQoKG51bUJ5dGVzICogNCkgLyAzKTtcbiAgICB2YXIgcmVzdWx0ID0gJyc7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICByZXN1bHQgKz0gY2hhcnNldFtyYW5kb21Qb3NuKGNoYXJzZXQpXTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5leHBvcnRzLnJhbmRvbVN0cmluZyA9IHJhbmRvbVN0cmluZztcbnZhciByYW5kb21IZXhTdHJpbmcgPSBmdW5jdGlvbiAobnVtQnl0ZXMpIHtcbiAgICBpZiAocGxhdGZvcm1fMS5kZWZhdWx0LkNvbmZpZy5nZXRSYW5kb21WYWx1ZXMgJiYgdHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHZhciB1SW50QXJyID0gbmV3IFVpbnQ4QXJyYXkobnVtQnl0ZXMpO1xuICAgICAgICBwbGF0Zm9ybV8xLmRlZmF1bHQuQ29uZmlnLmdldFJhbmRvbVZhbHVlcyh1SW50QXJyKTtcbiAgICAgICAgcmV0dXJuIHBsYXRmb3JtXzEuZGVmYXVsdC5CdWZmZXJVdGlscy5oZXhFbmNvZGUodUludEFycik7XG4gICAgfVxuICAgIHZhciBjaGFyc2V0ID0gcGxhdGZvcm1fMS5kZWZhdWx0LkJ1ZmZlclV0aWxzLmhleENoYXJTZXQ7XG4gICAgdmFyIGxlbmd0aCA9IG51bUJ5dGVzICogMjtcbiAgICB2YXIgcmVzdWx0ID0gJyc7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICByZXN1bHQgKz0gY2hhcnNldFtyYW5kb21Qb3NuKGNoYXJzZXQpXTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5leHBvcnRzLnJhbmRvbUhleFN0cmluZyA9IHJhbmRvbUhleFN0cmluZztcbi8qIFBpY2sgbiBlbGVtZW50cyBhdCByYW5kb20gd2l0aG91dCByZXBsYWNlbWVudCBmcm9tIGFuIGFycmF5ICovXG5mdW5jdGlvbiBhcnJDaG9vc2VOKGFyciwgbikge1xuICAgIHZhciBudW1JdGVtcyA9IE1hdGgubWluKG4sIGFyci5sZW5ndGgpLCBtdXRhYmxlQXJyID0gYXJyLnNsaWNlKCksIHJlc3VsdCA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtSXRlbXM7IGkrKykge1xuICAgICAgICByZXN1bHQucHVzaChhcnJQb3BSYW5kb21FbGVtZW50KG11dGFibGVBcnIpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydHMuYXJyQ2hvb3NlTiA9IGFyckNob29zZU47XG5leHBvcnRzLnRyaW0gPSBTdHJpbmcucHJvdG90eXBlLnRyaW1cbiAgICA/IGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgICAgcmV0dXJuIHN0ci50cmltKCk7XG4gICAgfVxuICAgIDogZnVuY3Rpb24gKHN0cikge1xuICAgICAgICByZXR1cm4gc3RyLnJlcGxhY2UoL15bXFxzXFx1RkVGRlxceEEwXSt8W1xcc1xcdUZFRkZcXHhBMF0rJC9nLCAnJyk7XG4gICAgfTtcbmZ1bmN0aW9uIHByb21pc2lmeShvYiwgZm5OYW1lLCBhcmdzKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgb2JbZm5OYW1lXS5hcHBseShvYiwgdHNsaWJfMS5fX3NwcmVhZEFycmF5KHRzbGliXzEuX19zcHJlYWRBcnJheShbXSwgYXJncywgZmFsc2UpLCBbZnVuY3Rpb24gKGVyciwgcmVzKSB7XG4gICAgICAgICAgICAgICAgZXJyID8gcmVqZWN0KGVycikgOiByZXNvbHZlKHJlcyk7XG4gICAgICAgICAgICB9XSwgZmFsc2UpKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMucHJvbWlzaWZ5ID0gcHJvbWlzaWZ5O1xudmFyIEZvcm1hdDtcbihmdW5jdGlvbiAoRm9ybWF0KSB7XG4gICAgRm9ybWF0W1wibXNncGFja1wiXSA9IFwibXNncGFja1wiO1xuICAgIEZvcm1hdFtcImpzb25cIl0gPSBcImpzb25cIjtcbn0pKEZvcm1hdCA9IGV4cG9ydHMuRm9ybWF0IHx8IChleHBvcnRzLkZvcm1hdCA9IHt9KSk7XG5mdW5jdGlvbiBkZWNvZGVCb2R5KGJvZHksIGZvcm1hdCkge1xuICAgIHJldHVybiBmb3JtYXQgPT0gJ21zZ3BhY2snID8gcGxhdGZvcm1fMS5kZWZhdWx0LkNvbmZpZy5tc2dwYWNrLmRlY29kZShib2R5KSA6IEpTT04ucGFyc2UoU3RyaW5nKGJvZHkpKTtcbn1cbmV4cG9ydHMuZGVjb2RlQm9keSA9IGRlY29kZUJvZHk7XG5mdW5jdGlvbiBlbmNvZGVCb2R5KGJvZHksIGZvcm1hdCkge1xuICAgIHJldHVybiBmb3JtYXQgPT0gJ21zZ3BhY2snID8gcGxhdGZvcm1fMS5kZWZhdWx0LkNvbmZpZy5tc2dwYWNrLmVuY29kZShib2R5LCB0cnVlKSA6IEpTT04uc3RyaW5naWZ5KGJvZHkpO1xufVxuZXhwb3J0cy5lbmNvZGVCb2R5ID0gZW5jb2RlQm9keTtcbmZ1bmN0aW9uIGFsbFRvTG93ZXJDYXNlKGFycikge1xuICAgIHJldHVybiBhcnIubWFwKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgIHJldHVybiBlbGVtZW50ICYmIGVsZW1lbnQudG9Mb3dlckNhc2UoKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuYWxsVG9Mb3dlckNhc2UgPSBhbGxUb0xvd2VyQ2FzZTtcbmZ1bmN0aW9uIGFsbFRvVXBwZXJDYXNlKGFycikge1xuICAgIHJldHVybiBhcnIubWFwKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgIHJldHVybiBlbGVtZW50ICYmIGVsZW1lbnQudG9VcHBlckNhc2UoKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuYWxsVG9VcHBlckNhc2UgPSBhbGxUb1VwcGVyQ2FzZTtcbmZ1bmN0aW9uIGdldEJhY2tvZmZDb2VmZmljaWVudChjb3VudCkge1xuICAgIHJldHVybiBNYXRoLm1pbigoY291bnQgKyAyKSAvIDMsIDIpO1xufVxuZXhwb3J0cy5nZXRCYWNrb2ZmQ29lZmZpY2llbnQgPSBnZXRCYWNrb2ZmQ29lZmZpY2llbnQ7XG5mdW5jdGlvbiBnZXRKaXR0ZXJDb2VmZmljaWVudCgpIHtcbiAgICByZXR1cm4gMSAtIE1hdGgucmFuZG9tKCkgKiAwLjI7XG59XG5leHBvcnRzLmdldEppdHRlckNvZWZmaWNpZW50ID0gZ2V0Sml0dGVyQ29lZmZpY2llbnQ7XG4vKipcbiAqXG4gKiBAcGFyYW0gaW5pdGlhbFRpbWVvdXQgaW5pdGlhbCB0aW1lb3V0IHZhbHVlXG4gKiBAcGFyYW0gcmV0cnlBdHRlbXB0IGludGVnZXIgaW5kaWNhdGluZyByZXRyeUF0dGVtcHRcbiAqIEByZXR1cm5zIFJldHJ5VGltZW91dCB2YWx1ZSBmb3IgZ2l2ZW4gdGltZW91dCBhbmQgcmV0cnlBdHRlbXB0LlxuICogSWYgeCBpcyB0aGUgdmFsdWUgZ2VuZXJhdGVkIHRoZW4sXG4gKiBVcHBlciBib3VuZCA9IG1pbigocmV0cnlBdHRlbXB0ICsgMikgLyAzLCAyKSAqIGluaXRpYWxUaW1lb3V0LFxuICogTG93ZXIgYm91bmQgPSAwLjggKiBVcHBlciBib3VuZCxcbiAqIExvd2VyIGJvdW5kIDwgeCA8IFVwcGVyIGJvdW5kXG4gKi9cbmZ1bmN0aW9uIGdldFJldHJ5VGltZShpbml0aWFsVGltZW91dCwgcmV0cnlBdHRlbXB0KSB7XG4gICAgcmV0dXJuIGluaXRpYWxUaW1lb3V0ICogZ2V0QmFja29mZkNvZWZmaWNpZW50KHJldHJ5QXR0ZW1wdCkgKiBnZXRKaXR0ZXJDb2VmZmljaWVudCgpO1xufVxuZXhwb3J0cy5nZXRSZXRyeVRpbWUgPSBnZXRSZXRyeVRpbWU7XG5mdW5jdGlvbiBnZXRHbG9iYWxPYmplY3QoKSB7XG4gICAgaWYgKGdsb2JhbCkge1xuICAgICAgICByZXR1cm4gZ2xvYmFsO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIHdpbmRvdztcbiAgICB9XG4gICAgcmV0dXJuIHNlbGY7XG59XG5leHBvcnRzLmdldEdsb2JhbE9iamVjdCA9IGdldEdsb2JhbE9iamVjdDtcbmZ1bmN0aW9uIHNoYWxsb3dFcXVhbHMoc291cmNlLCB0YXJnZXQpIHtcbiAgICByZXR1cm4gKE9iamVjdC5rZXlzKHNvdXJjZSkuZXZlcnkoZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gc291cmNlW2tleV0gPT09IHRhcmdldFtrZXldOyB9KSAmJlxuICAgICAgICBPYmplY3Qua2V5cyh0YXJnZXQpLmV2ZXJ5KGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIHRhcmdldFtrZXldID09PSBzb3VyY2Vba2V5XTsgfSkpO1xufVxuZXhwb3J0cy5zaGFsbG93RXF1YWxzID0gc2hhbGxvd0VxdWFscztcbmZ1bmN0aW9uIG1hdGNoRGVyaXZlZENoYW5uZWwobmFtZSkge1xuICAgIC8qKlxuICAgICAqIFRoaXMgcmVnZXggY2hlY2sgaXMgdG8gcmV0YWluIGV4aXN0aW5nIGNoYW5uZWwgcGFyYW1zIGlmIGFueSBlLmcgWz9yZXdpbmQ9MV1mb28gdG9cbiAgICAgKiBbZmlsdGVyPXh5ej9yZXdpbmQ9MV1mb28uIFRoaXMgaXMgdG8ga2VlcCBjaGFubmVsIGNvbXBhdGliaWxpdHkgYXJvdW5kIHVzZSBvZlxuICAgICAqIGNoYW5uZWwgcGFyYW1zIHRoYXQgd29yayB3aXRoIGRlcml2ZWQgY2hhbm5lbHMuXG4gICAgICpcbiAgICAgKiBUaGlzIGVzbGludCB1bnNhZmUgcmVnZXggd2FybmluZyBpcyB0cmlnZ2VyZWQgYmVjYXVzZSB0aGUgUmVnRXhwIHVzZXMgbmVzdGVkIHF1YW50aWZpZXJzLFxuICAgICAqIGJ1dCBpdCBkb2VzIG5vdCBjcmVhdGUgYW55IHNpdHVhdGlvbiB3aGVyZSB0aGUgcmVnZXggZW5naW5lIGhhcyB0b1xuICAgICAqIGV4cGxvcmUgYSBsYXJnZSBudW1iZXIgb2YgcG9zc2libGUgbWF0Y2hlcyBzbyBpdOKAmXMgc2FmZSB0byBpZ25vcmVcbiAgICAgKi9cbiAgICB2YXIgcmVnZXggPSAvXihcXFsoW14/XSopKD86KC4qKSlcXF0pPyguKykkLzsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIHZhciBtYXRjaCA9IG5hbWUubWF0Y2gocmVnZXgpO1xuICAgIGlmICghbWF0Y2ggfHwgIW1hdGNoLmxlbmd0aCB8fCBtYXRjaC5sZW5ndGggPCA1KSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcmluZm9fMS5kZWZhdWx0KCdyZWdleCBtYXRjaCBmYWlsZWQnLCA0MDAsIDQwMDEwKTtcbiAgICB9XG4gICAgLy8gRmFpbCBpZiB0aGVyZSBpcyBhbHJlYWR5IGEgY2hhbm5lbCBxdWFsaWZpZXIsIGVnIFttZXRhXWZvbyBzaG91bGQgZmFpbCBpbnN0ZWFkIG9mIGp1c3Qgb3ZlcnJpZGluZyB3aXRoIFtmaWx0ZXI9eHl6XWZvb1xuICAgIGlmIChtYXRjaFsyXSkge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JpbmZvXzEuZGVmYXVsdChcImNhbm5vdCB1c2UgYSBkZXJpdmVkIG9wdGlvbiB3aXRoIGEgXCIuY29uY2F0KG1hdGNoWzJdLCBcIiBjaGFubmVsXCIpLCA0MDAsIDQwMDEwKTtcbiAgICB9XG4gICAgLy8gUmV0dXJuIG1hdGNoIHZhbHVlcyB0byBiZSBhZGRlZCB0byBkZXJpdmUgY2hhbm5lbCBxdWFudGlmaWVyLlxuICAgIHJldHVybiB7XG4gICAgICAgIHF1YWxpZmllclBhcmFtOiBtYXRjaFszXSB8fCAnJyxcbiAgICAgICAgY2hhbm5lbE5hbWU6IG1hdGNoWzRdLFxuICAgIH07XG59XG5leHBvcnRzLm1hdGNoRGVyaXZlZENoYW5uZWwgPSBtYXRjaERlcml2ZWRDaGFubmVsO1xuZnVuY3Rpb24gdG9CYXNlNjQoc3RyKSB7XG4gICAgaWYgKHBsYXRmb3JtXzEuZGVmYXVsdC5Db25maWcuY3JlYXRlSG1hYykge1xuICAgICAgICByZXR1cm4gQnVmZmVyLmZyb20oc3RyLCAnYXNjaWknKS50b1N0cmluZygnYmFzZTY0Jyk7XG4gICAgfVxuICAgIHJldHVybiAoMCwgZW5jX2Jhc2U2NF8xLnN0cmluZ2lmeSkoKDAsIGVuY191dGY4XzEucGFyc2UpKHN0cikpO1xufVxuZXhwb3J0cy50b0Jhc2U2NCA9IHRvQmFzZTY0O1xuXG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwodGhpcywgX193ZWJwYWNrX3JlcXVpcmVfXygxMykpKVxuXG4vKioqLyB9KSxcbi8qIDIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24oZ2xvYmFsKSB7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgdHNsaWJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG52YXIgcGxhdGZvcm1fMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oMykpO1xuLy8gV29ya2Fyb3VuZCBmb3Igc2FsZXNmb3JjZSBsaWdodG5pbmcgbG9ja2VyIGNvbXBhdGliaWxpdHlcbi8vIFRoaXMgaXMgYSBzaG9ydGhhbmQgdmVyc2lvbiBvZiBVdGlscy5nZXRHbG9iYWxPYmplY3QgKHdoaWNoIHdlIGNhbid0IHVzZSBoZXJlIHdpdGhvdXQgY3JlYXRpbmcgYSBjaXJjdWxhciBpbXBvcnQpXG52YXIgZ2xvYmFsT2JqZWN0ID0gZ2xvYmFsIHx8ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHNlbGYpO1xudmFyIExvZ0xldmVscztcbihmdW5jdGlvbiAoTG9nTGV2ZWxzKSB7XG4gICAgTG9nTGV2ZWxzW0xvZ0xldmVsc1tcIk5vbmVcIl0gPSAwXSA9IFwiTm9uZVwiO1xuICAgIExvZ0xldmVsc1tMb2dMZXZlbHNbXCJFcnJvclwiXSA9IDFdID0gXCJFcnJvclwiO1xuICAgIExvZ0xldmVsc1tMb2dMZXZlbHNbXCJNYWpvclwiXSA9IDJdID0gXCJNYWpvclwiO1xuICAgIExvZ0xldmVsc1tMb2dMZXZlbHNbXCJNaW5vclwiXSA9IDNdID0gXCJNaW5vclwiO1xuICAgIExvZ0xldmVsc1tMb2dMZXZlbHNbXCJNaWNyb1wiXSA9IDRdID0gXCJNaWNyb1wiO1xufSkoTG9nTGV2ZWxzIHx8IChMb2dMZXZlbHMgPSB7fSkpO1xuZnVuY3Rpb24gcGFkKHRpbWVTZWdtZW50LCB0aHJlZSkge1xuICAgIHJldHVybiBcIlwiLmNvbmNhdCh0aW1lU2VnbWVudCkucGFkU3RhcnQodGhyZWUgPyAzIDogMiwgJzAnKTtcbn1cbmZ1bmN0aW9uIGdldEhhbmRsZXIobG9nZ2VyKSB7XG4gICAgcmV0dXJuIHBsYXRmb3JtXzEuZGVmYXVsdC5Db25maWcubG9nVGltZXN0YW1wc1xuICAgICAgICA/IGZ1bmN0aW9uIChtc2cpIHtcbiAgICAgICAgICAgIHZhciB0aW1lID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgIGxvZ2dlcihwYWQodGltZS5nZXRIb3VycygpKSArXG4gICAgICAgICAgICAgICAgJzonICtcbiAgICAgICAgICAgICAgICBwYWQodGltZS5nZXRNaW51dGVzKCkpICtcbiAgICAgICAgICAgICAgICAnOicgK1xuICAgICAgICAgICAgICAgIHBhZCh0aW1lLmdldFNlY29uZHMoKSkgK1xuICAgICAgICAgICAgICAgICcuJyArXG4gICAgICAgICAgICAgICAgcGFkKHRpbWUuZ2V0TWlsbGlzZWNvbmRzKCksIDEpICtcbiAgICAgICAgICAgICAgICAnICcgK1xuICAgICAgICAgICAgICAgIG1zZyk7XG4gICAgICAgIH1cbiAgICAgICAgOiBsb2dnZXI7XG59XG52YXIgZ2V0RGVmYXVsdExvZ2dlcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICB2YXIgY29uc29sZUxvZ2dlcjtcbiAgICB2YXIgZXJyb3JMb2dnZXI7XG4gICAgLyogQ2FuJ3QganVzdCBjaGVjayBmb3IgY29uc29sZSAmJiBjb25zb2xlLmxvZzsgZmFpbHMgaW4gSUUgPD05ICovXG4gICAgaWYgKCh0eXBlb2YgV2luZG93ID09PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgV29ya2VyR2xvYmFsU2NvcGUgPT09ICd1bmRlZmluZWQnKSAvKiBub2RlICovIHx8XG4gICAgICAgIHR5cGVvZiAoKF9iID0gKF9hID0gZ2xvYmFsT2JqZWN0ID09PSBudWxsIHx8IGdsb2JhbE9iamVjdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogZ2xvYmFsT2JqZWN0LmNvbnNvbGUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5sb2cpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5hcHBseSkgPT09ICdmdW5jdGlvbicgLyogc2Vuc2libGUgYnJvd3NlcnMgKi8pIHtcbiAgICAgICAgY29uc29sZUxvZ2dlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsIGFyZ3MpO1xuICAgICAgICB9O1xuICAgICAgICBlcnJvckxvZ2dlciA9IGNvbnNvbGUud2FyblxuICAgICAgICAgICAgPyBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2Fybi5hcHBseShjb25zb2xlLCBhcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDogY29uc29sZUxvZ2dlcjtcbiAgICB9XG4gICAgZWxzZSBpZiAoZ2xvYmFsT2JqZWN0ID09PSBudWxsIHx8IGdsb2JhbE9iamVjdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogZ2xvYmFsT2JqZWN0LmNvbnNvbGUubG9nKSB7XG4gICAgICAgIC8qIElFIDw9IDkgd2l0aCB0aGUgY29uc29sZSBvcGVuIC0tIGNvbnNvbGUubG9nIGRvZXMgbm90XG4gICAgICAgICAqIGluaGVyaXQgZnJvbSBGdW5jdGlvbiwgc28gaGFzIG5vIGFwcGx5IG1ldGhvZCAqL1xuICAgICAgICBjb25zb2xlTG9nZ2VyID0gZXJyb3JMb2dnZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbChjb25zb2xlLmxvZywgY29uc29sZSwgYXJndW1lbnRzKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8qIElFIDw9IDkgd2hlbiBkZXYgdG9vbHMgYXJlIGNsb3NlZCAtIHdpbmRvdy5jb25zb2xlIG5vdCBldmVuIGRlZmluZWQgKi9cbiAgICAgICAgY29uc29sZUxvZ2dlciA9IGVycm9yTG9nZ2VyID0gZnVuY3Rpb24gKCkgeyB9O1xuICAgIH1cbiAgICByZXR1cm4gW2NvbnNvbGVMb2dnZXIsIGVycm9yTG9nZ2VyXS5tYXAoZ2V0SGFuZGxlcik7XG59O1xudmFyIExvZ2dlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBMb2dnZXIoKSB7XG4gICAgICAgIExvZ2dlci5sb2dMZXZlbCA9IExvZ2dlci5MT0dfREVGQVVMVDtcbiAgICB9XG4gICAgTG9nZ2VyLmluaXRMb2dIYW5kbGVycyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hID0gZ2V0RGVmYXVsdExvZ2dlcnMoKSwgbG9nSGFuZGxlciA9IF9hWzBdLCBsb2dFcnJvckhhbmRsZXIgPSBfYVsxXTtcbiAgICAgICAgdGhpcy5sb2dIYW5kbGVyID0gbG9nSGFuZGxlcjtcbiAgICAgICAgdGhpcy5sb2dFcnJvckhhbmRsZXIgPSBsb2dFcnJvckhhbmRsZXI7XG4gICAgfTtcbiAgICBMb2dnZXIubG9nTGV2ZWwgPSBMb2dMZXZlbHMuRXJyb3I7IC8vIGRlZmF1bHQgbG9nTGV2ZWxcbiAgICAvLyBwdWJsaWMgY29uc3RhbnRzXG4gICAgTG9nZ2VyLkxPR19OT05FID0gTG9nTGV2ZWxzLk5vbmU7XG4gICAgTG9nZ2VyLkxPR19FUlJPUiA9IExvZ0xldmVscy5FcnJvcjtcbiAgICBMb2dnZXIuTE9HX01BSk9SID0gTG9nTGV2ZWxzLk1ham9yO1xuICAgIExvZ2dlci5MT0dfTUlOT1IgPSBMb2dMZXZlbHMuTWlub3I7XG4gICAgTG9nZ2VyLkxPR19NSUNSTyA9IExvZ0xldmVscy5NaWNybztcbiAgICAvLyBhbGlhc2VzXG4gICAgTG9nZ2VyLkxPR19ERUZBVUxUID0gTG9nTGV2ZWxzLkVycm9yO1xuICAgIExvZ2dlci5MT0dfREVCVUcgPSBMb2dMZXZlbHMuTWljcm87XG4gICAgLyogcHVibGljIHN0YXRpYyBmdW5jdGlvbnMgKi9cbiAgICBMb2dnZXIubG9nQWN0aW9uID0gZnVuY3Rpb24gKGxldmVsLCBhY3Rpb24sIG1lc3NhZ2UpIHtcbiAgICAgICAgaWYgKExvZ2dlci5zaG91bGRMb2cobGV2ZWwpKSB7XG4gICAgICAgICAgICAobGV2ZWwgPT09IExvZ0xldmVscy5FcnJvciA/IExvZ2dlci5sb2dFcnJvckhhbmRsZXIgOiBMb2dnZXIubG9nSGFuZGxlcikoJ0FibHk6ICcgKyBhY3Rpb24gKyAnOiAnICsgbWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIExvZ2dlci5kZXByZWNhdGVkID0gZnVuY3Rpb24gKG9yaWdpbmFsLCByZXBsYWNlbWVudCkge1xuICAgICAgICBMb2dnZXIuZGVwcmVjYXRlZFdpdGhNc2cob3JpZ2luYWwsIFwiUGxlYXNlIHVzZSAnXCIgKyByZXBsYWNlbWVudCArIFwiJyBpbnN0ZWFkLlwiKTtcbiAgICB9O1xuICAgIExvZ2dlci5kZXByZWNhdGVkV2l0aE1zZyA9IGZ1bmN0aW9uIChmdW5jTmFtZSwgbXNnKSB7XG4gICAgICAgIGlmIChMb2dnZXIuc2hvdWxkTG9nKExvZ0xldmVscy5FcnJvcikpIHtcbiAgICAgICAgICAgIExvZ2dlci5sb2dFcnJvckhhbmRsZXIoXCJBYmx5OiBEZXByZWNhdGlvbiB3YXJuaW5nIC0gJ1wiICsgZnVuY05hbWUgKyBcIicgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGZyb20gYSBmdXR1cmUgdmVyc2lvbi4gXCIgKyBtc2cpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKiBXaGVyZSBhIGxvZ2dpbmcgb3BlcmF0aW9uIGlzIGV4cGVuc2l2ZSwgc3VjaCBhcyBzZXJpYWxpc2F0aW9uIG9mIGRhdGEsIHVzZSBzaG91bGRMb2cgd2lsbCBwcmV2ZW50XG4gICAgICAgICB0aGUgb2JqZWN0IGJlaW5nIHNlcmlhbGlzZWQgaWYgdGhlIGxvZyBsZXZlbCB3aWxsIG5vdCBvdXRwdXQgdGhlIG1lc3NhZ2UgKi9cbiAgICBMb2dnZXIuc2hvdWxkTG9nID0gZnVuY3Rpb24gKGxldmVsKSB7XG4gICAgICAgIHJldHVybiBsZXZlbCA8PSBMb2dnZXIubG9nTGV2ZWw7XG4gICAgfTtcbiAgICBMb2dnZXIuc2V0TG9nID0gZnVuY3Rpb24gKGxldmVsLCBoYW5kbGVyKSB7XG4gICAgICAgIGlmIChsZXZlbCAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgTG9nZ2VyLmxvZ0xldmVsID0gbGV2ZWw7XG4gICAgICAgIGlmIChoYW5kbGVyICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICBMb2dnZXIubG9nSGFuZGxlciA9IExvZ2dlci5sb2dFcnJvckhhbmRsZXIgPSBoYW5kbGVyO1xuICAgIH07XG4gICAgcmV0dXJuIExvZ2dlcjtcbn0oKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBMb2dnZXI7XG5cbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbCh0aGlzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzKSkpXG5cbi8qKiovIH0pLFxuLyogMyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFBsYXRmb3JtID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFBsYXRmb3JtKCkge1xuICAgIH1cbiAgICByZXR1cm4gUGxhdGZvcm07XG59KCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gUGxhdGZvcm07XG5cblxuLyoqKi8gfSksXG4vKiA0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlBhcnRpYWxFcnJvckluZm8gPSB2b2lkIDA7XG52YXIgdHNsaWJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG52YXIgcGxhdGZvcm1fMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oMykpO1xudmFyIFV0aWxzID0gdHNsaWJfMS5fX2ltcG9ydFN0YXIoX193ZWJwYWNrX3JlcXVpcmVfXygxKSk7XG5mdW5jdGlvbiB0b1N0cmluZyhlcnIpIHtcbiAgICB2YXIgcmVzdWx0ID0gJ1snICsgZXJyLmNvbnN0cnVjdG9yLm5hbWU7XG4gICAgaWYgKGVyci5tZXNzYWdlKVxuICAgICAgICByZXN1bHQgKz0gJzogJyArIGVyci5tZXNzYWdlO1xuICAgIGlmIChlcnIuc3RhdHVzQ29kZSlcbiAgICAgICAgcmVzdWx0ICs9ICc7IHN0YXR1c0NvZGU9JyArIGVyci5zdGF0dXNDb2RlO1xuICAgIGlmIChlcnIuY29kZSlcbiAgICAgICAgcmVzdWx0ICs9ICc7IGNvZGU9JyArIGVyci5jb2RlO1xuICAgIGlmIChlcnIuY2F1c2UpXG4gICAgICAgIHJlc3VsdCArPSAnOyBjYXVzZT0nICsgVXRpbHMuaW5zcGVjdEVycm9yKGVyci5jYXVzZSk7XG4gICAgaWYgKGVyci5ocmVmICYmICEoZXJyLm1lc3NhZ2UgJiYgZXJyLm1lc3NhZ2UuaW5kZXhPZignaGVscC5hYmx5LmlvJykgPiAtMSkpXG4gICAgICAgIHJlc3VsdCArPSAnOyBzZWUgJyArIGVyci5ocmVmICsgJyAnO1xuICAgIHJlc3VsdCArPSAnXSc7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbnZhciBFcnJvckluZm8gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoRXJyb3JJbmZvLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEVycm9ySW5mbyhtZXNzYWdlLCBjb2RlLCBzdGF0dXNDb2RlLCBjYXVzZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBtZXNzYWdlKSB8fCB0aGlzO1xuICAgICAgICBpZiAodHlwZW9mIE9iamVjdC5zZXRQcm90b3R5cGVPZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihfdGhpcywgRXJyb3JJbmZvLnByb3RvdHlwZSk7XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMuY29kZSA9IGNvZGU7XG4gICAgICAgIF90aGlzLnN0YXR1c0NvZGUgPSBzdGF0dXNDb2RlO1xuICAgICAgICBfdGhpcy5jYXVzZSA9IGNhdXNlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEVycm9ySW5mby5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0b1N0cmluZyh0aGlzKTtcbiAgICB9O1xuICAgIEVycm9ySW5mby5mcm9tVmFsdWVzID0gZnVuY3Rpb24gKHZhbHVlcykge1xuICAgICAgICB2YXIgX2EgPSB2YWx1ZXMsIG1lc3NhZ2UgPSBfYS5tZXNzYWdlLCBjb2RlID0gX2EuY29kZSwgc3RhdHVzQ29kZSA9IF9hLnN0YXR1c0NvZGU7XG4gICAgICAgIGlmICh0eXBlb2YgbWVzc2FnZSAhPT0gJ3N0cmluZycgfHwgdHlwZW9mIGNvZGUgIT09ICdudW1iZXInIHx8IHR5cGVvZiBzdGF0dXNDb2RlICE9PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFcnJvckluZm8uZnJvbVZhbHVlcygpOiBpbnZhbGlkIHZhbHVlczogJyArIHBsYXRmb3JtXzEuZGVmYXVsdC5Db25maWcuaW5zcGVjdCh2YWx1ZXMpKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVzdWx0ID0gT2JqZWN0LmFzc2lnbihuZXcgRXJyb3JJbmZvKG1lc3NhZ2UsIGNvZGUsIHN0YXR1c0NvZGUpLCB2YWx1ZXMpO1xuICAgICAgICBpZiAocmVzdWx0LmNvZGUgJiYgIXJlc3VsdC5ocmVmKSB7XG4gICAgICAgICAgICByZXN1bHQuaHJlZiA9ICdodHRwczovL2hlbHAuYWJseS5pby9lcnJvci8nICsgcmVzdWx0LmNvZGU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICAgIHJldHVybiBFcnJvckluZm87XG59KEVycm9yKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBFcnJvckluZm87XG52YXIgUGFydGlhbEVycm9ySW5mbyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhQYXJ0aWFsRXJyb3JJbmZvLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFBhcnRpYWxFcnJvckluZm8obWVzc2FnZSwgY29kZSwgc3RhdHVzQ29kZSwgY2F1c2UpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgbWVzc2FnZSkgfHwgdGhpcztcbiAgICAgICAgaWYgKHR5cGVvZiBPYmplY3Quc2V0UHJvdG90eXBlT2YgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoX3RoaXMsIFBhcnRpYWxFcnJvckluZm8ucHJvdG90eXBlKTtcbiAgICAgICAgfVxuICAgICAgICBfdGhpcy5jb2RlID0gY29kZTtcbiAgICAgICAgX3RoaXMuc3RhdHVzQ29kZSA9IHN0YXR1c0NvZGU7XG4gICAgICAgIF90aGlzLmNhdXNlID0gY2F1c2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgUGFydGlhbEVycm9ySW5mby5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0b1N0cmluZyh0aGlzKTtcbiAgICB9O1xuICAgIHJldHVybiBQYXJ0aWFsRXJyb3JJbmZvO1xufShFcnJvcikpO1xuZXhwb3J0cy5QYXJ0aWFsRXJyb3JJbmZvID0gUGFydGlhbEVycm9ySW5mbztcblxuXG4vKioqLyB9KSxcbi8qIDUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkge1xuXHRpZiAodHJ1ZSkge1xuXHRcdC8vIENvbW1vbkpTXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShfX3dlYnBhY2tfcmVxdWlyZV9fKDYpKTtcblx0fVxuXHRlbHNlIHt9XG59KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykge1xuXG5cdChmdW5jdGlvbiAoKSB7XG5cdCAgICAvLyBDaGVjayBpZiB0eXBlZCBhcnJheXMgYXJlIHN1cHBvcnRlZFxuXHQgICAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPSAnZnVuY3Rpb24nKSB7XG5cdCAgICAgICAgcmV0dXJuO1xuXHQgICAgfVxuXG5cdCAgICAvLyBTaG9ydGN1dHNcblx0ICAgIHZhciBDID0gQ3J5cHRvSlM7XG5cdCAgICB2YXIgQ19saWIgPSBDLmxpYjtcblx0ICAgIHZhciBXb3JkQXJyYXkgPSBDX2xpYi5Xb3JkQXJyYXk7XG5cblx0ICAgIC8vIFJlZmVyZW5jZSBvcmlnaW5hbCBpbml0XG5cdCAgICB2YXIgc3VwZXJJbml0ID0gV29yZEFycmF5LmluaXQ7XG5cblx0ICAgIC8vIEF1Z21lbnQgV29yZEFycmF5LmluaXQgdG8gaGFuZGxlIHR5cGVkIGFycmF5c1xuXHQgICAgdmFyIHN1YkluaXQgPSBXb3JkQXJyYXkuaW5pdCA9IGZ1bmN0aW9uICh0eXBlZEFycmF5KSB7XG5cdCAgICAgICAgLy8gQ29udmVydCBidWZmZXJzIHRvIHVpbnQ4XG5cdCAgICAgICAgaWYgKHR5cGVkQXJyYXkgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuXHQgICAgICAgICAgICB0eXBlZEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkodHlwZWRBcnJheSk7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgLy8gQ29udmVydCBvdGhlciBhcnJheSB2aWV3cyB0byB1aW50OFxuXHQgICAgICAgIGlmIChcblx0ICAgICAgICAgICAgdHlwZWRBcnJheSBpbnN0YW5jZW9mIEludDhBcnJheSB8fFxuXHQgICAgICAgICAgICAodHlwZW9mIFVpbnQ4Q2xhbXBlZEFycmF5ICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVkQXJyYXkgaW5zdGFuY2VvZiBVaW50OENsYW1wZWRBcnJheSkgfHxcblx0ICAgICAgICAgICAgdHlwZWRBcnJheSBpbnN0YW5jZW9mIEludDE2QXJyYXkgfHxcblx0ICAgICAgICAgICAgdHlwZWRBcnJheSBpbnN0YW5jZW9mIFVpbnQxNkFycmF5IHx8XG5cdCAgICAgICAgICAgIHR5cGVkQXJyYXkgaW5zdGFuY2VvZiBJbnQzMkFycmF5IHx8XG5cdCAgICAgICAgICAgIHR5cGVkQXJyYXkgaW5zdGFuY2VvZiBVaW50MzJBcnJheSB8fFxuXHQgICAgICAgICAgICB0eXBlZEFycmF5IGluc3RhbmNlb2YgRmxvYXQzMkFycmF5IHx8XG5cdCAgICAgICAgICAgIHR5cGVkQXJyYXkgaW5zdGFuY2VvZiBGbG9hdDY0QXJyYXlcblx0ICAgICAgICApIHtcblx0ICAgICAgICAgICAgdHlwZWRBcnJheSA9IG5ldyBVaW50OEFycmF5KHR5cGVkQXJyYXkuYnVmZmVyLCB0eXBlZEFycmF5LmJ5dGVPZmZzZXQsIHR5cGVkQXJyYXkuYnl0ZUxlbmd0aCk7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgLy8gSGFuZGxlIFVpbnQ4QXJyYXlcblx0ICAgICAgICBpZiAodHlwZWRBcnJheSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICAgICAgdmFyIHR5cGVkQXJyYXlCeXRlTGVuZ3RoID0gdHlwZWRBcnJheS5ieXRlTGVuZ3RoO1xuXG5cdCAgICAgICAgICAgIC8vIEV4dHJhY3QgYnl0ZXNcblx0ICAgICAgICAgICAgdmFyIHdvcmRzID0gW107XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHlwZWRBcnJheUJ5dGVMZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgd29yZHNbaSA+Pj4gMl0gfD0gdHlwZWRBcnJheVtpXSA8PCAoMjQgLSAoaSAlIDQpICogOCk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBJbml0aWFsaXplIHRoaXMgd29yZCBhcnJheVxuXHQgICAgICAgICAgICBzdXBlckluaXQuY2FsbCh0aGlzLCB3b3JkcywgdHlwZWRBcnJheUJ5dGVMZW5ndGgpO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIC8vIEVsc2UgY2FsbCBub3JtYWwgaW5pdFxuXHQgICAgICAgICAgICBzdXBlckluaXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXG5cdCAgICBzdWJJbml0LnByb3RvdHlwZSA9IFdvcmRBcnJheTtcblx0fSgpKTtcblxuXG5cdHJldHVybiBDcnlwdG9KUy5saWIuV29yZEFycmF5O1xuXG59KSk7XG5cbi8qKiovIH0pLFxuLyogNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24oZ2xvYmFsKSB7OyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkge1xuXHRpZiAodHJ1ZSkge1xuXHRcdC8vIENvbW1vbkpTXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeSgpO1xuXHR9XG5cdGVsc2Uge31cbn0odGhpcywgZnVuY3Rpb24gKCkge1xuXG5cdC8qZ2xvYmFscyB3aW5kb3csIGdsb2JhbCwgcmVxdWlyZSovXG5cblx0LyoqXG5cdCAqIENyeXB0b0pTIGNvcmUgY29tcG9uZW50cy5cblx0ICovXG5cdHZhciBDcnlwdG9KUyA9IENyeXB0b0pTIHx8IChmdW5jdGlvbiAoTWF0aCwgdW5kZWZpbmVkKSB7XG5cblx0ICAgIHZhciBjcnlwdG87XG5cblx0ICAgIC8vIE5hdGl2ZSBjcnlwdG8gZnJvbSB3aW5kb3cgKEJyb3dzZXIpXG5cdCAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmNyeXB0bykge1xuXHQgICAgICAgIGNyeXB0byA9IHdpbmRvdy5jcnlwdG87XG5cdCAgICB9XG5cblx0ICAgIC8vIE5hdGl2ZSAoZXhwZXJpbWVudGFsIElFIDExKSBjcnlwdG8gZnJvbSB3aW5kb3cgKEJyb3dzZXIpXG5cdCAgICBpZiAoIWNyeXB0byAmJiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cubXNDcnlwdG8pIHtcblx0ICAgICAgICBjcnlwdG8gPSB3aW5kb3cubXNDcnlwdG87XG5cdCAgICB9XG5cblx0ICAgIC8vIE5hdGl2ZSBjcnlwdG8gZnJvbSBnbG9iYWwgKE5vZGVKUylcblx0ICAgIGlmICghY3J5cHRvICYmIHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnICYmIGdsb2JhbC5jcnlwdG8pIHtcblx0ICAgICAgICBjcnlwdG8gPSBnbG9iYWwuY3J5cHRvO1xuXHQgICAgfVxuXG5cdCAgICAvLyBOYXRpdmUgY3J5cHRvIGltcG9ydCB2aWEgcmVxdWlyZSAoTm9kZUpTKVxuXHQgICAgaWYgKCFjcnlwdG8gJiYgXCJmdW5jdGlvblwiID09PSAnZnVuY3Rpb24nKSB7XG5cdCAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgY3J5cHRvID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0NCk7XG5cdCAgICAgICAgfSBjYXRjaCAoZXJyKSB7fVxuXHQgICAgfVxuXG5cdCAgICAvKlxuXHQgICAgICogQ3J5cHRvZ3JhcGhpY2FsbHkgc2VjdXJlIHBzZXVkb3JhbmRvbSBudW1iZXIgZ2VuZXJhdG9yXG5cdCAgICAgKlxuXHQgICAgICogQXMgTWF0aC5yYW5kb20oKSBpcyBjcnlwdG9ncmFwaGljYWxseSBub3Qgc2FmZSB0byB1c2Vcblx0ICAgICAqL1xuXHQgICAgdmFyIGNyeXB0b1NlY3VyZVJhbmRvbUludCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBpZiAoY3J5cHRvKSB7XG5cdCAgICAgICAgICAgIC8vIFVzZSBnZXRSYW5kb21WYWx1ZXMgbWV0aG9kIChCcm93c2VyKVxuXHQgICAgICAgICAgICBpZiAodHlwZW9mIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMgPT09ICdmdW5jdGlvbicpIHtcblx0ICAgICAgICAgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMobmV3IFVpbnQzMkFycmF5KDEpKVswXTtcblx0ICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge31cblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIFVzZSByYW5kb21CeXRlcyBtZXRob2QgKE5vZGVKUylcblx0ICAgICAgICAgICAgaWYgKHR5cGVvZiBjcnlwdG8ucmFuZG9tQnl0ZXMgPT09ICdmdW5jdGlvbicpIHtcblx0ICAgICAgICAgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNyeXB0by5yYW5kb21CeXRlcyg0KS5yZWFkSW50MzJMRSgpO1xuXHQgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7fVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdOYXRpdmUgY3J5cHRvIG1vZHVsZSBjb3VsZCBub3QgYmUgdXNlZCB0byBnZXQgc2VjdXJlIHJhbmRvbSBudW1iZXIuJyk7XG5cdCAgICB9O1xuXG5cdCAgICAvKlxuXHQgICAgICogTG9jYWwgcG9seWZpbGwgb2YgT2JqZWN0LmNyZWF0ZVxuXG5cdCAgICAgKi9cblx0ICAgIHZhciBjcmVhdGUgPSBPYmplY3QuY3JlYXRlIHx8IChmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgZnVuY3Rpb24gRigpIHt9XG5cblx0ICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG9iaikge1xuXHQgICAgICAgICAgICB2YXIgc3VidHlwZTtcblxuXHQgICAgICAgICAgICBGLnByb3RvdHlwZSA9IG9iajtcblxuXHQgICAgICAgICAgICBzdWJ0eXBlID0gbmV3IEYoKTtcblxuXHQgICAgICAgICAgICBGLnByb3RvdHlwZSA9IG51bGw7XG5cblx0ICAgICAgICAgICAgcmV0dXJuIHN1YnR5cGU7XG5cdCAgICAgICAgfTtcblx0ICAgIH0oKSlcblxuXHQgICAgLyoqXG5cdCAgICAgKiBDcnlwdG9KUyBuYW1lc3BhY2UuXG5cdCAgICAgKi9cblx0ICAgIHZhciBDID0ge307XG5cblx0ICAgIC8qKlxuXHQgICAgICogTGlicmFyeSBuYW1lc3BhY2UuXG5cdCAgICAgKi9cblx0ICAgIHZhciBDX2xpYiA9IEMubGliID0ge307XG5cblx0ICAgIC8qKlxuXHQgICAgICogQmFzZSBvYmplY3QgZm9yIHByb3RvdHlwYWwgaW5oZXJpdGFuY2UuXG5cdCAgICAgKi9cblx0ICAgIHZhciBCYXNlID0gQ19saWIuQmFzZSA9IChmdW5jdGlvbiAoKSB7XG5cblxuXHQgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgKiBDcmVhdGVzIGEgbmV3IG9iamVjdCB0aGF0IGluaGVyaXRzIGZyb20gdGhpcyBvYmplY3QuXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdmVycmlkZXMgUHJvcGVydGllcyB0byBjb3B5IGludG8gdGhlIG5ldyBvYmplY3QuXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqIEByZXR1cm4ge09iamVjdH0gVGhlIG5ldyBvYmplY3QuXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogICAgIHZhciBNeVR5cGUgPSBDcnlwdG9KUy5saWIuQmFzZS5leHRlbmQoe1xuXHQgICAgICAgICAgICAgKiAgICAgICAgIGZpZWxkOiAndmFsdWUnLFxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiAgICAgICAgIG1ldGhvZDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAgKiAgICAgICAgIH1cblx0ICAgICAgICAgICAgICogICAgIH0pO1xuXHQgICAgICAgICAgICAgKi9cblx0ICAgICAgICAgICAgZXh0ZW5kOiBmdW5jdGlvbiAob3ZlcnJpZGVzKSB7XG5cdCAgICAgICAgICAgICAgICAvLyBTcGF3blxuXHQgICAgICAgICAgICAgICAgdmFyIHN1YnR5cGUgPSBjcmVhdGUodGhpcyk7XG5cblx0ICAgICAgICAgICAgICAgIC8vIEF1Z21lbnRcblx0ICAgICAgICAgICAgICAgIGlmIChvdmVycmlkZXMpIHtcblx0ICAgICAgICAgICAgICAgICAgICBzdWJ0eXBlLm1peEluKG92ZXJyaWRlcyk7XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBkZWZhdWx0IGluaXRpYWxpemVyXG5cdCAgICAgICAgICAgICAgICBpZiAoIXN1YnR5cGUuaGFzT3duUHJvcGVydHkoJ2luaXQnKSB8fCB0aGlzLmluaXQgPT09IHN1YnR5cGUuaW5pdCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHN1YnR5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc3VidHlwZS4kc3VwZXIuaW5pdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHQgICAgICAgICAgICAgICAgICAgIH07XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIC8vIEluaXRpYWxpemVyJ3MgcHJvdG90eXBlIGlzIHRoZSBzdWJ0eXBlIG9iamVjdFxuXHQgICAgICAgICAgICAgICAgc3VidHlwZS5pbml0LnByb3RvdHlwZSA9IHN1YnR5cGU7XG5cblx0ICAgICAgICAgICAgICAgIC8vIFJlZmVyZW5jZSBzdXBlcnR5cGVcblx0ICAgICAgICAgICAgICAgIHN1YnR5cGUuJHN1cGVyID0gdGhpcztcblxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHN1YnR5cGU7XG5cdCAgICAgICAgICAgIH0sXG5cblx0ICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAqIEV4dGVuZHMgdGhpcyBvYmplY3QgYW5kIHJ1bnMgdGhlIGluaXQgbWV0aG9kLlxuXHQgICAgICAgICAgICAgKiBBcmd1bWVudHMgdG8gY3JlYXRlKCkgd2lsbCBiZSBwYXNzZWQgdG8gaW5pdCgpLlxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBuZXcgb2JqZWN0LlxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqICAgICB2YXIgaW5zdGFuY2UgPSBNeVR5cGUuY3JlYXRlKCk7XG5cdCAgICAgICAgICAgICAqL1xuXHQgICAgICAgICAgICBjcmVhdGU6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgICAgIHZhciBpbnN0YW5jZSA9IHRoaXMuZXh0ZW5kKCk7XG5cdCAgICAgICAgICAgICAgICBpbnN0YW5jZS5pbml0LmFwcGx5KGluc3RhbmNlLCBhcmd1bWVudHMpO1xuXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gaW5zdGFuY2U7XG5cdCAgICAgICAgICAgIH0sXG5cblx0ICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAqIEluaXRpYWxpemVzIGEgbmV3bHkgY3JlYXRlZCBvYmplY3QuXG5cdCAgICAgICAgICAgICAqIE92ZXJyaWRlIHRoaXMgbWV0aG9kIHRvIGFkZCBzb21lIGxvZ2ljIHdoZW4geW91ciBvYmplY3RzIGFyZSBjcmVhdGVkLlxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiAgICAgdmFyIE15VHlwZSA9IENyeXB0b0pTLmxpYi5CYXNlLmV4dGVuZCh7XG5cdCAgICAgICAgICAgICAqICAgICAgICAgaW5pdDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAgKiAgICAgICAgICAgICAvLyAuLi5cblx0ICAgICAgICAgICAgICogICAgICAgICB9XG5cdCAgICAgICAgICAgICAqICAgICB9KTtcblx0ICAgICAgICAgICAgICovXG5cdCAgICAgICAgICAgIGluaXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgfSxcblxuXHQgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICogQ29waWVzIHByb3BlcnRpZXMgaW50byB0aGlzIG9iamVjdC5cblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IHByb3BlcnRpZXMgVGhlIHByb3BlcnRpZXMgdG8gbWl4IGluLlxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiAgICAgTXlUeXBlLm1peEluKHtcblx0ICAgICAgICAgICAgICogICAgICAgICBmaWVsZDogJ3ZhbHVlJ1xuXHQgICAgICAgICAgICAgKiAgICAgfSk7XG5cdCAgICAgICAgICAgICAqL1xuXHQgICAgICAgICAgICBtaXhJbjogZnVuY3Rpb24gKHByb3BlcnRpZXMpIHtcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIHByb3BlcnR5TmFtZSBpbiBwcm9wZXJ0aWVzKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkocHJvcGVydHlOYW1lKSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzW3Byb3BlcnR5TmFtZV0gPSBwcm9wZXJ0aWVzW3Byb3BlcnR5TmFtZV07XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAvLyBJRSB3b24ndCBjb3B5IHRvU3RyaW5nIHVzaW5nIHRoZSBsb29wIGFib3ZlXG5cdCAgICAgICAgICAgICAgICBpZiAocHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eSgndG9TdHJpbmcnKSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMudG9TdHJpbmcgPSBwcm9wZXJ0aWVzLnRvU3RyaW5nO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9LFxuXG5cdCAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgKiBDcmVhdGVzIGEgY29weSBvZiB0aGlzIG9iamVjdC5cblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogQHJldHVybiB7T2JqZWN0fSBUaGUgY2xvbmUuXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqICAgICB2YXIgY2xvbmUgPSBpbnN0YW5jZS5jbG9uZSgpO1xuXHQgICAgICAgICAgICAgKi9cblx0ICAgICAgICAgICAgY2xvbmU6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmluaXQucHJvdG90eXBlLmV4dGVuZCh0aGlzKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH07XG5cdCAgICB9KCkpO1xuXG5cdCAgICAvKipcblx0ICAgICAqIEFuIGFycmF5IG9mIDMyLWJpdCB3b3Jkcy5cblx0ICAgICAqXG5cdCAgICAgKiBAcHJvcGVydHkge0FycmF5fSB3b3JkcyBUaGUgYXJyYXkgb2YgMzItYml0IHdvcmRzLlxuXHQgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IHNpZ0J5dGVzIFRoZSBudW1iZXIgb2Ygc2lnbmlmaWNhbnQgYnl0ZXMgaW4gdGhpcyB3b3JkIGFycmF5LlxuXHQgICAgICovXG5cdCAgICB2YXIgV29yZEFycmF5ID0gQ19saWIuV29yZEFycmF5ID0gQmFzZS5leHRlbmQoe1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEluaXRpYWxpemVzIGEgbmV3bHkgY3JlYXRlZCB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtBcnJheX0gd29yZHMgKE9wdGlvbmFsKSBBbiBhcnJheSBvZiAzMi1iaXQgd29yZHMuXG5cdCAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IHNpZ0J5dGVzIChPcHRpb25hbCkgVGhlIG51bWJlciBvZiBzaWduaWZpY2FudCBieXRlcyBpbiB0aGUgd29yZHMuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy5saWIuV29yZEFycmF5LmNyZWF0ZSgpO1xuXHQgICAgICAgICAqICAgICB2YXIgd29yZEFycmF5ID0gQ3J5cHRvSlMubGliLldvcmRBcnJheS5jcmVhdGUoWzB4MDAwMTAyMDMsIDB4MDQwNTA2MDddKTtcblx0ICAgICAgICAgKiAgICAgdmFyIHdvcmRBcnJheSA9IENyeXB0b0pTLmxpYi5Xb3JkQXJyYXkuY3JlYXRlKFsweDAwMDEwMjAzLCAweDA0MDUwNjA3XSwgNik7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgaW5pdDogZnVuY3Rpb24gKHdvcmRzLCBzaWdCeXRlcykge1xuXHQgICAgICAgICAgICB3b3JkcyA9IHRoaXMud29yZHMgPSB3b3JkcyB8fCBbXTtcblxuXHQgICAgICAgICAgICBpZiAoc2lnQnl0ZXMgIT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLnNpZ0J5dGVzID0gc2lnQnl0ZXM7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLnNpZ0J5dGVzID0gd29yZHMubGVuZ3RoICogNDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIHdvcmQgYXJyYXkgdG8gYSBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge0VuY29kZXJ9IGVuY29kZXIgKE9wdGlvbmFsKSBUaGUgZW5jb2Rpbmcgc3RyYXRlZ3kgdG8gdXNlLiBEZWZhdWx0OiBDcnlwdG9KUy5lbmMuSGV4XG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBzdHJpbmdpZmllZCB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgc3RyaW5nID0gd29yZEFycmF5ICsgJyc7XG5cdCAgICAgICAgICogICAgIHZhciBzdHJpbmcgPSB3b3JkQXJyYXkudG9TdHJpbmcoKTtcblx0ICAgICAgICAgKiAgICAgdmFyIHN0cmluZyA9IHdvcmRBcnJheS50b1N0cmluZyhDcnlwdG9KUy5lbmMuVXRmOCk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uIChlbmNvZGVyKSB7XG5cdCAgICAgICAgICAgIHJldHVybiAoZW5jb2RlciB8fCBIZXgpLnN0cmluZ2lmeSh0aGlzKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29uY2F0ZW5hdGVzIGEgd29yZCBhcnJheSB0byB0aGlzIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheX0gd29yZEFycmF5IFRoZSB3b3JkIGFycmF5IHRvIGFwcGVuZC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhpcyB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB3b3JkQXJyYXkxLmNvbmNhdCh3b3JkQXJyYXkyKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBjb25jYXQ6IGZ1bmN0aW9uICh3b3JkQXJyYXkpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciB0aGlzV29yZHMgPSB0aGlzLndvcmRzO1xuXHQgICAgICAgICAgICB2YXIgdGhhdFdvcmRzID0gd29yZEFycmF5LndvcmRzO1xuXHQgICAgICAgICAgICB2YXIgdGhpc1NpZ0J5dGVzID0gdGhpcy5zaWdCeXRlcztcblx0ICAgICAgICAgICAgdmFyIHRoYXRTaWdCeXRlcyA9IHdvcmRBcnJheS5zaWdCeXRlcztcblxuXHQgICAgICAgICAgICAvLyBDbGFtcCBleGNlc3MgYml0c1xuXHQgICAgICAgICAgICB0aGlzLmNsYW1wKCk7XG5cblx0ICAgICAgICAgICAgLy8gQ29uY2F0XG5cdCAgICAgICAgICAgIGlmICh0aGlzU2lnQnl0ZXMgJSA0KSB7XG5cdCAgICAgICAgICAgICAgICAvLyBDb3B5IG9uZSBieXRlIGF0IGEgdGltZVxuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGF0U2lnQnl0ZXM7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciB0aGF0Qnl0ZSA9ICh0aGF0V29yZHNbaSA+Pj4gMl0gPj4+ICgyNCAtIChpICUgNCkgKiA4KSkgJiAweGZmO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXNXb3Jkc1sodGhpc1NpZ0J5dGVzICsgaSkgPj4+IDJdIHw9IHRoYXRCeXRlIDw8ICgyNCAtICgodGhpc1NpZ0J5dGVzICsgaSkgJSA0KSAqIDgpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgLy8gQ29weSBvbmUgd29yZCBhdCBhIHRpbWVcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhhdFNpZ0J5dGVzOyBpICs9IDQpIHtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzV29yZHNbKHRoaXNTaWdCeXRlcyArIGkpID4+PiAyXSA9IHRoYXRXb3Jkc1tpID4+PiAyXTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB0aGlzLnNpZ0J5dGVzICs9IHRoYXRTaWdCeXRlcztcblxuXHQgICAgICAgICAgICAvLyBDaGFpbmFibGVcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIFJlbW92ZXMgaW5zaWduaWZpY2FudCBiaXRzLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB3b3JkQXJyYXkuY2xhbXAoKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBjbGFtcDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIHdvcmRzID0gdGhpcy53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIHNpZ0J5dGVzID0gdGhpcy5zaWdCeXRlcztcblxuXHQgICAgICAgICAgICAvLyBDbGFtcFxuXHQgICAgICAgICAgICB3b3Jkc1tzaWdCeXRlcyA+Pj4gMl0gJj0gMHhmZmZmZmZmZiA8PCAoMzIgLSAoc2lnQnl0ZXMgJSA0KSAqIDgpO1xuXHQgICAgICAgICAgICB3b3Jkcy5sZW5ndGggPSBNYXRoLmNlaWwoc2lnQnl0ZXMgLyA0KTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ3JlYXRlcyBhIGNvcHkgb2YgdGhpcyB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgY2xvbmUuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBjbG9uZSA9IHdvcmRBcnJheS5jbG9uZSgpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHZhciBjbG9uZSA9IEJhc2UuY2xvbmUuY2FsbCh0aGlzKTtcblx0ICAgICAgICAgICAgY2xvbmUud29yZHMgPSB0aGlzLndvcmRzLnNsaWNlKDApO1xuXG5cdCAgICAgICAgICAgIHJldHVybiBjbG9uZTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ3JlYXRlcyBhIHdvcmQgYXJyYXkgZmlsbGVkIHdpdGggcmFuZG9tIGJ5dGVzLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IG5CeXRlcyBUaGUgbnVtYmVyIG9mIHJhbmRvbSBieXRlcyB0byBnZW5lcmF0ZS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIHJhbmRvbSB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgd29yZEFycmF5ID0gQ3J5cHRvSlMubGliLldvcmRBcnJheS5yYW5kb20oMTYpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHJhbmRvbTogZnVuY3Rpb24gKG5CeXRlcykge1xuXHQgICAgICAgICAgICB2YXIgd29yZHMgPSBbXTtcblxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5CeXRlczsgaSArPSA0KSB7XG5cdCAgICAgICAgICAgICAgICB3b3Jkcy5wdXNoKGNyeXB0b1NlY3VyZVJhbmRvbUludCgpKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHJldHVybiBuZXcgV29yZEFycmF5LmluaXQod29yZHMsIG5CeXRlcyk7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogRW5jb2RlciBuYW1lc3BhY2UuXG5cdCAgICAgKi9cblx0ICAgIHZhciBDX2VuYyA9IEMuZW5jID0ge307XG5cblx0ICAgIC8qKlxuXHQgICAgICogSGV4IGVuY29kaW5nIHN0cmF0ZWd5LlxuXHQgICAgICovXG5cdCAgICB2YXIgSGV4ID0gQ19lbmMuSGV4ID0ge1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbnZlcnRzIGEgd29yZCBhcnJheSB0byBhIGhleCBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheX0gd29yZEFycmF5IFRoZSB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgaGV4IHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGhleFN0cmluZyA9IENyeXB0b0pTLmVuYy5IZXguc3RyaW5naWZ5KHdvcmRBcnJheSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgc3RyaW5naWZ5OiBmdW5jdGlvbiAod29yZEFycmF5KSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgd29yZHMgPSB3b3JkQXJyYXkud29yZHM7XG5cdCAgICAgICAgICAgIHZhciBzaWdCeXRlcyA9IHdvcmRBcnJheS5zaWdCeXRlcztcblxuXHQgICAgICAgICAgICAvLyBDb252ZXJ0XG5cdCAgICAgICAgICAgIHZhciBoZXhDaGFycyA9IFtdO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpZ0J5dGVzOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIHZhciBiaXRlID0gKHdvcmRzW2kgPj4+IDJdID4+PiAoMjQgLSAoaSAlIDQpICogOCkpICYgMHhmZjtcblx0ICAgICAgICAgICAgICAgIGhleENoYXJzLnB1c2goKGJpdGUgPj4+IDQpLnRvU3RyaW5nKDE2KSk7XG5cdCAgICAgICAgICAgICAgICBoZXhDaGFycy5wdXNoKChiaXRlICYgMHgwZikudG9TdHJpbmcoMTYpKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHJldHVybiBoZXhDaGFycy5qb2luKCcnKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgYSBoZXggc3RyaW5nIHRvIGEgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBoZXhTdHIgVGhlIGhleCBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgd29yZEFycmF5ID0gQ3J5cHRvSlMuZW5jLkhleC5wYXJzZShoZXhTdHJpbmcpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHBhcnNlOiBmdW5jdGlvbiAoaGV4U3RyKSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0XG5cdCAgICAgICAgICAgIHZhciBoZXhTdHJMZW5ndGggPSBoZXhTdHIubGVuZ3RoO1xuXG5cdCAgICAgICAgICAgIC8vIENvbnZlcnRcblx0ICAgICAgICAgICAgdmFyIHdvcmRzID0gW107XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaGV4U3RyTGVuZ3RoOyBpICs9IDIpIHtcblx0ICAgICAgICAgICAgICAgIHdvcmRzW2kgPj4+IDNdIHw9IHBhcnNlSW50KGhleFN0ci5zdWJzdHIoaSwgMiksIDE2KSA8PCAoMjQgLSAoaSAlIDgpICogNCk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICByZXR1cm4gbmV3IFdvcmRBcnJheS5pbml0KHdvcmRzLCBoZXhTdHJMZW5ndGggLyAyKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXG5cdCAgICAvKipcblx0ICAgICAqIExhdGluMSBlbmNvZGluZyBzdHJhdGVneS5cblx0ICAgICAqL1xuXHQgICAgdmFyIExhdGluMSA9IENfZW5jLkxhdGluMSA9IHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb252ZXJ0cyBhIHdvcmQgYXJyYXkgdG8gYSBMYXRpbjEgc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl9IHdvcmRBcnJheSBUaGUgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIExhdGluMSBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBsYXRpbjFTdHJpbmcgPSBDcnlwdG9KUy5lbmMuTGF0aW4xLnN0cmluZ2lmeSh3b3JkQXJyYXkpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHN0cmluZ2lmeTogZnVuY3Rpb24gKHdvcmRBcnJheSkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIHdvcmRzID0gd29yZEFycmF5LndvcmRzO1xuXHQgICAgICAgICAgICB2YXIgc2lnQnl0ZXMgPSB3b3JkQXJyYXkuc2lnQnl0ZXM7XG5cblx0ICAgICAgICAgICAgLy8gQ29udmVydFxuXHQgICAgICAgICAgICB2YXIgbGF0aW4xQ2hhcnMgPSBbXTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaWdCeXRlczsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgYml0ZSA9ICh3b3Jkc1tpID4+PiAyXSA+Pj4gKDI0IC0gKGkgJSA0KSAqIDgpKSAmIDB4ZmY7XG5cdCAgICAgICAgICAgICAgICBsYXRpbjFDaGFycy5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoYml0ZSkpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGxhdGluMUNoYXJzLmpvaW4oJycpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb252ZXJ0cyBhIExhdGluMSBzdHJpbmcgdG8gYSB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGxhdGluMVN0ciBUaGUgTGF0aW4xIHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy5lbmMuTGF0aW4xLnBhcnNlKGxhdGluMVN0cmluZyk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgcGFyc2U6IGZ1bmN0aW9uIChsYXRpbjFTdHIpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICAgICAgdmFyIGxhdGluMVN0ckxlbmd0aCA9IGxhdGluMVN0ci5sZW5ndGg7XG5cblx0ICAgICAgICAgICAgLy8gQ29udmVydFxuXHQgICAgICAgICAgICB2YXIgd29yZHMgPSBbXTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXRpbjFTdHJMZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgd29yZHNbaSA+Pj4gMl0gfD0gKGxhdGluMVN0ci5jaGFyQ29kZUF0KGkpICYgMHhmZikgPDwgKDI0IC0gKGkgJSA0KSAqIDgpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgcmV0dXJuIG5ldyBXb3JkQXJyYXkuaW5pdCh3b3JkcywgbGF0aW4xU3RyTGVuZ3RoKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXG5cdCAgICAvKipcblx0ICAgICAqIFVURi04IGVuY29kaW5nIHN0cmF0ZWd5LlxuXHQgICAgICovXG5cdCAgICB2YXIgVXRmOCA9IENfZW5jLlV0ZjggPSB7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgYSB3b3JkIGFycmF5IHRvIGEgVVRGLTggc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl9IHdvcmRBcnJheSBUaGUgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIFVURi04IHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHV0ZjhTdHJpbmcgPSBDcnlwdG9KUy5lbmMuVXRmOC5zdHJpbmdpZnkod29yZEFycmF5KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBzdHJpbmdpZnk6IGZ1bmN0aW9uICh3b3JkQXJyYXkpIHtcblx0ICAgICAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKExhdGluMS5zdHJpbmdpZnkod29yZEFycmF5KSkpO1xuXHQgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG5cdCAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01hbGZvcm1lZCBVVEYtOCBkYXRhJyk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgYSBVVEYtOCBzdHJpbmcgdG8gYSB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHV0ZjhTdHIgVGhlIFVURi04IHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy5lbmMuVXRmOC5wYXJzZSh1dGY4U3RyaW5nKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBwYXJzZTogZnVuY3Rpb24gKHV0ZjhTdHIpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIExhdGluMS5wYXJzZSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQodXRmOFN0cikpKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXG5cdCAgICAvKipcblx0ICAgICAqIEFic3RyYWN0IGJ1ZmZlcmVkIGJsb2NrIGFsZ29yaXRobSB0ZW1wbGF0ZS5cblx0ICAgICAqXG5cdCAgICAgKiBUaGUgcHJvcGVydHkgYmxvY2tTaXplIG11c3QgYmUgaW1wbGVtZW50ZWQgaW4gYSBjb25jcmV0ZSBzdWJ0eXBlLlxuXHQgICAgICpcblx0ICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBfbWluQnVmZmVyU2l6ZSBUaGUgbnVtYmVyIG9mIGJsb2NrcyB0aGF0IHNob3VsZCBiZSBrZXB0IHVucHJvY2Vzc2VkIGluIHRoZSBidWZmZXIuIERlZmF1bHQ6IDBcblx0ICAgICAqL1xuXHQgICAgdmFyIEJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0gPSBDX2xpYi5CdWZmZXJlZEJsb2NrQWxnb3JpdGhtID0gQmFzZS5leHRlbmQoe1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIFJlc2V0cyB0aGlzIGJsb2NrIGFsZ29yaXRobSdzIGRhdGEgYnVmZmVyIHRvIGl0cyBpbml0aWFsIHN0YXRlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICBidWZmZXJlZEJsb2NrQWxnb3JpdGhtLnJlc2V0KCk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgcmVzZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgLy8gSW5pdGlhbCB2YWx1ZXNcblx0ICAgICAgICAgICAgdGhpcy5fZGF0YSA9IG5ldyBXb3JkQXJyYXkuaW5pdCgpO1xuXHQgICAgICAgICAgICB0aGlzLl9uRGF0YUJ5dGVzID0gMDtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQWRkcyBuZXcgZGF0YSB0byB0aGlzIGJsb2NrIGFsZ29yaXRobSdzIGJ1ZmZlci5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gZGF0YSBUaGUgZGF0YSB0byBhcHBlbmQuIFN0cmluZ3MgYXJlIGNvbnZlcnRlZCB0byBhIFdvcmRBcnJheSB1c2luZyBVVEYtOC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgYnVmZmVyZWRCbG9ja0FsZ29yaXRobS5fYXBwZW5kKCdkYXRhJyk7XG5cdCAgICAgICAgICogICAgIGJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0uX2FwcGVuZCh3b3JkQXJyYXkpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIF9hcHBlbmQ6IGZ1bmN0aW9uIChkYXRhKSB7XG5cdCAgICAgICAgICAgIC8vIENvbnZlcnQgc3RyaW5nIHRvIFdvcmRBcnJheSwgZWxzZSBhc3N1bWUgV29yZEFycmF5IGFscmVhZHlcblx0ICAgICAgICAgICAgaWYgKHR5cGVvZiBkYXRhID09ICdzdHJpbmcnKSB7XG5cdCAgICAgICAgICAgICAgICBkYXRhID0gVXRmOC5wYXJzZShkYXRhKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIEFwcGVuZFxuXHQgICAgICAgICAgICB0aGlzLl9kYXRhLmNvbmNhdChkYXRhKTtcblx0ICAgICAgICAgICAgdGhpcy5fbkRhdGFCeXRlcyArPSBkYXRhLnNpZ0J5dGVzO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBQcm9jZXNzZXMgYXZhaWxhYmxlIGRhdGEgYmxvY2tzLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogVGhpcyBtZXRob2QgaW52b2tlcyBfZG9Qcm9jZXNzQmxvY2sob2Zmc2V0KSwgd2hpY2ggbXVzdCBiZSBpbXBsZW1lbnRlZCBieSBhIGNvbmNyZXRlIHN1YnR5cGUuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGRvRmx1c2ggV2hldGhlciBhbGwgYmxvY2tzIGFuZCBwYXJ0aWFsIGJsb2NrcyBzaG91bGQgYmUgcHJvY2Vzc2VkLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgcHJvY2Vzc2VkIGRhdGEuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBwcm9jZXNzZWREYXRhID0gYnVmZmVyZWRCbG9ja0FsZ29yaXRobS5fcHJvY2VzcygpO1xuXHQgICAgICAgICAqICAgICB2YXIgcHJvY2Vzc2VkRGF0YSA9IGJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0uX3Byb2Nlc3MoISEnZmx1c2gnKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBfcHJvY2VzczogZnVuY3Rpb24gKGRvRmx1c2gpIHtcblx0ICAgICAgICAgICAgdmFyIHByb2Nlc3NlZFdvcmRzO1xuXG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgZGF0YSA9IHRoaXMuX2RhdGE7XG5cdCAgICAgICAgICAgIHZhciBkYXRhV29yZHMgPSBkYXRhLndvcmRzO1xuXHQgICAgICAgICAgICB2YXIgZGF0YVNpZ0J5dGVzID0gZGF0YS5zaWdCeXRlcztcblx0ICAgICAgICAgICAgdmFyIGJsb2NrU2l6ZSA9IHRoaXMuYmxvY2tTaXplO1xuXHQgICAgICAgICAgICB2YXIgYmxvY2tTaXplQnl0ZXMgPSBibG9ja1NpemUgKiA0O1xuXG5cdCAgICAgICAgICAgIC8vIENvdW50IGJsb2NrcyByZWFkeVxuXHQgICAgICAgICAgICB2YXIgbkJsb2Nrc1JlYWR5ID0gZGF0YVNpZ0J5dGVzIC8gYmxvY2tTaXplQnl0ZXM7XG5cdCAgICAgICAgICAgIGlmIChkb0ZsdXNoKSB7XG5cdCAgICAgICAgICAgICAgICAvLyBSb3VuZCB1cCB0byBpbmNsdWRlIHBhcnRpYWwgYmxvY2tzXG5cdCAgICAgICAgICAgICAgICBuQmxvY2tzUmVhZHkgPSBNYXRoLmNlaWwobkJsb2Nrc1JlYWR5KTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIC8vIFJvdW5kIGRvd24gdG8gaW5jbHVkZSBvbmx5IGZ1bGwgYmxvY2tzLFxuXHQgICAgICAgICAgICAgICAgLy8gbGVzcyB0aGUgbnVtYmVyIG9mIGJsb2NrcyB0aGF0IG11c3QgcmVtYWluIGluIHRoZSBidWZmZXJcblx0ICAgICAgICAgICAgICAgIG5CbG9ja3NSZWFkeSA9IE1hdGgubWF4KChuQmxvY2tzUmVhZHkgfCAwKSAtIHRoaXMuX21pbkJ1ZmZlclNpemUsIDApO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gQ291bnQgd29yZHMgcmVhZHlcblx0ICAgICAgICAgICAgdmFyIG5Xb3Jkc1JlYWR5ID0gbkJsb2Nrc1JlYWR5ICogYmxvY2tTaXplO1xuXG5cdCAgICAgICAgICAgIC8vIENvdW50IGJ5dGVzIHJlYWR5XG5cdCAgICAgICAgICAgIHZhciBuQnl0ZXNSZWFkeSA9IE1hdGgubWluKG5Xb3Jkc1JlYWR5ICogNCwgZGF0YVNpZ0J5dGVzKTtcblxuXHQgICAgICAgICAgICAvLyBQcm9jZXNzIGJsb2Nrc1xuXHQgICAgICAgICAgICBpZiAobldvcmRzUmVhZHkpIHtcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIG9mZnNldCA9IDA7IG9mZnNldCA8IG5Xb3Jkc1JlYWR5OyBvZmZzZXQgKz0gYmxvY2tTaXplKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgLy8gUGVyZm9ybSBjb25jcmV0ZS1hbGdvcml0aG0gbG9naWNcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLl9kb1Byb2Nlc3NCbG9jayhkYXRhV29yZHMsIG9mZnNldCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBwcm9jZXNzZWQgd29yZHNcblx0ICAgICAgICAgICAgICAgIHByb2Nlc3NlZFdvcmRzID0gZGF0YVdvcmRzLnNwbGljZSgwLCBuV29yZHNSZWFkeSk7XG5cdCAgICAgICAgICAgICAgICBkYXRhLnNpZ0J5dGVzIC09IG5CeXRlc1JlYWR5O1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gUmV0dXJuIHByb2Nlc3NlZCB3b3Jkc1xuXHQgICAgICAgICAgICByZXR1cm4gbmV3IFdvcmRBcnJheS5pbml0KHByb2Nlc3NlZFdvcmRzLCBuQnl0ZXNSZWFkeSk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENyZWF0ZXMgYSBjb3B5IG9mIHRoaXMgb2JqZWN0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7T2JqZWN0fSBUaGUgY2xvbmUuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBjbG9uZSA9IGJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0uY2xvbmUoKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBjbG9uZTogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB2YXIgY2xvbmUgPSBCYXNlLmNsb25lLmNhbGwodGhpcyk7XG5cdCAgICAgICAgICAgIGNsb25lLl9kYXRhID0gdGhpcy5fZGF0YS5jbG9uZSgpO1xuXG5cdCAgICAgICAgICAgIHJldHVybiBjbG9uZTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgX21pbkJ1ZmZlclNpemU6IDBcblx0ICAgIH0pO1xuXG5cdCAgICAvKipcblx0ICAgICAqIEFic3RyYWN0IGhhc2hlciB0ZW1wbGF0ZS5cblx0ICAgICAqXG5cdCAgICAgKiBAcHJvcGVydHkge251bWJlcn0gYmxvY2tTaXplIFRoZSBudW1iZXIgb2YgMzItYml0IHdvcmRzIHRoaXMgaGFzaGVyIG9wZXJhdGVzIG9uLiBEZWZhdWx0OiAxNiAoNTEyIGJpdHMpXG5cdCAgICAgKi9cblx0ICAgIHZhciBIYXNoZXIgPSBDX2xpYi5IYXNoZXIgPSBCdWZmZXJlZEJsb2NrQWxnb3JpdGhtLmV4dGVuZCh7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29uZmlndXJhdGlvbiBvcHRpb25zLlxuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGNmZzogQmFzZS5leHRlbmQoKSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEluaXRpYWxpemVzIGEgbmV3bHkgY3JlYXRlZCBoYXNoZXIuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gY2ZnIChPcHRpb25hbCkgVGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyB0byB1c2UgZm9yIHRoaXMgaGFzaCBjb21wdXRhdGlvbi5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGhhc2hlciA9IENyeXB0b0pTLmFsZ28uU0hBMjU2LmNyZWF0ZSgpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGluaXQ6IGZ1bmN0aW9uIChjZmcpIHtcblx0ICAgICAgICAgICAgLy8gQXBwbHkgY29uZmlnIGRlZmF1bHRzXG5cdCAgICAgICAgICAgIHRoaXMuY2ZnID0gdGhpcy5jZmcuZXh0ZW5kKGNmZyk7XG5cblx0ICAgICAgICAgICAgLy8gU2V0IGluaXRpYWwgdmFsdWVzXG5cdCAgICAgICAgICAgIHRoaXMucmVzZXQoKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogUmVzZXRzIHRoaXMgaGFzaGVyIHRvIGl0cyBpbml0aWFsIHN0YXRlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICBoYXNoZXIucmVzZXQoKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICByZXNldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAvLyBSZXNldCBkYXRhIGJ1ZmZlclxuXHQgICAgICAgICAgICBCdWZmZXJlZEJsb2NrQWxnb3JpdGhtLnJlc2V0LmNhbGwodGhpcyk7XG5cblx0ICAgICAgICAgICAgLy8gUGVyZm9ybSBjb25jcmV0ZS1oYXNoZXIgbG9naWNcblx0ICAgICAgICAgICAgdGhpcy5fZG9SZXNldCgpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBVcGRhdGVzIHRoaXMgaGFzaGVyIHdpdGggYSBtZXNzYWdlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlVXBkYXRlIFRoZSBtZXNzYWdlIHRvIGFwcGVuZC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge0hhc2hlcn0gVGhpcyBoYXNoZXIuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIGhhc2hlci51cGRhdGUoJ21lc3NhZ2UnKTtcblx0ICAgICAgICAgKiAgICAgaGFzaGVyLnVwZGF0ZSh3b3JkQXJyYXkpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHVwZGF0ZTogZnVuY3Rpb24gKG1lc3NhZ2VVcGRhdGUpIHtcblx0ICAgICAgICAgICAgLy8gQXBwZW5kXG5cdCAgICAgICAgICAgIHRoaXMuX2FwcGVuZChtZXNzYWdlVXBkYXRlKTtcblxuXHQgICAgICAgICAgICAvLyBVcGRhdGUgdGhlIGhhc2hcblx0ICAgICAgICAgICAgdGhpcy5fcHJvY2VzcygpO1xuXG5cdCAgICAgICAgICAgIC8vIENoYWluYWJsZVxuXHQgICAgICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogRmluYWxpemVzIHRoZSBoYXNoIGNvbXB1dGF0aW9uLlxuXHQgICAgICAgICAqIE5vdGUgdGhhdCB0aGUgZmluYWxpemUgb3BlcmF0aW9uIGlzIGVmZmVjdGl2ZWx5IGEgZGVzdHJ1Y3RpdmUsIHJlYWQtb25jZSBvcGVyYXRpb24uXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2VVcGRhdGUgKE9wdGlvbmFsKSBBIGZpbmFsIG1lc3NhZ2UgdXBkYXRlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgaGFzaC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGhhc2ggPSBoYXNoZXIuZmluYWxpemUoKTtcblx0ICAgICAgICAgKiAgICAgdmFyIGhhc2ggPSBoYXNoZXIuZmluYWxpemUoJ21lc3NhZ2UnKTtcblx0ICAgICAgICAgKiAgICAgdmFyIGhhc2ggPSBoYXNoZXIuZmluYWxpemUod29yZEFycmF5KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBmaW5hbGl6ZTogZnVuY3Rpb24gKG1lc3NhZ2VVcGRhdGUpIHtcblx0ICAgICAgICAgICAgLy8gRmluYWwgbWVzc2FnZSB1cGRhdGVcblx0ICAgICAgICAgICAgaWYgKG1lc3NhZ2VVcGRhdGUpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuX2FwcGVuZChtZXNzYWdlVXBkYXRlKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIFBlcmZvcm0gY29uY3JldGUtaGFzaGVyIGxvZ2ljXG5cdCAgICAgICAgICAgIHZhciBoYXNoID0gdGhpcy5fZG9GaW5hbGl6ZSgpO1xuXG5cdCAgICAgICAgICAgIHJldHVybiBoYXNoO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBibG9ja1NpemU6IDUxMi8zMixcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENyZWF0ZXMgYSBzaG9ydGN1dCBmdW5jdGlvbiB0byBhIGhhc2hlcidzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge0hhc2hlcn0gaGFzaGVyIFRoZSBoYXNoZXIgdG8gY3JlYXRlIGEgaGVscGVyIGZvci5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge0Z1bmN0aW9ufSBUaGUgc2hvcnRjdXQgZnVuY3Rpb24uXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBTSEEyNTYgPSBDcnlwdG9KUy5saWIuSGFzaGVyLl9jcmVhdGVIZWxwZXIoQ3J5cHRvSlMuYWxnby5TSEEyNTYpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIF9jcmVhdGVIZWxwZXI6IGZ1bmN0aW9uIChoYXNoZXIpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChtZXNzYWdlLCBjZmcpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBuZXcgaGFzaGVyLmluaXQoY2ZnKS5maW5hbGl6ZShtZXNzYWdlKTtcblx0ICAgICAgICAgICAgfTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ3JlYXRlcyBhIHNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBITUFDJ3Mgb2JqZWN0IGludGVyZmFjZS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7SGFzaGVyfSBoYXNoZXIgVGhlIGhhc2hlciB0byB1c2UgaW4gdGhpcyBITUFDIGhlbHBlci5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge0Z1bmN0aW9ufSBUaGUgc2hvcnRjdXQgZnVuY3Rpb24uXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBIbWFjU0hBMjU2ID0gQ3J5cHRvSlMubGliLkhhc2hlci5fY3JlYXRlSG1hY0hlbHBlcihDcnlwdG9KUy5hbGdvLlNIQTI1Nik7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgX2NyZWF0ZUhtYWNIZWxwZXI6IGZ1bmN0aW9uIChoYXNoZXIpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChtZXNzYWdlLCBrZXkpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ19hbGdvLkhNQUMuaW5pdChoYXNoZXIsIGtleSkuZmluYWxpemUobWVzc2FnZSk7XG5cdCAgICAgICAgICAgIH07XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogQWxnb3JpdGhtIG5hbWVzcGFjZS5cblx0ICAgICAqL1xuXHQgICAgdmFyIENfYWxnbyA9IEMuYWxnbyA9IHt9O1xuXG5cdCAgICByZXR1cm4gQztcblx0fShNYXRoKSk7XG5cblxuXHRyZXR1cm4gQ3J5cHRvSlM7XG5cbn0pKTtcbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbCh0aGlzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzKSkpXG5cbi8qKiovIH0pLFxuLyogNyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHRzbGliXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xudmFyIFV0aWxzID0gdHNsaWJfMS5fX2ltcG9ydFN0YXIoX193ZWJwYWNrX3JlcXVpcmVfXygxKSk7XG52YXIgbG9nZ2VyXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKTtcbnZhciBwbGF0Zm9ybV8xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygzKSk7XG4vKiBDYWxsIHRoZSBsaXN0ZW5lciwgY2F0Y2ggYW55IGV4Y2VwdGlvbnMgYW5kIGxvZywgYnV0IGNvbnRpbnVlIG9wZXJhdGlvbiovXG5mdW5jdGlvbiBjYWxsTGlzdGVuZXIoZXZlbnRUaGlzLCBsaXN0ZW5lciwgYXJncykge1xuICAgIHRyeSB7XG4gICAgICAgIGxpc3RlbmVyLmFwcGx5KGV2ZW50VGhpcywgYXJncyk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX0VSUk9SLCAnRXZlbnRFbWl0dGVyLmVtaXQoKScsICdVbmV4cGVjdGVkIGxpc3RlbmVyIGV4Y2VwdGlvbjogJyArIGUgKyAnOyBzdGFjayA9ICcgKyAoZSAmJiBlLnN0YWNrKSk7XG4gICAgfVxufVxuLyoqXG4gKiBSZW1vdmUgbGlzdGVuZXJzIHRoYXQgbWF0Y2ggbGlzdGVuZXJcbiAqIEBwYXJhbSB0YXJnZXRMaXN0ZW5lcnMgaXMgYW4gYXJyYXkgb2YgbGlzdGVuZXIgYXJyYXlzIG9yIGV2ZW50IG9iamVjdHMgd2l0aCBhcnJheXMgb2YgbGlzdGVuZXJzXG4gKiBAcGFyYW0gbGlzdGVuZXIgdGhlIGxpc3RlbmVyIGNhbGxiYWNrIHRvIHJlbW92ZVxuICogQHBhcmFtIGV2ZW50RmlsdGVyIChvcHRpb25hbCkgZXZlbnQgbmFtZSBpbnN0cnVjdGluZyB0aGUgZnVuY3Rpb24gdG8gb25seSByZW1vdmUgbGlzdGVuZXJzIGZvciB0aGUgc3BlY2lmaWVkIGV2ZW50XG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUxpc3RlbmVyKHRhcmdldExpc3RlbmVycywgbGlzdGVuZXIsIGV2ZW50RmlsdGVyKSB7XG4gICAgdmFyIGxpc3RlbmVycztcbiAgICB2YXIgaW5kZXg7XG4gICAgdmFyIGV2ZW50TmFtZTtcbiAgICBmb3IgKHZhciB0YXJnZXRMaXN0ZW5lcnNJbmRleCA9IDA7IHRhcmdldExpc3RlbmVyc0luZGV4IDwgdGFyZ2V0TGlzdGVuZXJzLmxlbmd0aDsgdGFyZ2V0TGlzdGVuZXJzSW5kZXgrKykge1xuICAgICAgICBsaXN0ZW5lcnMgPSB0YXJnZXRMaXN0ZW5lcnNbdGFyZ2V0TGlzdGVuZXJzSW5kZXhdO1xuICAgICAgICBpZiAoZXZlbnRGaWx0ZXIpIHtcbiAgICAgICAgICAgIGxpc3RlbmVycyA9IGxpc3RlbmVyc1tldmVudEZpbHRlcl07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFV0aWxzLmlzQXJyYXkobGlzdGVuZXJzKSkge1xuICAgICAgICAgICAgd2hpbGUgKChpbmRleCA9IFV0aWxzLmFyckluZGV4T2YobGlzdGVuZXJzLCBsaXN0ZW5lcikpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIGxpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyogSWYgZXZlbnRzIG9iamVjdCBoYXMgYW4gZXZlbnQgbmFtZSBrZXkgd2l0aCBubyBsaXN0ZW5lcnMgdGhlblxuICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmUgdGhlIGtleSB0byBzdG9wIHRoZSBsaXN0IGdyb3dpbmcgaW5kZWZpbml0ZWx5ICovXG4gICAgICAgICAgICBpZiAoZXZlbnRGaWx0ZXIgJiYgbGlzdGVuZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSB0YXJnZXRMaXN0ZW5lcnNbdGFyZ2V0TGlzdGVuZXJzSW5kZXhdW2V2ZW50RmlsdGVyXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChVdGlscy5pc09iamVjdChsaXN0ZW5lcnMpKSB7XG4gICAgICAgICAgICAvKiBldmVudHMgKi9cbiAgICAgICAgICAgIGZvciAoZXZlbnROYW1lIGluIGxpc3RlbmVycykge1xuICAgICAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobGlzdGVuZXJzLCBldmVudE5hbWUpICYmIFV0aWxzLmlzQXJyYXkobGlzdGVuZXJzW2V2ZW50TmFtZV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZUxpc3RlbmVyKFtsaXN0ZW5lcnNdLCBsaXN0ZW5lciwgZXZlbnROYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG52YXIgRXZlbnRFbWl0dGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgICAgICAgdGhpcy5hbnkgPSBbXTtcbiAgICAgICAgdGhpcy5ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICB0aGlzLmFueU9uY2UgPSBbXTtcbiAgICAgICAgdGhpcy5ldmVudHNPbmNlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB9XG4gICAgRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYXJncy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIHZhciBsaXN0ZW5lciA9IGFyZ3NbMF07XG4gICAgICAgICAgICBpZiAodHlwZW9mIGxpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hbnkucHVzaChsaXN0ZW5lcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V2ZW50TGlzdGVuZXIub24oKTogSW52YWxpZCBhcmd1bWVudHM6ICcgKyBwbGF0Zm9ybV8xLmRlZmF1bHQuQ29uZmlnLmluc3BlY3QoYXJncykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgdmFyIGV2ZW50XzEgPSBhcmdzWzBdLCBsaXN0ZW5lcl8xID0gYXJnc1sxXTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbGlzdGVuZXJfMSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRXZlbnRMaXN0ZW5lci5vbigpOiBJbnZhbGlkIGFyZ3VtZW50czogJyArIHBsYXRmb3JtXzEuZGVmYXVsdC5Db25maWcuaW5zcGVjdChhcmdzKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoVXRpbHMuaXNFbXB0eUFyZyhldmVudF8xKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYW55LnB1c2gobGlzdGVuZXJfMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChVdGlscy5pc0FycmF5KGV2ZW50XzEpKSB7XG4gICAgICAgICAgICAgICAgZXZlbnRfMS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudE5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMub24oZXZlbnROYW1lLCBsaXN0ZW5lcl8xKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZXZlbnRfMSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFdmVudExpc3RlbmVyLm9uKCk6IEludmFsaWQgYXJndW1lbnRzOiAnICsgcGxhdGZvcm1fMS5kZWZhdWx0LkNvbmZpZy5pbnNwZWN0KGFyZ3MpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGxpc3RlbmVycyA9IHRoaXMuZXZlbnRzW2V2ZW50XzFdIHx8ICh0aGlzLmV2ZW50c1tldmVudF8xXSA9IFtdKTtcbiAgICAgICAgICAgICAgICBsaXN0ZW5lcnMucHVzaChsaXN0ZW5lcl8xKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vZmYgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYXJncy5sZW5ndGggPT0gMCB8fCAoVXRpbHMuaXNFbXB0eUFyZyhhcmdzWzBdKSAmJiBVdGlscy5pc0VtcHR5QXJnKGFyZ3NbMV0pKSkge1xuICAgICAgICAgICAgdGhpcy5hbnkgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgICAgIHRoaXMuYW55T25jZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5ldmVudHNPbmNlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZmlyc3RBcmcgPSBhcmdzWzBdLCBzZWNvbmRBcmcgPSBhcmdzWzFdO1xuICAgICAgICB2YXIgbGlzdGVuZXIgPSBudWxsO1xuICAgICAgICB2YXIgZXZlbnQgPSBudWxsO1xuICAgICAgICBpZiAoYXJncy5sZW5ndGggPT09IDEgfHwgIXNlY29uZEFyZykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBmaXJzdEFyZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIC8qIHdlIHRha2UgdGhpcyB0byBiZSB0aGUgbGlzdGVuZXIgYW5kIHRyZWF0IHRoZSBldmVudCBhcyBcImFueVwiIC4uICovXG4gICAgICAgICAgICAgICAgbGlzdGVuZXIgPSBmaXJzdEFyZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGV2ZW50ID0gZmlyc3RBcmc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKiAuLi4gb3Igd2UgdGFrZSBldmVudCB0byBiZSB0aGUgYWN0dWFsIGV2ZW50IG5hbWUgYW5kIGxpc3RlbmVyIHRvIGJlIGFsbCAqL1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBzZWNvbmRBcmcgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V2ZW50RW1pdHRlci5vZmYoKTogaW52YWxpZCBhcmd1bWVudHM6JyArIHBsYXRmb3JtXzEuZGVmYXVsdC5Db25maWcuaW5zcGVjdChhcmdzKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfYSA9IFtmaXJzdEFyZywgc2Vjb25kQXJnXSwgZXZlbnQgPSBfYVswXSwgbGlzdGVuZXIgPSBfYVsxXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGlzdGVuZXIgJiYgVXRpbHMuaXNFbXB0eUFyZyhldmVudCkpIHtcbiAgICAgICAgICAgIHJlbW92ZUxpc3RlbmVyKFt0aGlzLmFueSwgdGhpcy5ldmVudHMsIHRoaXMuYW55T25jZSwgdGhpcy5ldmVudHNPbmNlXSwgbGlzdGVuZXIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChVdGlscy5pc0FycmF5KGV2ZW50KSkge1xuICAgICAgICAgICAgZXZlbnQuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnROYW1lKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMub2ZmKGV2ZW50TmFtZSwgbGlzdGVuZXIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLyogXCJub3JtYWxcIiBjYXNlIHdoZXJlIGV2ZW50IGlzIGFuIGFjdHVhbCBldmVudCAqL1xuICAgICAgICBpZiAodHlwZW9mIGV2ZW50ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFdmVudEVtaXR0ZXIub2ZmKCk6IGludmFsaWQgYXJndW1lbnRzOicgKyBwbGF0Zm9ybV8xLmRlZmF1bHQuQ29uZmlnLmluc3BlY3QoYXJncykpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsaXN0ZW5lcikge1xuICAgICAgICAgICAgcmVtb3ZlTGlzdGVuZXIoW3RoaXMuZXZlbnRzLCB0aGlzLmV2ZW50c09uY2VdLCBsaXN0ZW5lciwgZXZlbnQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuZXZlbnRzW2V2ZW50XTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmV2ZW50c09uY2VbZXZlbnRdO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGFycmF5IG9mIGxpc3RlbmVycyBmb3IgYSBnaXZlbiBldmVudDsgZXhjbHVkZXMgb25jZSBldmVudHNcbiAgICAgKiBAcGFyYW0gZXZlbnQgKG9wdGlvbmFsKSB0aGUgbmFtZSBvZiB0aGUgZXZlbnQsIG9yIG5vbmUgZm9yICdhbnknXG4gICAgICogQHJldHVybiBhcnJheSBvZiBldmVudHMsIG9yIG51bGwgaWYgbm9uZVxuICAgICAqL1xuICAgIEV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmIChldmVudCkge1xuICAgICAgICAgICAgdmFyIGxpc3RlbmVycyA9IHRoaXMuZXZlbnRzW2V2ZW50XSB8fCBbXTtcbiAgICAgICAgICAgIGlmICh0aGlzLmV2ZW50c09uY2VbZXZlbnRdKVxuICAgICAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGxpc3RlbmVycywgdGhpcy5ldmVudHNPbmNlW2V2ZW50XSk7XG4gICAgICAgICAgICByZXR1cm4gbGlzdGVuZXJzLmxlbmd0aCA/IGxpc3RlbmVycyA6IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuYW55Lmxlbmd0aCA/IHRoaXMuYW55IDogbnVsbDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEVtaXQgYW4gZXZlbnRcbiAgICAgKiBAcGFyYW0gZXZlbnQgdGhlIGV2ZW50IG5hbWVcbiAgICAgKiBAcGFyYW0gYXJncyB0aGUgYXJndW1lbnRzIHRvIHBhc3MgdG8gdGhlIGxpc3RlbmVyXG4gICAgICovXG4gICAgRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHZhciBhcmdzID0gW107IC8qICwgYXJncy4uLiAqL1xuICAgICAgICBmb3IgKHZhciBfaSA9IDEgLyogLCBhcmdzLi4uICovOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGggLyogLCBhcmdzLi4uICovOyBfaSsrIC8qICwgYXJncy4uLiAqLykge1xuICAgICAgICAgICAgYXJnc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTsgLyogLCBhcmdzLi4uICovXG4gICAgICAgIH1cbiAgICAgICAgdmFyIGV2ZW50VGhpcyA9IHsgZXZlbnQ6IGV2ZW50IH07XG4gICAgICAgIHZhciBsaXN0ZW5lcnMgPSBbXTtcbiAgICAgICAgaWYgKHRoaXMuYW55T25jZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGxpc3RlbmVycywgdGhpcy5hbnlPbmNlKTtcbiAgICAgICAgICAgIHRoaXMuYW55T25jZSA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmFueS5sZW5ndGgpIHtcbiAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGxpc3RlbmVycywgdGhpcy5hbnkpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBldmVudHNPbmNlTGlzdGVuZXJzID0gdGhpcy5ldmVudHNPbmNlW2V2ZW50XTtcbiAgICAgICAgaWYgKGV2ZW50c09uY2VMaXN0ZW5lcnMpIHtcbiAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGxpc3RlbmVycywgZXZlbnRzT25jZUxpc3RlbmVycyk7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5ldmVudHNPbmNlW2V2ZW50XTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZXZlbnRzTGlzdGVuZXJzID0gdGhpcy5ldmVudHNbZXZlbnRdO1xuICAgICAgICBpZiAoZXZlbnRzTGlzdGVuZXJzKSB7XG4gICAgICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShsaXN0ZW5lcnMsIGV2ZW50c0xpc3RlbmVycyk7XG4gICAgICAgIH1cbiAgICAgICAgVXRpbHMuYXJyRm9yRWFjaChsaXN0ZW5lcnMsIGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgICAgICAgY2FsbExpc3RlbmVyKGV2ZW50VGhpcywgbGlzdGVuZXIsIGFyZ3MpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEV2ZW50RW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYXJnQ291bnQgPSBhcmdzLmxlbmd0aDtcbiAgICAgICAgaWYgKChhcmdDb3VudCA9PT0gMCB8fCAoYXJnQ291bnQgPT09IDEgJiYgdHlwZW9mIGFyZ3NbMF0gIT09ICdmdW5jdGlvbicpKSAmJiBwbGF0Zm9ybV8xLmRlZmF1bHQuQ29uZmlnLlByb21pc2UpIHtcbiAgICAgICAgICAgIHZhciBldmVudF8yID0gYXJnc1swXTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgcGxhdGZvcm1fMS5kZWZhdWx0LkNvbmZpZy5Qcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMub25jZShldmVudF8yLCByZXNvbHZlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHZhciBmaXJzdEFyZyA9IGFyZ3NbMF0sIHNlY29uZEFyZyA9IGFyZ3NbMV07XG4gICAgICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMSAmJiB0eXBlb2YgZmlyc3RBcmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRoaXMuYW55T25jZS5wdXNoKGZpcnN0QXJnKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChVdGlscy5pc0VtcHR5QXJnKGZpcnN0QXJnKSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBzZWNvbmRBcmcgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V2ZW50RW1pdHRlci5vbmNlKCk6IEludmFsaWQgYXJndW1lbnRzOicgKyBwbGF0Zm9ybV8xLmRlZmF1bHQuQ29uZmlnLmluc3BlY3QoYXJncykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5hbnlPbmNlLnB1c2goc2Vjb25kQXJnKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChVdGlscy5pc0FycmF5KGZpcnN0QXJnKSkge1xuICAgICAgICAgICAgdmFyIHNlbGZfMSA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgbGlzdGVuZXJXcmFwcGVyXzEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGlubmVyQXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgVXRpbHMuYXJyRm9yRWFjaChmaXJzdEFyZywgZnVuY3Rpb24gKGV2ZW50TmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmXzEub2ZmKGV2ZW50TmFtZSwgbGlzdGVuZXJXcmFwcGVyXzEpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc2Vjb25kQXJnICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRXZlbnRFbWl0dGVyLm9uY2UoKTogSW52YWxpZCBhcmd1bWVudHM6JyArIHBsYXRmb3JtXzEuZGVmYXVsdC5Db25maWcuaW5zcGVjdChhcmdzKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNlY29uZEFyZy5hcHBseSh0aGlzLCBpbm5lckFyZ3MpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFV0aWxzLmFyckZvckVhY2goZmlyc3RBcmcsIGZ1bmN0aW9uIChldmVudE5hbWUpIHtcbiAgICAgICAgICAgICAgICBzZWxmXzEub24oZXZlbnROYW1lLCBsaXN0ZW5lcldyYXBwZXJfMSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZmlyc3RBcmcgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFdmVudEVtaXR0ZXIub25jZSgpOiBJbnZhbGlkIGFyZ3VtZW50czonICsgcGxhdGZvcm1fMS5kZWZhdWx0LkNvbmZpZy5pbnNwZWN0KGFyZ3MpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBsaXN0ZW5lcnMgPSB0aGlzLmV2ZW50c09uY2VbZmlyc3RBcmddIHx8ICh0aGlzLmV2ZW50c09uY2VbZmlyc3RBcmddID0gW10pO1xuICAgICAgICAgICAgaWYgKHNlY29uZEFyZykge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc2Vjb25kQXJnICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRXZlbnRFbWl0dGVyLm9uY2UoKTogSW52YWxpZCBhcmd1bWVudHM6JyArIHBsYXRmb3JtXzEuZGVmYXVsdC5Db25maWcuaW5zcGVjdChhcmdzKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxpc3RlbmVycy5wdXNoKHNlY29uZEFyZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFByaXZhdGUgQVBJXG4gICAgICpcbiAgICAgKiBMaXN0ZW4gZm9yIGEgc2luZ2xlIG9jY3VycmVuY2Ugb2YgYSBzdGF0ZSBldmVudCBhbmQgZmlyZSBpbW1lZGlhdGVseSBpZiBjdXJyZW50U3RhdGUgbWF0Y2hlcyB0YXJnZXRTdGF0ZVxuICAgICAqIEBwYXJhbSB0YXJnZXRTdGF0ZSB0aGUgbmFtZSBvZiB0aGUgc3RhdGUgZXZlbnQgdG8gbGlzdGVuIHRvXG4gICAgICogQHBhcmFtIGN1cnJlbnRTdGF0ZSB0aGUgbmFtZSBvZiB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGlzIG9iamVjdFxuICAgICAqIEBwYXJhbSBsaXN0ZW5lciB0aGUgbGlzdGVuZXIgdG8gYmUgY2FsbGVkXG4gICAgICogQHBhcmFtIGxpc3RlbmVyQXJnc1xuICAgICAqL1xuICAgIEV2ZW50RW1pdHRlci5wcm90b3R5cGUud2hlblN0YXRlID0gZnVuY3Rpb24gKHRhcmdldFN0YXRlLCBjdXJyZW50U3RhdGUsIGxpc3RlbmVyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBsaXN0ZW5lckFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAzOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGxpc3RlbmVyQXJnc1tfaSAtIDNdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZXZlbnRUaGlzID0geyBldmVudDogdGFyZ2V0U3RhdGUgfTtcbiAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXRTdGF0ZSAhPT0gJ3N0cmluZycgfHwgdHlwZW9mIGN1cnJlbnRTdGF0ZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRocm93ICd3aGVuU3RhdGUgcmVxdWlyZXMgYSB2YWxpZCBldmVudCBTdHJpbmcgYXJndW1lbnQnO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicgJiYgcGxhdGZvcm1fMS5kZWZhdWx0LkNvbmZpZy5Qcm9taXNlKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IHBsYXRmb3JtXzEuZGVmYXVsdC5Db25maWcuUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAgICAgICAgIEV2ZW50RW1pdHRlci5wcm90b3R5cGUud2hlblN0YXRlLmFwcGx5KF90aGlzLCBbdGFyZ2V0U3RhdGUsIGN1cnJlbnRTdGF0ZSwgcmVzb2x2ZV0uY29uY2F0KGxpc3RlbmVyQXJncykpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRhcmdldFN0YXRlID09PSBjdXJyZW50U3RhdGUpIHtcbiAgICAgICAgICAgIGNhbGxMaXN0ZW5lcihldmVudFRoaXMsIGxpc3RlbmVyLCBsaXN0ZW5lckFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5vbmNlKHRhcmdldFN0YXRlLCBsaXN0ZW5lcik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBFdmVudEVtaXR0ZXI7XG59KCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gRXZlbnRFbWl0dGVyO1xuXG5cbi8qKiovIH0pLFxuLyogOCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXREZWZhdWx0cyA9IGV4cG9ydHMubm9ybWFsaXNlT3B0aW9ucyA9IGV4cG9ydHMub2JqZWN0aWZ5T3B0aW9ucyA9IGV4cG9ydHMuZ2V0QWdlbnRTdHJpbmcgPSBleHBvcnRzLmdldEhvc3RzID0gZXhwb3J0cy5nZXRGYWxsYmFja0hvc3RzID0gZXhwb3J0cy5lbnZpcm9ubWVudEZhbGxiYWNrSG9zdHMgPSBleHBvcnRzLmdldEh0dHBTY2hlbWUgPSBleHBvcnRzLmdldFBvcnQgPSBleHBvcnRzLmdldEhvc3QgPSB2b2lkIDA7XG52YXIgdHNsaWJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG52YXIgcGxhdGZvcm1fMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oMykpO1xudmFyIFV0aWxzID0gdHNsaWJfMS5fX2ltcG9ydFN0YXIoX193ZWJwYWNrX3JlcXVpcmVfXygxKSk7XG52YXIgbG9nZ2VyXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKTtcbnZhciBlcnJvcmluZm9fMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oNCkpO1xudmFyIHBhY2thZ2VfanNvbl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0Myk7XG52YXIgYWdlbnQgPSAnYWJseS1qcy8nICsgcGFja2FnZV9qc29uXzEudmVyc2lvbjtcbnZhciBEZWZhdWx0cyA9IHtcbiAgICBFTlZJUk9OTUVOVDogJycsXG4gICAgUkVTVF9IT1NUOiAncmVzdC5hYmx5LmlvJyxcbiAgICBSRUFMVElNRV9IT1NUOiAncmVhbHRpbWUuYWJseS5pbycsXG4gICAgRkFMTEJBQ0tfSE9TVFM6IFtcbiAgICAgICAgJ0EuYWJseS1yZWFsdGltZS5jb20nLFxuICAgICAgICAnQi5hYmx5LXJlYWx0aW1lLmNvbScsXG4gICAgICAgICdDLmFibHktcmVhbHRpbWUuY29tJyxcbiAgICAgICAgJ0QuYWJseS1yZWFsdGltZS5jb20nLFxuICAgICAgICAnRS5hYmx5LXJlYWx0aW1lLmNvbScsXG4gICAgXSxcbiAgICBQT1JUOiA4MCxcbiAgICBUTFNfUE9SVDogNDQzLFxuICAgIFRJTUVPVVRTOiB7XG4gICAgICAgIC8qIERvY3VtZW50ZWQgYXMgb3B0aW9ucyBwYXJhbXM6ICovXG4gICAgICAgIGRpc2Nvbm5lY3RlZFJldHJ5VGltZW91dDogMTUwMDAsXG4gICAgICAgIHN1c3BlbmRlZFJldHJ5VGltZW91dDogMzAwMDAsXG4gICAgICAgIC8qIFVuZG9jdW1lbnRlZCwgYnV0IHBhcnQgb2YgdGhlIGFwaSBhbmQgY2FuIGJlIHVzZWQgYnkgY3VzdG9tZXJzOiAqL1xuICAgICAgICBodHRwUmVxdWVzdFRpbWVvdXQ6IDE1MDAwLFxuICAgICAgICBjaGFubmVsUmV0cnlUaW1lb3V0OiAxNTAwMCxcbiAgICAgICAgZmFsbGJhY2tSZXRyeVRpbWVvdXQ6IDYwMDAwMCxcbiAgICAgICAgLyogRm9yIGludGVybmFsIC8gdGVzdCB1c2Ugb25seTogKi9cbiAgICAgICAgY29ubmVjdGlvblN0YXRlVHRsOiAxMjAwMDAsXG4gICAgICAgIHJlYWx0aW1lUmVxdWVzdFRpbWVvdXQ6IDEwMDAwLFxuICAgICAgICByZWN2VGltZW91dDogOTAwMDAsXG4gICAgICAgIHByZWZlcmVuY2VDb25uZWN0VGltZW91dDogNjAwMCxcbiAgICAgICAgcGFyYWxsZWxVcGdyYWRlRGVsYXk6IDYwMDAsXG4gICAgfSxcbiAgICBodHRwTWF4UmV0cnlDb3VudDogMyxcbiAgICBtYXhNZXNzYWdlU2l6ZTogNjU1MzYsXG4gICAgdmVyc2lvbjogcGFja2FnZV9qc29uXzEudmVyc2lvbixcbiAgICBwcm90b2NvbFZlcnNpb246IDIsXG4gICAgYWdlbnQ6IGFnZW50LFxuICAgIGdldEhvc3Q6IGdldEhvc3QsXG4gICAgZ2V0UG9ydDogZ2V0UG9ydCxcbiAgICBnZXRIdHRwU2NoZW1lOiBnZXRIdHRwU2NoZW1lLFxuICAgIGVudmlyb25tZW50RmFsbGJhY2tIb3N0czogZW52aXJvbm1lbnRGYWxsYmFja0hvc3RzLFxuICAgIGdldEZhbGxiYWNrSG9zdHM6IGdldEZhbGxiYWNrSG9zdHMsXG4gICAgZ2V0SG9zdHM6IGdldEhvc3RzLFxuICAgIGNoZWNrSG9zdDogY2hlY2tIb3N0LFxuICAgIG9iamVjdGlmeU9wdGlvbnM6IG9iamVjdGlmeU9wdGlvbnMsXG4gICAgbm9ybWFsaXNlT3B0aW9uczogbm9ybWFsaXNlT3B0aW9ucyxcbn07XG5mdW5jdGlvbiBnZXRIb3N0KG9wdGlvbnMsIGhvc3QsIHdzKSB7XG4gICAgaWYgKHdzKVxuICAgICAgICBob3N0ID0gKGhvc3QgPT0gb3B0aW9ucy5yZXN0SG9zdCAmJiBvcHRpb25zLnJlYWx0aW1lSG9zdCkgfHwgaG9zdCB8fCBvcHRpb25zLnJlYWx0aW1lSG9zdDtcbiAgICBlbHNlXG4gICAgICAgIGhvc3QgPSBob3N0IHx8IG9wdGlvbnMucmVzdEhvc3Q7XG4gICAgcmV0dXJuIGhvc3Q7XG59XG5leHBvcnRzLmdldEhvc3QgPSBnZXRIb3N0O1xuZnVuY3Rpb24gZ2V0UG9ydChvcHRpb25zLCB0bHMpIHtcbiAgICByZXR1cm4gdGxzIHx8IG9wdGlvbnMudGxzID8gb3B0aW9ucy50bHNQb3J0IDogb3B0aW9ucy5wb3J0O1xufVxuZXhwb3J0cy5nZXRQb3J0ID0gZ2V0UG9ydDtcbmZ1bmN0aW9uIGdldEh0dHBTY2hlbWUob3B0aW9ucykge1xuICAgIHJldHVybiBvcHRpb25zLnRscyA/ICdodHRwczovLycgOiAnaHR0cDovLyc7XG59XG5leHBvcnRzLmdldEh0dHBTY2hlbWUgPSBnZXRIdHRwU2NoZW1lO1xuLy8gY29uc3RydWN0IGVudmlyb25tZW50IGZhbGxiYWNrIGhvc3RzIGFzIHBlciBSU0MxNWlcbmZ1bmN0aW9uIGVudmlyb25tZW50RmFsbGJhY2tIb3N0cyhlbnZpcm9ubWVudCkge1xuICAgIHJldHVybiBbXG4gICAgICAgIGVudmlyb25tZW50ICsgJy1hLWZhbGxiYWNrLmFibHktcmVhbHRpbWUuY29tJyxcbiAgICAgICAgZW52aXJvbm1lbnQgKyAnLWItZmFsbGJhY2suYWJseS1yZWFsdGltZS5jb20nLFxuICAgICAgICBlbnZpcm9ubWVudCArICctYy1mYWxsYmFjay5hYmx5LXJlYWx0aW1lLmNvbScsXG4gICAgICAgIGVudmlyb25tZW50ICsgJy1kLWZhbGxiYWNrLmFibHktcmVhbHRpbWUuY29tJyxcbiAgICAgICAgZW52aXJvbm1lbnQgKyAnLWUtZmFsbGJhY2suYWJseS1yZWFsdGltZS5jb20nLFxuICAgIF07XG59XG5leHBvcnRzLmVudmlyb25tZW50RmFsbGJhY2tIb3N0cyA9IGVudmlyb25tZW50RmFsbGJhY2tIb3N0cztcbmZ1bmN0aW9uIGdldEZhbGxiYWNrSG9zdHMob3B0aW9ucykge1xuICAgIHZhciBmYWxsYmFja0hvc3RzID0gb3B0aW9ucy5mYWxsYmFja0hvc3RzLCBodHRwTWF4UmV0cnlDb3VudCA9IHR5cGVvZiBvcHRpb25zLmh0dHBNYXhSZXRyeUNvdW50ICE9PSAndW5kZWZpbmVkJyA/IG9wdGlvbnMuaHR0cE1heFJldHJ5Q291bnQgOiBEZWZhdWx0cy5odHRwTWF4UmV0cnlDb3VudDtcbiAgICByZXR1cm4gZmFsbGJhY2tIb3N0cyA/IFV0aWxzLmFyckNob29zZU4oZmFsbGJhY2tIb3N0cywgaHR0cE1heFJldHJ5Q291bnQpIDogW107XG59XG5leHBvcnRzLmdldEZhbGxiYWNrSG9zdHMgPSBnZXRGYWxsYmFja0hvc3RzO1xuZnVuY3Rpb24gZ2V0SG9zdHMob3B0aW9ucykge1xuICAgIHJldHVybiBbb3B0aW9ucy5yZXN0SG9zdF0uY29uY2F0KGdldEZhbGxiYWNrSG9zdHMob3B0aW9ucykpO1xufVxuZXhwb3J0cy5nZXRIb3N0cyA9IGdldEhvc3RzO1xuZnVuY3Rpb24gY2hlY2tIb3N0KGhvc3QpIHtcbiAgICBpZiAodHlwZW9mIGhvc3QgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcmluZm9fMS5kZWZhdWx0KCdob3N0IG11c3QgYmUgYSBzdHJpbmc7IHdhcyBhICcgKyB0eXBlb2YgaG9zdCwgNDAwMDAsIDQwMCk7XG4gICAgfVxuICAgIGlmICghaG9zdC5sZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yaW5mb18xLmRlZmF1bHQoJ2hvc3QgbXVzdCBub3QgYmUgemVyby1sZW5ndGgnLCA0MDAwMCwgNDAwKTtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRSZWFsdGltZUhvc3Qob3B0aW9ucywgcHJvZHVjdGlvbiwgZW52aXJvbm1lbnQpIHtcbiAgICBpZiAob3B0aW9ucy5yZWFsdGltZUhvc3QpXG4gICAgICAgIHJldHVybiBvcHRpb25zLnJlYWx0aW1lSG9zdDtcbiAgICAvKiBwcmVmZXIgc2V0dGluZyByZWFsdGltZUhvc3QgdG8gcmVzdEhvc3QgYXMgYSBjdXN0b20gcmVzdEhvc3QgdHlwaWNhbGx5IGluZGljYXRlc1xuICAgICAqIGEgZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnQgaXMgYmVpbmcgdXNlZCB0aGF0IGNhbid0IGJlIGluZmVycmVkIGJ5IHRoZSBsaWJyYXJ5ICovXG4gICAgaWYgKG9wdGlvbnMucmVzdEhvc3QpIHtcbiAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlOT1IsICdEZWZhdWx0cy5ub3JtYWxpc2VPcHRpb25zJywgJ3Jlc3RIb3N0IGlzIHNldCB0byBcIicgK1xuICAgICAgICAgICAgb3B0aW9ucy5yZXN0SG9zdCArXG4gICAgICAgICAgICAnXCIgYnV0IHJlYWx0aW1lSG9zdCBpcyBub3Qgc2V0LCBzbyBzZXR0aW5nIHJlYWx0aW1lSG9zdCB0byBcIicgK1xuICAgICAgICAgICAgb3B0aW9ucy5yZXN0SG9zdCArXG4gICAgICAgICAgICAnXCIgdG9vLiBJZiB0aGlzIGlzIG5vdCB3aGF0IHlvdSB3YW50LCBwbGVhc2Ugc2V0IHJlYWx0aW1lSG9zdCBleHBsaWNpdGx5LicpO1xuICAgICAgICByZXR1cm4gb3B0aW9ucy5yZXN0SG9zdDtcbiAgICB9XG4gICAgcmV0dXJuIHByb2R1Y3Rpb24gPyBEZWZhdWx0cy5SRUFMVElNRV9IT1NUIDogZW52aXJvbm1lbnQgKyAnLScgKyBEZWZhdWx0cy5SRUFMVElNRV9IT1NUO1xufVxuZnVuY3Rpb24gZ2V0VGltZW91dHMob3B0aW9ucykge1xuICAgIC8qIEFsbG93IHZhbHVlcyBwYXNzZWQgaW4gb3B0aW9ucyB0byBvdmVycmlkZSBkZWZhdWx0IHRpbWVvdXRzICovXG4gICAgdmFyIHRpbWVvdXRzID0ge307XG4gICAgZm9yICh2YXIgcHJvcCBpbiBEZWZhdWx0cy5USU1FT1VUUykge1xuICAgICAgICB0aW1lb3V0c1twcm9wXSA9IG9wdGlvbnNbcHJvcF0gfHwgRGVmYXVsdHMuVElNRU9VVFNbcHJvcF07XG4gICAgfVxuICAgIHJldHVybiB0aW1lb3V0cztcbn1cbmZ1bmN0aW9uIGdldEFnZW50U3RyaW5nKG9wdGlvbnMpIHtcbiAgICB2YXIgYWdlbnRTdHIgPSBEZWZhdWx0cy5hZ2VudDtcbiAgICBpZiAob3B0aW9ucy5hZ2VudHMpIHtcbiAgICAgICAgZm9yICh2YXIgYWdlbnQgaW4gb3B0aW9ucy5hZ2VudHMpIHtcbiAgICAgICAgICAgIGFnZW50U3RyICs9ICcgJyArIGFnZW50ICsgJy8nICsgb3B0aW9ucy5hZ2VudHNbYWdlbnRdO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhZ2VudFN0cjtcbn1cbmV4cG9ydHMuZ2V0QWdlbnRTdHJpbmcgPSBnZXRBZ2VudFN0cmluZztcbmZ1bmN0aW9uIG9iamVjdGlmeU9wdGlvbnMob3B0aW9ucykge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gb3B0aW9ucy5pbmRleE9mKCc6JykgPT0gLTEgPyB7IHRva2VuOiBvcHRpb25zIH0gOiB7IGtleTogb3B0aW9ucyB9O1xuICAgIH1cbiAgICByZXR1cm4gb3B0aW9ucztcbn1cbmV4cG9ydHMub2JqZWN0aWZ5T3B0aW9ucyA9IG9iamVjdGlmeU9wdGlvbnM7XG5mdW5jdGlvbiBub3JtYWxpc2VPcHRpb25zKG9wdGlvbnMpIHtcbiAgICAvKiBEZXByZWNhdGVkIG9wdGlvbnMgKi9cbiAgICBpZiAob3B0aW9ucy5ob3N0KSB7XG4gICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQuZGVwcmVjYXRlZCgnaG9zdCcsICdyZXN0SG9zdCcpO1xuICAgICAgICBvcHRpb25zLnJlc3RIb3N0ID0gb3B0aW9ucy5ob3N0O1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy53c0hvc3QpIHtcbiAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5kZXByZWNhdGVkKCd3c0hvc3QnLCAncmVhbHRpbWVIb3N0Jyk7XG4gICAgICAgIG9wdGlvbnMucmVhbHRpbWVIb3N0ID0gb3B0aW9ucy53c0hvc3Q7XG4gICAgfVxuICAgIGlmIChvcHRpb25zLnF1ZXVlRXZlbnRzKSB7XG4gICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQuZGVwcmVjYXRlZCgncXVldWVFdmVudHMnLCAncXVldWVNZXNzYWdlcycpO1xuICAgICAgICBvcHRpb25zLnF1ZXVlTWVzc2FnZXMgPSBvcHRpb25zLnF1ZXVlRXZlbnRzO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5mYWxsYmFja0hvc3RzVXNlRGVmYXVsdCkge1xuICAgICAgICAvKiBmYWxsYmFja0hvc3RzVXNlRGVmYXVsdCBhbmQgZmFsbGJhY2tIb3N0cyBhcmUgbXV0dWFsbHkgZXhjbHVzaXZlIGFzIHBlciBUTzNrNyAqL1xuICAgICAgICBpZiAob3B0aW9ucy5mYWxsYmFja0hvc3RzKSB7XG4gICAgICAgICAgICB2YXIgbXNnID0gJ2ZhbGxiYWNrSG9zdHMgYW5kIGZhbGxiYWNrSG9zdHNVc2VEZWZhdWx0IGNhbm5vdCBib3RoIGJlIHNldCc7XG4gICAgICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19FUlJPUiwgJ0RlZmF1bHRzLm5vcm1hbGlzZU9wdGlvbnMnLCBtc2cpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yaW5mb18xLmRlZmF1bHQobXNnLCA0MDAwMCwgNDAwKTtcbiAgICAgICAgfVxuICAgICAgICAvKiBkZWZhdWx0IGZhbGxiYWNrcyBjYW4ndCBiZSB1c2VkIHdpdGggY3VzdG9tIHBvcnRzICovXG4gICAgICAgIGlmIChvcHRpb25zLnBvcnQgfHwgb3B0aW9ucy50bHNQb3J0KSB7XG4gICAgICAgICAgICB2YXIgbXNnID0gJ2ZhbGxiYWNrSG9zdHNVc2VEZWZhdWx0IGNhbm5vdCBiZSBzZXQgd2hlbiBwb3J0IG9yIHRsc1BvcnQgYXJlIHNldCc7XG4gICAgICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19FUlJPUiwgJ0RlZmF1bHRzLm5vcm1hbGlzZU9wdGlvbnMnLCBtc2cpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yaW5mb18xLmRlZmF1bHQobXNnLCA0MDAwMCwgNDAwKTtcbiAgICAgICAgfVxuICAgICAgICAvKiBlbWl0IGFuIGFwcHJvcHJpYXRlIGRlcHJlY2F0aW9uIHdhcm5pbmcgKi9cbiAgICAgICAgaWYgKG9wdGlvbnMuZW52aXJvbm1lbnQpIHtcbiAgICAgICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQuZGVwcmVjYXRlZFdpdGhNc2coJ2ZhbGxiYWNrSG9zdHNVc2VEZWZhdWx0JywgJ1RoZXJlIGlzIG5vIGxvbmdlciBhIG5lZWQgdG8gc2V0IHRoaXMgd2hlbiB0aGUgZW52aXJvbm1lbnQgb3B0aW9uIGlzIGFsc28gc2V0IHNpbmNlIHRoZSBsaWJyYXJ5IHdpbGwgbm93IGdlbmVyYXRlIHRoZSBjb3JyZWN0IGZhbGxiYWNrIGhvc3RzIHVzaW5nIHRoZSBlbnZpcm9ubWVudCBvcHRpb24uJyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmRlcHJlY2F0ZWQoJ2ZhbGxiYWNrSG9zdHNVc2VEZWZhdWx0JywgJ2ZhbGxiYWNrSG9zdHM6IEFibHkuRGVmYXVsdHMuRkFMTEJBQ0tfSE9TVFMnKTtcbiAgICAgICAgfVxuICAgICAgICAvKiB1c2UgdGhlIGRlZmF1bHQgZmFsbGJhY2sgaG9zdHMgYXMgcmVxdWVzdGVkICovXG4gICAgICAgIG9wdGlvbnMuZmFsbGJhY2tIb3N0cyA9IERlZmF1bHRzLkZBTExCQUNLX0hPU1RTO1xuICAgIH1cbiAgICAvKiBvcHRpb25zLnJlY292ZXIgYXMgYSBib29sZWFuIGlzIGRlcHJlY2F0ZWQsIGFuZCB0aGVyZWZvcmUgaXMgbm90IHBhcnQgb2YgdGhlIHB1YmxpYyB0eXBpbmcgKi9cbiAgICBpZiAob3B0aW9ucy5yZWNvdmVyID09PSB0cnVlKSB7XG4gICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQuZGVwcmVjYXRlZCgne3JlY292ZXI6IHRydWV9JywgJ3tyZWNvdmVyOiBmdW5jdGlvbihsYXN0Q29ubmVjdGlvbkRldGFpbHMsIGNiKSB7IGNiKHRydWUpOyB9fScpO1xuICAgICAgICBvcHRpb25zLnJlY292ZXIgPSBmdW5jdGlvbiAobGFzdENvbm5lY3Rpb25EZXRhaWxzLCBjYikge1xuICAgICAgICAgICAgY2IodHJ1ZSk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5yZWNvdmVyID09PSAnZnVuY3Rpb24nICYmIG9wdGlvbnMuY2xvc2VPblVubG9hZCA9PT0gdHJ1ZSkge1xuICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19FUlJPUiwgJ0RlZmF1bHRzLm5vcm1hbGlzZU9wdGlvbnMnLCAnY2xvc2VPblVubG9hZCB3YXMgdHJ1ZSBhbmQgYSBzZXNzaW9uIHJlY292ZXJ5IGZ1bmN0aW9uIHdhcyBzZXQgLSB0aGVzZSBhcmUgbXV0dWFsbHkgZXhjbHVzaXZlLCBzbyB1bnNldHRpbmcgdGhlIGxhdHRlcicpO1xuICAgICAgICBvcHRpb25zLnJlY292ZXIgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmICghKCdjbG9zZU9uVW5sb2FkJyBpbiBvcHRpb25zKSkge1xuICAgICAgICAvKiBIYXZlIGNsb3NlT25VbmxvYWQgZGVmYXVsdCB0byB0cnVlIHVubGVzcyB3ZSBoYXZlIGFueSBpbmRpY2F0aW9uIHRoYXRcbiAgICAgICAgICogdGhlIHVzZXIgbWF5IHdhbnQgdG8gcmVjb3ZlciB0aGUgY29ubmVjdGlvbiAqL1xuICAgICAgICBvcHRpb25zLmNsb3NlT25VbmxvYWQgPSAhb3B0aW9ucy5yZWNvdmVyO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy50cmFuc3BvcnRzICYmIFV0aWxzLmFyckluKG9wdGlvbnMudHJhbnNwb3J0cywgJ3hocicpKSB7XG4gICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQuZGVwcmVjYXRlZCgndHJhbnNwb3J0czogW1wieGhyXCJdJywgJ3RyYW5zcG9ydHM6IFtcInhocl9zdHJlYW1pbmdcIl0nKTtcbiAgICAgICAgVXRpbHMuYXJyRGVsZXRlVmFsdWUob3B0aW9ucy50cmFuc3BvcnRzLCAneGhyJyk7XG4gICAgICAgIG9wdGlvbnMudHJhbnNwb3J0cy5wdXNoKCd4aHJfc3RyZWFtaW5nJyk7XG4gICAgfVxuICAgIGlmICghKCdxdWV1ZU1lc3NhZ2VzJyBpbiBvcHRpb25zKSlcbiAgICAgICAgb3B0aW9ucy5xdWV1ZU1lc3NhZ2VzID0gdHJ1ZTtcbiAgICAvKiBpbmZlciBob3N0cyBhbmQgZmFsbGJhY2tzIGJhc2VkIG9uIHRoZSBjb25maWd1cmVkIGVudmlyb25tZW50ICovXG4gICAgdmFyIGVudmlyb25tZW50ID0gKG9wdGlvbnMuZW52aXJvbm1lbnQgJiYgU3RyaW5nKG9wdGlvbnMuZW52aXJvbm1lbnQpLnRvTG93ZXJDYXNlKCkpIHx8IERlZmF1bHRzLkVOVklST05NRU5UO1xuICAgIHZhciBwcm9kdWN0aW9uID0gIWVudmlyb25tZW50IHx8IGVudmlyb25tZW50ID09PSAncHJvZHVjdGlvbic7XG4gICAgaWYgKCFvcHRpb25zLmZhbGxiYWNrSG9zdHMgJiYgIW9wdGlvbnMucmVzdEhvc3QgJiYgIW9wdGlvbnMucmVhbHRpbWVIb3N0ICYmICFvcHRpb25zLnBvcnQgJiYgIW9wdGlvbnMudGxzUG9ydCkge1xuICAgICAgICBvcHRpb25zLmZhbGxiYWNrSG9zdHMgPSBwcm9kdWN0aW9uID8gRGVmYXVsdHMuRkFMTEJBQ0tfSE9TVFMgOiBlbnZpcm9ubWVudEZhbGxiYWNrSG9zdHMoZW52aXJvbm1lbnQpO1xuICAgIH1cbiAgICB2YXIgcmVzdEhvc3QgPSBvcHRpb25zLnJlc3RIb3N0IHx8IChwcm9kdWN0aW9uID8gRGVmYXVsdHMuUkVTVF9IT1NUIDogZW52aXJvbm1lbnQgKyAnLScgKyBEZWZhdWx0cy5SRVNUX0hPU1QpO1xuICAgIHZhciByZWFsdGltZUhvc3QgPSBnZXRSZWFsdGltZUhvc3Qob3B0aW9ucywgcHJvZHVjdGlvbiwgZW52aXJvbm1lbnQpO1xuICAgIFV0aWxzLmFyckZvckVhY2goKG9wdGlvbnMuZmFsbGJhY2tIb3N0cyB8fCBbXSkuY29uY2F0KHJlc3RIb3N0LCByZWFsdGltZUhvc3QpLCBjaGVja0hvc3QpO1xuICAgIG9wdGlvbnMucG9ydCA9IG9wdGlvbnMucG9ydCB8fCBEZWZhdWx0cy5QT1JUO1xuICAgIG9wdGlvbnMudGxzUG9ydCA9IG9wdGlvbnMudGxzUG9ydCB8fCBEZWZhdWx0cy5UTFNfUE9SVDtcbiAgICBpZiAoISgndGxzJyBpbiBvcHRpb25zKSlcbiAgICAgICAgb3B0aW9ucy50bHMgPSB0cnVlO1xuICAgIHZhciB0aW1lb3V0cyA9IGdldFRpbWVvdXRzKG9wdGlvbnMpO1xuICAgIGlmICgndXNlQmluYXJ5UHJvdG9jb2wnIGluIG9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucy51c2VCaW5hcnlQcm90b2NvbCA9IHBsYXRmb3JtXzEuZGVmYXVsdC5Db25maWcuc3VwcG9ydHNCaW5hcnkgJiYgb3B0aW9ucy51c2VCaW5hcnlQcm90b2NvbDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIG9wdGlvbnMudXNlQmluYXJ5UHJvdG9jb2wgPSBwbGF0Zm9ybV8xLmRlZmF1bHQuQ29uZmlnLnByZWZlckJpbmFyeTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMuY2xpZW50SWQpIHtcbiAgICAgICAgdmFyIGhlYWRlcnMgPSAob3B0aW9ucy5oZWFkZXJzID0gb3B0aW9ucy5oZWFkZXJzIHx8IHt9KTtcbiAgICAgICAgaGVhZGVyc1snWC1BYmx5LUNsaWVudElkJ10gPSBwbGF0Zm9ybV8xLmRlZmF1bHQuQnVmZmVyVXRpbHMuYmFzZTY0RW5jb2RlKHBsYXRmb3JtXzEuZGVmYXVsdC5CdWZmZXJVdGlscy51dGY4RW5jb2RlKG9wdGlvbnMuY2xpZW50SWQpKTtcbiAgICB9XG4gICAgaWYgKCEoJ2lkZW1wb3RlbnRSZXN0UHVibGlzaGluZycgaW4gb3B0aW9ucykpIHtcbiAgICAgICAgb3B0aW9ucy5pZGVtcG90ZW50UmVzdFB1Ymxpc2hpbmcgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5wcm9taXNlcyAmJiAhcGxhdGZvcm1fMS5kZWZhdWx0LkNvbmZpZy5Qcm9taXNlKSB7XG4gICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX0VSUk9SLCAnRGVmYXVsdHMubm9ybWFsaXNlT3B0aW9ucycsICd7cHJvbWlzZXM6IHRydWV9IHdhcyBzcGVjaWZpZWQsIGJ1dCBubyBQcm9taXNlIGNvbnN0cnVjdG9yIGZvdW5kOyBkaXNhYmxpbmcgcHJvbWlzZXMnKTtcbiAgICAgICAgb3B0aW9ucy5wcm9taXNlcyA9IGZhbHNlO1xuICAgIH1cbiAgICB2YXIgY29ubmVjdGl2aXR5Q2hlY2tQYXJhbXMgPSBudWxsO1xuICAgIHZhciBjb25uZWN0aXZpdHlDaGVja1VybCA9IG9wdGlvbnMuY29ubmVjdGl2aXR5Q2hlY2tVcmw7XG4gICAgaWYgKG9wdGlvbnMuY29ubmVjdGl2aXR5Q2hlY2tVcmwpIHtcbiAgICAgICAgdmFyIF9hID0gb3B0aW9ucy5jb25uZWN0aXZpdHlDaGVja1VybC5zcGxpdCgnPycpLCB1cmkgPSBfYVswXSwgcXMgPSBfYVsxXTtcbiAgICAgICAgY29ubmVjdGl2aXR5Q2hlY2tQYXJhbXMgPSBxcyA/IFV0aWxzLnBhcnNlUXVlcnlTdHJpbmcocXMpIDoge307XG4gICAgICAgIGlmICh1cmkuaW5kZXhPZignOi8vJykgPT09IC0xKSB7XG4gICAgICAgICAgICB1cmkgPSAnaHR0cHM6Ly8nICsgdXJpO1xuICAgICAgICB9XG4gICAgICAgIGNvbm5lY3Rpdml0eUNoZWNrVXJsID0gdXJpO1xuICAgIH1cbiAgICByZXR1cm4gdHNsaWJfMS5fX2Fzc2lnbih0c2xpYl8xLl9fYXNzaWduKHt9LCBvcHRpb25zKSwgeyB1c2VCaW5hcnlQcm90b2NvbDogJ3VzZUJpbmFyeVByb3RvY29sJyBpbiBvcHRpb25zXG4gICAgICAgICAgICA/IHBsYXRmb3JtXzEuZGVmYXVsdC5Db25maWcuc3VwcG9ydHNCaW5hcnkgJiYgb3B0aW9ucy51c2VCaW5hcnlQcm90b2NvbFxuICAgICAgICAgICAgOiBwbGF0Zm9ybV8xLmRlZmF1bHQuQ29uZmlnLnByZWZlckJpbmFyeSwgcmVhbHRpbWVIb3N0OiByZWFsdGltZUhvc3QsIHJlc3RIb3N0OiByZXN0SG9zdCwgbWF4TWVzc2FnZVNpemU6IG9wdGlvbnMubWF4TWVzc2FnZVNpemUgfHwgRGVmYXVsdHMubWF4TWVzc2FnZVNpemUsIHRpbWVvdXRzOiB0aW1lb3V0cywgY29ubmVjdGl2aXR5Q2hlY2tQYXJhbXM6IGNvbm5lY3Rpdml0eUNoZWNrUGFyYW1zLCBjb25uZWN0aXZpdHlDaGVja1VybDogY29ubmVjdGl2aXR5Q2hlY2tVcmwgfSk7XG59XG5leHBvcnRzLm5vcm1hbGlzZU9wdGlvbnMgPSBub3JtYWxpc2VPcHRpb25zO1xuZXhwb3J0cy5kZWZhdWx0ID0gRGVmYXVsdHM7XG5mdW5jdGlvbiBnZXREZWZhdWx0cyhwbGF0Zm9ybURlZmF1bHRzKSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oRGVmYXVsdHMsIHBsYXRmb3JtRGVmYXVsdHMpO1xufVxuZXhwb3J0cy5nZXREZWZhdWx0cyA9IGdldERlZmF1bHRzO1xuXG5cbi8qKiovIH0pLFxuLyogOSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHRzbGliXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xudmFyIHBsYXRmb3JtXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKDMpKTtcbnZhciBsb2dnZXJfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oMikpO1xudmFyIGVycm9yaW5mb18xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXyg0KSk7XG52YXIgVXRpbHMgPSB0c2xpYl8xLl9faW1wb3J0U3RhcihfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKTtcbmZ1bmN0aW9uIG5vcm1hbGlzZUNvbnRleHQoY29udGV4dCkge1xuICAgIGlmICghY29udGV4dCB8fCAhY29udGV4dC5jaGFubmVsT3B0aW9ucykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY2hhbm5lbE9wdGlvbnM6IGNvbnRleHQsXG4gICAgICAgICAgICBwbHVnaW5zOiB7fSxcbiAgICAgICAgICAgIGJhc2VFbmNvZGVkUHJldmlvdXNQYXlsb2FkOiB1bmRlZmluZWQsXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBjb250ZXh0O1xufVxuZnVuY3Rpb24gbm9ybWFsaXplQ2lwaGVyT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5jaXBoZXIpIHtcbiAgICAgICAgaWYgKCFwbGF0Zm9ybV8xLmRlZmF1bHQuQ3J5cHRvKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFbmNyeXB0aW9uIG5vdCBlbmFibGVkOyB1c2UgYWJseS5lbmNyeXB0aW9uLmpzIGluc3RlYWQnKTtcbiAgICAgICAgdmFyIGNpcGhlciA9IHBsYXRmb3JtXzEuZGVmYXVsdC5DcnlwdG8uZ2V0Q2lwaGVyKG9wdGlvbnMuY2lwaGVyKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNpcGhlcjogY2lwaGVyLmNpcGhlclBhcmFtcyxcbiAgICAgICAgICAgIGNoYW5uZWxDaXBoZXI6IGNpcGhlci5jaXBoZXIsXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCA/IG9wdGlvbnMgOiB7fTtcbn1cbmZ1bmN0aW9uIGdldE1lc3NhZ2VTaXplKG1zZykge1xuICAgIHZhciBzaXplID0gMDtcbiAgICBpZiAobXNnLm5hbWUpIHtcbiAgICAgICAgc2l6ZSArPSBtc2cubmFtZS5sZW5ndGg7XG4gICAgfVxuICAgIGlmIChtc2cuY2xpZW50SWQpIHtcbiAgICAgICAgc2l6ZSArPSBtc2cuY2xpZW50SWQubGVuZ3RoO1xuICAgIH1cbiAgICBpZiAobXNnLmV4dHJhcykge1xuICAgICAgICBzaXplICs9IEpTT04uc3RyaW5naWZ5KG1zZy5leHRyYXMpLmxlbmd0aDtcbiAgICB9XG4gICAgaWYgKG1zZy5kYXRhKSB7XG4gICAgICAgIHNpemUgKz0gVXRpbHMuZGF0YVNpemVCeXRlcyhtc2cuZGF0YSk7XG4gICAgfVxuICAgIHJldHVybiBzaXplO1xufVxudmFyIE1lc3NhZ2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTWVzc2FnZSgpIHtcbiAgICB9XG4gICAgLyoqXG4gICAgICogT3ZlcmxvYWQgdG9KU09OKCkgdG8gaW50ZXJjZXB0IEpTT04uc3RyaW5naWZ5KClcbiAgICAgKiBAcmV0dXJuIHsqfVxuICAgICAqL1xuICAgIE1lc3NhZ2UucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLyogZW5jb2RlIGRhdGEgdG8gYmFzZTY0IGlmIHByZXNlbnQgYW5kIHdlJ3JlIHJldHVybmluZyByZWFsIEpTT047XG4gICAgICAgICAqIGFsdGhvdWdoIG1zZ3BhY2sgY2FsbHMgdG9KU09OKCksIHdlIGtub3cgaXQgaXMgYSBzdHJpbmdpZnkoKVxuICAgICAgICAgKiBjYWxsIGlmIGl0IGhhcyBhIG5vbi1lbXB0eSBhcmd1bWVudHMgbGlzdCAqL1xuICAgICAgICB2YXIgZW5jb2RpbmcgPSB0aGlzLmVuY29kaW5nO1xuICAgICAgICB2YXIgZGF0YSA9IHRoaXMuZGF0YTtcbiAgICAgICAgaWYgKGRhdGEgJiYgcGxhdGZvcm1fMS5kZWZhdWx0LkJ1ZmZlclV0aWxzLmlzQnVmZmVyKGRhdGEpKSB7XG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAvKiBzdHJpbmdpZnkgY2FsbCAqL1xuICAgICAgICAgICAgICAgIGVuY29kaW5nID0gZW5jb2RpbmcgPyBlbmNvZGluZyArICcvYmFzZTY0JyA6ICdiYXNlNjQnO1xuICAgICAgICAgICAgICAgIGRhdGEgPSBwbGF0Zm9ybV8xLmRlZmF1bHQuQnVmZmVyVXRpbHMuYmFzZTY0RW5jb2RlKGRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLyogQ2FsbGVkIGJ5IG1zZ3BhY2suIHRvQnVmZmVyIHJldHVybnMgYSBkYXRhdHlwZSB1bmRlcnN0YW5kYWJsZSBieVxuICAgICAgICAgICAgICAgICAqIHRoYXQgcGxhdGZvcm0ncyBtc2dwYWNrIGltcGxlbWVudGF0aW9uIChCdWZmZXIgaW4gbm9kZSwgVWludDhBcnJheVxuICAgICAgICAgICAgICAgICAqIGluIGJyb3dzZXJzKSAqL1xuICAgICAgICAgICAgICAgIGRhdGEgPSBwbGF0Zm9ybV8xLmRlZmF1bHQuQnVmZmVyVXRpbHMudG9CdWZmZXIoZGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgICAgICAgIGlkOiB0aGlzLmlkLFxuICAgICAgICAgICAgY2xpZW50SWQ6IHRoaXMuY2xpZW50SWQsXG4gICAgICAgICAgICBjb25uZWN0aW9uSWQ6IHRoaXMuY29ubmVjdGlvbklkLFxuICAgICAgICAgICAgY29ubmVjdGlvbktleTogdGhpcy5jb25uZWN0aW9uS2V5LFxuICAgICAgICAgICAgZXh0cmFzOiB0aGlzLmV4dHJhcyxcbiAgICAgICAgICAgIGVuY29kaW5nOiBlbmNvZGluZyxcbiAgICAgICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgIH07XG4gICAgfTtcbiAgICBNZXNzYWdlLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9ICdbTWVzc2FnZSc7XG4gICAgICAgIGlmICh0aGlzLm5hbWUpXG4gICAgICAgICAgICByZXN1bHQgKz0gJzsgbmFtZT0nICsgdGhpcy5uYW1lO1xuICAgICAgICBpZiAodGhpcy5pZClcbiAgICAgICAgICAgIHJlc3VsdCArPSAnOyBpZD0nICsgdGhpcy5pZDtcbiAgICAgICAgaWYgKHRoaXMudGltZXN0YW1wKVxuICAgICAgICAgICAgcmVzdWx0ICs9ICc7IHRpbWVzdGFtcD0nICsgdGhpcy50aW1lc3RhbXA7XG4gICAgICAgIGlmICh0aGlzLmNsaWVudElkKVxuICAgICAgICAgICAgcmVzdWx0ICs9ICc7IGNsaWVudElkPScgKyB0aGlzLmNsaWVudElkO1xuICAgICAgICBpZiAodGhpcy5jb25uZWN0aW9uSWQpXG4gICAgICAgICAgICByZXN1bHQgKz0gJzsgY29ubmVjdGlvbklkPScgKyB0aGlzLmNvbm5lY3Rpb25JZDtcbiAgICAgICAgaWYgKHRoaXMuZW5jb2RpbmcpXG4gICAgICAgICAgICByZXN1bHQgKz0gJzsgZW5jb2Rpbmc9JyArIHRoaXMuZW5jb2Rpbmc7XG4gICAgICAgIGlmICh0aGlzLmV4dHJhcylcbiAgICAgICAgICAgIHJlc3VsdCArPSAnOyBleHRyYXMgPScgKyBKU09OLnN0cmluZ2lmeSh0aGlzLmV4dHJhcyk7XG4gICAgICAgIGlmICh0aGlzLmRhdGEpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5kYXRhID09ICdzdHJpbmcnKVxuICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnOyBkYXRhPScgKyB0aGlzLmRhdGE7XG4gICAgICAgICAgICBlbHNlIGlmIChwbGF0Zm9ybV8xLmRlZmF1bHQuQnVmZmVyVXRpbHMuaXNCdWZmZXIodGhpcy5kYXRhKSlcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gJzsgZGF0YSAoYnVmZmVyKT0nICsgcGxhdGZvcm1fMS5kZWZhdWx0LkJ1ZmZlclV0aWxzLmJhc2U2NEVuY29kZSh0aGlzLmRhdGEpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnOyBkYXRhIChqc29uKT0nICsgSlNPTi5zdHJpbmdpZnkodGhpcy5kYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5leHRyYXMpXG4gICAgICAgICAgICByZXN1bHQgKz0gJzsgZXh0cmFzPScgKyBKU09OLnN0cmluZ2lmeSh0aGlzLmV4dHJhcyk7XG4gICAgICAgIHJlc3VsdCArPSAnXSc7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgICBNZXNzYWdlLmVuY3J5cHQgPSBmdW5jdGlvbiAobXNnLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgZGF0YSA9IG1zZy5kYXRhLCBlbmNvZGluZyA9IG1zZy5lbmNvZGluZywgY2lwaGVyID0gb3B0aW9ucy5jaGFubmVsQ2lwaGVyO1xuICAgICAgICBlbmNvZGluZyA9IGVuY29kaW5nID8gZW5jb2RpbmcgKyAnLycgOiAnJztcbiAgICAgICAgaWYgKCFwbGF0Zm9ybV8xLmRlZmF1bHQuQnVmZmVyVXRpbHMuaXNCdWZmZXIoZGF0YSkpIHtcbiAgICAgICAgICAgIGRhdGEgPSBwbGF0Zm9ybV8xLmRlZmF1bHQuQnVmZmVyVXRpbHMudXRmOEVuY29kZShTdHJpbmcoZGF0YSkpO1xuICAgICAgICAgICAgZW5jb2RpbmcgPSBlbmNvZGluZyArICd1dGYtOC8nO1xuICAgICAgICB9XG4gICAgICAgIGNpcGhlci5lbmNyeXB0KGRhdGEsIGZ1bmN0aW9uIChlcnIsIGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnIpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1zZy5kYXRhID0gZGF0YTtcbiAgICAgICAgICAgIG1zZy5lbmNvZGluZyA9IGVuY29kaW5nICsgJ2NpcGhlcisnICsgY2lwaGVyLmFsZ29yaXRobTtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIG1zZyk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgTWVzc2FnZS5lbmNvZGUgPSBmdW5jdGlvbiAobXNnLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgZGF0YSA9IG1zZy5kYXRhO1xuICAgICAgICB2YXIgbmF0aXZlRGF0YVR5cGUgPSB0eXBlb2YgZGF0YSA9PSAnc3RyaW5nJyB8fCBwbGF0Zm9ybV8xLmRlZmF1bHQuQnVmZmVyVXRpbHMuaXNCdWZmZXIoZGF0YSkgfHwgZGF0YSA9PT0gbnVsbCB8fCBkYXRhID09PSB1bmRlZmluZWQ7XG4gICAgICAgIGlmICghbmF0aXZlRGF0YVR5cGUpIHtcbiAgICAgICAgICAgIGlmIChVdGlscy5pc09iamVjdChkYXRhKSB8fCBVdGlscy5pc0FycmF5KGRhdGEpKSB7XG4gICAgICAgICAgICAgICAgbXNnLmRhdGEgPSBKU09OLnN0cmluZ2lmeShkYXRhKTtcbiAgICAgICAgICAgICAgICBtc2cuZW5jb2RpbmcgPSBtc2cuZW5jb2RpbmcgPyBtc2cuZW5jb2RpbmcgKyAnL2pzb24nIDogJ2pzb24nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yaW5mb18xLmRlZmF1bHQoJ0RhdGEgdHlwZSBpcyB1bnN1cHBvcnRlZCcsIDQwMDEzLCA0MDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zICE9IG51bGwgJiYgb3B0aW9ucy5jaXBoZXIpIHtcbiAgICAgICAgICAgIE1lc3NhZ2UuZW5jcnlwdChtc2csIG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIG1zZyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1lc3NhZ2UuZW5jb2RlQXJyYXkgPSBmdW5jdGlvbiAobWVzc2FnZXMsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBwcm9jZXNzZWQgPSAwO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1lc3NhZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBNZXNzYWdlLmVuY29kZShtZXNzYWdlc1tpXSwgb3B0aW9ucywgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwcm9jZXNzZWQrKztcbiAgICAgICAgICAgICAgICBpZiAocHJvY2Vzc2VkID09IG1lc3NhZ2VzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCBtZXNzYWdlcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1lc3NhZ2UuZGVjb2RlID0gZnVuY3Rpb24gKG1lc3NhZ2UsIGlucHV0Q29udGV4dCkge1xuICAgICAgICB2YXIgY29udGV4dCA9IG5vcm1hbGlzZUNvbnRleHQoaW5wdXRDb250ZXh0KTtcbiAgICAgICAgdmFyIGxhc3RQYXlsb2FkID0gbWVzc2FnZS5kYXRhO1xuICAgICAgICB2YXIgZW5jb2RpbmcgPSBtZXNzYWdlLmVuY29kaW5nO1xuICAgICAgICBpZiAoZW5jb2RpbmcpIHtcbiAgICAgICAgICAgIHZhciB4Zm9ybXMgPSBlbmNvZGluZy5zcGxpdCgnLycpO1xuICAgICAgICAgICAgdmFyIGxhc3RQcm9jZXNzZWRFbmNvZGluZ0luZGV4ID0gdm9pZCAwLCBlbmNvZGluZ3NUb1Byb2Nlc3MgPSB4Zm9ybXMubGVuZ3RoLCBkYXRhID0gbWVzc2FnZS5kYXRhO1xuICAgICAgICAgICAgdmFyIHhmb3JtID0gJyc7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHdoaWxlICgobGFzdFByb2Nlc3NlZEVuY29kaW5nSW5kZXggPSBlbmNvZGluZ3NUb1Byb2Nlc3MpID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgc2VjdXJpdHkvZGV0ZWN0LXVuc2FmZS1yZWdleFxuICAgICAgICAgICAgICAgICAgICB2YXIgbWF0Y2ggPSB4Zm9ybXNbLS1lbmNvZGluZ3NUb1Byb2Nlc3NdLm1hdGNoKC8oWy1cXHddKykoXFwrKFtcXHctXSspKT8vKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFtYXRjaClcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB4Zm9ybSA9IG1hdGNoWzFdO1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHhmb3JtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSBwbGF0Zm9ybV8xLmRlZmF1bHQuQnVmZmVyVXRpbHMuYmFzZTY0RGVjb2RlKFN0cmluZyhkYXRhKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxhc3RQcm9jZXNzZWRFbmNvZGluZ0luZGV4ID09IHhmb3Jtcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdFBheWxvYWQgPSBkYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gcGxhdGZvcm1fMS5kZWZhdWx0LkJ1ZmZlclV0aWxzLnV0ZjhEZWNvZGUoZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdqc29uJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2NpcGhlcic6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRleHQuY2hhbm5lbE9wdGlvbnMgIT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmNoYW5uZWxPcHRpb25zLmNpcGhlciAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmNoYW5uZWxPcHRpb25zLmNoYW5uZWxDaXBoZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHhmb3JtQWxnb3JpdGhtID0gbWF0Y2hbM10sIGNpcGhlciA9IGNvbnRleHQuY2hhbm5lbE9wdGlvbnMuY2hhbm5lbENpcGhlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogZG9uJ3QgYXR0ZW1wdCB0byBkZWNyeXB0IHVubGVzcyB0aGUgY2lwaGVyIHBhcmFtcyBhcmUgY29tcGF0aWJsZSAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoeGZvcm1BbGdvcml0aG0gIT0gY2lwaGVyLmFsZ29yaXRobSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gZGVjcnlwdCBtZXNzYWdlIHdpdGggZ2l2ZW4gY2lwaGVyOyBpbmNvbXBhdGlibGUgY2lwaGVyIHBhcmFtcycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSBjaXBoZXIuZGVjcnlwdChkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBkZWNyeXB0IG1lc3NhZ2U7IG5vdCBhbiBlbmNyeXB0ZWQgY2hhbm5lbCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3ZjZGlmZic6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjb250ZXh0LnBsdWdpbnMgfHwgIWNvbnRleHQucGx1Z2lucy52Y2RpZmYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yaW5mb18xLmRlZmF1bHQoJ01pc3NpbmcgVmNkaWZmIGRlY29kZXIgKGh0dHBzOi8vZ2l0aHViLmNvbS9hYmx5LWZvcmtzL3ZjZGlmZi1kZWNvZGVyKScsIDQwMDE5LCA0MDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIFVpbnQ4QXJyYXkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcmluZm9fMS5kZWZhdWx0KCdEZWx0YSBkZWNvZGluZyBub3Qgc3VwcG9ydGVkIG9uIHRoaXMgYnJvd3NlciAobmVlZCBBcnJheUJ1ZmZlciAmIFVpbnQ4QXJyYXkpJywgNDAwMjAsIDQwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkZWx0YUJhc2UgPSBjb250ZXh0LmJhc2VFbmNvZGVkUHJldmlvdXNQYXlsb2FkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRlbHRhQmFzZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbHRhQmFzZSA9IHBsYXRmb3JtXzEuZGVmYXVsdC5CdWZmZXJVdGlscy51dGY4RW5jb2RlKGRlbHRhQmFzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogdmNkaWZmIGV4cGVjdHMgVWludDhBcnJheXMsIGNhbid0IGNvcHkgd2l0aCBBcnJheUJ1ZmZlcnMuIChhbHNvLCBpZiB3ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBkb24ndCBoYXZlIGEgVGV4dERlY29kZXIsIGRlbHRhQmFzZSBtaWdodCBiZSBhIFdvcmRBcnJheSBoZXJlLCBzbyBuZWVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIHRvIHByb2Nlc3MgaXQgaW50byBhIGJ1ZmZlciBhbnl3YXkpICovXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbHRhQmFzZSA9IHBsYXRmb3JtXzEuZGVmYXVsdC5CdWZmZXJVdGlscy50b0J1ZmZlcihkZWx0YUJhc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gcGxhdGZvcm1fMS5kZWZhdWx0LkJ1ZmZlclV0aWxzLnRvQnVmZmVyKGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gcGxhdGZvcm1fMS5kZWZhdWx0LkJ1ZmZlclV0aWxzLnR5cGVkQXJyYXlUb0J1ZmZlcihjb250ZXh0LnBsdWdpbnMudmNkaWZmLmRlY29kZShkYXRhLCBkZWx0YUJhc2UpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdFBheWxvYWQgPSBkYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JpbmZvXzEuZGVmYXVsdCgnVmNkaWZmIGRlbHRhIGRlY29kZSBmYWlsZWQgd2l0aCAnICsgZSwgNDAwMTgsIDQwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gZW5jb2RpbmcnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGVyciA9IGU7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yaW5mb18xLmRlZmF1bHQoJ0Vycm9yIHByb2Nlc3NpbmcgdGhlICcgKyB4Zm9ybSArICcgZW5jb2RpbmcsIGRlY29kZXIgcmV0dXJuZWQg4oCYJyArIGVyci5tZXNzYWdlICsgJ+KAmScsIGVyci5jb2RlIHx8IDQwMDEzLCA0MDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZS5lbmNvZGluZyA9XG4gICAgICAgICAgICAgICAgICAgIGxhc3RQcm9jZXNzZWRFbmNvZGluZ0luZGV4IDw9IDAgPyBudWxsIDogeGZvcm1zLnNsaWNlKDAsIGxhc3RQcm9jZXNzZWRFbmNvZGluZ0luZGV4KS5qb2luKCcvJyk7XG4gICAgICAgICAgICAgICAgbWVzc2FnZS5kYXRhID0gZGF0YTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb250ZXh0LmJhc2VFbmNvZGVkUHJldmlvdXNQYXlsb2FkID0gbGFzdFBheWxvYWQ7XG4gICAgfTtcbiAgICBNZXNzYWdlLmZyb21SZXNwb25zZUJvZHkgPSBmdW5jdGlvbiAoYm9keSwgb3B0aW9ucywgZm9ybWF0KSB7XG4gICAgICAgIGlmIChmb3JtYXQpIHtcbiAgICAgICAgICAgIGJvZHkgPSBVdGlscy5kZWNvZGVCb2R5KGJvZHksIGZvcm1hdCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBib2R5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgbXNnID0gKGJvZHlbaV0gPSBNZXNzYWdlLmZyb21WYWx1ZXMoYm9keVtpXSkpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBNZXNzYWdlLmRlY29kZShtc2csIG9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19FUlJPUiwgJ01lc3NhZ2UuZnJvbVJlc3BvbnNlQm9keSgpJywgZS50b1N0cmluZygpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYm9keTtcbiAgICB9O1xuICAgIE1lc3NhZ2UuZnJvbVZhbHVlcyA9IGZ1bmN0aW9uICh2YWx1ZXMpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24obmV3IE1lc3NhZ2UoKSwgdmFsdWVzKTtcbiAgICB9O1xuICAgIE1lc3NhZ2UuZnJvbVZhbHVlc0FycmF5ID0gZnVuY3Rpb24gKHZhbHVlcykge1xuICAgICAgICB2YXIgY291bnQgPSB2YWx1ZXMubGVuZ3RoLCByZXN1bHQgPSBuZXcgQXJyYXkoY291bnQpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvdW50OyBpKyspXG4gICAgICAgICAgICByZXN1bHRbaV0gPSBNZXNzYWdlLmZyb21WYWx1ZXModmFsdWVzW2ldKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICAgIE1lc3NhZ2UuZnJvbUVuY29kZWQgPSBmdW5jdGlvbiAoZW5jb2RlZCwgaW5wdXRPcHRpb25zKSB7XG4gICAgICAgIHZhciBtc2cgPSBNZXNzYWdlLmZyb21WYWx1ZXMoZW5jb2RlZCk7XG4gICAgICAgIHZhciBvcHRpb25zID0gbm9ybWFsaXplQ2lwaGVyT3B0aW9ucyhpbnB1dE9wdGlvbnMgIT09IG51bGwgJiYgaW5wdXRPcHRpb25zICE9PSB2b2lkIDAgPyBpbnB1dE9wdGlvbnMgOiBudWxsKTtcbiAgICAgICAgLyogaWYgZGVjb2RpbmcgZmFpbHMgYXQgYW55IHBvaW50LCBjYXRjaCBhbmQgcmV0dXJuIHRoZSBtZXNzYWdlIGRlY29kZWQgdG9cbiAgICAgICAgICogdGhlIGZ1bGxlc3QgZXh0ZW50IHBvc3NpYmxlICovXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBNZXNzYWdlLmRlY29kZShtc2csIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19FUlJPUiwgJ01lc3NhZ2UuZnJvbUVuY29kZWQoKScsIGUudG9TdHJpbmcoKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1zZztcbiAgICB9O1xuICAgIE1lc3NhZ2UuZnJvbUVuY29kZWRBcnJheSA9IGZ1bmN0aW9uIChlbmNvZGVkQXJyYXksIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIGVuY29kZWRBcnJheS5tYXAoZnVuY3Rpb24gKGVuY29kZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBNZXNzYWdlLmZyb21FbmNvZGVkKGVuY29kZWQsIG9wdGlvbnMpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qIFRoaXMgc2hvdWxkIGJlIGNhbGxlZCBvbiBlbmNvZGUoKWQgKGFuZCBlbmNyeXB0KClkKSBNZXNzYWdlcyAoYXMgaXRcbiAgICAgKiBhc3N1bWVzIHRoZSBkYXRhIGlzIGEgc3RyaW5nIG9yIGJ1ZmZlcikgKi9cbiAgICBNZXNzYWdlLmdldE1lc3NhZ2VzU2l6ZSA9IGZ1bmN0aW9uIChtZXNzYWdlcykge1xuICAgICAgICB2YXIgbXNnLCB0b3RhbCA9IDA7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWVzc2FnZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIG1zZyA9IG1lc3NhZ2VzW2ldO1xuICAgICAgICAgICAgdG90YWwgKz0gbXNnLnNpemUgfHwgKG1zZy5zaXplID0gZ2V0TWVzc2FnZVNpemUobXNnKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvdGFsO1xuICAgIH07XG4gICAgTWVzc2FnZS5zZXJpYWxpemUgPSBVdGlscy5lbmNvZGVCb2R5O1xuICAgIHJldHVybiBNZXNzYWdlO1xufSgpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IE1lc3NhZ2U7XG5cblxuLyoqKi8gfSksXG4vKiAxMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHRzbGliXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xudmFyIFV0aWxzID0gdHNsaWJfMS5fX2ltcG9ydFN0YXIoX193ZWJwYWNrX3JlcXVpcmVfXygxKSk7XG52YXIgZXJyb3JpbmZvXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKDQpKTtcbnZhciBtZXNzYWdlXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKDkpKTtcbnZhciBwcmVzZW5jZW1lc3NhZ2VfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oMTUpKTtcbnZhciBhY3Rpb25zID0ge1xuICAgIEhFQVJUQkVBVDogMCxcbiAgICBBQ0s6IDEsXG4gICAgTkFDSzogMixcbiAgICBDT05ORUNUOiAzLFxuICAgIENPTk5FQ1RFRDogNCxcbiAgICBESVNDT05ORUNUOiA1LFxuICAgIERJU0NPTk5FQ1RFRDogNixcbiAgICBDTE9TRTogNyxcbiAgICBDTE9TRUQ6IDgsXG4gICAgRVJST1I6IDksXG4gICAgQVRUQUNIOiAxMCxcbiAgICBBVFRBQ0hFRDogMTEsXG4gICAgREVUQUNIOiAxMixcbiAgICBERVRBQ0hFRDogMTMsXG4gICAgUFJFU0VOQ0U6IDE0LFxuICAgIE1FU1NBR0U6IDE1LFxuICAgIFNZTkM6IDE2LFxuICAgIEFVVEg6IDE3LFxuICAgIEFDVElWQVRFOiAxOCxcbn07XG52YXIgQWN0aW9uTmFtZSA9IFtdO1xuT2JqZWN0LmtleXMoYWN0aW9ucykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgIEFjdGlvbk5hbWVbYWN0aW9uc1tuYW1lXV0gPSBuYW1lO1xufSk7XG52YXIgZmxhZ3MgPSB7XG4gICAgLyogQ2hhbm5lbCBhdHRhY2ggc3RhdGUgZmxhZ3MgKi9cbiAgICBIQVNfUFJFU0VOQ0U6IDEgPDwgMCxcbiAgICBIQVNfQkFDS0xPRzogMSA8PCAxLFxuICAgIFJFU1VNRUQ6IDEgPDwgMixcbiAgICBUUkFOU0lFTlQ6IDEgPDwgNCxcbiAgICBBVFRBQ0hfUkVTVU1FOiAxIDw8IDUsXG4gICAgLyogQ2hhbm5lbCBtb2RlIGZsYWdzICovXG4gICAgUFJFU0VOQ0U6IDEgPDwgMTYsXG4gICAgUFVCTElTSDogMSA8PCAxNyxcbiAgICBTVUJTQ1JJQkU6IDEgPDwgMTgsXG4gICAgUFJFU0VOQ0VfU1VCU0NSSUJFOiAxIDw8IDE5LFxufTtcbnZhciBmbGFnTmFtZXMgPSBPYmplY3Qua2V5cyhmbGFncyk7XG5mbGFncy5NT0RFX0FMTCA9IGZsYWdzLlBSRVNFTkNFIHwgZmxhZ3MuUFVCTElTSCB8IGZsYWdzLlNVQlNDUklCRSB8IGZsYWdzLlBSRVNFTkNFX1NVQlNDUklCRTtcbmZ1bmN0aW9uIHRvU3RyaW5nQXJyYXkoYXJyYXkpIHtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgaWYgKGFycmF5KSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGFycmF5W2ldLnRvU3RyaW5nKCkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiAnWyAnICsgcmVzdWx0LmpvaW4oJywgJykgKyAnIF0nO1xufVxudmFyIHNpbXBsZUF0dHJpYnV0ZXMgPSAnaWQgY2hhbm5lbCBjaGFubmVsU2VyaWFsIGNvbm5lY3Rpb25JZCBjb3VudCBtc2dTZXJpYWwgdGltZXN0YW1wJy5zcGxpdCgnICcpO1xudmFyIFByb3RvY29sTWVzc2FnZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBQcm90b2NvbE1lc3NhZ2UoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuaGFzRmxhZyA9IGZ1bmN0aW9uIChmbGFnKSB7XG4gICAgICAgICAgICByZXR1cm4gKF90aGlzLmZsYWdzICYgZmxhZ3NbZmxhZ10pID4gMDtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgUHJvdG9jb2xNZXNzYWdlLnByb3RvdHlwZS5zZXRGbGFnID0gZnVuY3Rpb24gKGZsYWcpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLmZsYWdzID0gdGhpcy5mbGFncyB8IGZsYWdzW2ZsYWddKTtcbiAgICB9O1xuICAgIFByb3RvY29sTWVzc2FnZS5wcm90b3R5cGUuZ2V0TW9kZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmxhZ3MgJiYgdGhpcy5mbGFncyAmIGZsYWdzLk1PREVfQUxMO1xuICAgIH07XG4gICAgUHJvdG9jb2xNZXNzYWdlLnByb3RvdHlwZS5lbmNvZGVNb2Rlc1RvRmxhZ3MgPSBmdW5jdGlvbiAobW9kZXMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgbW9kZXMuZm9yRWFjaChmdW5jdGlvbiAobW9kZSkgeyByZXR1cm4gX3RoaXMuc2V0RmxhZyhtb2RlKTsgfSk7XG4gICAgfTtcbiAgICBQcm90b2NvbE1lc3NhZ2UucHJvdG90eXBlLmRlY29kZU1vZGVzRnJvbUZsYWdzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgbW9kZXMgPSBbXTtcbiAgICAgICAgUHJvdG9jb2xNZXNzYWdlLmNoYW5uZWxNb2Rlcy5mb3JFYWNoKGZ1bmN0aW9uIChtb2RlKSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMuaGFzRmxhZyhtb2RlKSkge1xuICAgICAgICAgICAgICAgIG1vZGVzLnB1c2gobW9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbW9kZXMubGVuZ3RoID4gMCA/IG1vZGVzIDogdW5kZWZpbmVkO1xuICAgIH07XG4gICAgUHJvdG9jb2xNZXNzYWdlLmZyb21WYWx1ZXMgPSBmdW5jdGlvbiAodmFsdWVzKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKG5ldyBQcm90b2NvbE1lc3NhZ2UoKSwgdmFsdWVzKTtcbiAgICB9O1xuICAgIFByb3RvY29sTWVzc2FnZS5BY3Rpb24gPSBhY3Rpb25zO1xuICAgIFByb3RvY29sTWVzc2FnZS5jaGFubmVsTW9kZXMgPSBbJ1BSRVNFTkNFJywgJ1BVQkxJU0gnLCAnU1VCU0NSSUJFJywgJ1BSRVNFTkNFX1NVQlNDUklCRSddO1xuICAgIFByb3RvY29sTWVzc2FnZS5BY3Rpb25OYW1lID0gQWN0aW9uTmFtZTtcbiAgICBQcm90b2NvbE1lc3NhZ2Uuc2VyaWFsaXplID0gVXRpbHMuZW5jb2RlQm9keTtcbiAgICBQcm90b2NvbE1lc3NhZ2UuZGVzZXJpYWxpemUgPSBmdW5jdGlvbiAoc2VyaWFsaXplZCwgZm9ybWF0KSB7XG4gICAgICAgIHZhciBkZXNlcmlhbGl6ZWQgPSBVdGlscy5kZWNvZGVCb2R5KHNlcmlhbGl6ZWQsIGZvcm1hdCk7XG4gICAgICAgIHJldHVybiBQcm90b2NvbE1lc3NhZ2UuZnJvbURlc2VyaWFsaXplZChkZXNlcmlhbGl6ZWQpO1xuICAgIH07XG4gICAgUHJvdG9jb2xNZXNzYWdlLmZyb21EZXNlcmlhbGl6ZWQgPSBmdW5jdGlvbiAoZGVzZXJpYWxpemVkKSB7XG4gICAgICAgIHZhciBlcnJvciA9IGRlc2VyaWFsaXplZC5lcnJvcjtcbiAgICAgICAgaWYgKGVycm9yKVxuICAgICAgICAgICAgZGVzZXJpYWxpemVkLmVycm9yID0gZXJyb3JpbmZvXzEuZGVmYXVsdC5mcm9tVmFsdWVzKGVycm9yKTtcbiAgICAgICAgdmFyIG1lc3NhZ2VzID0gZGVzZXJpYWxpemVkLm1lc3NhZ2VzO1xuICAgICAgICBpZiAobWVzc2FnZXMpXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1lc3NhZ2VzLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgICAgIG1lc3NhZ2VzW2ldID0gbWVzc2FnZV8xLmRlZmF1bHQuZnJvbVZhbHVlcyhtZXNzYWdlc1tpXSk7XG4gICAgICAgIHZhciBwcmVzZW5jZSA9IGRlc2VyaWFsaXplZC5wcmVzZW5jZTtcbiAgICAgICAgaWYgKHByZXNlbmNlKVxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcmVzZW5jZS5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgICAgICBwcmVzZW5jZVtpXSA9IHByZXNlbmNlbWVzc2FnZV8xLmRlZmF1bHQuZnJvbVZhbHVlcyhwcmVzZW5jZVtpXSwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKG5ldyBQcm90b2NvbE1lc3NhZ2UoKSwgZGVzZXJpYWxpemVkKTtcbiAgICB9O1xuICAgIFByb3RvY29sTWVzc2FnZS5zdHJpbmdpZnkgPSBmdW5jdGlvbiAobXNnKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSAnW1Byb3RvY29sTWVzc2FnZSc7XG4gICAgICAgIGlmIChtc2cuYWN0aW9uICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXN1bHQgKz0gJzsgYWN0aW9uPScgKyBQcm90b2NvbE1lc3NhZ2UuQWN0aW9uTmFtZVttc2cuYWN0aW9uXSB8fCBmYWxzZTtcbiAgICAgICAgdmFyIGF0dHJpYnV0ZTtcbiAgICAgICAgZm9yICh2YXIgYXR0cmliSW5kZXggPSAwOyBhdHRyaWJJbmRleCA8IHNpbXBsZUF0dHJpYnV0ZXMubGVuZ3RoOyBhdHRyaWJJbmRleCsrKSB7XG4gICAgICAgICAgICBhdHRyaWJ1dGUgPSBzaW1wbGVBdHRyaWJ1dGVzW2F0dHJpYkluZGV4XTtcbiAgICAgICAgICAgIGlmIChtc2dbYXR0cmlidXRlXSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnOyAnICsgYXR0cmlidXRlICsgJz0nICsgbXNnW2F0dHJpYnV0ZV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1zZy5tZXNzYWdlcylcbiAgICAgICAgICAgIHJlc3VsdCArPSAnOyBtZXNzYWdlcz0nICsgdG9TdHJpbmdBcnJheShtZXNzYWdlXzEuZGVmYXVsdC5mcm9tVmFsdWVzQXJyYXkobXNnLm1lc3NhZ2VzKSk7XG4gICAgICAgIGlmIChtc2cucHJlc2VuY2UpXG4gICAgICAgICAgICByZXN1bHQgKz0gJzsgcHJlc2VuY2U9JyArIHRvU3RyaW5nQXJyYXkocHJlc2VuY2VtZXNzYWdlXzEuZGVmYXVsdC5mcm9tVmFsdWVzQXJyYXkobXNnLnByZXNlbmNlKSk7XG4gICAgICAgIGlmIChtc2cuZXJyb3IpXG4gICAgICAgICAgICByZXN1bHQgKz0gJzsgZXJyb3I9JyArIGVycm9yaW5mb18xLmRlZmF1bHQuZnJvbVZhbHVlcyhtc2cuZXJyb3IpLnRvU3RyaW5nKCk7XG4gICAgICAgIGlmIChtc2cuYXV0aCAmJiBtc2cuYXV0aC5hY2Nlc3NUb2tlbilcbiAgICAgICAgICAgIHJlc3VsdCArPSAnOyB0b2tlbj0nICsgbXNnLmF1dGguYWNjZXNzVG9rZW47XG4gICAgICAgIGlmIChtc2cuZmxhZ3MpXG4gICAgICAgICAgICByZXN1bHQgKz0gJzsgZmxhZ3M9JyArIGZsYWdOYW1lcy5maWx0ZXIobXNnLmhhc0ZsYWcpLmpvaW4oJywnKTtcbiAgICAgICAgaWYgKG1zZy5wYXJhbXMpIHtcbiAgICAgICAgICAgIHZhciBzdHJpbmdpZmllZFBhcmFtc18xID0gJyc7XG4gICAgICAgICAgICBVdGlscy5mb3JJbk93bk5vbk51bGxQcm9wZXJ0aWVzKG1zZy5wYXJhbXMsIGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN0cmluZ2lmaWVkUGFyYW1zXzEubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBzdHJpbmdpZmllZFBhcmFtc18xICs9ICc7ICc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN0cmluZ2lmaWVkUGFyYW1zXzEgKz0gcHJvcCArICc9JyArIG1zZy5wYXJhbXNbcHJvcF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChzdHJpbmdpZmllZFBhcmFtc18xLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gJzsgcGFyYW1zPVsnICsgc3RyaW5naWZpZWRQYXJhbXNfMSArICddJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXN1bHQgKz0gJ10nO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gICAgcmV0dXJuIFByb3RvY29sTWVzc2FnZTtcbn0oKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBQcm90b2NvbE1lc3NhZ2U7XG5cblxuLyoqKi8gfSksXG4vKiAxMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG47KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7XG5cdGlmICh0cnVlKSB7XG5cdFx0Ly8gQ29tbW9uSlNcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KF9fd2VicGFja19yZXF1aXJlX18oNikpO1xuXHR9XG5cdGVsc2Uge31cbn0odGhpcywgZnVuY3Rpb24gKENyeXB0b0pTKSB7XG5cblx0KGZ1bmN0aW9uICgpIHtcblx0ICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgdmFyIEMgPSBDcnlwdG9KUztcblx0ICAgIHZhciBDX2xpYiA9IEMubGliO1xuXHQgICAgdmFyIFdvcmRBcnJheSA9IENfbGliLldvcmRBcnJheTtcblx0ICAgIHZhciBDX2VuYyA9IEMuZW5jO1xuXG5cdCAgICAvKipcblx0ICAgICAqIEJhc2U2NCBlbmNvZGluZyBzdHJhdGVneS5cblx0ICAgICAqL1xuXHQgICAgdmFyIEJhc2U2NCA9IENfZW5jLkJhc2U2NCA9IHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb252ZXJ0cyBhIHdvcmQgYXJyYXkgdG8gYSBCYXNlNjQgc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl9IHdvcmRBcnJheSBUaGUgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIEJhc2U2NCBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBiYXNlNjRTdHJpbmcgPSBDcnlwdG9KUy5lbmMuQmFzZTY0LnN0cmluZ2lmeSh3b3JkQXJyYXkpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHN0cmluZ2lmeTogZnVuY3Rpb24gKHdvcmRBcnJheSkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIHdvcmRzID0gd29yZEFycmF5LndvcmRzO1xuXHQgICAgICAgICAgICB2YXIgc2lnQnl0ZXMgPSB3b3JkQXJyYXkuc2lnQnl0ZXM7XG5cdCAgICAgICAgICAgIHZhciBtYXAgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLz0nO1xuXG5cdCAgICAgICAgICAgIC8vIENsYW1wIGV4Y2VzcyBiaXRzXG5cdCAgICAgICAgICAgIHdvcmRBcnJheS5jbGFtcCgpO1xuXG5cdCAgICAgICAgICAgIC8vIENvbnZlcnRcblx0ICAgICAgICAgICAgdmFyIGJhc2U2NENoYXJzID0gW107XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2lnQnl0ZXM7IGkgKz0gMykge1xuXHQgICAgICAgICAgICAgICAgdmFyIGJ5dGUxID0gKHdvcmRzW2kgPj4+IDJdICAgICAgID4+PiAoMjQgLSAoaSAlIDQpICogOCkpICAgICAgICYgMHhmZjtcblx0ICAgICAgICAgICAgICAgIHZhciBieXRlMiA9ICh3b3Jkc1soaSArIDEpID4+PiAyXSA+Pj4gKDI0IC0gKChpICsgMSkgJSA0KSAqIDgpKSAmIDB4ZmY7XG5cdCAgICAgICAgICAgICAgICB2YXIgYnl0ZTMgPSAod29yZHNbKGkgKyAyKSA+Pj4gMl0gPj4+ICgyNCAtICgoaSArIDIpICUgNCkgKiA4KSkgJiAweGZmO1xuXG5cdCAgICAgICAgICAgICAgICB2YXIgdHJpcGxldCA9IChieXRlMSA8PCAxNikgfCAoYnl0ZTIgPDwgOCkgfCBieXRlMztcblxuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IChqIDwgNCkgJiYgKGkgKyBqICogMC43NSA8IHNpZ0J5dGVzKTsgaisrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgYmFzZTY0Q2hhcnMucHVzaChtYXAuY2hhckF0KCh0cmlwbGV0ID4+PiAoNiAqICgzIC0gaikpKSAmIDB4M2YpKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIEFkZCBwYWRkaW5nXG5cdCAgICAgICAgICAgIHZhciBwYWRkaW5nQ2hhciA9IG1hcC5jaGFyQXQoNjQpO1xuXHQgICAgICAgICAgICBpZiAocGFkZGluZ0NoYXIpIHtcblx0ICAgICAgICAgICAgICAgIHdoaWxlIChiYXNlNjRDaGFycy5sZW5ndGggJSA0KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgYmFzZTY0Q2hhcnMucHVzaChwYWRkaW5nQ2hhcik7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICByZXR1cm4gYmFzZTY0Q2hhcnMuam9pbignJyk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbnZlcnRzIGEgQmFzZTY0IHN0cmluZyB0byBhIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gYmFzZTY0U3RyIFRoZSBCYXNlNjQgc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHdvcmRBcnJheSA9IENyeXB0b0pTLmVuYy5CYXNlNjQucGFyc2UoYmFzZTY0U3RyaW5nKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBwYXJzZTogZnVuY3Rpb24gKGJhc2U2NFN0cikge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIGJhc2U2NFN0ckxlbmd0aCA9IGJhc2U2NFN0ci5sZW5ndGg7XG5cdCAgICAgICAgICAgIHZhciBtYXAgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLz0nO1xuXHQgICAgICAgICAgICB2YXIgcmV2ZXJzZU1hcCA9IHRoaXMuX3JldmVyc2VNYXA7XG5cblx0ICAgICAgICAgICAgaWYgKCFyZXZlcnNlTWFwKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV2ZXJzZU1hcCA9IHRoaXMuX3JldmVyc2VNYXAgPSBbXTtcblx0ICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG1hcC5sZW5ndGg7IGorKykge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXZlcnNlTWFwW21hcC5jaGFyQ29kZUF0KGopXSA9IGo7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gSWdub3JlIHBhZGRpbmdcblx0ICAgICAgICAgICAgdmFyIHBhZGRpbmdDaGFyID0gbWFwLmNoYXJBdCg2NCk7XG5cdCAgICAgICAgICAgIGlmIChwYWRkaW5nQ2hhcikge1xuXHQgICAgICAgICAgICAgICAgdmFyIHBhZGRpbmdJbmRleCA9IGJhc2U2NFN0ci5pbmRleE9mKHBhZGRpbmdDaGFyKTtcblx0ICAgICAgICAgICAgICAgIGlmIChwYWRkaW5nSW5kZXggIT09IC0xKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgYmFzZTY0U3RyTGVuZ3RoID0gcGFkZGluZ0luZGV4O1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gQ29udmVydFxuXHQgICAgICAgICAgICByZXR1cm4gcGFyc2VMb29wKGJhc2U2NFN0ciwgYmFzZTY0U3RyTGVuZ3RoLCByZXZlcnNlTWFwKTtcblxuXHQgICAgICAgIH1cblx0ICAgIH07XG5cblx0ICAgIGZ1bmN0aW9uIHBhcnNlTG9vcChiYXNlNjRTdHIsIGJhc2U2NFN0ckxlbmd0aCwgcmV2ZXJzZU1hcCkge1xuXHQgICAgICB2YXIgd29yZHMgPSBbXTtcblx0ICAgICAgdmFyIG5CeXRlcyA9IDA7XG5cdCAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYmFzZTY0U3RyTGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgIGlmIChpICUgNCkge1xuXHQgICAgICAgICAgICAgIHZhciBiaXRzMSA9IHJldmVyc2VNYXBbYmFzZTY0U3RyLmNoYXJDb2RlQXQoaSAtIDEpXSA8PCAoKGkgJSA0KSAqIDIpO1xuXHQgICAgICAgICAgICAgIHZhciBiaXRzMiA9IHJldmVyc2VNYXBbYmFzZTY0U3RyLmNoYXJDb2RlQXQoaSldID4+PiAoNiAtIChpICUgNCkgKiAyKTtcblx0ICAgICAgICAgICAgICB2YXIgYml0c0NvbWJpbmVkID0gYml0czEgfCBiaXRzMjtcblx0ICAgICAgICAgICAgICB3b3Jkc1tuQnl0ZXMgPj4+IDJdIHw9IGJpdHNDb21iaW5lZCA8PCAoMjQgLSAobkJ5dGVzICUgNCkgKiA4KTtcblx0ICAgICAgICAgICAgICBuQnl0ZXMrKztcblx0ICAgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gV29yZEFycmF5LmNyZWF0ZSh3b3JkcywgbkJ5dGVzKTtcblx0ICAgIH1cblx0fSgpKTtcblxuXG5cdHJldHVybiBDcnlwdG9KUy5lbmMuQmFzZTY0O1xuXG59KSk7XG5cbi8qKiovIH0pLFxuLyogMTIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciB0c2xpYl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciBVdGlscyA9IHRzbGliXzEuX19pbXBvcnRTdGFyKF9fd2VicGFja19yZXF1aXJlX18oMSkpO1xudmFyIHByb3RvY29sbWVzc2FnZV8xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygxMCkpO1xudmFyIHRyYW5zcG9ydF8xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygyNikpO1xudmFyIGxvZ2dlcl8xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygyKSk7XG52YXIgZGVmYXVsdHNfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oOCkpO1xudmFyIGNvbm5lY3Rpb25lcnJvcnNfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oMjApKTtcbnZhciBhdXRoXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKDE3KSk7XG52YXIgZXJyb3JpbmZvXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKDQpKTtcbnZhciBYSFJTdGF0ZXNfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oMjEpKTtcbnZhciBwbGF0Zm9ybV8xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygzKSk7XG4vKiBUT0RPOiBjYW4gcmVtb3ZlIG9uY2UgcmVhbHRpbWUgc2VuZHMgcHJvdG9jb2wgbWVzc2FnZSByZXNwb25zZXMgZm9yIGNvbWV0IGVycm9ycyAqL1xuZnVuY3Rpb24gc2hvdWxkQmVFcnJvckFjdGlvbihlcnIpIHtcbiAgICB2YXIgVU5SRVNPTFZBQkxFX0VSUk9SX0NPREVTID0gWzgwMDE1LCA4MDAxNywgODAwMzBdO1xuICAgIGlmIChlcnIuY29kZSkge1xuICAgICAgICBpZiAoYXV0aF8xLmRlZmF1bHQuaXNUb2tlbkVycihlcnIpKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAoVXRpbHMuYXJySW4oVU5SRVNPTFZBQkxFX0VSUk9SX0NPREVTLCBlcnIuY29kZSkpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGVyci5jb2RlID49IDQwMDAwICYmIGVyci5jb2RlIDwgNTAwMDA7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvKiBMaWtlbHkgYSBuZXR3b3JrIG9yIHRyYW5zcG9ydCBlcnJvciBvZiBzb21lIGtpbmQuIENlcnRhaW5seSBub3QgZmF0YWwgdG8gdGhlIGNvbm5lY3Rpb24gKi9cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHByb3RvY29sTWVzc2FnZUZyb21SYXdFcnJvcihlcnIpIHtcbiAgICAvKiBlcnIgd2lsbCBiZSBlaXRoZXIgYSBsZWdhY3kgKG5vbi1wcm90b2NvbG1lc3NhZ2UpIGNvbWV0IGVycm9yIHJlc3BvbnNlXG4gICAgICogKHdoaWNoIHdpbGwgaGF2ZSBhbiBlcnIuY29kZSksIG9yIGEgeGhyL25ldHdvcmsgZXJyb3IgKHdoaWNoIHdvbid0KS4gKi9cbiAgICBpZiAoc2hvdWxkQmVFcnJvckFjdGlvbihlcnIpKSB7XG4gICAgICAgIHJldHVybiBbcHJvdG9jb2xtZXNzYWdlXzEuZGVmYXVsdC5mcm9tVmFsdWVzKHsgYWN0aW9uOiBwcm90b2NvbG1lc3NhZ2VfMS5kZWZhdWx0LkFjdGlvbi5FUlJPUiwgZXJyb3I6IGVyciB9KV07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gW3Byb3RvY29sbWVzc2FnZV8xLmRlZmF1bHQuZnJvbVZhbHVlcyh7IGFjdGlvbjogcHJvdG9jb2xtZXNzYWdlXzEuZGVmYXVsdC5BY3Rpb24uRElTQ09OTkVDVEVELCBlcnJvcjogZXJyIH0pXTtcbiAgICB9XG59XG4vKlxuICogQSBiYXNlIGNvbWV0IHRyYW5zcG9ydCBjbGFzc1xuICovXG52YXIgQ29tZXRUcmFuc3BvcnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoQ29tZXRUcmFuc3BvcnQsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQ29tZXRUcmFuc3BvcnQoY29ubmVjdGlvbk1hbmFnZXIsIGF1dGgsIHBhcmFtcykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBjb25uZWN0aW9uTWFuYWdlciwgYXV0aCwgcGFyYW1zLCAvKiBiaW5hcnkgbm90IHN1cHBvcnRlZCBmb3IgY29tZXQgc28gZm9yY2UgSlNPTiBwcm90b2NvbCAqLyB0cnVlKSB8fCB0aGlzO1xuICAgICAgICAvKiBGb3IgY29tZXQsIHdlIGNvdWxkIGRvIHRoZSBhdXRoIHVwZGF0ZSBieSBhYm9ydGluZyB0aGUgY3VycmVudCByZWN2IGFuZFxuICAgICAgICAgKiBzdGFydGluZyBhIG5ldyBvbmUgd2l0aCB0aGUgbmV3IHRva2VuLCB0aGF0J2QgYmUgc3VmZmljaWVudCBmb3IgcmVhbHRpbWUuXG4gICAgICAgICAqIFByb2JsZW0gaXMgSlNPTlAgLSB5b3UgY2FuJ3QgY2FuY2VsIHRydWx5IGFib3J0IGEgcmVjdiBvbmNlIHN0YXJ0ZWQuIFNvXG4gICAgICAgICAqIHdlIG5lZWQgdG8gc2VuZCBhbiBBVVRIIGZvciBqc29ucC4gSW4gd2hpY2ggY2FzZSBpdCdzIHNpbXBsZXIgdG8ga2VlcCBhbGxcbiAgICAgICAgICogY29tZXQgdHJhbnNwb3J0cyB0aGUgc2FtZSBhbmQgZG8gaXQgZm9yIGFsbCBvZiB0aGVtLiBTbyB3ZSBzZW5kIHRoZSBBVVRIXG4gICAgICAgICAqIGluc3RlYWQsIGFuZCBkb24ndCBuZWVkIHRvIGFib3J0IHRoZSByZWN2ICovXG4gICAgICAgIF90aGlzLm9uQXV0aFVwZGF0ZWQgPSBmdW5jdGlvbiAodG9rZW5EZXRhaWxzKSB7XG4gICAgICAgICAgICBfdGhpcy5hdXRoUGFyYW1zID0geyBhY2Nlc3NfdG9rZW46IHRva2VuRGV0YWlscy50b2tlbiB9O1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5zdHJlYW0gPSAnc3RyZWFtJyBpbiBwYXJhbXMgPyBwYXJhbXMuc3RyZWFtIDogdHJ1ZTtcbiAgICAgICAgX3RoaXMuc2VuZFJlcXVlc3QgPSBudWxsO1xuICAgICAgICBfdGhpcy5yZWN2UmVxdWVzdCA9IG51bGw7XG4gICAgICAgIF90aGlzLnBlbmRpbmdDYWxsYmFjayA9IG51bGw7XG4gICAgICAgIF90aGlzLnBlbmRpbmdJdGVtcyA9IG51bGw7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQ29tZXRUcmFuc3BvcnQucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01JTk9SLCAnQ29tZXRUcmFuc3BvcnQuY29ubmVjdCgpJywgJ3N0YXJ0aW5nJyk7XG4gICAgICAgIHRyYW5zcG9ydF8xLmRlZmF1bHQucHJvdG90eXBlLmNvbm5lY3QuY2FsbCh0aGlzKTtcbiAgICAgICAgdmFyIHBhcmFtcyA9IHRoaXMucGFyYW1zO1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHBhcmFtcy5vcHRpb25zO1xuICAgICAgICB2YXIgaG9zdCA9IGRlZmF1bHRzXzEuZGVmYXVsdC5nZXRIb3N0KG9wdGlvbnMsIHBhcmFtcy5ob3N0KTtcbiAgICAgICAgdmFyIHBvcnQgPSBkZWZhdWx0c18xLmRlZmF1bHQuZ2V0UG9ydChvcHRpb25zKTtcbiAgICAgICAgdmFyIGNvbWV0U2NoZW1lID0gb3B0aW9ucy50bHMgPyAnaHR0cHM6Ly8nIDogJ2h0dHA6Ly8nO1xuICAgICAgICB0aGlzLmJhc2VVcmkgPSBjb21ldFNjaGVtZSArIGhvc3QgKyAnOicgKyBwb3J0ICsgJy9jb21ldC8nO1xuICAgICAgICB2YXIgY29ubmVjdFVyaSA9IHRoaXMuYmFzZVVyaSArICdjb25uZWN0JztcbiAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlOT1IsICdDb21ldFRyYW5zcG9ydC5jb25uZWN0KCknLCAndXJpOiAnICsgY29ubmVjdFVyaSk7XG4gICAgICAgIHRoaXMuYXV0aC5nZXRBdXRoUGFyYW1zKGZ1bmN0aW9uIChlcnIsIGF1dGhQYXJhbXMpIHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5kaXNjb25uZWN0KGVycik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKF90aGlzLmlzRGlzcG9zZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfdGhpcy5hdXRoUGFyYW1zID0gYXV0aFBhcmFtcztcbiAgICAgICAgICAgIHZhciBjb25uZWN0UGFyYW1zID0gX3RoaXMucGFyYW1zLmdldENvbm5lY3RQYXJhbXMoYXV0aFBhcmFtcyk7XG4gICAgICAgICAgICBpZiAoJ3N0cmVhbScgaW4gY29ubmVjdFBhcmFtcylcbiAgICAgICAgICAgICAgICBfdGhpcy5zdHJlYW0gPSBjb25uZWN0UGFyYW1zLnN0cmVhbTtcbiAgICAgICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01JTk9SLCAnQ29tZXRUcmFuc3BvcnQuY29ubmVjdCgpJywgJ2Nvbm5lY3RQYXJhbXM6JyArIFV0aWxzLnRvUXVlcnlTdHJpbmcoY29ubmVjdFBhcmFtcykpO1xuICAgICAgICAgICAgLyogdGhpcyB3aWxsIGJlIHRoZSAncmVjdlJlcXVlc3QnIHNvIHRoaXMgY29ubmVjdGlvbiBjYW4gc3RyZWFtIG1lc3NhZ2VzICovXG4gICAgICAgICAgICB2YXIgcHJlY29ubmVjdGVkID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgY29ubmVjdFJlcXVlc3QgPSAoX3RoaXMucmVjdlJlcXVlc3QgPSBfdGhpcy5jcmVhdGVSZXF1ZXN0KGNvbm5lY3RVcmksIG51bGwsIGNvbm5lY3RQYXJhbXMsIG51bGwsIF90aGlzLnN0cmVhbSA/IFhIUlN0YXRlc18xLmRlZmF1bHQuUkVRX1JFQ1ZfU1RSRUFNIDogWEhSU3RhdGVzXzEuZGVmYXVsdC5SRVFfUkVDVikpO1xuICAgICAgICAgICAgY29ubmVjdFJlcXVlc3Qub24oJ2RhdGEnLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIGlmICghX3RoaXMucmVjdlJlcXVlc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgLyogdGhlIHRyYW5zcG9ydCB3YXMgZGlzcG9zZWQgYmVmb3JlIHdlIGNvbm5lY3RlZCAqL1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghcHJlY29ubmVjdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHByZWNvbm5lY3RlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmVtaXQoJ3ByZWNvbm5lY3QnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgX3RoaXMub25EYXRhKGRhdGEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25uZWN0UmVxdWVzdC5vbignY29tcGxldGUnLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFfdGhpcy5yZWN2UmVxdWVzdCkge1xuICAgICAgICAgICAgICAgICAgICAvKiB0aGUgdHJhbnNwb3J0IHdhcyBkaXNwb3NlZCBiZWZvcmUgd2UgY29ubmVjdGVkICovXG4gICAgICAgICAgICAgICAgICAgIGVyciA9IGVyciB8fCBuZXcgZXJyb3JpbmZvXzEuZGVmYXVsdCgnUmVxdWVzdCBjYW5jZWxsZWQnLCA4MDAwMywgNDAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgX3RoaXMucmVjdlJlcXVlc3QgPSBudWxsO1xuICAgICAgICAgICAgICAgIC8qIENvbm5lY3QgcmVxdWVzdCBtYXkgY29tcGxldGUgd2l0aG91dCBhIGVtaXR0aW5nICdkYXRhJyBldmVudCBzaW5jZSB0aGF0IGlzIG5vdFxuICAgICAgICAgICAgICAgICAqIGVtaXR0ZWQgZm9yIGUuZy4gYSBub24tc3RyZWFtZWQgZXJyb3IgcmVzcG9uc2UuIFN0aWxsIGltcGxpZXMgcHJlY29ubmVjdC4gKi9cbiAgICAgICAgICAgICAgICBpZiAoIXByZWNvbm5lY3RlZCAmJiAhZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHByZWNvbm5lY3RlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmVtaXQoJ3ByZWNvbm5lY3QnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgX3RoaXMub25BY3Rpdml0eSgpO1xuICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVyci5jb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvKiBBIHByb3RvY29sIGVycm9yIHJlY2VpdmVkIGZyb20gcmVhbHRpbWUuIFRPRE86IG9uY2UgcmVhbHRpbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAqIGNvbnNpc3RlbmRseSBzZW5kcyBlcnJvcnMgd3JhcHBlZCBpbiBwcm90b2NvbCBtZXNzYWdlcywgc2hvdWxkIGJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgKiBhYmxlIHRvIHJlbW92ZSB0aGlzICovXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5vbkRhdGEocHJvdG9jb2xNZXNzYWdlRnJvbVJhd0Vycm9yKGVycikpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLyogQSBuZXR3b3JrL3hociBlcnJvci4gRG9uJ3QgYm90aGVyIHdyYXBwaW5nIGluIGEgcHJvdG9jb2wgbWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAqIGp1c3QgZGlzY29ubmVjdCB0aGUgdHJhbnNwb3J0ICovXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5kaXNjb25uZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwbGF0Zm9ybV8xLmRlZmF1bHQuQ29uZmlnLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMucmVjdigpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25uZWN0UmVxdWVzdC5leGVjKCk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQ29tZXRUcmFuc3BvcnQucHJvdG90eXBlLnJlcXVlc3RDbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlOT1IsICdDb21ldFRyYW5zcG9ydC5yZXF1ZXN0Q2xvc2UoKScpO1xuICAgICAgICB0aGlzLl9yZXF1ZXN0Q2xvc2VPckRpc2Nvbm5lY3QodHJ1ZSk7XG4gICAgfTtcbiAgICBDb21ldFRyYW5zcG9ydC5wcm90b3R5cGUucmVxdWVzdERpc2Nvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01JTk9SLCAnQ29tZXRUcmFuc3BvcnQucmVxdWVzdERpc2Nvbm5lY3QoKScpO1xuICAgICAgICB0aGlzLl9yZXF1ZXN0Q2xvc2VPckRpc2Nvbm5lY3QoZmFsc2UpO1xuICAgIH07XG4gICAgQ29tZXRUcmFuc3BvcnQucHJvdG90eXBlLl9yZXF1ZXN0Q2xvc2VPckRpc2Nvbm5lY3QgPSBmdW5jdGlvbiAoY2xvc2luZykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgY2xvc2VPckRpc2Nvbm5lY3RVcmkgPSBjbG9zaW5nID8gdGhpcy5jbG9zZVVyaSA6IHRoaXMuZGlzY29ubmVjdFVyaTtcbiAgICAgICAgaWYgKGNsb3NlT3JEaXNjb25uZWN0VXJpKSB7XG4gICAgICAgICAgICB2YXIgcmVxdWVzdCA9IHRoaXMuY3JlYXRlUmVxdWVzdChjbG9zZU9yRGlzY29ubmVjdFVyaSwgbnVsbCwgdGhpcy5hdXRoUGFyYW1zLCBudWxsLCBYSFJTdGF0ZXNfMS5kZWZhdWx0LlJFUV9TRU5EKTtcbiAgICAgICAgICAgIHJlcXVlc3Qub24oJ2NvbXBsZXRlJywgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfRVJST1IsICdDb21ldFRyYW5zcG9ydC5yZXF1ZXN0JyArIChjbG9zaW5nID8gJ0Nsb3NlKCknIDogJ0Rpc2Nvbm5lY3QoKScpLCAncmVxdWVzdCByZXR1cm5lZCBlcnIgPSAnICsgVXRpbHMuaW5zcGVjdEVycm9yKGVycikpO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5maW5pc2goJ2Rpc2Nvbm5lY3RlZCcsIGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXF1ZXN0LmV4ZWMoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQ29tZXRUcmFuc3BvcnQucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01JTk9SLCAnQ29tZXRUcmFuc3BvcnQuZGlzcG9zZSgpJywgJycpO1xuICAgICAgICBpZiAoIXRoaXMuaXNEaXNwb3NlZCkge1xuICAgICAgICAgICAgdGhpcy5pc0Rpc3Bvc2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmICh0aGlzLnJlY3ZSZXF1ZXN0KSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlOT1IsICdDb21ldFRyYW5zcG9ydC5kaXNwb3NlKCknLCAnYWJvcnRpbmcgcmVjdiByZXF1ZXN0Jyk7XG4gICAgICAgICAgICAgICAgdGhpcy5yZWN2UmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICAgICAgICAgIHRoaXMucmVjdlJlcXVlc3QgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyogSW4gYWxtb3N0IGFsbCBjYXNlcyB0aGUgdHJhbnNwb3J0IHdpbGwgYmUgZmluaXNoZWQgYmVmb3JlIGl0J3NcbiAgICAgICAgICAgICAqIGRpc3Bvc2VkLiBGaW5pc2ggaGVyZSBqdXN0IHRvIG1ha2Ugc3VyZS4gKi9cbiAgICAgICAgICAgIHRoaXMuZmluaXNoKCdkaXNjb25uZWN0ZWQnLCBjb25uZWN0aW9uZXJyb3JzXzEuZGVmYXVsdC5kaXNjb25uZWN0ZWQoKSk7XG4gICAgICAgICAgICBwbGF0Zm9ybV8xLmRlZmF1bHQuQ29uZmlnLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5lbWl0KCdkaXNwb3NlZCcpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENvbWV0VHJhbnNwb3J0LnByb3RvdHlwZS5vbkNvbm5lY3QgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIC8qIGlmIHRoaXMgdHJhbnNwb3J0IGhhcyBiZWVuIGRpc3Bvc2VkIHdoaWxzdCBhd2FpdGluZyBjb25uZWN0aW9uLCBkbyBub3RoaW5nICovXG4gICAgICAgIGlmICh0aGlzLmlzRGlzcG9zZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvKiB0aGUgY29ubmVjdGlvbktleSBpbiBhIGNvbWV0IGNvbm5lY3RlZCByZXNwb25zZSBpcyByZWFsbHlcbiAgICAgICAgICogPGluc3RJZD4tPGNvbm5lY3Rpb25LZXk+ICovXG4gICAgICAgIHZhciBjb25uZWN0aW9uU3RyID0gKF9hID0gbWVzc2FnZS5jb25uZWN0aW9uRGV0YWlscykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNvbm5lY3Rpb25LZXk7XG4gICAgICAgIHRyYW5zcG9ydF8xLmRlZmF1bHQucHJvdG90eXBlLm9uQ29ubmVjdC5jYWxsKHRoaXMsIG1lc3NhZ2UpO1xuICAgICAgICB2YXIgYmFzZUNvbm5lY3Rpb25VcmkgPSB0aGlzLmJhc2VVcmkgKyBjb25uZWN0aW9uU3RyO1xuICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19NSUNSTywgJ0NvbWV0VHJhbnNwb3J0Lm9uQ29ubmVjdCgpJywgJ2Jhc2VVcmkgPSAnICsgYmFzZUNvbm5lY3Rpb25VcmkpO1xuICAgICAgICB0aGlzLnNlbmRVcmkgPSBiYXNlQ29ubmVjdGlvblVyaSArICcvc2VuZCc7XG4gICAgICAgIHRoaXMucmVjdlVyaSA9IGJhc2VDb25uZWN0aW9uVXJpICsgJy9yZWN2JztcbiAgICAgICAgdGhpcy5jbG9zZVVyaSA9IGJhc2VDb25uZWN0aW9uVXJpICsgJy9jbG9zZSc7XG4gICAgICAgIHRoaXMuZGlzY29ubmVjdFVyaSA9IGJhc2VDb25uZWN0aW9uVXJpICsgJy9kaXNjb25uZWN0JztcbiAgICB9O1xuICAgIENvbWV0VHJhbnNwb3J0LnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICAgICAgaWYgKHRoaXMuc2VuZFJlcXVlc3QpIHtcbiAgICAgICAgICAgIC8qIHRoZXJlIGlzIGEgcGVuZGluZyBzZW5kLCBzbyBxdWV1ZSB0aGlzIG1lc3NhZ2UgKi9cbiAgICAgICAgICAgIHRoaXMucGVuZGluZ0l0ZW1zID0gdGhpcy5wZW5kaW5nSXRlbXMgfHwgW107XG4gICAgICAgICAgICB0aGlzLnBlbmRpbmdJdGVtcy5wdXNoKG1lc3NhZ2UpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8qIHNlbmQgdGhpcywgcGx1cyBhbnkgcGVuZGluZywgbm93ICovXG4gICAgICAgIHZhciBwZW5kaW5nSXRlbXMgPSB0aGlzLnBlbmRpbmdJdGVtcyB8fCBbXTtcbiAgICAgICAgcGVuZGluZ0l0ZW1zLnB1c2gobWVzc2FnZSk7XG4gICAgICAgIHRoaXMucGVuZGluZ0l0ZW1zID0gbnVsbDtcbiAgICAgICAgdGhpcy5zZW5kSXRlbXMocGVuZGluZ0l0ZW1zKTtcbiAgICB9O1xuICAgIENvbWV0VHJhbnNwb3J0LnByb3RvdHlwZS5zZW5kQW55UGVuZGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHBlbmRpbmdJdGVtcyA9IHRoaXMucGVuZGluZ0l0ZW1zO1xuICAgICAgICBpZiAoIXBlbmRpbmdJdGVtcykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucGVuZGluZ0l0ZW1zID0gbnVsbDtcbiAgICAgICAgdGhpcy5zZW5kSXRlbXMocGVuZGluZ0l0ZW1zKTtcbiAgICB9O1xuICAgIENvbWV0VHJhbnNwb3J0LnByb3RvdHlwZS5zZW5kSXRlbXMgPSBmdW5jdGlvbiAoaXRlbXMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIHNlbmRSZXF1ZXN0ID0gKHRoaXMuc2VuZFJlcXVlc3QgPSB0aGlzLmNyZWF0ZVJlcXVlc3QodGhpcy5zZW5kVXJpLCBudWxsLCB0aGlzLmF1dGhQYXJhbXMsIHRoaXMuZW5jb2RlUmVxdWVzdChpdGVtcyksIFhIUlN0YXRlc18xLmRlZmF1bHQuUkVRX1NFTkQpKTtcbiAgICAgICAgc2VuZFJlcXVlc3Qub24oJ2NvbXBsZXRlJywgZnVuY3Rpb24gKGVyciwgZGF0YSkge1xuICAgICAgICAgICAgaWYgKGVycilcbiAgICAgICAgICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19FUlJPUiwgJ0NvbWV0VHJhbnNwb3J0LnNlbmRJdGVtcygpJywgJ29uIGNvbXBsZXRlOiBlcnIgPSAnICsgVXRpbHMuaW5zcGVjdEVycm9yKGVycikpO1xuICAgICAgICAgICAgX3RoaXMuc2VuZFJlcXVlc3QgPSBudWxsO1xuICAgICAgICAgICAgLyogdGhlIHJlc3VsdCBvZiB0aGUgcmVxdWVzdCwgZXZlbiBpZiBhIG5hY2ssIGlzIHVzdWFsbHkgYSBwcm90b2NvbCByZXNwb25zZVxuICAgICAgICAgICAgICogY29udGFpbmVkIGluIHRoZSBkYXRhLiBBbiBlcnIgaXMgYW5vbW9sb3VzLCBhbmQgaW5kaWNhdGVzIHNvbWUgaXNzdWUgd2l0aCB0aGVcbiAgICAgICAgICAgICAqIG5ldHdvcmssdHJhbnNwb3J0LCBvciBjb25uZWN0aW9uICovXG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVyci5jb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8qIEEgcHJvdG9jb2wgZXJyb3IgcmVjZWl2ZWQgZnJvbSByZWFsdGltZS4gVE9ETzogb25jZSByZWFsdGltZVxuICAgICAgICAgICAgICAgICAgICAgKiBjb25zaXN0ZW5kbHkgc2VuZHMgZXJyb3JzIHdyYXBwZWQgaW4gcHJvdG9jb2wgbWVzc2FnZXMsIHNob3VsZCBiZVxuICAgICAgICAgICAgICAgICAgICAgKiBhYmxlIHRvIHJlbW92ZSB0aGlzICovXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLm9uRGF0YShwcm90b2NvbE1lc3NhZ2VGcm9tUmF3RXJyb3IoZXJyKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvKiBBIG5ldHdvcmsveGhyIGVycm9yLiBEb24ndCBib3RoZXIgd3JhcHBpbmcgaW4gYSBwcm90b2NvbCBtZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICAgKiBqdXN0IGRpc2Nvbm5lY3QgdGhlIHRyYW5zcG9ydCAqL1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5kaXNjb25uZWN0KGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMub25EYXRhKGRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKF90aGlzLnBlbmRpbmdJdGVtcykge1xuICAgICAgICAgICAgICAgIHBsYXRmb3JtXzEuZGVmYXVsdC5Db25maWcubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAvKiBJZiB0aGVyZSdzIGEgbmV3IHNlbmQgcmVxdWVzdCBieSBub3csIGFueSBwZW5kaW5nIGl0ZW1zIHdpbGwgaGF2ZVxuICAgICAgICAgICAgICAgICAgICAgKiBiZWVuIHBpY2tlZCB1cCBieSB0aGF0OyBhbnkgbmV3IG9uZXMgYWRkZWQgc2luY2UgdGhlbiB3aWxsIGJlXG4gICAgICAgICAgICAgICAgICAgICAqIHBpY2tlZCB1cCBhZnRlciB0aGF0IG9uZSBjb21wbGV0ZXMgKi9cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFfdGhpcy5zZW5kUmVxdWVzdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuc2VuZEFueVBlbmRpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgc2VuZFJlcXVlc3QuZXhlYygpO1xuICAgIH07XG4gICAgQ29tZXRUcmFuc3BvcnQucHJvdG90eXBlLnJlY3YgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIC8qIGRvIG5vdGhpbmcgaWYgdGhlcmUgaXMgYW4gYWN0aXZlIHJlcXVlc3QsIHdoaWNoIG1pZ2h0IGJlIHN0cmVhbWluZyAqL1xuICAgICAgICBpZiAodGhpcy5yZWN2UmVxdWVzdClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgLyogSWYgd2UncmUgbm8gbG9uZ2VyIGNvbm5lY3RlZCwgZG8gbm90aGluZyAqL1xuICAgICAgICBpZiAoIXRoaXMuaXNDb25uZWN0ZWQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHZhciByZWN2UmVxdWVzdCA9ICh0aGlzLnJlY3ZSZXF1ZXN0ID0gdGhpcy5jcmVhdGVSZXF1ZXN0KHRoaXMucmVjdlVyaSwgbnVsbCwgdGhpcy5hdXRoUGFyYW1zLCBudWxsLCB0aGlzLnN0cmVhbSA/IFhIUlN0YXRlc18xLmRlZmF1bHQuUkVRX1JFQ1ZfU1RSRUFNIDogWEhSU3RhdGVzXzEuZGVmYXVsdC5SRVFfUkVDVl9QT0xMKSk7XG4gICAgICAgIHJlY3ZSZXF1ZXN0Lm9uKCdkYXRhJywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIF90aGlzLm9uRGF0YShkYXRhKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJlY3ZSZXF1ZXN0Lm9uKCdjb21wbGV0ZScsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgIF90aGlzLnJlY3ZSZXF1ZXN0ID0gbnVsbDtcbiAgICAgICAgICAgIC8qIEEgcmVxdWVzdCBjb21wbGV0aW5nIG11c3QgYmUgY29uc2lkZXJlZCBhY3Rpdml0eSwgYXMgcmVhbHRpbWUgc2VuZHNcbiAgICAgICAgICAgICAqIGhlYXJ0YmVhdHMgZXZlcnkgMTVzIHNpbmNlIGEgcmVxdWVzdCBiZWdhbiwgbm90IGV2ZXJ5IDE1cyBhYnNvbHV0ZWx5ICovXG4gICAgICAgICAgICBfdGhpcy5vbkFjdGl2aXR5KCk7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVyci5jb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8qIEEgcHJvdG9jb2wgZXJyb3IgcmVjZWl2ZWQgZnJvbSByZWFsdGltZS4gVE9ETzogb25jZSByZWFsdGltZVxuICAgICAgICAgICAgICAgICAgICAgKiBjb25zaXN0ZW50bHkgc2VuZHMgZXJyb3JzIHdyYXBwZWQgaW4gcHJvdG9jb2wgbWVzc2FnZXMsIHNob3VsZCBiZVxuICAgICAgICAgICAgICAgICAgICAgKiBhYmxlIHRvIHJlbW92ZSB0aGlzICovXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLm9uRGF0YShwcm90b2NvbE1lc3NhZ2VGcm9tUmF3RXJyb3IoZXJyKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvKiBBIG5ldHdvcmsveGhyIGVycm9yLiBEb24ndCBib3RoZXIgd3JhcHBpbmcgaW4gYSBwcm90b2NvbCBtZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICAgKiBqdXN0IGRpc2Nvbm5lY3QgdGhlIHRyYW5zcG9ydCAqL1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5kaXNjb25uZWN0KGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBsYXRmb3JtXzEuZGVmYXVsdC5Db25maWcubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF90aGlzLnJlY3YoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmVjdlJlcXVlc3QuZXhlYygpO1xuICAgIH07XG4gICAgQ29tZXRUcmFuc3BvcnQucHJvdG90eXBlLm9uRGF0YSA9IGZ1bmN0aW9uIChyZXNwb25zZURhdGEpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBpdGVtcyA9IHRoaXMuZGVjb2RlUmVzcG9uc2UocmVzcG9uc2VEYXRhKTtcbiAgICAgICAgICAgIGlmIChpdGVtcyAmJiBpdGVtcy5sZW5ndGgpXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vblByb3RvY29sTWVzc2FnZShwcm90b2NvbG1lc3NhZ2VfMS5kZWZhdWx0LmZyb21EZXNlcmlhbGl6ZWQoaXRlbXNbaV0pKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfRVJST1IsICdDb21ldFRyYW5zcG9ydC5vbkRhdGEoKScsICdVbmV4cGVjdGVkIGV4Y2VwdGlvbiBoYW5kaW5nIGNoYW5uZWwgZXZlbnQ6ICcgKyBlLnN0YWNrKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQ29tZXRUcmFuc3BvcnQucHJvdG90eXBlLmVuY29kZVJlcXVlc3QgPSBmdW5jdGlvbiAocmVxdWVzdEl0ZW1zKSB7XG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShyZXF1ZXN0SXRlbXMpO1xuICAgIH07XG4gICAgQ29tZXRUcmFuc3BvcnQucHJvdG90eXBlLmRlY29kZVJlc3BvbnNlID0gZnVuY3Rpb24gKHJlc3BvbnNlRGF0YSkge1xuICAgICAgICBpZiAodHlwZW9mIHJlc3BvbnNlRGF0YSA9PSAnc3RyaW5nJylcbiAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKHJlc3BvbnNlRGF0YSk7XG4gICAgICAgIHJldHVybiByZXNwb25zZURhdGE7XG4gICAgfTtcbiAgICByZXR1cm4gQ29tZXRUcmFuc3BvcnQ7XG59KHRyYW5zcG9ydF8xLmRlZmF1bHQpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IENvbWV0VHJhbnNwb3J0O1xuXG5cbi8qKiovIH0pLFxuLyogMTMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxudmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuXG5cbi8qKiovIH0pLFxuLyogMTQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciB0c2xpYl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciBwbGF0Zm9ybV8xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygzKSk7XG52YXIgVXRpbHMgPSB0c2xpYl8xLl9faW1wb3J0U3RhcihfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKTtcbnZhciBsb2dnZXJfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oMikpO1xudmFyIGF1dGhfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oMTcpKTtcbnZhciBIdHRwTWV0aG9kc18xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygxOCkpO1xudmFyIGVycm9yaW5mb18xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcbmZ1bmN0aW9uIHdpdGhBdXRoRGV0YWlscyhyZXN0LCBoZWFkZXJzLCBwYXJhbXMsIGVyckNhbGxiYWNrLCBvcENhbGxiYWNrKSB7XG4gICAgaWYgKHJlc3QuaHR0cC5zdXBwb3J0c0F1dGhIZWFkZXJzKSB7XG4gICAgICAgIHJlc3QuYXV0aC5nZXRBdXRoSGVhZGVycyhmdW5jdGlvbiAoZXJyLCBhdXRoSGVhZGVycykge1xuICAgICAgICAgICAgaWYgKGVycilcbiAgICAgICAgICAgICAgICBlcnJDYWxsYmFjayhlcnIpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIG9wQ2FsbGJhY2soVXRpbHMubWl4aW4oYXV0aEhlYWRlcnMsIGhlYWRlcnMpLCBwYXJhbXMpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJlc3QuYXV0aC5nZXRBdXRoUGFyYW1zKGZ1bmN0aW9uIChlcnIsIGF1dGhQYXJhbXMpIHtcbiAgICAgICAgICAgIGlmIChlcnIpXG4gICAgICAgICAgICAgICAgZXJyQ2FsbGJhY2soZXJyKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBvcENhbGxiYWNrKGhlYWRlcnMsIFV0aWxzLm1peGluKGF1dGhQYXJhbXMsIHBhcmFtcykpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5mdW5jdGlvbiB1bmVudmVsb3BlKGNhbGxiYWNrLCBmb3JtYXQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGVyciwgYm9keSwgb3V0ZXJIZWFkZXJzLCB1bnBhY2tlZCwgb3V0ZXJTdGF0dXNDb2RlKSB7XG4gICAgICAgIGlmIChlcnIgJiYgIWJvZHkpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF1bnBhY2tlZCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBib2R5ID0gVXRpbHMuZGVjb2RlQm9keShib2R5LCBmb3JtYXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoVXRpbHMuaXNFcnJvckluZm9PclBhcnRpYWxFcnJvckluZm8oZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhuZXcgZXJyb3JpbmZvXzEuUGFydGlhbEVycm9ySW5mbyhVdGlscy5pbnNwZWN0RXJyb3IoZSksIG51bGwpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghYm9keSkge1xuICAgICAgICAgICAgY2FsbGJhY2sobmV3IGVycm9yaW5mb18xLlBhcnRpYWxFcnJvckluZm8oJ3VuZW52ZWxvcGUoKTogUmVzcG9uc2UgYm9keSBpcyBtaXNzaW5nJywgbnVsbCkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBfYSA9IGJvZHksIHdyYXBwZWRTdGF0dXNDb2RlID0gX2Euc3RhdHVzQ29kZSwgcmVzcG9uc2UgPSBfYS5yZXNwb25zZSwgd3JhcHBlZEhlYWRlcnMgPSBfYS5oZWFkZXJzO1xuICAgICAgICBpZiAod3JhcHBlZFN0YXR1c0NvZGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLyogRW52ZWxvcGUgYWxyZWFkeSB1bndyYXBwZWQgYnkgdGhlIHRyYW5zcG9ydCAqL1xuICAgICAgICAgICAgY2FsbGJhY2soZXJyLCBib2R5LCBvdXRlckhlYWRlcnMsIHRydWUsIG91dGVyU3RhdHVzQ29kZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHdyYXBwZWRTdGF0dXNDb2RlIDwgMjAwIHx8IHdyYXBwZWRTdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICAgICAgLyogaGFuZGxlIHdyYXBwZWQgZXJyb3JzICovXG4gICAgICAgICAgICB2YXIgd3JhcHBlZEVyciA9IChyZXNwb25zZSAmJiByZXNwb25zZS5lcnJvcikgfHwgZXJyO1xuICAgICAgICAgICAgaWYgKCF3cmFwcGVkRXJyKSB7XG4gICAgICAgICAgICAgICAgd3JhcHBlZEVyciA9IG5ldyBFcnJvcignRXJyb3IgaW4gdW5lbnZlbG9waW5nICcgKyBib2R5KTtcbiAgICAgICAgICAgICAgICB3cmFwcGVkRXJyLnN0YXR1c0NvZGUgPSB3cmFwcGVkU3RhdHVzQ29kZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhbGxiYWNrKHdyYXBwZWRFcnIsIHJlc3BvbnNlLCB3cmFwcGVkSGVhZGVycywgdHJ1ZSwgd3JhcHBlZFN0YXR1c0NvZGUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNhbGxiYWNrKGVyciwgcmVzcG9uc2UsIHdyYXBwZWRIZWFkZXJzLCB0cnVlLCB3cmFwcGVkU3RhdHVzQ29kZSk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHBhcmFtU3RyaW5nKHBhcmFtcykge1xuICAgIHZhciBwYXJhbVBhaXJzID0gW107XG4gICAgaWYgKHBhcmFtcykge1xuICAgICAgICBmb3IgKHZhciBuZWVkbGUgaW4gcGFyYW1zKSB7XG4gICAgICAgICAgICBwYXJhbVBhaXJzLnB1c2gobmVlZGxlICsgJz0nICsgcGFyYW1zW25lZWRsZV0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwYXJhbVBhaXJzLmpvaW4oJyYnKTtcbn1cbmZ1bmN0aW9uIHVybEZyb21QYXRoQW5kUGFyYW1zKHBhdGgsIHBhcmFtcykge1xuICAgIHJldHVybiBwYXRoICsgKHBhcmFtcyA/ICc/JyA6ICcnKSArIHBhcmFtU3RyaW5nKHBhcmFtcyk7XG59XG5mdW5jdGlvbiBsb2dSZXNwb25zZUhhbmRsZXIoY2FsbGJhY2ssIG1ldGhvZCwgcGF0aCwgcGFyYW1zKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChlcnIsIGJvZHksIGhlYWRlcnMsIHVucGFja2VkLCBzdGF0dXNDb2RlKSB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01JQ1JPLCAnUmVzb3VyY2UuJyArIG1ldGhvZCArICcoKScsICdSZWNlaXZlZCBFcnJvcjsgJyArIHVybEZyb21QYXRoQW5kUGFyYW1zKHBhdGgsIHBhcmFtcykgKyAnOyBFcnJvcjogJyArIFV0aWxzLmluc3BlY3RFcnJvcihlcnIpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01JQ1JPLCAnUmVzb3VyY2UuJyArIG1ldGhvZCArICcoKScsICdSZWNlaXZlZDsgJyArXG4gICAgICAgICAgICAgICAgdXJsRnJvbVBhdGhBbmRQYXJhbXMocGF0aCwgcGFyYW1zKSArXG4gICAgICAgICAgICAgICAgJzsgSGVhZGVyczogJyArXG4gICAgICAgICAgICAgICAgcGFyYW1TdHJpbmcoaGVhZGVycykgK1xuICAgICAgICAgICAgICAgICc7IFN0YXR1c0NvZGU6ICcgK1xuICAgICAgICAgICAgICAgIHN0YXR1c0NvZGUgK1xuICAgICAgICAgICAgICAgICc7IEJvZHk6ICcgK1xuICAgICAgICAgICAgICAgIChwbGF0Zm9ybV8xLmRlZmF1bHQuQnVmZmVyVXRpbHMuaXNCdWZmZXIoYm9keSkgPyBib2R5LnRvU3RyaW5nKCkgOiBib2R5KSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhlcnIsIGJvZHksIGhlYWRlcnMsIHVucGFja2VkLCBzdGF0dXNDb2RlKTtcbiAgICAgICAgfVxuICAgIH07XG59XG52YXIgUmVzb3VyY2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUmVzb3VyY2UoKSB7XG4gICAgfVxuICAgIFJlc291cmNlLmdldCA9IGZ1bmN0aW9uIChyZXN0LCBwYXRoLCBoZWFkZXJzLCBwYXJhbXMsIGVudmVsb3BlLCBjYWxsYmFjaykge1xuICAgICAgICBSZXNvdXJjZS5kbyhIdHRwTWV0aG9kc18xLmRlZmF1bHQuR2V0LCByZXN0LCBwYXRoLCBudWxsLCBoZWFkZXJzLCBwYXJhbXMsIGVudmVsb3BlLCBjYWxsYmFjayk7XG4gICAgfTtcbiAgICBSZXNvdXJjZS5kZWxldGUgPSBmdW5jdGlvbiAocmVzdCwgcGF0aCwgaGVhZGVycywgcGFyYW1zLCBlbnZlbG9wZSwgY2FsbGJhY2spIHtcbiAgICAgICAgUmVzb3VyY2UuZG8oSHR0cE1ldGhvZHNfMS5kZWZhdWx0LkRlbGV0ZSwgcmVzdCwgcGF0aCwgbnVsbCwgaGVhZGVycywgcGFyYW1zLCBlbnZlbG9wZSwgY2FsbGJhY2spO1xuICAgIH07XG4gICAgUmVzb3VyY2UucG9zdCA9IGZ1bmN0aW9uIChyZXN0LCBwYXRoLCBib2R5LCBoZWFkZXJzLCBwYXJhbXMsIGVudmVsb3BlLCBjYWxsYmFjaykge1xuICAgICAgICBSZXNvdXJjZS5kbyhIdHRwTWV0aG9kc18xLmRlZmF1bHQuUG9zdCwgcmVzdCwgcGF0aCwgYm9keSwgaGVhZGVycywgcGFyYW1zLCBlbnZlbG9wZSwgY2FsbGJhY2spO1xuICAgIH07XG4gICAgUmVzb3VyY2UucGF0Y2ggPSBmdW5jdGlvbiAocmVzdCwgcGF0aCwgYm9keSwgaGVhZGVycywgcGFyYW1zLCBlbnZlbG9wZSwgY2FsbGJhY2spIHtcbiAgICAgICAgUmVzb3VyY2UuZG8oSHR0cE1ldGhvZHNfMS5kZWZhdWx0LlBhdGNoLCByZXN0LCBwYXRoLCBib2R5LCBoZWFkZXJzLCBwYXJhbXMsIGVudmVsb3BlLCBjYWxsYmFjayk7XG4gICAgfTtcbiAgICBSZXNvdXJjZS5wdXQgPSBmdW5jdGlvbiAocmVzdCwgcGF0aCwgYm9keSwgaGVhZGVycywgcGFyYW1zLCBlbnZlbG9wZSwgY2FsbGJhY2spIHtcbiAgICAgICAgUmVzb3VyY2UuZG8oSHR0cE1ldGhvZHNfMS5kZWZhdWx0LlB1dCwgcmVzdCwgcGF0aCwgYm9keSwgaGVhZGVycywgcGFyYW1zLCBlbnZlbG9wZSwgY2FsbGJhY2spO1xuICAgIH07XG4gICAgUmVzb3VyY2UuZG8gPSBmdW5jdGlvbiAobWV0aG9kLCByZXN0LCBwYXRoLCBib2R5LCBoZWFkZXJzLCBwYXJhbXMsIGVudmVsb3BlLCBjYWxsYmFjaykge1xuICAgICAgICBpZiAobG9nZ2VyXzEuZGVmYXVsdC5zaG91bGRMb2cobG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlDUk8pKSB7XG4gICAgICAgICAgICBjYWxsYmFjayA9IGxvZ1Jlc3BvbnNlSGFuZGxlcihjYWxsYmFjaywgbWV0aG9kLCBwYXRoLCBwYXJhbXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbnZlbG9wZSkge1xuICAgICAgICAgICAgY2FsbGJhY2sgPSBjYWxsYmFjayAmJiB1bmVudmVsb3BlKGNhbGxiYWNrLCBlbnZlbG9wZSk7XG4gICAgICAgICAgICAocGFyYW1zID0gcGFyYW1zIHx8IHt9KVsnZW52ZWxvcGUnXSA9IGVudmVsb3BlO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGRvUmVxdWVzdChoZWFkZXJzLCBwYXJhbXMpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIGlmIChsb2dnZXJfMS5kZWZhdWx0LnNob3VsZExvZyhsb2dnZXJfMS5kZWZhdWx0LkxPR19NSUNSTykpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19NSUNSTywgJ1Jlc291cmNlLicgKyBtZXRob2QgKyAnKCknLCAnU2VuZGluZzsgJyArIHVybEZyb21QYXRoQW5kUGFyYW1zKHBhdGgsIHBhcmFtcykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGxvZ2dlcl8xLmRlZmF1bHQuc2hvdWxkTG9nKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01JQ1JPKSkge1xuICAgICAgICAgICAgICAgIHZhciBkZWNvZGVkQm9keSA9IGJvZHk7XG4gICAgICAgICAgICAgICAgaWYgKCgoX2EgPSBoZWFkZXJzWydjb250ZW50LXR5cGUnXSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmluZGV4T2YoJ21zZ3BhY2snKSkgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWNvZGVkQm9keSA9IHBsYXRmb3JtXzEuZGVmYXVsdC5Db25maWcubXNncGFjay5kZWNvZGUoYm9keSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGRlY29kZUVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlDUk8sICdSZXNvdXJjZS4nICsgbWV0aG9kICsgJygpJywgJ1NlbmRpbmcgTXNnUGFjayBEZWNvZGluZyBFcnJvcjogJyArIFV0aWxzLmluc3BlY3RFcnJvcihkZWNvZGVFcnIpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19NSUNSTywgJ1Jlc291cmNlLicgKyBtZXRob2QgKyAnKCknLCAnU2VuZGluZzsgJyArIHVybEZyb21QYXRoQW5kUGFyYW1zKHBhdGgsIHBhcmFtcykgKyAnOyBCb2R5OiAnICsgZGVjb2RlZEJvZHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzdC5odHRwLmRvKG1ldGhvZCwgcmVzdCwgcGF0aCwgaGVhZGVycywgYm9keSwgcGFyYW1zLCBmdW5jdGlvbiAoZXJyLCByZXMsIGhlYWRlcnMsIHVucGFja2VkLCBzdGF0dXNDb2RlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVyciAmJiBhdXRoXzEuZGVmYXVsdC5pc1Rva2VuRXJyKGVycikpIHtcbiAgICAgICAgICAgICAgICAgICAgLyogdG9rZW4gaGFzIGV4cGlyZWQsIHNvIGdldCBhIG5ldyBvbmUgKi9cbiAgICAgICAgICAgICAgICAgICAgcmVzdC5hdXRoLmF1dGhvcml6ZShudWxsLCBudWxsLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvKiByZXRyeSAuLi4gKi9cbiAgICAgICAgICAgICAgICAgICAgICAgIHdpdGhBdXRoRGV0YWlscyhyZXN0LCBoZWFkZXJzLCBwYXJhbXMsIGNhbGxiYWNrLCBkb1JlcXVlc3QpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnIsIHJlcywgaGVhZGVycywgdW5wYWNrZWQsIHN0YXR1c0NvZGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgd2l0aEF1dGhEZXRhaWxzKHJlc3QsIGhlYWRlcnMsIHBhcmFtcywgY2FsbGJhY2ssIGRvUmVxdWVzdCk7XG4gICAgfTtcbiAgICByZXR1cm4gUmVzb3VyY2U7XG59KCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gUmVzb3VyY2U7XG5cblxuLyoqKi8gfSksXG4vKiAxNSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHRzbGliXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xudmFyIGxvZ2dlcl8xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygyKSk7XG52YXIgcGxhdGZvcm1fMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oMykpO1xudmFyIG1lc3NhZ2VfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oOSkpO1xudmFyIFV0aWxzID0gdHNsaWJfMS5fX2ltcG9ydFN0YXIoX193ZWJwYWNrX3JlcXVpcmVfXygxKSk7XG5mdW5jdGlvbiB0b0FjdGlvblZhbHVlKGFjdGlvblN0cmluZykge1xuICAgIHJldHVybiBQcmVzZW5jZU1lc3NhZ2UuQWN0aW9ucy5pbmRleE9mKGFjdGlvblN0cmluZyk7XG59XG52YXIgUHJlc2VuY2VNZXNzYWdlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFByZXNlbmNlTWVzc2FnZSgpIHtcbiAgICB9XG4gICAgLyogUmV0dXJucyB3aGV0aGVyIHRoaXMgcHJlc2VuY2VNZXNzYWdlIGlzIHN5bnRoZXNpemVkLCBpLmUuIHdhcyBub3QgYWN0dWFsbHlcbiAgICAgKiBzZW50IGJ5IHRoZSBjb25uZWN0aW9uICh1c3VhbGx5IG1lYW5zIGEgbGVhdmUgZXZlbnQgc2VudCAxNXMgYWZ0ZXIgYVxuICAgICAqIGRpc2Nvbm5lY3Rpb24pLiBUaGlzIGlzIHVzZWZ1bCBiZWNhdXNlIHN5bnRoZXNpemVkIG1lc3NhZ2VzIGNhbm5vdCBiZVxuICAgICAqIGNvbXBhcmVkIGZvciBuZXduZXNzIGJ5IGlkIGxleGljb2dyYXBoaWNhbGx5IC0gUlRQMmIxXG4gICAgICovXG4gICAgUHJlc2VuY2VNZXNzYWdlLnByb3RvdHlwZS5pc1N5bnRoZXNpemVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuaWQgfHwgIXRoaXMuY29ubmVjdGlvbklkKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5pZC5zdWJzdHJpbmcodGhpcy5jb25uZWN0aW9uSWQubGVuZ3RoLCAwKSAhPT0gdGhpcy5jb25uZWN0aW9uSWQ7XG4gICAgfTtcbiAgICAvKiBSVFAyYjIgKi9cbiAgICBQcmVzZW5jZU1lc3NhZ2UucHJvdG90eXBlLnBhcnNlSWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5pZClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigncGFyc2VJZCgpOiBQcmVzZW5jZSBtZXNzYWdlIGRvZXMgbm90IGNvbnRhaW4gYW4gaWQnKTtcbiAgICAgICAgdmFyIHBhcnRzID0gdGhpcy5pZC5zcGxpdCgnOicpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY29ubmVjdGlvbklkOiBwYXJ0c1swXSxcbiAgICAgICAgICAgIG1zZ1NlcmlhbDogcGFyc2VJbnQocGFydHNbMV0sIDEwKSxcbiAgICAgICAgICAgIGluZGV4OiBwYXJzZUludChwYXJ0c1syXSwgMTApLFxuICAgICAgICB9O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogT3ZlcmxvYWQgdG9KU09OKCkgdG8gaW50ZXJjZXB0IEpTT04uc3RyaW5naWZ5KClcbiAgICAgKiBAcmV0dXJuIHsqfVxuICAgICAqL1xuICAgIFByZXNlbmNlTWVzc2FnZS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvKiBlbmNvZGUgZGF0YSB0byBiYXNlNjQgaWYgcHJlc2VudCBhbmQgd2UncmUgcmV0dXJuaW5nIHJlYWwgSlNPTjtcbiAgICAgICAgICogYWx0aG91Z2ggbXNncGFjayBjYWxscyB0b0pTT04oKSwgd2Uga25vdyBpdCBpcyBhIHN0cmluZ2lmeSgpXG4gICAgICAgICAqIGNhbGwgaWYgaXQgaGFzIGEgbm9uLWVtcHR5IGFyZ3VtZW50cyBsaXN0ICovXG4gICAgICAgIHZhciBkYXRhID0gdGhpcy5kYXRhO1xuICAgICAgICB2YXIgZW5jb2RpbmcgPSB0aGlzLmVuY29kaW5nO1xuICAgICAgICBpZiAoZGF0YSAmJiBwbGF0Zm9ybV8xLmRlZmF1bHQuQnVmZmVyVXRpbHMuaXNCdWZmZXIoZGF0YSkpIHtcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIC8qIHN0cmluZ2lmeSBjYWxsICovXG4gICAgICAgICAgICAgICAgZW5jb2RpbmcgPSBlbmNvZGluZyA/IGVuY29kaW5nICsgJy9iYXNlNjQnIDogJ2Jhc2U2NCc7XG4gICAgICAgICAgICAgICAgZGF0YSA9IHBsYXRmb3JtXzEuZGVmYXVsdC5CdWZmZXJVdGlscy5iYXNlNjRFbmNvZGUoZGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvKiBDYWxsZWQgYnkgbXNncGFjay4gdG9CdWZmZXIgcmV0dXJucyBhIGRhdGF0eXBlIHVuZGVyc3RhbmRhYmxlIGJ5XG4gICAgICAgICAgICAgICAgICogdGhhdCBwbGF0Zm9ybSdzIG1zZ3BhY2sgaW1wbGVtZW50YXRpb24gKEJ1ZmZlciBpbiBub2RlLCBVaW50OEFycmF5XG4gICAgICAgICAgICAgICAgICogaW4gYnJvd3NlcnMpICovXG4gICAgICAgICAgICAgICAgZGF0YSA9IHBsYXRmb3JtXzEuZGVmYXVsdC5CdWZmZXJVdGlscy50b0J1ZmZlcihkYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaWQ6IHRoaXMuaWQsXG4gICAgICAgICAgICBjbGllbnRJZDogdGhpcy5jbGllbnRJZCxcbiAgICAgICAgICAgIC8qIENvbnZlcnQgcHJlc2VuY2UgYWN0aW9uIGJhY2sgdG8gYW4gaW50IGZvciBzZW5kaW5nIHRvIEFibHkgKi9cbiAgICAgICAgICAgIGFjdGlvbjogdG9BY3Rpb25WYWx1ZSh0aGlzLmFjdGlvbiksXG4gICAgICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICAgICAgZW5jb2Rpbmc6IGVuY29kaW5nLFxuICAgICAgICAgICAgZXh0cmFzOiB0aGlzLmV4dHJhcyxcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIFByZXNlbmNlTWVzc2FnZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSAnW1ByZXNlbmNlTWVzc2FnZSc7XG4gICAgICAgIHJlc3VsdCArPSAnOyBhY3Rpb249JyArIHRoaXMuYWN0aW9uO1xuICAgICAgICBpZiAodGhpcy5pZClcbiAgICAgICAgICAgIHJlc3VsdCArPSAnOyBpZD0nICsgdGhpcy5pZDtcbiAgICAgICAgaWYgKHRoaXMudGltZXN0YW1wKVxuICAgICAgICAgICAgcmVzdWx0ICs9ICc7IHRpbWVzdGFtcD0nICsgdGhpcy50aW1lc3RhbXA7XG4gICAgICAgIGlmICh0aGlzLmNsaWVudElkKVxuICAgICAgICAgICAgcmVzdWx0ICs9ICc7IGNsaWVudElkPScgKyB0aGlzLmNsaWVudElkO1xuICAgICAgICBpZiAodGhpcy5jb25uZWN0aW9uSWQpXG4gICAgICAgICAgICByZXN1bHQgKz0gJzsgY29ubmVjdGlvbklkPScgKyB0aGlzLmNvbm5lY3Rpb25JZDtcbiAgICAgICAgaWYgKHRoaXMuZW5jb2RpbmcpXG4gICAgICAgICAgICByZXN1bHQgKz0gJzsgZW5jb2Rpbmc9JyArIHRoaXMuZW5jb2Rpbmc7XG4gICAgICAgIGlmICh0aGlzLmRhdGEpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5kYXRhID09ICdzdHJpbmcnKVxuICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnOyBkYXRhPScgKyB0aGlzLmRhdGE7XG4gICAgICAgICAgICBlbHNlIGlmIChwbGF0Zm9ybV8xLmRlZmF1bHQuQnVmZmVyVXRpbHMuaXNCdWZmZXIodGhpcy5kYXRhKSlcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gJzsgZGF0YSAoYnVmZmVyKT0nICsgcGxhdGZvcm1fMS5kZWZhdWx0LkJ1ZmZlclV0aWxzLmJhc2U2NEVuY29kZSh0aGlzLmRhdGEpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnOyBkYXRhIChqc29uKT0nICsgSlNPTi5zdHJpbmdpZnkodGhpcy5kYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5leHRyYXMpIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSAnOyBleHRyYXM9JyArIEpTT04uc3RyaW5naWZ5KHRoaXMuZXh0cmFzKTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQgKz0gJ10nO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gICAgUHJlc2VuY2VNZXNzYWdlLmZyb21SZXNwb25zZUJvZHkgPSBmdW5jdGlvbiAoYm9keSwgb3B0aW9ucywgZm9ybWF0KSB7XG4gICAgICAgIHZhciBtZXNzYWdlcyA9IFtdO1xuICAgICAgICBpZiAoZm9ybWF0KSB7XG4gICAgICAgICAgICBib2R5ID0gVXRpbHMuZGVjb2RlQm9keShib2R5LCBmb3JtYXQpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm9keS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIG1zZyA9IChtZXNzYWdlc1tpXSA9IFByZXNlbmNlTWVzc2FnZS5mcm9tVmFsdWVzKGJvZHlbaV0sIHRydWUpKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgUHJlc2VuY2VNZXNzYWdlLmRlY29kZShtc2csIG9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19FUlJPUiwgJ1ByZXNlbmNlTWVzc2FnZS5mcm9tUmVzcG9uc2VCb2R5KCknLCBlLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlcztcbiAgICB9O1xuICAgIFByZXNlbmNlTWVzc2FnZS5mcm9tVmFsdWVzID0gZnVuY3Rpb24gKHZhbHVlcywgc3RyaW5naWZ5QWN0aW9uKSB7XG4gICAgICAgIGlmIChzdHJpbmdpZnlBY3Rpb24pIHtcbiAgICAgICAgICAgIHZhbHVlcy5hY3Rpb24gPSBQcmVzZW5jZU1lc3NhZ2UuQWN0aW9uc1t2YWx1ZXMuYWN0aW9uXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihuZXcgUHJlc2VuY2VNZXNzYWdlKCksIHZhbHVlcyk7XG4gICAgfTtcbiAgICBQcmVzZW5jZU1lc3NhZ2UuZnJvbVZhbHVlc0FycmF5ID0gZnVuY3Rpb24gKHZhbHVlcykge1xuICAgICAgICB2YXIgY291bnQgPSB2YWx1ZXMubGVuZ3RoLCByZXN1bHQgPSBuZXcgQXJyYXkoY291bnQpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvdW50OyBpKyspXG4gICAgICAgICAgICByZXN1bHRbaV0gPSBQcmVzZW5jZU1lc3NhZ2UuZnJvbVZhbHVlcyh2YWx1ZXNbaV0pO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gICAgUHJlc2VuY2VNZXNzYWdlLmZyb21FbmNvZGVkID0gZnVuY3Rpb24gKGVuY29kZWQsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIG1zZyA9IFByZXNlbmNlTWVzc2FnZS5mcm9tVmFsdWVzKGVuY29kZWQsIHRydWUpO1xuICAgICAgICAvKiBpZiBkZWNvZGluZyBmYWlscyBhdCBhbnkgcG9pbnQsIGNhdGNoIGFuZCByZXR1cm4gdGhlIG1lc3NhZ2UgZGVjb2RlZCB0b1xuICAgICAgICAgKiB0aGUgZnVsbGVzdCBleHRlbnQgcG9zc2libGUgKi9cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIFByZXNlbmNlTWVzc2FnZS5kZWNvZGUobXNnLCBvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCA/IG9wdGlvbnMgOiB7fSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX0VSUk9SLCAnUHJlc2VuY2VNZXNzYWdlLmZyb21FbmNvZGVkKCknLCBlLnRvU3RyaW5nKCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtc2c7XG4gICAgfTtcbiAgICBQcmVzZW5jZU1lc3NhZ2UuZnJvbUVuY29kZWRBcnJheSA9IGZ1bmN0aW9uIChlbmNvZGVkQXJyYXksIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIGVuY29kZWRBcnJheS5tYXAoZnVuY3Rpb24gKGVuY29kZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBQcmVzZW5jZU1lc3NhZ2UuZnJvbUVuY29kZWQoZW5jb2RlZCwgb3B0aW9ucyk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgUHJlc2VuY2VNZXNzYWdlLmZyb21EYXRhID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBQcmVzZW5jZU1lc3NhZ2UpIHtcbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBQcmVzZW5jZU1lc3NhZ2UuZnJvbVZhbHVlcyh7XG4gICAgICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFByZXNlbmNlTWVzc2FnZS5BY3Rpb25zID0gWydhYnNlbnQnLCAncHJlc2VudCcsICdlbnRlcicsICdsZWF2ZScsICd1cGRhdGUnXTtcbiAgICBQcmVzZW5jZU1lc3NhZ2UuZW5jb2RlID0gbWVzc2FnZV8xLmRlZmF1bHQuZW5jb2RlO1xuICAgIFByZXNlbmNlTWVzc2FnZS5kZWNvZGUgPSBtZXNzYWdlXzEuZGVmYXVsdC5kZWNvZGU7XG4gICAgUHJlc2VuY2VNZXNzYWdlLmdldE1lc3NhZ2VzU2l6ZSA9IG1lc3NhZ2VfMS5kZWZhdWx0LmdldE1lc3NhZ2VzU2l6ZTtcbiAgICByZXR1cm4gUHJlc2VuY2VNZXNzYWdlO1xufSgpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IFByZXNlbmNlTWVzc2FnZTtcblxuXG4vKioqLyB9KSxcbi8qIDE2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKGdsb2JhbCkge1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHRzbGliXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xudmFyIFV0aWxzID0gdHNsaWJfMS5fX2ltcG9ydFN0YXIoX193ZWJwYWNrX3JlcXVpcmVfXygxKSk7XG52YXIgZXZlbnRlbWl0dGVyXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKDcpKTtcbnZhciBlcnJvcmluZm9fMSA9IHRzbGliXzEuX19pbXBvcnRTdGFyKF9fd2VicGFja19yZXF1aXJlX18oNCkpO1xudmFyIGxvZ2dlcl8xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygyKSk7XG52YXIgZGVmYXVsdHNfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oOCkpO1xudmFyIFhIUlN0YXRlc18xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygyMSkpO1xudmFyIHBsYXRmb3JtXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKDMpKTtcbmZ1bmN0aW9uIGlzQWJseUVycm9yKHJlc3BvbnNlQm9keSwgaGVhZGVycykge1xuICAgIHJldHVybiBVdGlscy5hcnJJbihVdGlscy5hbGxUb0xvd2VyQ2FzZShVdGlscy5rZXlzQXJyYXkoaGVhZGVycykpLCAneC1hYmx5LWVycm9yY29kZScpO1xufVxuZnVuY3Rpb24gZ2V0QWJseUVycm9yKHJlc3BvbnNlQm9keSwgaGVhZGVycykge1xuICAgIGlmIChpc0FibHlFcnJvcihyZXNwb25zZUJvZHksIGhlYWRlcnMpKSB7XG4gICAgICAgIHJldHVybiByZXNwb25zZUJvZHkuZXJyb3IgJiYgZXJyb3JpbmZvXzEuZGVmYXVsdC5mcm9tVmFsdWVzKHJlc3BvbnNlQm9keS5lcnJvcik7XG4gICAgfVxufVxudmFyIG5vb3AgPSBmdW5jdGlvbiAoKSB7IH07XG52YXIgaWRDb3VudGVyID0gMDtcbnZhciBwZW5kaW5nUmVxdWVzdHMgPSB7fTtcbnZhciBpc0lFID0gdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2xvYmFsLlhEb21haW5SZXF1ZXN0O1xuZnVuY3Rpb24gaWVWZXJzaW9uKCkge1xuICAgIHZhciBtYXRjaCA9IG5hdmlnYXRvci51c2VyQWdlbnQudG9TdHJpbmcoKS5tYXRjaCgvTVNJRVxccyhbXFxkLl0rKS8pO1xuICAgIHJldHVybiBtYXRjaCAmJiBOdW1iZXIobWF0Y2hbMV0pO1xufVxuZnVuY3Rpb24gbmVlZEpzb25FbnZlbG9wZSgpIHtcbiAgICAvKiBJRSAxMCB4aHIgYnVnOiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xNjMyMDMzOSAqL1xuICAgIHZhciB2ZXJzaW9uO1xuICAgIHJldHVybiBpc0lFICYmICh2ZXJzaW9uID0gaWVWZXJzaW9uKCkpICYmIHZlcnNpb24gPT09IDEwO1xufVxuZnVuY3Rpb24gZ2V0SGVhZGVyKHhociwgaGVhZGVyKSB7XG4gICAgcmV0dXJuIHhoci5nZXRSZXNwb25zZUhlYWRlciAmJiB4aHIuZ2V0UmVzcG9uc2VIZWFkZXIoaGVhZGVyKTtcbn1cbi8qIFNhZmFyaSBteXN0ZXJpb3VzbHkgcmV0dXJucyAnSWRlbnRpdHknIGZvciB0cmFuc2Zlci1lbmNvZGluZyB3aGVuIGluIGZhY3RcbiAqIGl0IGlzICdjaHVua2VkJy4gU28gaW5zdGVhZCwgZGVjaWRlIHRoYXQgaXQgaXMgY2h1bmtlZCB3aGVuXG4gKiB0cmFuc2Zlci1lbmNvZGluZyBpcyBwcmVzZW50IG9yIGNvbnRlbnQtbGVuZ3RoIGlzIGFic2VudC4gICgnb3InIGJlY2F1c2VcbiAqIHdoZW4gdXNpbmcgaHR0cDIgc3RyZWFtaW5nLCB0aGVyZSdzIG5vIHRyYW5zZmVyLWVuY29kaW5nIGhlYWRlciwgYnV0IGNhblxuICogc3RpbGwgZGVkdWNlIHN0cmVhbWluZyBmcm9tIGxhY2sgb2YgY29udGVudC1sZW5ndGgpICovXG5mdW5jdGlvbiBpc0VuY29kaW5nQ2h1bmtlZCh4aHIpIHtcbiAgICByZXR1cm4gKHhoci5nZXRSZXNwb25zZUhlYWRlciAmJiAoeGhyLmdldFJlc3BvbnNlSGVhZGVyKCd0cmFuc2Zlci1lbmNvZGluZycpIHx8ICF4aHIuZ2V0UmVzcG9uc2VIZWFkZXIoJ2NvbnRlbnQtbGVuZ3RoJykpKTtcbn1cbmZ1bmN0aW9uIGdldEhlYWRlcnNBc09iamVjdCh4aHIpIHtcbiAgICB2YXIgaGVhZGVyUGFpcnMgPSBVdGlscy50cmltKHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSkuc3BsaXQoJ1xcclxcbicpO1xuICAgIHZhciBoZWFkZXJzID0ge307XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBoZWFkZXJQYWlycy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgcGFydHMgPSBoZWFkZXJQYWlyc1tpXS5zcGxpdCgnOicpLm1hcChVdGlscy50cmltKTtcbiAgICAgICAgaGVhZGVyc1twYXJ0c1swXS50b0xvd2VyQ2FzZSgpXSA9IHBhcnRzWzFdO1xuICAgIH1cbiAgICByZXR1cm4gaGVhZGVycztcbn1cbnZhciBYSFJSZXF1ZXN0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFhIUlJlcXVlc3QsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gWEhSUmVxdWVzdCh1cmksIGhlYWRlcnMsIHBhcmFtcywgYm9keSwgcmVxdWVzdE1vZGUsIHRpbWVvdXRzLCBtZXRob2QpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgcGFyYW1zID0gcGFyYW1zIHx8IHt9O1xuICAgICAgICBwYXJhbXMucm5kID0gVXRpbHMuY2hlYXBSYW5kU3RyKCk7XG4gICAgICAgIGlmIChuZWVkSnNvbkVudmVsb3BlKCkgJiYgIXBhcmFtcy5lbnZlbG9wZSlcbiAgICAgICAgICAgIHBhcmFtcy5lbnZlbG9wZSA9ICdqc29uJztcbiAgICAgICAgX3RoaXMudXJpID0gdXJpICsgVXRpbHMudG9RdWVyeVN0cmluZyhwYXJhbXMpO1xuICAgICAgICBfdGhpcy5oZWFkZXJzID0gaGVhZGVycyB8fCB7fTtcbiAgICAgICAgX3RoaXMuYm9keSA9IGJvZHk7XG4gICAgICAgIF90aGlzLm1ldGhvZCA9IG1ldGhvZCA/IG1ldGhvZC50b1VwcGVyQ2FzZSgpIDogVXRpbHMuaXNFbXB0eUFyZyhib2R5KSA/ICdHRVQnIDogJ1BPU1QnO1xuICAgICAgICBfdGhpcy5yZXF1ZXN0TW9kZSA9IHJlcXVlc3RNb2RlO1xuICAgICAgICBfdGhpcy50aW1lb3V0cyA9IHRpbWVvdXRzO1xuICAgICAgICBfdGhpcy50aW1lZE91dCA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5yZXF1ZXN0Q29tcGxldGUgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuaWQgPSBTdHJpbmcoKytpZENvdW50ZXIpO1xuICAgICAgICBwZW5kaW5nUmVxdWVzdHNbX3RoaXMuaWRdID0gX3RoaXM7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgWEhSUmVxdWVzdC5jcmVhdGVSZXF1ZXN0ID0gZnVuY3Rpb24gKHVyaSwgaGVhZGVycywgcGFyYW1zLCBib2R5LCByZXF1ZXN0TW9kZSwgdGltZW91dHMsIG1ldGhvZCkge1xuICAgICAgICAvKiBYSFIgcmVxdWVzdHMgYXJlIHVzZWQgZWl0aGVyIHdpdGggdGhlIGNvbnRleHQgYmVpbmcgYSByZWFsdGltZVxuICAgICAgICAgKiB0cmFuc3BvcnQsIG9yIHdpdGggdGltZW91dHMgcGFzc2VkIGluIChmb3Igd2hlbiB1c2VkIGJ5IGEgcmVzdCBjbGllbnQpLFxuICAgICAgICAgKiBvciBjb21wbGV0ZWx5IHN0YW5kYWxvbmUuICBVc2UgdGhlIGFwcHJvcHJpYXRlIHRpbWVvdXRzIGluIGVhY2ggY2FzZSAqL1xuICAgICAgICB2YXIgX3RpbWVvdXRzID0gdGltZW91dHMgfHwgZGVmYXVsdHNfMS5kZWZhdWx0LlRJTUVPVVRTO1xuICAgICAgICByZXR1cm4gbmV3IFhIUlJlcXVlc3QodXJpLCBoZWFkZXJzLCBVdGlscy5jb3B5KHBhcmFtcyksIGJvZHksIHJlcXVlc3RNb2RlLCBfdGltZW91dHMsIG1ldGhvZCk7XG4gICAgfTtcbiAgICBYSFJSZXF1ZXN0LnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uIChlcnIsIGJvZHksIGhlYWRlcnMsIHVucGFja2VkLCBzdGF0dXNDb2RlKSB7XG4gICAgICAgIGlmICghdGhpcy5yZXF1ZXN0Q29tcGxldGUpIHtcbiAgICAgICAgICAgIHRoaXMucmVxdWVzdENvbXBsZXRlID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmICghZXJyICYmIGJvZHkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ2RhdGEnLCBib2R5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZW1pdCgnY29tcGxldGUnLCBlcnIsIGJvZHksIGhlYWRlcnMsIHVucGFja2VkLCBzdGF0dXNDb2RlKTtcbiAgICAgICAgICAgIHRoaXMuZGlzcG9zZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBYSFJSZXF1ZXN0LnByb3RvdHlwZS5hYm9ydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5kaXNwb3NlKCk7XG4gICAgfTtcbiAgICBYSFJSZXF1ZXN0LnByb3RvdHlwZS5leGVjID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgaGVhZGVycyA9IHRoaXMuaGVhZGVycztcbiAgICAgICAgdmFyIHRpbWVvdXQgPSB0aGlzLnJlcXVlc3RNb2RlID09IFhIUlN0YXRlc18xLmRlZmF1bHQuUkVRX1NFTkQgPyB0aGlzLnRpbWVvdXRzLmh0dHBSZXF1ZXN0VGltZW91dCA6IHRoaXMudGltZW91dHMucmVjdlRpbWVvdXQsIHRpbWVyID0gKHRoaXMudGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLnRpbWVkT3V0ID0gdHJ1ZTtcbiAgICAgICAgICAgIHhoci5hYm9ydCgpO1xuICAgICAgICB9LCB0aW1lb3V0KSksIG1ldGhvZCA9IHRoaXMubWV0aG9kLCB4aHIgPSAodGhpcy54aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKSksIGFjY2VwdCA9IGhlYWRlcnNbJ2FjY2VwdCddO1xuICAgICAgICB2YXIgYm9keSA9IHRoaXMuYm9keTtcbiAgICAgICAgdmFyIHJlc3BvbnNlVHlwZSA9ICd0ZXh0JztcbiAgICAgICAgaWYgKCFhY2NlcHQpIHtcbiAgICAgICAgICAgIC8vIERlZmF1bHQgdG8gSlNPTlxuICAgICAgICAgICAgaGVhZGVyc1snYWNjZXB0J10gPSAnYXBwbGljYXRpb24vanNvbic7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYWNjZXB0LmluZGV4T2YoJ2FwcGxpY2F0aW9uL3gtbXNncGFjaycpID09PSAwKSB7XG4gICAgICAgICAgICAvLyBNc2dwYWNrIHJlc3BvbnNlcyB3aWxsIGJlIHR5cGVkIGFzIEFycmF5QnVmZmVyXG4gICAgICAgICAgICByZXNwb25zZVR5cGUgPSAnYXJyYXlidWZmZXInO1xuICAgICAgICB9XG4gICAgICAgIGlmIChib2R5KSB7XG4gICAgICAgICAgICB2YXIgY29udGVudFR5cGUgPSBoZWFkZXJzWydjb250ZW50LXR5cGUnXSB8fCAoaGVhZGVyc1snY29udGVudC10eXBlJ10gPSAnYXBwbGljYXRpb24vanNvbicpO1xuICAgICAgICAgICAgaWYgKGNvbnRlbnRUeXBlLmluZGV4T2YoJ2FwcGxpY2F0aW9uL2pzb24nKSA+IC0xICYmIHR5cGVvZiBib2R5ICE9ICdzdHJpbmcnKVxuICAgICAgICAgICAgICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeShib2R5KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBDYW4gcHJvYmFibHkgcmVtb3ZlIHRoaXMgZGlyZWN0aXZlIGlmIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2Rlc2VjdXJpdHkvZXNsaW50LXBsdWdpbi1zZWN1cml0eS9pc3N1ZXMvMjYgaXMgcmVzb2x2ZWRcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHNlY3VyaXR5L2RldGVjdC1ub24tbGl0ZXJhbC1mcy1maWxlbmFtZVxuICAgICAgICB4aHIub3BlbihtZXRob2QsIHRoaXMudXJpLCB0cnVlKTtcbiAgICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9IHJlc3BvbnNlVHlwZTtcbiAgICAgICAgaWYgKCdhdXRob3JpemF0aW9uJyBpbiBoZWFkZXJzKSB7XG4gICAgICAgICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBoIGluIGhlYWRlcnMpXG4gICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihoLCBoZWFkZXJzW2hdKTtcbiAgICAgICAgdmFyIGVycm9ySGFuZGxlciA9IGZ1bmN0aW9uIChlcnJvckV2ZW50LCBtZXNzYWdlLCBjb2RlLCBzdGF0dXNDb2RlKSB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICB2YXIgZXJyb3JNZXNzYWdlID0gbWVzc2FnZSArICcgKGV2ZW50IHR5cGU6ICcgKyBlcnJvckV2ZW50LnR5cGUgKyAnKSc7XG4gICAgICAgICAgICBpZiAoKF9hID0gX3RoaXMgPT09IG51bGwgfHwgX3RoaXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF90aGlzLnhocikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnN0YXR1c1RleHQpXG4gICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlICs9ICcsIGN1cnJlbnQgc3RhdHVzVGV4dCBpcyAnICsgX3RoaXMueGhyLnN0YXR1c1RleHQ7XG4gICAgICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19FUlJPUiwgJ1JlcXVlc3Qub24nICsgZXJyb3JFdmVudC50eXBlICsgJygpJywgZXJyb3JNZXNzYWdlKTtcbiAgICAgICAgICAgIF90aGlzLmNvbXBsZXRlKG5ldyBlcnJvcmluZm9fMS5QYXJ0aWFsRXJyb3JJbmZvKGVycm9yTWVzc2FnZSwgY29kZSwgc3RhdHVzQ29kZSkpO1xuICAgICAgICB9O1xuICAgICAgICB4aHIub25lcnJvciA9IGZ1bmN0aW9uIChlcnJvckV2ZW50KSB7XG4gICAgICAgICAgICBlcnJvckhhbmRsZXIoZXJyb3JFdmVudCwgJ1hIUiBlcnJvciBvY2N1cnJlZCcsIG51bGwsIDQwMCk7XG4gICAgICAgIH07XG4gICAgICAgIHhoci5vbmFib3J0ID0gZnVuY3Rpb24gKGVycm9yRXZlbnQpIHtcbiAgICAgICAgICAgIGlmIChfdGhpcy50aW1lZE91dCkge1xuICAgICAgICAgICAgICAgIGVycm9ySGFuZGxlcihlcnJvckV2ZW50LCAnUmVxdWVzdCBhYm9ydGVkIGR1ZSB0byByZXF1ZXN0IHRpbWVvdXQgZXhwaXJpbmcnLCBudWxsLCA0MDgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZXJyb3JIYW5kbGVyKGVycm9yRXZlbnQsICdSZXF1ZXN0IGNhbmNlbGxlZCcsIG51bGwsIDQwMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHhoci5vbnRpbWVvdXQgPSBmdW5jdGlvbiAoZXJyb3JFdmVudCkge1xuICAgICAgICAgICAgZXJyb3JIYW5kbGVyKGVycm9yRXZlbnQsICdSZXF1ZXN0IHRpbWVkIG91dCcsIG51bGwsIDQwOCk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBzdHJlYW1pbmc7XG4gICAgICAgIHZhciBzdGF0dXNDb2RlO1xuICAgICAgICB2YXIgc3VjY2Vzc1Jlc3BvbnNlO1xuICAgICAgICB2YXIgc3RyZWFtUG9zID0gMDtcbiAgICAgICAgdmFyIHVucGFja2VkID0gZmFsc2U7XG4gICAgICAgIHZhciBvblJlc3BvbnNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICAgICAgICAgIHN1Y2Nlc3NSZXNwb25zZSA9IHN0YXR1c0NvZGUgPCA0MDA7XG4gICAgICAgICAgICBpZiAoc3RhdHVzQ29kZSA9PSAyMDQpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5jb21wbGV0ZShudWxsLCBudWxsLCBudWxsLCBudWxsLCBzdGF0dXNDb2RlKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdHJlYW1pbmcgPSBfdGhpcy5yZXF1ZXN0TW9kZSA9PSBYSFJTdGF0ZXNfMS5kZWZhdWx0LlJFUV9SRUNWX1NUUkVBTSAmJiBzdWNjZXNzUmVzcG9uc2UgJiYgaXNFbmNvZGluZ0NodW5rZWQoeGhyKTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIG9uRW5kID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHBhcnNlZFJlc3BvbnNlO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB2YXIgY29udGVudFR5cGUgPSBnZXRIZWFkZXIoeGhyLCAnY29udGVudC10eXBlJyk7XG4gICAgICAgICAgICAgICAgLyogQmUgbGliZXJhbCBpbiB3aGF0IHdlIGFjY2VwdDsgYnVnZ3kgYXV0aCBzZXJ2ZXJzIG1heSByZXNwb25kXG4gICAgICAgICAgICAgICAgICogd2l0aG91dCB0aGUgY29ycmVjdCBjb250ZW50dHlwZSwgYnV0IGFzc3VtZSB0aGV5J3JlIHN0aWxsXG4gICAgICAgICAgICAgICAgICogcmVzcG9uZGluZyB3aXRoIGpzb24gKi9cbiAgICAgICAgICAgICAgICB2YXIganNvbiA9IGNvbnRlbnRUeXBlID8gY29udGVudFR5cGUuaW5kZXhPZignYXBwbGljYXRpb24vanNvbicpID49IDAgOiB4aHIucmVzcG9uc2VUeXBlID09ICd0ZXh0JztcbiAgICAgICAgICAgICAgICBpZiAoanNvbikge1xuICAgICAgICAgICAgICAgICAgICAvKiBJZiB3ZSByZXF1ZXN0ZWQgbXNncGFjayBidXQgc2VydmVyIHJlc3BvbmRlZCB3aXRoIGpzb24sIHRoZW4gc2luY2VcbiAgICAgICAgICAgICAgICAgICAgICogd2Ugc2V0IHRoZSByZXNwb25zZVR5cGUgZXhwZWN0aW5nIG1zZ3BhY2ssIHRoZSByZXNwb25zZSB3aWxsIGJlXG4gICAgICAgICAgICAgICAgICAgICAqIGFuIEFycmF5QnVmZmVyIGNvbnRhaW5pbmcganNvbiAqL1xuICAgICAgICAgICAgICAgICAgICB2YXIganNvblJlc3BvbnNlQm9keSA9IHhoci5yZXNwb25zZVR5cGUgPT09ICdhcnJheWJ1ZmZlcidcbiAgICAgICAgICAgICAgICAgICAgICAgID8gcGxhdGZvcm1fMS5kZWZhdWx0LkJ1ZmZlclV0aWxzLnV0ZjhEZWNvZGUoeGhyLnJlc3BvbnNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBTdHJpbmcoeGhyLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChqc29uUmVzcG9uc2VCb2R5Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VkUmVzcG9uc2UgPSBKU09OLnBhcnNlKGpzb25SZXNwb25zZUJvZHkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VkUmVzcG9uc2UgPSBqc29uUmVzcG9uc2VCb2R5O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHVucGFja2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcnNlZFJlc3BvbnNlID0geGhyLnJlc3BvbnNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocGFyc2VkUmVzcG9uc2UucmVzcG9uc2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAvKiB1bndyYXAgSlNPTiBlbnZlbG9wZSAqL1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXNDb2RlID0gcGFyc2VkUmVzcG9uc2Uuc3RhdHVzQ29kZTtcbiAgICAgICAgICAgICAgICAgICAgc3VjY2Vzc1Jlc3BvbnNlID0gc3RhdHVzQ29kZSA8IDQwMDtcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVycyA9IHBhcnNlZFJlc3BvbnNlLmhlYWRlcnM7XG4gICAgICAgICAgICAgICAgICAgIHBhcnNlZFJlc3BvbnNlID0gcGFyc2VkUmVzcG9uc2UucmVzcG9uc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzID0gZ2V0SGVhZGVyc0FzT2JqZWN0KHhocik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5jb21wbGV0ZShuZXcgZXJyb3JpbmZvXzEuUGFydGlhbEVycm9ySW5mbygnTWFsZm9ybWVkIHJlc3BvbnNlIGJvZHkgZnJvbSBzZXJ2ZXI6ICcgKyBlLm1lc3NhZ2UsIG51bGwsIDQwMCkpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qIElmIHJlc3BvbnNlIGlzIGFuIGFycmF5LCBpdCdzIGFuIGFycmF5IG9mIHByb3RvY29sIG1lc3NhZ2VzIC0tIGV2ZW4gaWZcbiAgICAgICAgICAgICAqIGlzIGNvbnRhaW5zIGFuIGVycm9yIGFjdGlvbiAoaGVuY2UgdGhlIG5vbnN1Y2Nlc3Mgc3RhdHVzY29kZSksIHdlIGNhblxuICAgICAgICAgICAgICogY29uc2lkZXIgdGhlIHJlcXVlc3QgdG8gaGF2ZSBzdWNjZWVkZWQsIGp1c3QgcGFzcyBpdCBvbiB0b1xuICAgICAgICAgICAgICogb25Qcm90b2NvbE1lc3NhZ2UgdG8gZGVjaWRlIHdoYXQgdG8gZG8gKi9cbiAgICAgICAgICAgIGlmIChzdWNjZXNzUmVzcG9uc2UgfHwgVXRpbHMuaXNBcnJheShwYXJzZWRSZXNwb25zZSkpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5jb21wbGV0ZShudWxsLCBwYXJzZWRSZXNwb25zZSwgaGVhZGVycywgdW5wYWNrZWQsIHN0YXR1c0NvZGUpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBlcnIgPSBnZXRBYmx5RXJyb3IocGFyc2VkUmVzcG9uc2UsIGhlYWRlcnMpO1xuICAgICAgICAgICAgaWYgKCFlcnIpIHtcbiAgICAgICAgICAgICAgICBlcnIgPSBuZXcgZXJyb3JpbmZvXzEuUGFydGlhbEVycm9ySW5mbygnRXJyb3IgcmVzcG9uc2UgcmVjZWl2ZWQgZnJvbSBzZXJ2ZXI6ICcgK1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXNDb2RlICtcbiAgICAgICAgICAgICAgICAgICAgJyBib2R5IHdhczogJyArXG4gICAgICAgICAgICAgICAgICAgIHBsYXRmb3JtXzEuZGVmYXVsdC5Db25maWcuaW5zcGVjdChwYXJzZWRSZXNwb25zZSksIG51bGwsIHN0YXR1c0NvZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3RoaXMuY29tcGxldGUoZXJyLCBwYXJzZWRSZXNwb25zZSwgaGVhZGVycywgdW5wYWNrZWQsIHN0YXR1c0NvZGUpO1xuICAgICAgICB9O1xuICAgICAgICBmdW5jdGlvbiBvblByb2dyZXNzKCkge1xuICAgICAgICAgICAgdmFyIHJlc3BvbnNlVGV4dCA9IHhoci5yZXNwb25zZVRleHQ7XG4gICAgICAgICAgICB2YXIgYm9keUVuZCA9IHJlc3BvbnNlVGV4dC5sZW5ndGggLSAxO1xuICAgICAgICAgICAgdmFyIGlkeCwgY2h1bms7XG4gICAgICAgICAgICB3aGlsZSAoc3RyZWFtUG9zIDwgYm9keUVuZCAmJiAoaWR4ID0gcmVzcG9uc2VUZXh0LmluZGV4T2YoJ1xcbicsIHN0cmVhbVBvcykpID4gLTEpIHtcbiAgICAgICAgICAgICAgICBjaHVuayA9IHJlc3BvbnNlVGV4dC5zbGljZShzdHJlYW1Qb3MsIGlkeCk7XG4gICAgICAgICAgICAgICAgc3RyZWFtUG9zID0gaWR4ICsgMTtcbiAgICAgICAgICAgICAgICBvbkNodW5rKGNodW5rKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgb25DaHVuayA9IGZ1bmN0aW9uIChjaHVuaykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjaHVuayA9IEpTT04ucGFyc2UoY2h1bmspO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5jb21wbGV0ZShuZXcgZXJyb3JpbmZvXzEuUGFydGlhbEVycm9ySW5mbygnTWFsZm9ybWVkIHJlc3BvbnNlIGJvZHkgZnJvbSBzZXJ2ZXI6ICcgKyBlLm1lc3NhZ2UsIG51bGwsIDQwMCkpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF90aGlzLmVtaXQoJ2RhdGEnLCBjaHVuayk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBvblN0cmVhbUVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIG9uUHJvZ3Jlc3MoKTtcbiAgICAgICAgICAgIF90aGlzLnN0cmVhbUNvbXBsZXRlID0gdHJ1ZTtcbiAgICAgICAgICAgIHBsYXRmb3JtXzEuZGVmYXVsdC5Db25maWcubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF90aGlzLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciByZWFkeVN0YXRlID0geGhyLnJlYWR5U3RhdGU7XG4gICAgICAgICAgICBpZiAocmVhZHlTdGF0ZSA8IDMpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgaWYgKHhoci5zdGF0dXMgIT09IDApIHtcbiAgICAgICAgICAgICAgICBpZiAoc3RhdHVzQ29kZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1c0NvZGUgPSB4aHIuc3RhdHVzO1xuICAgICAgICAgICAgICAgICAgICAvKiBJRSByZXR1cm5zIDEyMjMgZm9yIDIwNDogaHR0cDovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTQ1MCAqL1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdHVzQ29kZSA9PT0gMTIyMylcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1c0NvZGUgPSAyMDQ7XG4gICAgICAgICAgICAgICAgICAgIG9uUmVzcG9uc2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHJlYWR5U3RhdGUgPT0gMyAmJiBzdHJlYW1pbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgb25Qcm9ncmVzcygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChyZWFkeVN0YXRlID09IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0cmVhbWluZylcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uU3RyZWFtRW5kKCk7XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uRW5kKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB4aHIuc2VuZChib2R5KTtcbiAgICB9O1xuICAgIFhIUlJlcXVlc3QucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB4aHIgPSB0aGlzLnhocjtcbiAgICAgICAgaWYgKHhocikge1xuICAgICAgICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IHhoci5vbmVycm9yID0geGhyLm9uYWJvcnQgPSB4aHIub250aW1lb3V0ID0gbm9vcDtcbiAgICAgICAgICAgIHRoaXMueGhyID0gbnVsbDtcbiAgICAgICAgICAgIHZhciB0aW1lciA9IHRoaXMudGltZXI7XG4gICAgICAgICAgICBpZiAodGltZXIpIHtcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgICAgICAgICAgIHRoaXMudGltZXIgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLnJlcXVlc3RDb21wbGV0ZSlcbiAgICAgICAgICAgICAgICB4aHIuYWJvcnQoKTtcbiAgICAgICAgfVxuICAgICAgICBkZWxldGUgcGVuZGluZ1JlcXVlc3RzW3RoaXMuaWRdO1xuICAgIH07XG4gICAgcmV0dXJuIFhIUlJlcXVlc3Q7XG59KGV2ZW50ZW1pdHRlcl8xLmRlZmF1bHQpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IFhIUlJlcXVlc3Q7XG5cbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbCh0aGlzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzKSkpXG5cbi8qKiovIH0pLFxuLyogMTcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciB0c2xpYl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciBsb2dnZXJfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oMikpO1xudmFyIFV0aWxzID0gdHNsaWJfMS5fX2ltcG9ydFN0YXIoX193ZWJwYWNrX3JlcXVpcmVfXygxKSk7XG52YXIgbXVsdGljYXN0ZXJfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oMjMpKTtcbnZhciBlcnJvcmluZm9fMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oNCkpO1xudmFyIGhtYWNfc2hhMjU2XzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKDQ1KSk7XG52YXIgZW5jX2Jhc2U2NF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMSk7XG52YXIgSHR0cE1ldGhvZHNfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oMTgpKTtcbnZhciBIdHRwU3RhdHVzQ29kZXNfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oMjUpKTtcbnZhciBwbGF0Zm9ybV8xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygzKSk7XG52YXIgcmVzb3VyY2VfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oMTQpKTtcbnZhciBNQVhfVE9LRU5fTEVOR1RIID0gTWF0aC5wb3coMiwgMTcpO1xuZnVuY3Rpb24gbm9vcCgpIHsgfVxuZnVuY3Rpb24gcmFuZG9tKCkge1xuICAgIHJldHVybiAoJzAwMDAwMCcgKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxZTE2KSkuc2xpY2UoLTE2KTtcbn1cbmZ1bmN0aW9uIGlzUmVhbHRpbWUoY2xpZW50KSB7XG4gICAgcmV0dXJuICEhY2xpZW50LmNvbm5lY3Rpb247XG59XG4vKiBBIGNsaWVudCBhdXRoIGNhbGxiYWNrIG1heSBnaXZlIGVycm9ycyBpbiBhbnkgbnVtYmVyIG9mIGZvcm1hdHM7IG5vcm1hbGlzZSB0byBhbiBFcnJvckluZm8gb3IgUGFydGlhbEVycm9ySW5mbyAqL1xuZnVuY3Rpb24gbm9ybWFsaXNlQXV0aGNhbGxiYWNrRXJyb3IoZXJyKSB7XG4gICAgaWYgKCFVdGlscy5pc0Vycm9ySW5mb09yUGFydGlhbEVycm9ySW5mbyhlcnIpKSB7XG4gICAgICAgIHJldHVybiBuZXcgZXJyb3JpbmZvXzEuZGVmYXVsdChVdGlscy5pbnNwZWN0RXJyb3IoZXJyKSwgZXJyLmNvZGUgfHwgNDAxNzAsIGVyci5zdGF0dXNDb2RlIHx8IDQwMSk7XG4gICAgfVxuICAgIC8qIG5ldHdvcmsgZXJyb3JzIHdpbGwgbm90IGhhdmUgYW4gaW5oZXJlbnQgZXJyb3IgY29kZSAqL1xuICAgIGlmICghZXJyLmNvZGUpIHtcbiAgICAgICAgaWYgKGVyci5zdGF0dXNDb2RlID09PSA0MDMpIHtcbiAgICAgICAgICAgIGVyci5jb2RlID0gNDAzMDA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBlcnIuY29kZSA9IDQwMTcwO1xuICAgICAgICAgICAgLyogbm9ybWFsaXNlIHN0YXR1c0NvZGUgdG8gNDAxIHBlciBSU0E0ZSAqL1xuICAgICAgICAgICAgZXJyLnN0YXR1c0NvZGUgPSA0MDE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGVycjtcbn1cbnZhciBobWFjID0gZnVuY3Rpb24gKHRleHQsIGtleSkge1xuICAgIGlmIChwbGF0Zm9ybV8xLmRlZmF1bHQuQ29uZmlnLmNyZWF0ZUhtYWMpIHtcbiAgICAgICAgdmFyIGluc3QgPSBwbGF0Zm9ybV8xLmRlZmF1bHQuQ29uZmlnLmNyZWF0ZUhtYWMoJ1NIQTI1NicsIGtleSk7XG4gICAgICAgIGluc3QudXBkYXRlKHRleHQpO1xuICAgICAgICByZXR1cm4gaW5zdC5kaWdlc3QoJ2Jhc2U2NCcpO1xuICAgIH1cbiAgICByZXR1cm4gKDAsIGVuY19iYXNlNjRfMS5zdHJpbmdpZnkpKCgwLCBobWFjX3NoYTI1Nl8xLmRlZmF1bHQpKHRleHQsIGtleSkpO1xufTtcbmZ1bmN0aW9uIGMxNG4oY2FwYWJpbGl0eSkge1xuICAgIGlmICghY2FwYWJpbGl0eSlcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIGlmICh0eXBlb2YgY2FwYWJpbGl0eSA9PSAnc3RyaW5nJylcbiAgICAgICAgY2FwYWJpbGl0eSA9IEpTT04ucGFyc2UoY2FwYWJpbGl0eSk7XG4gICAgdmFyIGMxNG5DYXBhYmlsaXR5ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB2YXIga2V5cyA9IFV0aWxzLmtleXNBcnJheShjYXBhYmlsaXR5LCB0cnVlKTtcbiAgICBpZiAoIWtleXMpXG4gICAgICAgIHJldHVybiAnJztcbiAgICBrZXlzLnNvcnQoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYzE0bkNhcGFiaWxpdHlba2V5c1tpXV0gPSBjYXBhYmlsaXR5W2tleXNbaV1dLnNvcnQoKTtcbiAgICB9XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGMxNG5DYXBhYmlsaXR5KTtcbn1cbmZ1bmN0aW9uIGxvZ0FuZFZhbGlkYXRlVG9rZW5BdXRoTWV0aG9kKGF1dGhPcHRpb25zKSB7XG4gICAgaWYgKGF1dGhPcHRpb25zLmF1dGhDYWxsYmFjaykge1xuICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19NSU5PUiwgJ0F1dGgoKScsICd1c2luZyB0b2tlbiBhdXRoIHdpdGggYXV0aENhbGxiYWNrJyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGF1dGhPcHRpb25zLmF1dGhVcmwpIHtcbiAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlOT1IsICdBdXRoKCknLCAndXNpbmcgdG9rZW4gYXV0aCB3aXRoIGF1dGhVcmwnKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoYXV0aE9wdGlvbnMua2V5KSB7XG4gICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01JTk9SLCAnQXV0aCgpJywgJ3VzaW5nIHRva2VuIGF1dGggd2l0aCBjbGllbnQtc2lkZSBzaWduaW5nJyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGF1dGhPcHRpb25zLnRva2VuRGV0YWlscykge1xuICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19NSU5PUiwgJ0F1dGgoKScsICd1c2luZyB0b2tlbiBhdXRoIHdpdGggc3VwcGxpZWQgdG9rZW4gb25seScpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdmFyIG1zZyA9ICdhdXRoT3B0aW9ucyBtdXN0IGluY2x1ZGUgdmFsaWQgYXV0aGVudGljYXRpb24gcGFyYW1ldGVycyc7XG4gICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX0VSUk9SLCAnQXV0aCgpJywgbXNnKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgfVxufVxuZnVuY3Rpb24gYmFzaWNBdXRoRm9yY2VkKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gJ3VzZVRva2VuQXV0aCcgaW4gb3B0aW9ucyAmJiAhb3B0aW9ucy51c2VUb2tlbkF1dGg7XG59XG4vKiBSU0E0ICovXG5mdW5jdGlvbiB1c2VUb2tlbkF1dGgob3B0aW9ucykge1xuICAgIHJldHVybiAob3B0aW9ucy51c2VUb2tlbkF1dGggfHxcbiAgICAgICAgKCFiYXNpY0F1dGhGb3JjZWQob3B0aW9ucykgJiYgKG9wdGlvbnMuYXV0aENhbGxiYWNrIHx8IG9wdGlvbnMuYXV0aFVybCB8fCBvcHRpb25zLnRva2VuIHx8IG9wdGlvbnMudG9rZW5EZXRhaWxzKSkpO1xufVxuLyogUlNBNGEgKi9cbmZ1bmN0aW9uIG5vV2F5VG9SZW5ldyhvcHRpb25zKSB7XG4gICAgcmV0dXJuICFvcHRpb25zLmtleSAmJiAhb3B0aW9ucy5hdXRoQ2FsbGJhY2sgJiYgIW9wdGlvbnMuYXV0aFVybDtcbn1cbnZhciB0cklkID0gMDtcbmZ1bmN0aW9uIGdldFRva2VuUmVxdWVzdElkKCkge1xuICAgIHJldHVybiB0cklkKys7XG59XG52YXIgQXV0aCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBBdXRoKGNsaWVudCwgb3B0aW9ucykge1xuICAgICAgICAvLyBUaGlzIGluaXRpYWxpemF0aW9uIGlzIGFsd2F5cyBvdmVyd3JpdHRlbiBhbmQgb25seSB1c2VkIHRvIHByZXZlbnQgYSBUeXBlU2NyaXB0IGNvbXBpbGVyIGVycm9yXG4gICAgICAgIHRoaXMuYXV0aE9wdGlvbnMgPSB7fTtcbiAgICAgICAgdGhpcy5jbGllbnQgPSBjbGllbnQ7XG4gICAgICAgIHRoaXMudG9rZW5QYXJhbXMgPSBvcHRpb25zLmRlZmF1bHRUb2tlblBhcmFtcyB8fCB7fTtcbiAgICAgICAgLyogVGhlIGlkIG9mIHRoZSBjdXJyZW50IHRva2VuIHJlcXVlc3QgaWYgb25lIGlzIGluIHByb2dyZXNzLCBlbHNlIG51bGwgKi9cbiAgICAgICAgdGhpcy5jdXJyZW50VG9rZW5SZXF1ZXN0SWQgPSBudWxsO1xuICAgICAgICB0aGlzLndhaXRpbmdGb3JUb2tlblJlcXVlc3QgPSBudWxsO1xuICAgICAgICBpZiAodXNlVG9rZW5BdXRoKG9wdGlvbnMpKSB7XG4gICAgICAgICAgICAvKiBUb2tlbiBhdXRoICovXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5rZXkgJiYgIWhtYWMpIHtcbiAgICAgICAgICAgICAgICB2YXIgbXNnID0gJ2NsaWVudC1zaWRlIHRva2VuIHJlcXVlc3Qgc2lnbmluZyBub3Qgc3VwcG9ydGVkJztcbiAgICAgICAgICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19FUlJPUiwgJ0F1dGgoKScsIG1zZyk7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobm9XYXlUb1JlbmV3KG9wdGlvbnMpKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfRVJST1IsICdBdXRoKCknLCAnV2FybmluZzogbGlicmFyeSBpbml0aWFsaXplZCB3aXRoIGEgdG9rZW4gbGl0ZXJhbCB3aXRob3V0IGFueSB3YXkgdG8gcmVuZXcgdGhlIHRva2VuIHdoZW4gaXQgZXhwaXJlcyAobm8gYXV0aFVybCwgYXV0aENhbGxiYWNrLCBvciBrZXkpLiBTZWUgaHR0cHM6Ly9oZWxwLmFibHkuaW8vZXJyb3IvNDAxNzEgZm9yIGhlbHAnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3NhdmVUb2tlbk9wdGlvbnMob3B0aW9ucy5kZWZhdWx0VG9rZW5QYXJhbXMsIG9wdGlvbnMpO1xuICAgICAgICAgICAgbG9nQW5kVmFsaWRhdGVUb2tlbkF1dGhNZXRob2QodGhpcy5hdXRoT3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvKiBCYXNpYyBhdXRoICovXG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMua2V5KSB7XG4gICAgICAgICAgICAgICAgdmFyIG1zZyA9ICdObyBhdXRoZW50aWNhdGlvbiBvcHRpb25zIHByb3ZpZGVkOyBuZWVkIG9uZSBvZjoga2V5LCBhdXRoVXJsLCBvciBhdXRoQ2FsbGJhY2sgKG9yIGZvciB0ZXN0aW5nIG9ubHksIHRva2VuIG9yIHRva2VuRGV0YWlscyknO1xuICAgICAgICAgICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX0VSUk9SLCAnQXV0aCgpJywgbXNnKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JpbmZvXzEuZGVmYXVsdChtc2csIDQwMTYwLCA0MDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlOT1IsICdBdXRoKCknLCAnYW5vbnltb3VzLCB1c2luZyBiYXNpYyBhdXRoJyk7XG4gICAgICAgICAgICB0aGlzLl9zYXZlQmFzaWNPcHRpb25zKG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIEF1dGgucHJvdG90eXBlLmF1dGhvcml6ZSA9IGZ1bmN0aW9uICh0b2tlblBhcmFtcywgYXV0aE9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBfYXV0aE9wdGlvbnM7XG4gICAgICAgIC8qIHNodWZmbGUgYW5kIG5vcm1hbGlzZSBhcmd1bWVudHMgYXMgbmVjZXNzYXJ5ICovXG4gICAgICAgIGlmICh0eXBlb2YgdG9rZW5QYXJhbXMgPT0gJ2Z1bmN0aW9uJyAmJiAhY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGNhbGxiYWNrID0gdG9rZW5QYXJhbXM7XG4gICAgICAgICAgICBfYXV0aE9wdGlvbnMgPSB0b2tlblBhcmFtcyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGF1dGhPcHRpb25zID09ICdmdW5jdGlvbicgJiYgIWNhbGxiYWNrKSB7XG4gICAgICAgICAgICBjYWxsYmFjayA9IGF1dGhPcHRpb25zO1xuICAgICAgICAgICAgX2F1dGhPcHRpb25zID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIF9hdXRoT3B0aW9ucyA9IGF1dGhPcHRpb25zO1xuICAgICAgICB9XG4gICAgICAgIGlmICghY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmNsaWVudC5vcHRpb25zLnByb21pc2VzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFV0aWxzLnByb21pc2lmeSh0aGlzLCAnYXV0aG9yaXplJywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvKiBSU0ExMGE6IGF1dGhvcml6ZSgpIGNhbGwgaW1wbGllcyB0b2tlbiBhdXRoLiBJZiBhIGtleSBpcyBwYXNzZWQgaXQsIHdlXG4gICAgICAgICAqIGp1c3QgY2hlY2sgaWYgaXQgZG9lc24ndCBjbGFzaCBhbmQgYXNzdW1lIHdlJ3JlIGdlbmVyYXRpbmcgYSB0b2tlbiBmcm9tIGl0ICovXG4gICAgICAgIGlmIChfYXV0aE9wdGlvbnMgJiYgX2F1dGhPcHRpb25zLmtleSAmJiB0aGlzLmF1dGhPcHRpb25zLmtleSAhPT0gX2F1dGhPcHRpb25zLmtleSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yaW5mb18xLmRlZmF1bHQoJ1VuYWJsZSB0byB1cGRhdGUgYXV0aCBvcHRpb25zIHdpdGggaW5jb21wYXRpYmxlIGtleScsIDQwMTAyLCA0MDEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfYXV0aE9wdGlvbnMgJiYgJ2ZvcmNlJyBpbiBfYXV0aE9wdGlvbnMpIHtcbiAgICAgICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX0VSUk9SLCAnQXV0aC5hdXRob3JpemUnLCAnRGVwcmVjYXRpb24gd2FybmluZzogc3BlY2lmeWluZyB7Zm9yY2U6IHRydWV9IGluIGF1dGhPcHRpb25zIGlzIG5vIGxvbmdlciBuZWNlc3NhcnksIGF1dGhvcml6ZSgpIG5vdyBhbHdheXMgZ2V0cyBhIG5ldyB0b2tlbi4gUGxlYXNlIHJlbW92ZSB0aGlzLCBhcyBpbiB2ZXJzaW9uIDEuMCBhbmQgbGF0ZXIsIGhhdmluZyBhIG5vbi1udWxsIGF1dGhPcHRpb25zIHdpbGwgb3ZlcndyaXRlIHN0b3JlZCBsaWJyYXJ5IGF1dGhPcHRpb25zLCB3aGljaCBtYXkgbm90IGJlIHdoYXQgeW91IHdhbnQnKTtcbiAgICAgICAgICAgIC8qIEVtdWxhdGUgdGhlIG9sZCBiZWhhdmlvdXI6IGlmICdmb3JjZScgd2FzIHRoZSBvbmx5IG1lbWJlciBvZiBhdXRoT3B0aW9ucyxcbiAgICAgICAgICAgICAqIHNldCBpdCB0byBudWxsIHNvIGl0IGRvZXNuJ3Qgb3ZlcndyaXRlIHN0b3JlZC4gVE9ETzogcmVtb3ZlIGluIHZlcnNpb24gMS4wICovXG4gICAgICAgICAgICBpZiAoVXRpbHMuaXNPbmx5UHJvcEluKF9hdXRoT3B0aW9ucywgJ2ZvcmNlJykpIHtcbiAgICAgICAgICAgICAgICBfYXV0aE9wdGlvbnMgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2ZvcmNlTmV3VG9rZW4odG9rZW5QYXJhbXMsIF9hdXRoT3B0aW9ucywgZnVuY3Rpb24gKGVyciwgdG9rZW5EZXRhaWxzKSB7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLmNsaWVudC5jb25uZWN0aW9uICYmIGVyci5zdGF0dXNDb2RlID09PSBIdHRwU3RhdHVzQ29kZXNfMS5kZWZhdWx0LkZvcmJpZGRlbikge1xuICAgICAgICAgICAgICAgICAgICAvKiBQZXIgUlNBNGQgJiBSU0E0ZDEsIGlmIHRoZSBhdXRoIHNlcnZlciBleHBsaWNpdGx5IHJlcHVkaWF0ZXMgb3VyIHJpZ2h0IHRvXG4gICAgICAgICAgICAgICAgICAgICAqIHN0YXkgY29ubmVjdGljZWQgYnkgcmV0dXJuaW5nIGEgNDAzLCB3ZSBhY3RpdmVseSBkaXNjb25uZWN0IHRoZSBjb25uZWN0aW9uXG4gICAgICAgICAgICAgICAgICAgICAqIGV2ZW4gdGhvdWdoIHdlIG1heSB3ZWxsIHN0aWxsIGhhdmUgdGltZSBsZWZ0IGluIHRoZSBvbGQgdG9rZW4uICovXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmNsaWVudC5jb25uZWN0aW9uLmNvbm5lY3Rpb25NYW5hZ2VyLmFjdE9uRXJyb3JGcm9tQXV0aG9yaXplKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhbGxiYWNrID09PSBudWxsIHx8IGNhbGxiYWNrID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjYWxsYmFjayhlcnIpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qIFJUQzhcbiAgICAgICAgICAgICAqIC0gV2hlbiBhdXRob3JpemUgY2FsbGVkIGJ5IGFuIGVuZCB1c2VyIGFuZCBoYXZlIGEgcmVhbHRpbWUgY29ubmVjdGlvbixcbiAgICAgICAgICAgICAqIGRvbid0IGNhbGwgYmFjayB0aWxsIG5ldyB0b2tlbiBoYXMgdGFrZW4gZWZmZWN0LlxuICAgICAgICAgICAgICogLSBVc2UgdGhpcy5jbGllbnQuY29ubmVjdGlvbiBhcyBhIHByb3h5IGZvciAodGhpcy5jbGllbnQgaW5zdGFuY2VvZiBSZWFsdGltZSksXG4gICAgICAgICAgICAgKiB3aGljaCBkb2Vzbid0IHdvcmsgaW4gbm9kZSBhcyBSZWFsdGltZSBpc24ndCBwYXJ0IG9mIHRoZSB2bSBjb250ZXh0IGZvciBSZXN0IGNsaWVudHMgKi9cbiAgICAgICAgICAgIGlmIChpc1JlYWx0aW1lKF90aGlzLmNsaWVudCkpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5jbGllbnQuY29ubmVjdGlvbi5jb25uZWN0aW9uTWFuYWdlci5vbkF1dGhVcGRhdGVkKHRva2VuRGV0YWlscywgY2FsbGJhY2sgfHwgbm9vcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayA9PT0gbnVsbCB8fCBjYWxsYmFjayA9PT0gdm9pZCAwID8gdm9pZCAwIDogY2FsbGJhY2sobnVsbCwgdG9rZW5EZXRhaWxzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBBdXRoLnByb3RvdHlwZS5hdXRob3Jpc2UgPSBmdW5jdGlvbiAodG9rZW5QYXJhbXMsIGF1dGhPcHRpb25zLCBjYWxsYmFjaykge1xuICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmRlcHJlY2F0ZWQoJ0F1dGguYXV0aG9yaXNlJywgJ0F1dGguYXV0aG9yaXplJyk7XG4gICAgICAgIHRoaXMuYXV0aG9yaXplKHRva2VuUGFyYW1zLCBhdXRoT3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH07XG4gICAgLyogRm9yIGludGVybmFsIHVzZSwgZWcgYnkgY29ubmVjdGlvbk1hbmFnZXIgLSB1c2VmdWwgd2hlbiB3YW50IHRvIGNhbGwgYmFja1xuICAgICAqIGFzIHNvb24gYXMgd2UgaGF2ZSB0aGUgbmV3IHRva2VuLCByYXRoZXIgdGhhbiB3YWl0aW5nIGZvciBpdCB0byB0YWtlXG4gICAgICogZWZmZWN0IG9uIHRoZSBjb25uZWN0aW9uIGFzICNhdXRob3JpemUgZG9lcyAqL1xuICAgIEF1dGgucHJvdG90eXBlLl9mb3JjZU5ld1Rva2VuID0gZnVuY3Rpb24gKHRva2VuUGFyYW1zLCBhdXRoT3B0aW9ucywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgLyogZ2V0IHJpZCBvZiBjdXJyZW50IHRva2VuIGV2ZW4gaWYgc3RpbGwgdmFsaWQgKi9cbiAgICAgICAgdGhpcy50b2tlbkRldGFpbHMgPSBudWxsO1xuICAgICAgICAvKiBfc2F2ZSBub3JtYWxpc2VzIHRoZSB0b2tlblBhcmFtcyBhbmQgYXV0aE9wdGlvbnMgYW5kIHVwZGF0ZXMgdGhlIGF1dGhcbiAgICAgICAgICogb2JqZWN0LiBBbGwgc3Vic2VxdWVudCBvcGVyYXRpb25zIHNob3VsZCB1c2UgdGhlIHZhbHVlcyBvbiBgdGhpc2AsXG4gICAgICAgICAqIG5vdCB0aGUgcGFzc2VkIGluIG9uZXMuICovXG4gICAgICAgIHRoaXMuX3NhdmVUb2tlbk9wdGlvbnModG9rZW5QYXJhbXMsIGF1dGhPcHRpb25zKTtcbiAgICAgICAgbG9nQW5kVmFsaWRhdGVUb2tlbkF1dGhNZXRob2QodGhpcy5hdXRoT3B0aW9ucyk7XG4gICAgICAgIHRoaXMuX2Vuc3VyZVZhbGlkQXV0aENyZWRlbnRpYWxzKHRydWUsIGZ1bmN0aW9uIChlcnIsIHRva2VuRGV0YWlscykge1xuICAgICAgICAgICAgLyogUlNBMTBnICovXG4gICAgICAgICAgICBkZWxldGUgX3RoaXMudG9rZW5QYXJhbXMudGltZXN0YW1wO1xuICAgICAgICAgICAgZGVsZXRlIF90aGlzLmF1dGhPcHRpb25zLnF1ZXJ5VGltZTtcbiAgICAgICAgICAgIGNhbGxiYWNrKGVyciwgdG9rZW5EZXRhaWxzKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBBdXRoLnByb3RvdHlwZS5yZXF1ZXN0VG9rZW4gPSBmdW5jdGlvbiAodG9rZW5QYXJhbXMsIGF1dGhPcHRpb25zLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAvKiBzaHVmZmxlIGFuZCBub3JtYWxpc2UgYXJndW1lbnRzIGFzIG5lY2Vzc2FyeSAqL1xuICAgICAgICBpZiAodHlwZW9mIHRva2VuUGFyYW1zID09ICdmdW5jdGlvbicgJiYgIWNhbGxiYWNrKSB7XG4gICAgICAgICAgICBjYWxsYmFjayA9IHRva2VuUGFyYW1zO1xuICAgICAgICAgICAgYXV0aE9wdGlvbnMgPSB0b2tlblBhcmFtcyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGF1dGhPcHRpb25zID09ICdmdW5jdGlvbicgJiYgIWNhbGxiYWNrKSB7XG4gICAgICAgICAgICBjYWxsYmFjayA9IGF1dGhPcHRpb25zO1xuICAgICAgICAgICAgYXV0aE9wdGlvbnMgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICghY2FsbGJhY2sgJiYgdGhpcy5jbGllbnQub3B0aW9ucy5wcm9taXNlcykge1xuICAgICAgICAgICAgcmV0dXJuIFV0aWxzLnByb21pc2lmeSh0aGlzLCAncmVxdWVzdFRva2VuJywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgICAvKiBSU0E4ZTogaWYgYXV0aE9wdGlvbnMgcGFzc2VkIGluLCB0aGV5J3JlIHVzZWQgaW5zdGVhZCBvZiBzdG9yZWQsIGRvbid0IG1lcmdlIHRoZW0gKi9cbiAgICAgICAgYXV0aE9wdGlvbnMgPSBhdXRoT3B0aW9ucyB8fCB0aGlzLmF1dGhPcHRpb25zO1xuICAgICAgICB0b2tlblBhcmFtcyA9IHRva2VuUGFyYW1zIHx8IFV0aWxzLmNvcHkodGhpcy50b2tlblBhcmFtcyk7XG4gICAgICAgIHZhciBfY2FsbGJhY2sgPSBjYWxsYmFjayB8fCBub29wO1xuICAgICAgICAvKiBmaXJzdCBzZXQgdXAgd2hhdGV2ZXIgY2FsbGJhY2sgd2lsbCBiZSB1c2VkIHRvIGdldCBzaWduZWRcbiAgICAgICAgICogdG9rZW4gcmVxdWVzdHMgKi9cbiAgICAgICAgdmFyIHRva2VuUmVxdWVzdENhbGxiYWNrLCBjbGllbnQgPSB0aGlzLmNsaWVudDtcbiAgICAgICAgaWYgKGF1dGhPcHRpb25zLmF1dGhDYWxsYmFjaykge1xuICAgICAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlOT1IsICdBdXRoLnJlcXVlc3RUb2tlbigpJywgJ3VzaW5nIHRva2VuIGF1dGggd2l0aCBhdXRoQ2FsbGJhY2snKTtcbiAgICAgICAgICAgIHRva2VuUmVxdWVzdENhbGxiYWNrID0gYXV0aE9wdGlvbnMuYXV0aENhbGxiYWNrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGF1dGhPcHRpb25zLmF1dGhVcmwpIHtcbiAgICAgICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01JTk9SLCAnQXV0aC5yZXF1ZXN0VG9rZW4oKScsICd1c2luZyB0b2tlbiBhdXRoIHdpdGggYXV0aFVybCcpO1xuICAgICAgICAgICAgdG9rZW5SZXF1ZXN0Q2FsbGJhY2sgPSBmdW5jdGlvbiAocGFyYW1zLCBjYikge1xuICAgICAgICAgICAgICAgIHZhciBhdXRoSGVhZGVycyA9IFV0aWxzLm1peGluKHsgYWNjZXB0OiAnYXBwbGljYXRpb24vanNvbiwgdGV4dC9wbGFpbicgfSwgYXV0aE9wdGlvbnMuYXV0aEhlYWRlcnMpO1xuICAgICAgICAgICAgICAgIHZhciB1c2VQb3N0ID0gYXV0aE9wdGlvbnMuYXV0aE1ldGhvZCAmJiBhdXRoT3B0aW9ucy5hdXRoTWV0aG9kLnRvTG93ZXJDYXNlKCkgPT09ICdwb3N0JztcbiAgICAgICAgICAgICAgICB2YXIgcHJvdmlkZWRRc1BhcmFtcztcbiAgICAgICAgICAgICAgICAvKiBDb21iaW5lIGF1dGhQYXJhbXMgd2l0aCBhbnkgcXMgcGFyYW1zIGdpdmVuIGluIHRoZSBhdXRoVXJsICovXG4gICAgICAgICAgICAgICAgdmFyIHF1ZXJ5SWR4ID0gYXV0aE9wdGlvbnMuYXV0aFVybC5pbmRleE9mKCc/Jyk7XG4gICAgICAgICAgICAgICAgaWYgKHF1ZXJ5SWR4ID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvdmlkZWRRc1BhcmFtcyA9IFV0aWxzLnBhcnNlUXVlcnlTdHJpbmcoYXV0aE9wdGlvbnMuYXV0aFVybC5zbGljZShxdWVyeUlkeCkpO1xuICAgICAgICAgICAgICAgICAgICBhdXRoT3B0aW9ucy5hdXRoVXJsID0gYXV0aE9wdGlvbnMuYXV0aFVybC5zbGljZSgwLCBxdWVyeUlkeCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdXNlUG9zdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLyogSW4gY2FzZSBvZiBjb25mbGljdCwgYXV0aFBhcmFtcyB0YWtlIHByZWNlZGVuY2Ugb3ZlciBxcyBwYXJhbXMgaW4gdGhlIGF1dGhVcmwgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgIGF1dGhPcHRpb25zLmF1dGhQYXJhbXMgPSBVdGlscy5taXhpbihwcm92aWRlZFFzUGFyYW1zLCBhdXRoT3B0aW9ucy5hdXRoUGFyYW1zKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvKiBSU0E4YzIgKi9cbiAgICAgICAgICAgICAgICB2YXIgYXV0aFBhcmFtcyA9IFV0aWxzLm1peGluKHt9LCBhdXRoT3B0aW9ucy5hdXRoUGFyYW1zIHx8IHt9LCBwYXJhbXMpO1xuICAgICAgICAgICAgICAgIHZhciBhdXRoVXJsUmVxdWVzdENhbGxiYWNrID0gZnVuY3Rpb24gKGVyciwgYm9keSwgaGVhZGVycywgdW5wYWNrZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRlbnRUeXBlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19NSUNSTywgJ0F1dGgucmVxdWVzdFRva2VuKCkudG9rZW5SZXF1ZXN0Q2FsbGJhY2snLCAnUmVjZWl2ZWQgRXJyb3I6ICcgKyBVdGlscy5pbnNwZWN0RXJyb3IoZXJyKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50VHlwZSA9IGhlYWRlcnNbJ2NvbnRlbnQtdHlwZSddO1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlDUk8sICdBdXRoLnJlcXVlc3RUb2tlbigpLnRva2VuUmVxdWVzdENhbGxiYWNrJywgJ1JlY2VpdmVkOyBjb250ZW50LXR5cGU6ICcgKyBjb250ZW50VHlwZSArICc7IGJvZHk6ICcgKyBVdGlscy5pbnNwZWN0Qm9keShib2R5KSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGVyciB8fCB1bnBhY2tlZClcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjYihlcnIsIGJvZHkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocGxhdGZvcm1fMS5kZWZhdWx0LkJ1ZmZlclV0aWxzLmlzQnVmZmVyKGJvZHkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgYm9keSA9IGJvZHkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjb250ZW50VHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2IobmV3IGVycm9yaW5mb18xLmRlZmF1bHQoJ2F1dGhVcmwgcmVzcG9uc2UgaXMgbWlzc2luZyBhIGNvbnRlbnQtdHlwZSBoZWFkZXInLCA0MDE3MCwgNDAxKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIGpzb24gPSBjb250ZW50VHlwZS5pbmRleE9mKCdhcHBsaWNhdGlvbi9qc29uJykgPiAtMSwgdGV4dCA9IGNvbnRlbnRUeXBlLmluZGV4T2YoJ3RleHQvcGxhaW4nKSA+IC0xIHx8IGNvbnRlbnRUeXBlLmluZGV4T2YoJ2FwcGxpY2F0aW9uL2p3dCcpID4gLTE7XG4gICAgICAgICAgICAgICAgICAgIGlmICghanNvbiAmJiAhdGV4dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2IobmV3IGVycm9yaW5mb18xLmRlZmF1bHQoJ2F1dGhVcmwgcmVzcG9uZGVkIHdpdGggdW5hY2NlcHRhYmxlIGNvbnRlbnQtdHlwZSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50VHlwZSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJywgc2hvdWxkIGJlIGVpdGhlciB0ZXh0L3BsYWluLCBhcHBsaWNhdGlvbi9qd3Qgb3IgYXBwbGljYXRpb24vanNvbicsIDQwMTcwLCA0MDEpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoanNvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJvZHkubGVuZ3RoID4gTUFYX1RPS0VOX0xFTkdUSCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNiKG5ldyBlcnJvcmluZm9fMS5kZWZhdWx0KCdhdXRoVXJsIHJlc3BvbnNlIGV4Y2VlZGVkIG1heCBwZXJtaXR0ZWQgbGVuZ3RoJywgNDAxNzAsIDQwMSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9keSA9IEpTT04ucGFyc2UoYm9keSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNiKG5ldyBlcnJvcmluZm9fMS5kZWZhdWx0KCdVbmV4cGVjdGVkIGVycm9yIHByb2Nlc3NpbmcgYXV0aFVSTCByZXNwb25zZTsgZXJyID0gJyArIGUubWVzc2FnZSwgNDAxNzAsIDQwMSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYihudWxsLCBib2R5LCBjb250ZW50VHlwZSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19NSUNSTywgJ0F1dGgucmVxdWVzdFRva2VuKCkudG9rZW5SZXF1ZXN0Q2FsbGJhY2snLCAnUmVxdWVzdGluZyB0b2tlbiBmcm9tICcgK1xuICAgICAgICAgICAgICAgICAgICBhdXRoT3B0aW9ucy5hdXRoVXJsICtcbiAgICAgICAgICAgICAgICAgICAgJzsgUGFyYW1zOiAnICtcbiAgICAgICAgICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkoYXV0aFBhcmFtcykgK1xuICAgICAgICAgICAgICAgICAgICAnOyBtZXRob2Q6ICcgK1xuICAgICAgICAgICAgICAgICAgICAodXNlUG9zdCA/ICdQT1NUJyA6ICdHRVQnKSk7XG4gICAgICAgICAgICAgICAgaWYgKHVzZVBvc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgLyogc2VuZCBib2R5IGZvcm0tZW5jb2RlZCAqL1xuICAgICAgICAgICAgICAgICAgICB2YXIgaGVhZGVycyA9IGF1dGhIZWFkZXJzIHx8IHt9O1xuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzWydjb250ZW50LXR5cGUnXSA9ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYm9keSA9IFV0aWxzLnRvUXVlcnlTdHJpbmcoYXV0aFBhcmFtcykuc2xpY2UoMSk7IC8qIHNsaWNlIGlzIHRvIHJlbW92ZSB0aGUgaW5pdGlhbCAnPycgKi9cbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuY2xpZW50Lmh0dHAuZG9VcmkoSHR0cE1ldGhvZHNfMS5kZWZhdWx0LlBvc3QsIGNsaWVudCwgYXV0aE9wdGlvbnMuYXV0aFVybCwgaGVhZGVycywgYm9keSwgcHJvdmlkZWRRc1BhcmFtcywgYXV0aFVybFJlcXVlc3RDYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5jbGllbnQuaHR0cC5kb1VyaShIdHRwTWV0aG9kc18xLmRlZmF1bHQuR2V0LCBjbGllbnQsIGF1dGhPcHRpb25zLmF1dGhVcmwsIGF1dGhIZWFkZXJzIHx8IHt9LCBudWxsLCBhdXRoUGFyYW1zLCBhdXRoVXJsUmVxdWVzdENhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGF1dGhPcHRpb25zLmtleSkge1xuICAgICAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlOT1IsICdBdXRoLnJlcXVlc3RUb2tlbigpJywgJ3VzaW5nIHRva2VuIGF1dGggd2l0aCBjbGllbnQtc2lkZSBzaWduaW5nJyk7XG4gICAgICAgICAgICB0b2tlblJlcXVlc3RDYWxsYmFjayA9IGZ1bmN0aW9uIChwYXJhbXMsIGNiKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuY3JlYXRlVG9rZW5SZXF1ZXN0KHBhcmFtcywgYXV0aE9wdGlvbnMsIGNiKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgbXNnID0gJ05lZWQgYSBuZXcgdG9rZW4sIGJ1dCBhdXRoT3B0aW9ucyBkb2VzIG5vdCBpbmNsdWRlIGFueSB3YXkgdG8gcmVxdWVzdCBvbmUgKG5vIGF1dGhVcmwsIGF1dGhDYWxsYmFjaywgb3Iga2V5KSc7XG4gICAgICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19FUlJPUiwgJ0F1dGgoKScsICdsaWJyYXJ5IGluaXRpYWxpemVkIHdpdGggYSB0b2tlbiBsaXRlcmFsIHdpdGhvdXQgYW55IHdheSB0byByZW5ldyB0aGUgdG9rZW4gd2hlbiBpdCBleHBpcmVzIChubyBhdXRoVXJsLCBhdXRoQ2FsbGJhY2ssIG9yIGtleSkuIFNlZSBodHRwczovL2hlbHAuYWJseS5pby9lcnJvci80MDE3MSBmb3IgaGVscCcpO1xuICAgICAgICAgICAgX2NhbGxiYWNrKG5ldyBlcnJvcmluZm9fMS5kZWZhdWx0KG1zZywgNDAxNzEsIDQwMykpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8qIG5vcm1hbGlzZSB0b2tlbiBwYXJhbXMgKi9cbiAgICAgICAgaWYgKCdjYXBhYmlsaXR5JyBpbiB0b2tlblBhcmFtcylcbiAgICAgICAgICAgIHRva2VuUGFyYW1zLmNhcGFiaWxpdHkgPSBjMTRuKHRva2VuUGFyYW1zLmNhcGFiaWxpdHkpO1xuICAgICAgICB2YXIgdG9rZW5SZXF1ZXN0ID0gZnVuY3Rpb24gKHNpZ25lZFRva2VuUGFyYW1zLCB0b2tlbkNiKSB7XG4gICAgICAgICAgICB2YXIga2V5TmFtZSA9IHNpZ25lZFRva2VuUGFyYW1zLmtleU5hbWUsIHBhdGggPSAnL2tleXMvJyArIGtleU5hbWUgKyAnL3JlcXVlc3RUb2tlbicsIHRva2VuVXJpID0gZnVuY3Rpb24gKGhvc3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2xpZW50LmJhc2VVcmkoaG9zdCkgKyBwYXRoO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHZhciByZXF1ZXN0SGVhZGVycyA9IFV0aWxzLmRlZmF1bHRQb3N0SGVhZGVycyhfdGhpcy5jbGllbnQub3B0aW9ucyk7XG4gICAgICAgICAgICBpZiAoYXV0aE9wdGlvbnMucmVxdWVzdEhlYWRlcnMpXG4gICAgICAgICAgICAgICAgVXRpbHMubWl4aW4ocmVxdWVzdEhlYWRlcnMsIGF1dGhPcHRpb25zLnJlcXVlc3RIZWFkZXJzKTtcbiAgICAgICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01JQ1JPLCAnQXV0aC5yZXF1ZXN0VG9rZW4oKS5yZXF1ZXN0VG9rZW4nLCAnU2VuZGluZyBQT1NUIHRvICcgKyBwYXRoICsgJzsgVG9rZW4gcGFyYW1zOiAnICsgSlNPTi5zdHJpbmdpZnkoc2lnbmVkVG9rZW5QYXJhbXMpKTtcbiAgICAgICAgICAgIF90aGlzLmNsaWVudC5odHRwLmRvKEh0dHBNZXRob2RzXzEuZGVmYXVsdC5Qb3N0LCBjbGllbnQsIHRva2VuVXJpLCByZXF1ZXN0SGVhZGVycywgSlNPTi5zdHJpbmdpZnkoc2lnbmVkVG9rZW5QYXJhbXMpLCBudWxsLCB0b2tlbkNiKTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHRva2VuUmVxdWVzdENhbGxiYWNrVGltZW91dEV4cGlyZWQgPSBmYWxzZSwgdGltZW91dExlbmd0aCA9IHRoaXMuY2xpZW50Lm9wdGlvbnMudGltZW91dHMucmVhbHRpbWVSZXF1ZXN0VGltZW91dCwgdG9rZW5SZXF1ZXN0Q2FsbGJhY2tUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0b2tlblJlcXVlc3RDYWxsYmFja1RpbWVvdXRFeHBpcmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBtc2cgPSAnVG9rZW4gcmVxdWVzdCBjYWxsYmFjayB0aW1lZCBvdXQgYWZ0ZXIgJyArIHRpbWVvdXRMZW5ndGggLyAxMDAwICsgJyBzZWNvbmRzJztcbiAgICAgICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX0VSUk9SLCAnQXV0aC5yZXF1ZXN0VG9rZW4oKScsIG1zZyk7XG4gICAgICAgICAgICBfY2FsbGJhY2sobmV3IGVycm9yaW5mb18xLmRlZmF1bHQobXNnLCA0MDE3MCwgNDAxKSk7XG4gICAgICAgIH0sIHRpbWVvdXRMZW5ndGgpO1xuICAgICAgICB0b2tlblJlcXVlc3RDYWxsYmFjayh0b2tlblBhcmFtcywgZnVuY3Rpb24gKGVyciwgdG9rZW5SZXF1ZXN0T3JEZXRhaWxzLCBjb250ZW50VHlwZSkge1xuICAgICAgICAgICAgaWYgKHRva2VuUmVxdWVzdENhbGxiYWNrVGltZW91dEV4cGlyZWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRva2VuUmVxdWVzdENhbGxiYWNrVGltZW91dCk7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfRVJST1IsICdBdXRoLnJlcXVlc3RUb2tlbigpJywgJ3Rva2VuIHJlcXVlc3Qgc2lnbmluZyBjYWxsIHJldHVybmVkIGVycm9yOyBlcnIgPSAnICsgVXRpbHMuaW5zcGVjdEVycm9yKGVycikpO1xuICAgICAgICAgICAgICAgIF9jYWxsYmFjayhub3JtYWxpc2VBdXRoY2FsbGJhY2tFcnJvcihlcnIpKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKiB0aGUgcmVzcG9uc2UgZnJvbSB0aGUgY2FsbGJhY2sgbWlnaHQgYmUgYSB0b2tlbiBzdHJpbmcsIGEgc2lnbmVkIHJlcXVlc3Qgb3IgYSB0b2tlbiBkZXRhaWxzICovXG4gICAgICAgICAgICBpZiAodHlwZW9mIHRva2VuUmVxdWVzdE9yRGV0YWlscyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBpZiAodG9rZW5SZXF1ZXN0T3JEZXRhaWxzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBfY2FsbGJhY2sobmV3IGVycm9yaW5mb18xLmRlZmF1bHQoJ1Rva2VuIHN0cmluZyBpcyBlbXB0eScsIDQwMTcwLCA0MDEpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodG9rZW5SZXF1ZXN0T3JEZXRhaWxzLmxlbmd0aCA+IE1BWF9UT0tFTl9MRU5HVEgpIHtcbiAgICAgICAgICAgICAgICAgICAgX2NhbGxiYWNrKG5ldyBlcnJvcmluZm9fMS5kZWZhdWx0KCdUb2tlbiBzdHJpbmcgZXhjZWVkZWQgbWF4IHBlcm1pdHRlZCBsZW5ndGggKHdhcyAnICsgdG9rZW5SZXF1ZXN0T3JEZXRhaWxzLmxlbmd0aCArICcgYnl0ZXMpJywgNDAxNzAsIDQwMSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0b2tlblJlcXVlc3RPckRldGFpbHMgPT09ICd1bmRlZmluZWQnIHx8IHRva2VuUmVxdWVzdE9yRGV0YWlscyA9PT0gJ251bGwnKSB7XG4gICAgICAgICAgICAgICAgICAgIC8qIGNvbW1vbiBmYWlsdXJlIG1vZGUgd2l0aCBwb29ybHktaW1wbGVtZW50ZWQgYXV0aENhbGxiYWNrcyAqL1xuICAgICAgICAgICAgICAgICAgICBfY2FsbGJhY2sobmV3IGVycm9yaW5mb18xLmRlZmF1bHQoJ1Rva2VuIHN0cmluZyB3YXMgbGl0ZXJhbCBudWxsL3VuZGVmaW5lZCcsIDQwMTcwLCA0MDEpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodG9rZW5SZXF1ZXN0T3JEZXRhaWxzWzBdID09PSAneycgJiYgIShjb250ZW50VHlwZSAmJiBjb250ZW50VHlwZS5pbmRleE9mKCdhcHBsaWNhdGlvbi9qd3QnKSA+IC0xKSkge1xuICAgICAgICAgICAgICAgICAgICBfY2FsbGJhY2sobmV3IGVycm9yaW5mb18xLmRlZmF1bHQoXCJUb2tlbiB3YXMgZG91YmxlLWVuY29kZWQ7IG1ha2Ugc3VyZSB5b3UncmUgbm90IEpTT04tZW5jb2RpbmcgYW4gYWxyZWFkeSBlbmNvZGVkIHRva2VuIHJlcXVlc3Qgb3IgZGV0YWlsc1wiLCA0MDE3MCwgNDAxKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfY2FsbGJhY2sobnVsbCwgeyB0b2tlbjogdG9rZW5SZXF1ZXN0T3JEZXRhaWxzIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIHRva2VuUmVxdWVzdE9yRGV0YWlscyAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICB2YXIgbXNnID0gJ0V4cGVjdGVkIHRva2VuIHJlcXVlc3QgY2FsbGJhY2sgdG8gY2FsbCBiYWNrIHdpdGggYSB0b2tlbiBzdHJpbmcgb3IgdG9rZW4gcmVxdWVzdC9kZXRhaWxzIG9iamVjdCwgYnV0IGdvdCBhICcgK1xuICAgICAgICAgICAgICAgICAgICB0eXBlb2YgdG9rZW5SZXF1ZXN0T3JEZXRhaWxzO1xuICAgICAgICAgICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX0VSUk9SLCAnQXV0aC5yZXF1ZXN0VG9rZW4oKScsIG1zZyk7XG4gICAgICAgICAgICAgICAgX2NhbGxiYWNrKG5ldyBlcnJvcmluZm9fMS5kZWZhdWx0KG1zZywgNDAxNzAsIDQwMSkpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBvYmplY3RTaXplID0gSlNPTi5zdHJpbmdpZnkodG9rZW5SZXF1ZXN0T3JEZXRhaWxzKS5sZW5ndGg7XG4gICAgICAgICAgICBpZiAob2JqZWN0U2l6ZSA+IE1BWF9UT0tFTl9MRU5HVEggJiYgIWF1dGhPcHRpb25zLnN1cHByZXNzTWF4TGVuZ3RoQ2hlY2spIHtcbiAgICAgICAgICAgICAgICBfY2FsbGJhY2sobmV3IGVycm9yaW5mb18xLmRlZmF1bHQoJ1Rva2VuIHJlcXVlc3QvZGV0YWlscyBvYmplY3QgZXhjZWVkZWQgbWF4IHBlcm1pdHRlZCBzdHJpbmdpZmllZCBzaXplICh3YXMgJyArIG9iamVjdFNpemUgKyAnIGJ5dGVzKScsIDQwMTcwLCA0MDEpKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoJ2lzc3VlZCcgaW4gdG9rZW5SZXF1ZXN0T3JEZXRhaWxzKSB7XG4gICAgICAgICAgICAgICAgLyogYSB0b2tlbkRldGFpbHMgb2JqZWN0ICovXG4gICAgICAgICAgICAgICAgX2NhbGxiYWNrKG51bGwsIHRva2VuUmVxdWVzdE9yRGV0YWlscyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCEoJ2tleU5hbWUnIGluIHRva2VuUmVxdWVzdE9yRGV0YWlscykpIHtcbiAgICAgICAgICAgICAgICB2YXIgbXNnID0gJ0V4cGVjdGVkIHRva2VuIHJlcXVlc3QgY2FsbGJhY2sgdG8gY2FsbCBiYWNrIHdpdGggYSB0b2tlbiBzdHJpbmcsIHRva2VuIHJlcXVlc3Qgb2JqZWN0LCBvciB0b2tlbiBkZXRhaWxzIG9iamVjdCc7XG4gICAgICAgICAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfRVJST1IsICdBdXRoLnJlcXVlc3RUb2tlbigpJywgbXNnKTtcbiAgICAgICAgICAgICAgICBfY2FsbGJhY2sobmV3IGVycm9yaW5mb18xLmRlZmF1bHQobXNnLCA0MDE3MCwgNDAxKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyogaXQncyBhIHRva2VuIHJlcXVlc3QsIHNvIG1ha2UgdGhlIHJlcXVlc3QgKi9cbiAgICAgICAgICAgIHRva2VuUmVxdWVzdCh0b2tlblJlcXVlc3RPckRldGFpbHMsIGZ1bmN0aW9uIChlcnIsIHRva2VuUmVzcG9uc2UsIGhlYWRlcnMsIHVucGFja2VkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19FUlJPUiwgJ0F1dGgucmVxdWVzdFRva2VuKCknLCAndG9rZW4gcmVxdWVzdCBBUEkgY2FsbCByZXR1cm5lZCBlcnJvcjsgZXJyID0gJyArIFV0aWxzLmluc3BlY3RFcnJvcihlcnIpKTtcbiAgICAgICAgICAgICAgICAgICAgX2NhbGxiYWNrKG5vcm1hbGlzZUF1dGhjYWxsYmFja0Vycm9yKGVycikpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghdW5wYWNrZWQpXG4gICAgICAgICAgICAgICAgICAgIHRva2VuUmVzcG9uc2UgPSBKU09OLnBhcnNlKHRva2VuUmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01JTk9SLCAnQXV0aC5nZXRUb2tlbigpJywgJ3Rva2VuIHJlY2VpdmVkJyk7XG4gICAgICAgICAgICAgICAgX2NhbGxiYWNrKG51bGwsIHRva2VuUmVzcG9uc2UpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGFuZCBzaWduIGEgdG9rZW4gcmVxdWVzdCBiYXNlZCBvbiB0aGUgZ2l2ZW4gb3B0aW9ucy5cbiAgICAgKiBOT1RFIHRoaXMgY2FuIG9ubHkgYmUgdXNlZCB3aGVuIHRoZSBrZXkgdmFsdWUgaXMgYXZhaWxhYmxlIGxvY2FsbHkuXG4gICAgICogT3RoZXJ3aXNlLCBzaWduZWQgdG9rZW4gcmVxdWVzdHMgbXVzdCBiZSBvYnRhaW5lZCBmcm9tIHRoZSBrZXlcbiAgICAgKiBvd25lciAoZWl0aGVyIHVzaW5nIHRoZSB0b2tlbiByZXF1ZXN0IGNhbGxiYWNrIG9yIHVybCkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYXV0aE9wdGlvbnNcbiAgICAgKiBhbiBvYmplY3QgY29udGFpbmluZyB0aGUgcmVxdWVzdCBvcHRpb25zOlxuICAgICAqIC0ga2V5OiAgICAgICAgICAgdGhlIGtleSB0byB1c2UuIElmIG5vdCBzcGVjaWZpZWQsIGEga2V5IHBhc3NlZCBpbiBjb25zdHJ1Y3RpbmdcbiAgICAgKiAgICAgICAgICAgICAgICAgIHRoZSBSZXN0IGludGVyZmFjZSB3aWxsIGJlIHVzZWRcbiAgICAgKlxuICAgICAqIC0gcXVlcnlUaW1lICAgICAgKG9wdGlvbmFsKSBib29sZWFuIGluZGljYXRpbmcgdGhhdCB0aGUgYWJseSBzeXN0ZW0gc2hvdWxkIGJlXG4gICAgICogICAgICAgICAgICAgICAgICBxdWVyaWVkIGZvciB0aGUgY3VycmVudCB0aW1lIHdoZW4gbm9uZSBpcyBzcGVjaWZpZWQgZXhwbGljaXRseVxuICAgICAqXG4gICAgICogLSByZXF1ZXN0SGVhZGVycyAob3B0aW9uYWwsIHVuc3VwcG9ydGVkLCBmb3IgdGVzdGluZyBvbmx5KSBleHRyYSBoZWFkZXJzIHRvIGFkZCB0byB0aGVcbiAgICAgKiAgICAgICAgICAgICAgICAgIHJlcXVlc3RUb2tlbiByZXF1ZXN0XG4gICAgICpcbiAgICAgKiBAcGFyYW0gdG9rZW5QYXJhbXNcbiAgICAgKiBhbiBvYmplY3QgY29udGFpbmluZyB0aGUgcGFyYW1ldGVycyBmb3IgdGhlIHJlcXVlc3RlZCB0b2tlbjpcbiAgICAgKiAtIHR0bDogICAgICAgKG9wdGlvbmFsKSB0aGUgcmVxdWVzdGVkIGxpZmUgb2YgdGhlIHRva2VuIGluIG1zLiBJZiBub25lIGlzIHNwZWNpZmllZFxuICAgICAqICAgICAgICAgICAgICAgICAgYSBkZWZhdWx0IG9mIDEgaG91ciBpcyBwcm92aWRlZC4gVGhlIG1heGltdW0gbGlmZXRpbWUgaXMgMjRob3VyczsgYW55IHJlcXVlc3RcbiAgICAgKiAgICAgICAgICAgICAgICAgIGV4Y2VlZGluZyB0aGF0IGxpZmV0aW1lIHdpbGwgYmUgcmVqZWN0ZWQgd2l0aCBhbiBlcnJvci5cbiAgICAgKlxuICAgICAqIC0gY2FwYWJpbGl0eTogICAgKG9wdGlvbmFsKSB0aGUgY2FwYWJpbGl0eSB0byBhc3NvY2lhdGUgd2l0aCB0aGUgYWNjZXNzIHRva2VuLlxuICAgICAqICAgICAgICAgICAgICAgICAgSWYgbm9uZSBpcyBzcGVjaWZpZWQsIGEgdG9rZW4gd2lsbCBiZSByZXF1ZXN0ZWQgd2l0aCBhbGwgb2YgdGhlXG4gICAgICogICAgICAgICAgICAgICAgICBjYXBhYmlsaXRpZXMgb2YgdGhlIHNwZWNpZmllZCBrZXkuXG4gICAgICpcbiAgICAgKiAtIGNsaWVudElkOiAgICAgIChvcHRpb25hbCkgYSBjbGllbnQgSUQgdG8gYXNzb2NpYXRlIHdpdGggdGhlIHRva2VuOyBpZiBub3RcbiAgICAgKiAgICAgICAgICAgICAgICAgIHNwZWNpZmllZCwgYSBjbGllbnRJZCBwYXNzZWQgaW4gY29uc3RydWN0aW5nIHRoZSBSZXN0IGludGVyZmFjZSB3aWxsIGJlIHVzZWRcbiAgICAgKlxuICAgICAqIC0gdGltZXN0YW1wOiAgICAgKG9wdGlvbmFsKSB0aGUgdGltZSBpbiBtcyBzaW5jZSB0aGUgZXBvY2guIElmIG5vbmUgaXMgc3BlY2lmaWVkLFxuICAgICAqICAgICAgICAgICAgICAgICAgdGhlIHN5c3RlbSB3aWxsIGJlIHF1ZXJpZWQgZm9yIGEgdGltZSB2YWx1ZSB0byB1c2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY2FsbGJhY2tcbiAgICAgKi9cbiAgICBBdXRoLnByb3RvdHlwZS5jcmVhdGVUb2tlblJlcXVlc3QgPSBmdW5jdGlvbiAodG9rZW5QYXJhbXMsIGF1dGhPcHRpb25zLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAvKiBzaHVmZmxlIGFuZCBub3JtYWxpc2UgYXJndW1lbnRzIGFzIG5lY2Vzc2FyeSAqL1xuICAgICAgICBpZiAodHlwZW9mIHRva2VuUGFyYW1zID09ICdmdW5jdGlvbicgJiYgIWNhbGxiYWNrKSB7XG4gICAgICAgICAgICBjYWxsYmFjayA9IHRva2VuUGFyYW1zO1xuICAgICAgICAgICAgYXV0aE9wdGlvbnMgPSB0b2tlblBhcmFtcyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGF1dGhPcHRpb25zID09ICdmdW5jdGlvbicgJiYgIWNhbGxiYWNrKSB7XG4gICAgICAgICAgICBjYWxsYmFjayA9IGF1dGhPcHRpb25zO1xuICAgICAgICAgICAgYXV0aE9wdGlvbnMgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICghY2FsbGJhY2sgJiYgdGhpcy5jbGllbnQub3B0aW9ucy5wcm9taXNlcykge1xuICAgICAgICAgICAgcmV0dXJuIFV0aWxzLnByb21pc2lmeSh0aGlzLCAnY3JlYXRlVG9rZW5SZXF1ZXN0JywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgICAvKiBSU0E5aDogaWYgYXV0aE9wdGlvbnMgcGFzc2VkIGluLCB0aGV5J3JlIHVzZWQgaW5zdGVhZCBvZiBzdG9yZWQsIGRvbid0IG1lcmdlIHRoZW0gKi9cbiAgICAgICAgYXV0aE9wdGlvbnMgPSBhdXRoT3B0aW9ucyB8fCB0aGlzLmF1dGhPcHRpb25zO1xuICAgICAgICB0b2tlblBhcmFtcyA9IHRva2VuUGFyYW1zIHx8IFV0aWxzLmNvcHkodGhpcy50b2tlblBhcmFtcyk7XG4gICAgICAgIHZhciBrZXkgPSBhdXRoT3B0aW9ucy5rZXk7XG4gICAgICAgIGlmICgha2V5KSB7XG4gICAgICAgICAgICBjYWxsYmFjayhuZXcgZXJyb3JpbmZvXzEuZGVmYXVsdCgnTm8ga2V5IHNwZWNpZmllZCcsIDQwMTAxLCA0MDMpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIga2V5UGFydHMgPSBrZXkuc3BsaXQoJzonKSwga2V5TmFtZSA9IGtleVBhcnRzWzBdLCBrZXlTZWNyZXQgPSBrZXlQYXJ0c1sxXTtcbiAgICAgICAgaWYgKCFrZXlTZWNyZXQpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKG5ldyBlcnJvcmluZm9fMS5kZWZhdWx0KCdJbnZhbGlkIGtleSBzcGVjaWZpZWQnLCA0MDEwMSwgNDAzKSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRva2VuUGFyYW1zLmNsaWVudElkID09PSAnJykge1xuICAgICAgICAgICAgY2FsbGJhY2sobmV3IGVycm9yaW5mb18xLmRlZmF1bHQoJ2NsaWVudElkIGNhbuKAmXQgYmUgYW4gZW1wdHkgc3RyaW5nJywgNDAwMTIsIDQwMCkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICgnY2FwYWJpbGl0eScgaW4gdG9rZW5QYXJhbXMpIHtcbiAgICAgICAgICAgIHRva2VuUGFyYW1zLmNhcGFiaWxpdHkgPSBjMTRuKHRva2VuUGFyYW1zLmNhcGFiaWxpdHkpO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZXF1ZXN0ID0gVXRpbHMubWl4aW4oeyBrZXlOYW1lOiBrZXlOYW1lIH0sIHRva2VuUGFyYW1zKSwgY2xpZW50SWQgPSB0b2tlblBhcmFtcy5jbGllbnRJZCB8fCAnJywgdHRsID0gdG9rZW5QYXJhbXMudHRsIHx8ICcnLCBjYXBhYmlsaXR5ID0gdG9rZW5QYXJhbXMuY2FwYWJpbGl0eSB8fCAnJztcbiAgICAgICAgKGZ1bmN0aW9uIChhdXRob3Jpc2VDYikge1xuICAgICAgICAgICAgaWYgKHJlcXVlc3QudGltZXN0YW1wKSB7XG4gICAgICAgICAgICAgICAgYXV0aG9yaXNlQ2IoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfdGhpcy5nZXRUaW1lc3RhbXAoYXV0aE9wdGlvbnMgJiYgYXV0aE9wdGlvbnMucXVlcnlUaW1lLCBmdW5jdGlvbiAoZXJyLCB0aW1lKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlcXVlc3QudGltZXN0YW1wID0gdGltZTtcbiAgICAgICAgICAgICAgICBhdXRob3Jpc2VDYigpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8qIG5vbmNlICovXG4gICAgICAgICAgICAvKiBOT1RFOiB0aGVyZSBpcyBubyBleHBlY3RhdGlvbiB0aGF0IHRoZSBjbGllbnRcbiAgICAgICAgICAgICAqIHNwZWNpZmllcyB0aGUgbm9uY2U7IHRoaXMgaXMgZG9uZSBieSB0aGUgbGlicmFyeVxuICAgICAgICAgICAgICogSG93ZXZlciwgdGhpcyBjYW4gYmUgb3ZlcnJpZGRlbiBieSB0aGUgY2xpZW50XG4gICAgICAgICAgICAgKiBzaW1wbHkgZm9yIHRlc3RpbmcgcHVycG9zZXMuICovXG4gICAgICAgICAgICB2YXIgbm9uY2UgPSByZXF1ZXN0Lm5vbmNlIHx8IChyZXF1ZXN0Lm5vbmNlID0gcmFuZG9tKCkpLCB0aW1lc3RhbXAgPSByZXF1ZXN0LnRpbWVzdGFtcDtcbiAgICAgICAgICAgIHZhciBzaWduVGV4dCA9IHJlcXVlc3Qua2V5TmFtZSArICdcXG4nICsgdHRsICsgJ1xcbicgKyBjYXBhYmlsaXR5ICsgJ1xcbicgKyBjbGllbnRJZCArICdcXG4nICsgdGltZXN0YW1wICsgJ1xcbicgKyBub25jZSArICdcXG4nO1xuICAgICAgICAgICAgLyogbWFjICovXG4gICAgICAgICAgICAvKiBOT1RFOiB0aGVyZSBpcyBubyBleHBlY3RhdGlvbiB0aGF0IHRoZSBjbGllbnRcbiAgICAgICAgICAgICAqIHNwZWNpZmllcyB0aGUgbWFjOyB0aGlzIGlzIGRvbmUgYnkgdGhlIGxpYnJhcnlcbiAgICAgICAgICAgICAqIEhvd2V2ZXIsIHRoaXMgY2FuIGJlIG92ZXJyaWRkZW4gYnkgdGhlIGNsaWVudFxuICAgICAgICAgICAgICogc2ltcGx5IGZvciB0ZXN0aW5nIHB1cnBvc2VzLiAqL1xuICAgICAgICAgICAgcmVxdWVzdC5tYWMgPSByZXF1ZXN0Lm1hYyB8fCBobWFjKHNpZ25UZXh0LCBrZXlTZWNyZXQpO1xuICAgICAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlOT1IsICdBdXRoLmdldFRva2VuUmVxdWVzdCgpJywgJ2dlbmVyYXRlZCBzaWduZWQgcmVxdWVzdCcpO1xuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgcmVxdWVzdCk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBhdXRoIHF1ZXJ5IHBhcmFtcyB0byB1c2UgZm9yIGEgd2Vic29ja2V0IGNvbm5lY3Rpb24sXG4gICAgICogYmFzZWQgb24gdGhlIGN1cnJlbnQgYXV0aCBwYXJhbWV0ZXJzXG4gICAgICovXG4gICAgQXV0aC5wcm90b3R5cGUuZ2V0QXV0aFBhcmFtcyA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICBpZiAodGhpcy5tZXRob2QgPT0gJ2Jhc2ljJylcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHsga2V5OiB0aGlzLmtleSB9KTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdGhpcy5fZW5zdXJlVmFsaWRBdXRoQ3JlZGVudGlhbHMoZmFsc2UsIGZ1bmN0aW9uIChlcnIsIHRva2VuRGV0YWlscykge1xuICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIXRva2VuRGV0YWlscykge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0F1dGguZ2V0QXV0aFBhcmFtcygpOiBfZW5zdXJlVmFsaWRBdXRoQ3JlZGVudGlhbHMgcmV0dXJuZWQgbm8gZXJyb3Igb3IgdG9rZW5EZXRhaWxzJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHsgYWNjZXNzX3Rva2VuOiB0b2tlbkRldGFpbHMudG9rZW4gfSk7XG4gICAgICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldCB0aGUgYXV0aG9yaXphdGlvbiBoZWFkZXIgdG8gdXNlIGZvciBhIFJFU1Qgb3IgY29tZXQgcmVxdWVzdCxcbiAgICAgKiBiYXNlZCBvbiB0aGUgY3VycmVudCBhdXRoIHBhcmFtZXRlcnNcbiAgICAgKi9cbiAgICBBdXRoLnByb3RvdHlwZS5nZXRBdXRoSGVhZGVycyA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICBpZiAodGhpcy5tZXRob2QgPT0gJ2Jhc2ljJykge1xuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgeyBhdXRob3JpemF0aW9uOiAnQmFzaWMgJyArIHRoaXMuYmFzaWNLZXkgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9lbnN1cmVWYWxpZEF1dGhDcmVkZW50aWFscyhmYWxzZSwgZnVuY3Rpb24gKGVyciwgdG9rZW5EZXRhaWxzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghdG9rZW5EZXRhaWxzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQXV0aC5nZXRBdXRoUGFyYW1zKCk6IF9lbnN1cmVWYWxpZEF1dGhDcmVkZW50aWFscyByZXR1cm5lZCBubyBlcnJvciBvciB0b2tlbkRldGFpbHMnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgeyBhdXRob3JpemF0aW9uOiAnQmVhcmVyICcgKyBVdGlscy50b0Jhc2U2NCh0b2tlbkRldGFpbHMudG9rZW4pIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldCB0aGUgY3VycmVudCB0aW1lIGJhc2VkIG9uIHRoZSBsb2NhbCBjbG9jayxcbiAgICAgKiBvciBpZiB0aGUgb3B0aW9uIHF1ZXJ5VGltZSBpcyB0cnVlLCByZXR1cm4gdGhlIHNlcnZlciB0aW1lLlxuICAgICAqIFRoZSBzZXJ2ZXIgdGltZSBvZmZzZXQgZnJvbSB0aGUgbG9jYWwgdGltZSBpcyBzdG9yZWQgc28gdGhhdFxuICAgICAqIG9ubHkgb25lIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB0byBnZXQgdGhlIHRpbWUgaXMgZXZlciBuZWVkZWRcbiAgICAgKi9cbiAgICBBdXRoLnByb3RvdHlwZS5nZXRUaW1lc3RhbXAgPSBmdW5jdGlvbiAocXVlcnlUaW1lLCBjYWxsYmFjaykge1xuICAgICAgICBpZiAoIXRoaXMuaXNUaW1lT2Zmc2V0U2V0KCkgJiYgKHF1ZXJ5VGltZSB8fCB0aGlzLmF1dGhPcHRpb25zLnF1ZXJ5VGltZSkpIHtcbiAgICAgICAgICAgIHRoaXMuY2xpZW50LnRpbWUoY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgdGhpcy5nZXRUaW1lc3RhbXBVc2luZ09mZnNldCgpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQXV0aC5wcm90b3R5cGUuZ2V0VGltZXN0YW1wVXNpbmdPZmZzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBVdGlscy5ub3coKSArICh0aGlzLmNsaWVudC5zZXJ2ZXJUaW1lT2Zmc2V0IHx8IDApO1xuICAgIH07XG4gICAgQXV0aC5wcm90b3R5cGUuaXNUaW1lT2Zmc2V0U2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jbGllbnQuc2VydmVyVGltZU9mZnNldCAhPT0gbnVsbDtcbiAgICB9O1xuICAgIEF1dGgucHJvdG90eXBlLl9zYXZlQmFzaWNPcHRpb25zID0gZnVuY3Rpb24gKGF1dGhPcHRpb25zKSB7XG4gICAgICAgIHRoaXMubWV0aG9kID0gJ2Jhc2ljJztcbiAgICAgICAgdGhpcy5rZXkgPSBhdXRoT3B0aW9ucy5rZXk7XG4gICAgICAgIHRoaXMuYmFzaWNLZXkgPSBVdGlscy50b0Jhc2U2NChhdXRoT3B0aW9ucy5rZXkpO1xuICAgICAgICB0aGlzLmF1dGhPcHRpb25zID0gYXV0aE9wdGlvbnMgfHwge307XG4gICAgICAgIGlmICgnY2xpZW50SWQnIGluIGF1dGhPcHRpb25zKSB7XG4gICAgICAgICAgICB0aGlzLl91c2VyU2V0Q2xpZW50SWQoYXV0aE9wdGlvbnMuY2xpZW50SWQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBBdXRoLnByb3RvdHlwZS5fc2F2ZVRva2VuT3B0aW9ucyA9IGZ1bmN0aW9uICh0b2tlblBhcmFtcywgYXV0aE9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSAndG9rZW4nO1xuICAgICAgICBpZiAodG9rZW5QYXJhbXMpIHtcbiAgICAgICAgICAgIC8qIFdlIHRlbXBvcmFyaWx5IHBlcnNpc3QgdG9rZW5QYXJhbXMudGltZXN0YW1wIGluIGNhc2UgYSBuZXcgdG9rZW4gbmVlZHNcbiAgICAgICAgICAgICAqIHRvIGJlIHJlcXVlc3RlZCwgdGhlbiBudWxsIGl0IG91dCBpbiB0aGUgY2FsbGJhY2sgb2ZcbiAgICAgICAgICAgICAqIF9lbnN1cmVWYWxpZEF1dGhDcmVkZW50aWFscyBmb3IgUlNBMTBnIGNvbXBsaWFuY2UgKi9cbiAgICAgICAgICAgIHRoaXMudG9rZW5QYXJhbXMgPSB0b2tlblBhcmFtcztcbiAgICAgICAgfVxuICAgICAgICBpZiAoYXV0aE9wdGlvbnMpIHtcbiAgICAgICAgICAgIC8qIG5vcm1hbGlzZSAqL1xuICAgICAgICAgICAgaWYgKGF1dGhPcHRpb25zLnRva2VuKSB7XG4gICAgICAgICAgICAgICAgLyogb3B0aW9ucy50b2tlbiBtYXkgY29udGFpbiBhIHRva2VuIHN0cmluZyBvciwgZm9yIGNvbnZlbmllbmNlLCBhIFRva2VuRGV0YWlscyAqL1xuICAgICAgICAgICAgICAgIGF1dGhPcHRpb25zLnRva2VuRGV0YWlscyA9XG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiBhdXRoT3B0aW9ucy50b2tlbiA9PT0gJ3N0cmluZydcbiAgICAgICAgICAgICAgICAgICAgICAgID8geyB0b2tlbjogYXV0aE9wdGlvbnMudG9rZW4gfVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBhdXRoT3B0aW9ucy50b2tlbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhdXRoT3B0aW9ucy50b2tlbkRldGFpbHMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRva2VuRGV0YWlscyA9IGF1dGhPcHRpb25zLnRva2VuRGV0YWlscztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgnY2xpZW50SWQnIGluIGF1dGhPcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdXNlclNldENsaWVudElkKGF1dGhPcHRpb25zLmNsaWVudElkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuYXV0aE9wdGlvbnMgPSBhdXRoT3B0aW9ucztcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyogQHBhcmFtIGZvcmNlU3VwZXJzZWRlOiBmb3JjZSBhIG5ldyB0b2tlbiByZXF1ZXN0IGV2ZW4gaWYgdGhlcmUncyBvbmUgaW5cbiAgICAgKiBwcm9ncmVzcywgbWFraW5nIGFsbCBwZW5kaW5nIGNhbGxiYWNrcyB3YWl0IGZvciB0aGUgbmV3IG9uZSAqL1xuICAgIEF1dGgucHJvdG90eXBlLl9lbnN1cmVWYWxpZEF1dGhDcmVkZW50aWFscyA9IGZ1bmN0aW9uIChmb3JjZVN1cGVyc2VkZSwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIHRva2VuID0gdGhpcy50b2tlbkRldGFpbHM7XG4gICAgICAgIGlmICh0b2tlbikge1xuICAgICAgICAgICAgaWYgKHRoaXMuX3Rva2VuQ2xpZW50SWRNaXNtYXRjaCh0b2tlbi5jbGllbnRJZCkpIHtcbiAgICAgICAgICAgICAgICAvKiA0MDMgdG8gdHJpZ2dlciBhIHBlcm1hbmVudGx5IGZhaWxlZCBjbGllbnQgLSBSU0ExNWMgKi9cbiAgICAgICAgICAgICAgICBjYWxsYmFjayhuZXcgZXJyb3JpbmZvXzEuZGVmYXVsdCgnTWlzbWF0Y2ggYmV0d2VlbiBjbGllbnRJZCBpbiB0b2tlbiAoJyArIHRva2VuLmNsaWVudElkICsgJykgYW5kIGN1cnJlbnQgY2xpZW50SWQgKCcgKyB0aGlzLmNsaWVudElkICsgJyknLCA0MDEwMiwgNDAzKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyogUlNBNGIxIC0tIGlmIHdlIGhhdmUgYSBzZXJ2ZXIgdGltZSBvZmZzZXQgc2V0IGFscmVhZHksIHdlIGNhblxuICAgICAgICAgICAgICogYXV0b21hdGljYWxseSByZW1vdmUgZXhwaXJlZCB0b2tlbnMuIEVsc2UganVzdCB1c2UgdGhlIGNhY2hlZCB0b2tlbi4gSWYgaXQgaXNcbiAgICAgICAgICAgICAqIGV4cGlyZWQgQWJseSB3aWxsIHRlbGwgdXMgYW5kIHdlJ2xsIGRpc2NhcmQgaXQgdGhlbi4gKi9cbiAgICAgICAgICAgIGlmICghdGhpcy5pc1RpbWVPZmZzZXRTZXQoKSB8fCAhdG9rZW4uZXhwaXJlcyB8fCB0b2tlbi5leHBpcmVzID49IHRoaXMuZ2V0VGltZXN0YW1wVXNpbmdPZmZzZXQoKSkge1xuICAgICAgICAgICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01JTk9SLCAnQXV0aC5nZXRUb2tlbigpJywgJ3VzaW5nIGNhY2hlZCB0b2tlbjsgZXhwaXJlcyA9ICcgKyB0b2tlbi5leHBpcmVzKTtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCB0b2tlbik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyogZXhwaXJlZCwgc28gcmVtb3ZlIGFuZCBmYWxsdGhyb3VnaCB0byBnZXR0aW5nIGEgbmV3IG9uZSAqL1xuICAgICAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlOT1IsICdBdXRoLmdldFRva2VuKCknLCAnZGVsZXRpbmcgZXhwaXJlZCB0b2tlbicpO1xuICAgICAgICAgICAgdGhpcy50b2tlbkRldGFpbHMgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgICh0aGlzLndhaXRpbmdGb3JUb2tlblJlcXVlc3QgfHwgKHRoaXMud2FpdGluZ0ZvclRva2VuUmVxdWVzdCA9IG11bHRpY2FzdGVyXzEuZGVmYXVsdC5jcmVhdGUoKSkpLnB1c2goY2FsbGJhY2spO1xuICAgICAgICBpZiAodGhpcy5jdXJyZW50VG9rZW5SZXF1ZXN0SWQgIT09IG51bGwgJiYgIWZvcmNlU3VwZXJzZWRlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLyogUmVxdWVzdCBhIG5ldyB0b2tlbiAqL1xuICAgICAgICB2YXIgdG9rZW5SZXF1ZXN0SWQgPSAodGhpcy5jdXJyZW50VG9rZW5SZXF1ZXN0SWQgPSBnZXRUb2tlblJlcXVlc3RJZCgpKTtcbiAgICAgICAgdGhpcy5yZXF1ZXN0VG9rZW4odGhpcy50b2tlblBhcmFtcywgdGhpcy5hdXRoT3B0aW9ucywgZnVuY3Rpb24gKGVyciwgdG9rZW5SZXNwb25zZSkge1xuICAgICAgICAgICAgaWYgKF90aGlzLmN1cnJlbnRUb2tlblJlcXVlc3RJZCA+IHRva2VuUmVxdWVzdElkKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlOT1IsICdBdXRoLl9lbnN1cmVWYWxpZEF1dGhDcmVkZW50aWFscygpJywgJ0Rpc2NhcmRpbmcgdG9rZW4gcmVxdWVzdCByZXNwb25zZTsgb3ZlcnRha2VuIGJ5IG5ld2VyIG9uZScpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF90aGlzLmN1cnJlbnRUb2tlblJlcXVlc3RJZCA9IG51bGw7XG4gICAgICAgICAgICB2YXIgY2FsbGJhY2tzID0gX3RoaXMud2FpdGluZ0ZvclRva2VuUmVxdWVzdCB8fCBub29wO1xuICAgICAgICAgICAgX3RoaXMud2FpdGluZ0ZvclRva2VuUmVxdWVzdCA9IG51bGw7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2tzKGVycik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FsbGJhY2tzKG51bGwsIChfdGhpcy50b2tlbkRldGFpbHMgPSB0b2tlblJlc3BvbnNlKSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyogVXNlci1zZXQ6IGNoZWNrIHR5cGVzLCAnKicgaXMgZGlzYWxsb3dlZCwgdGhyb3cgYW55IGVycm9ycyAqL1xuICAgIEF1dGgucHJvdG90eXBlLl91c2VyU2V0Q2xpZW50SWQgPSBmdW5jdGlvbiAoY2xpZW50SWQpIHtcbiAgICAgICAgaWYgKCEodHlwZW9mIGNsaWVudElkID09PSAnc3RyaW5nJyB8fCBjbGllbnRJZCA9PT0gbnVsbCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcmluZm9fMS5kZWZhdWx0KCdjbGllbnRJZCBtdXN0IGJlIGVpdGhlciBhIHN0cmluZyBvciBudWxsJywgNDAwMTIsIDQwMCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY2xpZW50SWQgPT09ICcqJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yaW5mb18xLmRlZmF1bHQoJ0NhbuKAmXQgdXNlIFwiKlwiIGFzIGEgY2xpZW50SWQgYXMgdGhhdCBzdHJpbmcgaXMgcmVzZXJ2ZWQuIChUbyBjaGFuZ2UgdGhlIGRlZmF1bHQgdG9rZW4gcmVxdWVzdCBiZWhhdmlvdXIgdG8gdXNlIGEgd2lsZGNhcmQgY2xpZW50SWQsIGluc3RhbnRpYXRlIHRoZSBsaWJyYXJ5IHdpdGgge2RlZmF1bHRUb2tlblBhcmFtczoge2NsaWVudElkOiBcIipcIn19KSwgb3IgaWYgY2FsbGluZyBhdXRob3JpemUoKSwgcGFzcyBpdCBpbiBhcyBhIHRva2VuUGFyYW06IGF1dGhvcml6ZSh7Y2xpZW50SWQ6IFwiKlwifSwgYXV0aE9wdGlvbnMpJywgNDAwMTIsIDQwMCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgZXJyID0gdGhpcy5fdW5jaGVja2VkU2V0Q2xpZW50SWQoY2xpZW50SWQpO1xuICAgICAgICAgICAgaWYgKGVycilcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qIEFibHktc2V0OiBubyB0eXBlY2hlY2tpbmcsICcqJyBpcyBhbGxvd2VkIGJ1dCBub3Qgc2V0IG9uIHRoaXMuY2xpZW50SWQpLCByZXR1cm4gZXJyb3JzIHRvIHRoZSBjYWxsZXIgKi9cbiAgICBBdXRoLnByb3RvdHlwZS5fdW5jaGVja2VkU2V0Q2xpZW50SWQgPSBmdW5jdGlvbiAoY2xpZW50SWQpIHtcbiAgICAgICAgaWYgKHRoaXMuX3Rva2VuQ2xpZW50SWRNaXNtYXRjaChjbGllbnRJZCkpIHtcbiAgICAgICAgICAgIC8qIFNob3VsZCBuZXZlciBoYXBwZW4gaW4gbm9ybWFsIGNpcmN1bXN0YW5jZXMgYXMgcmVhbHRpbWUgc2hvdWxkXG4gICAgICAgICAgICAgKiByZWNvZ25pc2UgbWlzbWF0Y2ggYW5kIHJldHVybiBhbiBlcnJvciAqL1xuICAgICAgICAgICAgdmFyIG1zZyA9ICdVbmV4cGVjdGVkIGNsaWVudElkIG1pc21hdGNoOiBjbGllbnQgaGFzICcgKyB0aGlzLmNsaWVudElkICsgJywgcmVxdWVzdGVkICcgKyBjbGllbnRJZDtcbiAgICAgICAgICAgIHZhciBlcnIgPSBuZXcgZXJyb3JpbmZvXzEuZGVmYXVsdChtc2csIDQwMTAyLCA0MDEpO1xuICAgICAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfRVJST1IsICdBdXRoLl91bmNoZWNrZWRTZXRDbGllbnRJZCgpJywgbXNnKTtcbiAgICAgICAgICAgIHJldHVybiBlcnI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvKiBSU0E3YTQ6IGlmIG9wdGlvbnMuY2xpZW50SWQgaXMgcHJvdmlkZWQgYW5kIGlzIG5vdFxuICAgICAgICAgICAgICogbnVsbCwgaXQgb3ZlcnJpZGVzIGRlZmF1bHRUb2tlblBhcmFtcy5jbGllbnRJZCAqL1xuICAgICAgICAgICAgdGhpcy5jbGllbnRJZCA9IHRoaXMudG9rZW5QYXJhbXMuY2xpZW50SWQgPSBjbGllbnRJZDtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBBdXRoLnByb3RvdHlwZS5fdG9rZW5DbGllbnRJZE1pc21hdGNoID0gZnVuY3Rpb24gKHRva2VuQ2xpZW50SWQpIHtcbiAgICAgICAgcmV0dXJuICEhKHRoaXMuY2xpZW50SWQgJiZcbiAgICAgICAgICAgIHRoaXMuY2xpZW50SWQgIT09ICcqJyAmJlxuICAgICAgICAgICAgdG9rZW5DbGllbnRJZCAmJlxuICAgICAgICAgICAgdG9rZW5DbGllbnRJZCAhPT0gJyonICYmXG4gICAgICAgICAgICB0aGlzLmNsaWVudElkICE9PSB0b2tlbkNsaWVudElkKTtcbiAgICB9O1xuICAgIEF1dGguaXNUb2tlbkVyciA9IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICByZXR1cm4gZXJyb3IuY29kZSAmJiBlcnJvci5jb2RlID49IDQwMTQwICYmIGVycm9yLmNvZGUgPCA0MDE1MDtcbiAgICB9O1xuICAgIEF1dGgucHJvdG90eXBlLnJldm9rZVRva2VucyA9IGZ1bmN0aW9uIChzcGVjaWZpZXJzLCBvcHRpb25zT3JDYWxsYmFja0FyZywgY2FsbGJhY2tBcmcpIHtcbiAgICAgICAgaWYgKHVzZVRva2VuQXV0aCh0aGlzLmNsaWVudC5vcHRpb25zKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yaW5mb18xLmRlZmF1bHQoJ0Nhbm5vdCByZXZva2UgdG9rZW5zIHdoZW4gdXNpbmcgdG9rZW4gYXV0aCcsIDQwMTYyLCA0MDEpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBrZXlOYW1lID0gdGhpcy5jbGllbnQub3B0aW9ucy5rZXlOYW1lO1xuICAgICAgICB2YXIgcmVzb2x2ZWRPcHRpb25zO1xuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnNPckNhbGxiYWNrQXJnID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWxsYmFja0FyZyA9IG9wdGlvbnNPckNhbGxiYWNrQXJnO1xuICAgICAgICAgICAgcmVzb2x2ZWRPcHRpb25zID0ge307XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXNvbHZlZE9wdGlvbnMgPSBvcHRpb25zT3JDYWxsYmFja0FyZyAhPT0gbnVsbCAmJiBvcHRpb25zT3JDYWxsYmFja0FyZyAhPT0gdm9pZCAwID8gb3B0aW9uc09yQ2FsbGJhY2tBcmcgOiB7fTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2FsbGJhY2tBcmcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuY2xpZW50Lm9wdGlvbnMucHJvbWlzZXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gVXRpbHMucHJvbWlzaWZ5KHRoaXMsICdyZXZva2VUb2tlbnMnLCBbc3BlY2lmaWVycywgcmVzb2x2ZWRPcHRpb25zXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYWxsYmFja0FyZyA9IG5vb3A7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNhbGxiYWNrID0gY2FsbGJhY2tBcmc7XG4gICAgICAgIHZhciByZXF1ZXN0Qm9keURUTyA9IHRzbGliXzEuX19hc3NpZ24oeyB0YXJnZXRzOiBzcGVjaWZpZXJzLm1hcChmdW5jdGlvbiAoc3BlY2lmaWVyKSB7IHJldHVybiBcIlwiLmNvbmNhdChzcGVjaWZpZXIudHlwZSwgXCI6XCIpLmNvbmNhdChzcGVjaWZpZXIudmFsdWUpOyB9KSB9LCByZXNvbHZlZE9wdGlvbnMpO1xuICAgICAgICB2YXIgZm9ybWF0ID0gdGhpcy5jbGllbnQub3B0aW9ucy51c2VCaW5hcnlQcm90b2NvbCA/IFV0aWxzLkZvcm1hdC5tc2dwYWNrIDogVXRpbHMuRm9ybWF0Lmpzb24sIGhlYWRlcnMgPSBVdGlscy5kZWZhdWx0UG9zdEhlYWRlcnModGhpcy5jbGllbnQub3B0aW9ucywgZm9ybWF0KTtcbiAgICAgICAgaWYgKHRoaXMuY2xpZW50Lm9wdGlvbnMuaGVhZGVycylcbiAgICAgICAgICAgIFV0aWxzLm1peGluKGhlYWRlcnMsIHRoaXMuY2xpZW50Lm9wdGlvbnMuaGVhZGVycyk7XG4gICAgICAgIHZhciByZXF1ZXN0Qm9keSA9IFV0aWxzLmVuY29kZUJvZHkocmVxdWVzdEJvZHlEVE8sIGZvcm1hdCk7XG4gICAgICAgIHJlc291cmNlXzEuZGVmYXVsdC5wb3N0KHRoaXMuY2xpZW50LCBcIi9rZXlzL1wiLmNvbmNhdChrZXlOYW1lLCBcIi9yZXZva2VUb2tlbnNcIiksIHJlcXVlc3RCb2R5LCBoZWFkZXJzLCB7IG5ld0JhdGNoUmVzcG9uc2U6ICd0cnVlJyB9LCBudWxsLCBmdW5jdGlvbiAoZXJyLCBib2R5LCBoZWFkZXJzLCB1bnBhY2tlZCkge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIC8vIFRPRE8gcmVtb3ZlIHRoaXMgdHlwZSBhc3NlcnRpb24gYWZ0ZXIgZml4aW5nIGh0dHBzOi8vZ2l0aHViLmNvbS9hYmx5L2FibHktanMvaXNzdWVzLzE0MDVcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnIpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBiYXRjaFJlc3VsdCA9ICh1bnBhY2tlZCA/IGJvZHkgOiBVdGlscy5kZWNvZGVCb2R5KGJvZHksIGZvcm1hdCkpO1xuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgYmF0Y2hSZXN1bHQpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBBdXRoO1xufSgpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IEF1dGg7XG5cblxuLyoqKi8gfSksXG4vKiAxOCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEh0dHBNZXRob2RzO1xuKGZ1bmN0aW9uIChIdHRwTWV0aG9kcykge1xuICAgIEh0dHBNZXRob2RzW1wiR2V0XCJdID0gXCJnZXRcIjtcbiAgICBIdHRwTWV0aG9kc1tcIkRlbGV0ZVwiXSA9IFwiZGVsZXRlXCI7XG4gICAgSHR0cE1ldGhvZHNbXCJQb3N0XCJdID0gXCJwb3N0XCI7XG4gICAgSHR0cE1ldGhvZHNbXCJQdXRcIl0gPSBcInB1dFwiO1xuICAgIEh0dHBNZXRob2RzW1wiUGF0Y2hcIl0gPSBcInBhdGNoXCI7XG59KShIdHRwTWV0aG9kcyB8fCAoSHR0cE1ldGhvZHMgPSB7fSkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gSHR0cE1ldGhvZHM7XG5cblxuLyoqKi8gfSksXG4vKiAxOSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5IdHRwUGFnaW5hdGVkUmVzcG9uc2UgPSBleHBvcnRzLlBhZ2luYXRlZFJlc3VsdCA9IHZvaWQgMDtcbnZhciB0c2xpYl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciBVdGlscyA9IHRzbGliXzEuX19pbXBvcnRTdGFyKF9fd2VicGFja19yZXF1aXJlX18oMSkpO1xudmFyIGxvZ2dlcl8xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygyKSk7XG52YXIgcmVzb3VyY2VfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oMTQpKTtcbmZ1bmN0aW9uIGdldFJlbFBhcmFtcyhsaW5rVXJsKSB7XG4gICAgdmFyIHVybE1hdGNoID0gbGlua1VybC5tYXRjaCgvXlxcLlxcLyhcXHcrKVxcPyguKikkLyk7XG4gICAgcmV0dXJuIHVybE1hdGNoICYmIHVybE1hdGNoWzJdICYmIFV0aWxzLnBhcnNlUXVlcnlTdHJpbmcodXJsTWF0Y2hbMl0pO1xufVxuZnVuY3Rpb24gcGFyc2VSZWxMaW5rcyhsaW5rSGVhZGVyKSB7XG4gICAgaWYgKHR5cGVvZiBsaW5rSGVhZGVyID09ICdzdHJpbmcnKVxuICAgICAgICBsaW5rSGVhZGVyID0gbGlua0hlYWRlci5zcGxpdCgnLCcpO1xuICAgIHZhciByZWxQYXJhbXMgPSB7fTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpbmtIZWFkZXIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGxpbmtNYXRjaCA9IGxpbmtIZWFkZXJbaV0ubWF0Y2goL15cXHMqPCguKyk+O1xccypyZWw9XCIoXFx3KylcIiQvKTtcbiAgICAgICAgaWYgKGxpbmtNYXRjaCkge1xuICAgICAgICAgICAgdmFyIHBhcmFtcyA9IGdldFJlbFBhcmFtcyhsaW5rTWF0Y2hbMV0pO1xuICAgICAgICAgICAgaWYgKHBhcmFtcylcbiAgICAgICAgICAgICAgICByZWxQYXJhbXNbbGlua01hdGNoWzJdXSA9IHBhcmFtcztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVsUGFyYW1zO1xufVxuZnVuY3Rpb24gcmV0dXJuRXJyT25seShlcnIsIGJvZHksIHVzZUhQUikge1xuICAgIC8qIElmIHVzaW5nIGh0dHBQYWdpbmF0ZWRSZXNwb25zZSwgZXJyb3JzIGZyb20gQWJseSBhcmUgcmV0dXJuZWQgYXMgcGFydCBvZlxuICAgICAqIHRoZSBIUFIsIG9ubHkgZG8gY2FsbGJhY2soZXJyKSBmb3IgbmV0d29yayBlcnJvcnMgZXRjLiB3aGljaCBkb24ndFxuICAgICAqIHJldHVybiBhIGJvZHkgYW5kL29yIGhhdmUgbm8gYWJseS1vcmlnaW5hdGVkIGVycm9yIGNvZGUgKG5vbi1udW1lcmljXG4gICAgICogZXJyb3IgY29kZXMgb3JpZ2luYXRlIGZyb20gbm9kZSkgKi9cbiAgICByZXR1cm4gISh1c2VIUFIgJiYgKGJvZHkgfHwgdHlwZW9mIGVyci5jb2RlID09PSAnbnVtYmVyJykpO1xufVxudmFyIFBhZ2luYXRlZFJlc291cmNlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFBhZ2luYXRlZFJlc291cmNlKHJlc3QsIHBhdGgsIGhlYWRlcnMsIGVudmVsb3BlLCBib2R5SGFuZGxlciwgdXNlSHR0cFBhZ2luYXRlZFJlc3BvbnNlKSB7XG4gICAgICAgIHRoaXMucmVzdCA9IHJlc3Q7XG4gICAgICAgIHRoaXMucGF0aCA9IHBhdGg7XG4gICAgICAgIHRoaXMuaGVhZGVycyA9IGhlYWRlcnM7XG4gICAgICAgIHRoaXMuZW52ZWxvcGUgPSBlbnZlbG9wZSAhPT0gbnVsbCAmJiBlbnZlbG9wZSAhPT0gdm9pZCAwID8gZW52ZWxvcGUgOiBudWxsO1xuICAgICAgICB0aGlzLmJvZHlIYW5kbGVyID0gYm9keUhhbmRsZXI7XG4gICAgICAgIHRoaXMudXNlSHR0cFBhZ2luYXRlZFJlc3BvbnNlID0gdXNlSHR0cFBhZ2luYXRlZFJlc3BvbnNlIHx8IGZhbHNlO1xuICAgIH1cbiAgICBQYWdpbmF0ZWRSZXNvdXJjZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKHBhcmFtcywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcmVzb3VyY2VfMS5kZWZhdWx0LmdldCh0aGlzLnJlc3QsIHRoaXMucGF0aCwgdGhpcy5oZWFkZXJzLCBwYXJhbXMsIHRoaXMuZW52ZWxvcGUsIGZ1bmN0aW9uIChlcnIsIGJvZHksIGhlYWRlcnMsIHVucGFja2VkLCBzdGF0dXNDb2RlKSB7XG4gICAgICAgICAgICBfdGhpcy5oYW5kbGVQYWdlKGVyciwgYm9keSwgaGVhZGVycywgdW5wYWNrZWQsIHN0YXR1c0NvZGUsIGNhbGxiYWNrKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBQYWdpbmF0ZWRSZXNvdXJjZS5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKHBhcmFtcywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcmVzb3VyY2VfMS5kZWZhdWx0LmRlbGV0ZSh0aGlzLnJlc3QsIHRoaXMucGF0aCwgdGhpcy5oZWFkZXJzLCBwYXJhbXMsIHRoaXMuZW52ZWxvcGUsIGZ1bmN0aW9uIChlcnIsIGJvZHksIGhlYWRlcnMsIHVucGFja2VkLCBzdGF0dXNDb2RlKSB7XG4gICAgICAgICAgICBfdGhpcy5oYW5kbGVQYWdlKGVyciwgYm9keSwgaGVhZGVycywgdW5wYWNrZWQsIHN0YXR1c0NvZGUsIGNhbGxiYWNrKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBQYWdpbmF0ZWRSZXNvdXJjZS5wcm90b3R5cGUucG9zdCA9IGZ1bmN0aW9uIChwYXJhbXMsIGJvZHksIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHJlc291cmNlXzEuZGVmYXVsdC5wb3N0KHRoaXMucmVzdCwgdGhpcy5wYXRoLCBib2R5LCB0aGlzLmhlYWRlcnMsIHBhcmFtcywgdGhpcy5lbnZlbG9wZSwgZnVuY3Rpb24gKGVyciwgcmVzcG9uc2VCb2R5LCBoZWFkZXJzLCB1bnBhY2tlZCwgc3RhdHVzQ29kZSkge1xuICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuaGFuZGxlUGFnZShlcnIsIHJlc3BvbnNlQm9keSwgaGVhZGVycywgdW5wYWNrZWQsIHN0YXR1c0NvZGUsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBQYWdpbmF0ZWRSZXNvdXJjZS5wcm90b3R5cGUucHV0ID0gZnVuY3Rpb24gKHBhcmFtcywgYm9keSwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcmVzb3VyY2VfMS5kZWZhdWx0LnB1dCh0aGlzLnJlc3QsIHRoaXMucGF0aCwgYm9keSwgdGhpcy5oZWFkZXJzLCBwYXJhbXMsIHRoaXMuZW52ZWxvcGUsIGZ1bmN0aW9uIChlcnIsIHJlc3BvbnNlQm9keSwgaGVhZGVycywgdW5wYWNrZWQsIHN0YXR1c0NvZGUpIHtcbiAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIF90aGlzLmhhbmRsZVBhZ2UoZXJyLCByZXNwb25zZUJvZHksIGhlYWRlcnMsIHVucGFja2VkLCBzdGF0dXNDb2RlLCBjYWxsYmFjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgUGFnaW5hdGVkUmVzb3VyY2UucHJvdG90eXBlLnBhdGNoID0gZnVuY3Rpb24gKHBhcmFtcywgYm9keSwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcmVzb3VyY2VfMS5kZWZhdWx0LnBhdGNoKHRoaXMucmVzdCwgdGhpcy5wYXRoLCBib2R5LCB0aGlzLmhlYWRlcnMsIHBhcmFtcywgdGhpcy5lbnZlbG9wZSwgZnVuY3Rpb24gKGVyciwgcmVzcG9uc2VCb2R5LCBoZWFkZXJzLCB1bnBhY2tlZCwgc3RhdHVzQ29kZSkge1xuICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuaGFuZGxlUGFnZShlcnIsIHJlc3BvbnNlQm9keSwgaGVhZGVycywgdW5wYWNrZWQsIHN0YXR1c0NvZGUsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBQYWdpbmF0ZWRSZXNvdXJjZS5wcm90b3R5cGUuaGFuZGxlUGFnZSA9IGZ1bmN0aW9uIChlcnIsIGJvZHksIGhlYWRlcnMsIHVucGFja2VkLCBzdGF0dXNDb2RlLCBjYWxsYmFjaykge1xuICAgICAgICBpZiAoZXJyICYmIHJldHVybkVyck9ubHkoZXJyLCBib2R5LCB0aGlzLnVzZUh0dHBQYWdpbmF0ZWRSZXNwb25zZSkpIHtcbiAgICAgICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX0VSUk9SLCAnUGFnaW5hdGVkUmVzb3VyY2UuaGFuZGxlUGFnZSgpJywgJ1VuZXhwZWN0ZWQgZXJyb3IgZ2V0dGluZyByZXNvdXJjZTogZXJyID0gJyArIFV0aWxzLmluc3BlY3RFcnJvcihlcnIpKTtcbiAgICAgICAgICAgIGNhbGxiYWNrID09PSBudWxsIHx8IGNhbGxiYWNrID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjYWxsYmFjayhlcnIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpdGVtcywgbGlua0hlYWRlciwgcmVsUGFyYW1zO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaXRlbXMgPSB0aGlzLmJvZHlIYW5kbGVyKGJvZHksIGhlYWRlcnMgfHwge30sIHVucGFja2VkKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLyogSWYgd2UgZ290IGFuIGVycm9yLCB0aGUgZmFpbHVyZSB0byBwYXJzZSB0aGUgYm9keSBpcyBhbG1vc3QgY2VydGFpbmx5XG4gICAgICAgICAgICAgKiBkdWUgdG8gdGhhdCwgc28gY2FsbGJhY2sgd2l0aCB0aGF0IGluIHByZWZlcmVuY2Ugb3ZlciB0aGUgcGFyc2UgZXJyb3IgKi9cbiAgICAgICAgICAgIGNhbGxiYWNrID09PSBudWxsIHx8IGNhbGxiYWNrID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjYWxsYmFjayhlcnIgfHwgZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhlYWRlcnMgJiYgKGxpbmtIZWFkZXIgPSBoZWFkZXJzWydMaW5rJ10gfHwgaGVhZGVyc1snbGluayddKSkge1xuICAgICAgICAgICAgcmVsUGFyYW1zID0gcGFyc2VSZWxMaW5rcyhsaW5rSGVhZGVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy51c2VIdHRwUGFnaW5hdGVkUmVzcG9uc2UpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIG5ldyBIdHRwUGFnaW5hdGVkUmVzcG9uc2UodGhpcywgaXRlbXMsIGhlYWRlcnMgfHwge30sIHN0YXR1c0NvZGUsIHJlbFBhcmFtcywgZXJyKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCBuZXcgUGFnaW5hdGVkUmVzdWx0KHRoaXMsIGl0ZW1zLCByZWxQYXJhbXMpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFBhZ2luYXRlZFJlc291cmNlO1xufSgpKTtcbnZhciBQYWdpbmF0ZWRSZXN1bHQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUGFnaW5hdGVkUmVzdWx0KHJlc291cmNlLCBpdGVtcywgcmVsUGFyYW1zKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByZXNvdXJjZTtcbiAgICAgICAgdGhpcy5pdGVtcyA9IGl0ZW1zO1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIGlmIChyZWxQYXJhbXMpIHtcbiAgICAgICAgICAgIGlmICgnZmlyc3QnIGluIHJlbFBhcmFtcykge1xuICAgICAgICAgICAgICAgIHRoaXMuZmlyc3QgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjYWxsYmFjayAmJiBzZWxmLnJlc291cmNlLnJlc3Qub3B0aW9ucy5wcm9taXNlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFV0aWxzLnByb21pc2lmeShzZWxmLCAnZmlyc3QnLCBbXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc2VsZi5nZXQocmVsUGFyYW1zLmZpcnN0LCBjYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgnY3VycmVudCcgaW4gcmVsUGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50ID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghY2FsbGJhY2sgJiYgc2VsZi5yZXNvdXJjZS5yZXN0Lm9wdGlvbnMucHJvbWlzZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBVdGlscy5wcm9taXNpZnkoc2VsZiwgJ2N1cnJlbnQnLCBbXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc2VsZi5nZXQocmVsUGFyYW1zLmN1cnJlbnQsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5uZXh0ID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFjYWxsYmFjayAmJiBzZWxmLnJlc291cmNlLnJlc3Qub3B0aW9ucy5wcm9taXNlcykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gVXRpbHMucHJvbWlzaWZ5KHNlbGYsICduZXh0JywgW10pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoJ25leHQnIGluIHJlbFBhcmFtcykge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmdldChyZWxQYXJhbXMubmV4dCwgY2FsbGJhY2spO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuaGFzTmV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ25leHQnIGluIHJlbFBhcmFtcztcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLmlzTGFzdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgcmV0dXJuICEoKF9hID0gX3RoaXMuaGFzTmV4dCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwoX3RoaXMpKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyogV2UgYXNzdW1lIHRoYXQgb25seSB0aGUgaW5pdGlhbCByZXF1ZXN0IGNhbiBiZSBhIFBPU1QsIGFuZCB0aGF0IGFjY2Vzc2luZ1xuICAgICAqIHRoZSByZXN0IG9mIGEgbXVsdGlwYWdlIHNldCBvZiByZXN1bHRzIGNhbiBhbHdheXMgYmUgZG9uZSB3aXRoIEdFVCAqL1xuICAgIFBhZ2luYXRlZFJlc3VsdC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKHBhcmFtcywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIHJlcyA9IHRoaXMucmVzb3VyY2U7XG4gICAgICAgIHJlc291cmNlXzEuZGVmYXVsdC5nZXQocmVzLnJlc3QsIHJlcy5wYXRoLCByZXMuaGVhZGVycywgcGFyYW1zLCByZXMuZW52ZWxvcGUsIGZ1bmN0aW9uIChlcnIsIGJvZHksIGhlYWRlcnMsIHVucGFja2VkLCBzdGF0dXNDb2RlKSB7XG4gICAgICAgICAgICByZXMuaGFuZGxlUGFnZShlcnIsIGJvZHksIGhlYWRlcnMsIHVucGFja2VkLCBzdGF0dXNDb2RlLCBjYWxsYmFjayk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIFBhZ2luYXRlZFJlc3VsdDtcbn0oKSk7XG5leHBvcnRzLlBhZ2luYXRlZFJlc3VsdCA9IFBhZ2luYXRlZFJlc3VsdDtcbnZhciBIdHRwUGFnaW5hdGVkUmVzcG9uc2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoSHR0cFBhZ2luYXRlZFJlc3BvbnNlLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEh0dHBQYWdpbmF0ZWRSZXNwb25zZShyZXNvdXJjZSwgaXRlbXMsIGhlYWRlcnMsIHN0YXR1c0NvZGUsIHJlbFBhcmFtcywgZXJyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHJlc291cmNlLCBpdGVtcywgcmVsUGFyYW1zKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5zdGF0dXNDb2RlID0gc3RhdHVzQ29kZTtcbiAgICAgICAgX3RoaXMuc3VjY2VzcyA9IHN0YXR1c0NvZGUgPCAzMDAgJiYgc3RhdHVzQ29kZSA+PSAyMDA7XG4gICAgICAgIF90aGlzLmhlYWRlcnMgPSBoZWFkZXJzO1xuICAgICAgICBfdGhpcy5lcnJvckNvZGUgPSBlcnIgJiYgZXJyLmNvZGU7XG4gICAgICAgIF90aGlzLmVycm9yTWVzc2FnZSA9IGVyciAmJiBlcnIubWVzc2FnZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBIdHRwUGFnaW5hdGVkUmVzcG9uc2UucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGl0ZW1zOiB0aGlzLml0ZW1zLFxuICAgICAgICAgICAgc3RhdHVzQ29kZTogdGhpcy5zdGF0dXNDb2RlLFxuICAgICAgICAgICAgc3VjY2VzczogdGhpcy5zdWNjZXNzLFxuICAgICAgICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLFxuICAgICAgICAgICAgZXJyb3JDb2RlOiB0aGlzLmVycm9yQ29kZSxcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZTogdGhpcy5lcnJvck1lc3NhZ2UsXG4gICAgICAgIH07XG4gICAgfTtcbiAgICByZXR1cm4gSHR0cFBhZ2luYXRlZFJlc3BvbnNlO1xufShQYWdpbmF0ZWRSZXN1bHQpKTtcbmV4cG9ydHMuSHR0cFBhZ2luYXRlZFJlc3BvbnNlID0gSHR0cFBhZ2luYXRlZFJlc3BvbnNlO1xuZXhwb3J0cy5kZWZhdWx0ID0gUGFnaW5hdGVkUmVzb3VyY2U7XG5cblxuLyoqKi8gfSksXG4vKiAyMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc1JldHJpYWJsZSA9IHZvaWQgMDtcbnZhciB0c2xpYl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciBlcnJvcmluZm9fMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oNCkpO1xudmFyIENvbm5lY3Rpb25FcnJvckNvZGVzID0ge1xuICAgIERJU0NPTk5FQ1RFRDogODAwMDMsXG4gICAgU1VTUEVOREVEOiA4MDAwMixcbiAgICBGQUlMRUQ6IDgwMDAwLFxuICAgIENMT1NJTkc6IDgwMDE3LFxuICAgIENMT1NFRDogODAwMTcsXG4gICAgVU5LTk9XTl9DT05ORUNUSU9OX0VSUjogNTAwMDIsXG4gICAgVU5LTk9XTl9DSEFOTkVMX0VSUjogNTAwMDEsXG59O1xudmFyIENvbm5lY3Rpb25FcnJvcnMgPSB7XG4gICAgZGlzY29ubmVjdGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBlcnJvcmluZm9fMS5kZWZhdWx0LmZyb21WYWx1ZXMoe1xuICAgICAgICAgICAgc3RhdHVzQ29kZTogNDAwLFxuICAgICAgICAgICAgY29kZTogQ29ubmVjdGlvbkVycm9yQ29kZXMuRElTQ09OTkVDVEVELFxuICAgICAgICAgICAgbWVzc2FnZTogJ0Nvbm5lY3Rpb24gdG8gc2VydmVyIHRlbXBvcmFyaWx5IHVuYXZhaWxhYmxlJyxcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICBzdXNwZW5kZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGVycm9yaW5mb18xLmRlZmF1bHQuZnJvbVZhbHVlcyh7XG4gICAgICAgICAgICBzdGF0dXNDb2RlOiA0MDAsXG4gICAgICAgICAgICBjb2RlOiBDb25uZWN0aW9uRXJyb3JDb2Rlcy5TVVNQRU5ERUQsXG4gICAgICAgICAgICBtZXNzYWdlOiAnQ29ubmVjdGlvbiB0byBzZXJ2ZXIgdW5hdmFpbGFibGUnLFxuICAgICAgICB9KTtcbiAgICB9LFxuICAgIGZhaWxlZDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZXJyb3JpbmZvXzEuZGVmYXVsdC5mcm9tVmFsdWVzKHtcbiAgICAgICAgICAgIHN0YXR1c0NvZGU6IDQwMCxcbiAgICAgICAgICAgIGNvZGU6IENvbm5lY3Rpb25FcnJvckNvZGVzLkZBSUxFRCxcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdDb25uZWN0aW9uIGZhaWxlZCBvciBkaXNjb25uZWN0ZWQgYnkgc2VydmVyJyxcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICBjbG9zaW5nOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBlcnJvcmluZm9fMS5kZWZhdWx0LmZyb21WYWx1ZXMoe1xuICAgICAgICAgICAgc3RhdHVzQ29kZTogNDAwLFxuICAgICAgICAgICAgY29kZTogQ29ubmVjdGlvbkVycm9yQ29kZXMuQ0xPU0lORyxcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdDb25uZWN0aW9uIGNsb3NpbmcnLFxuICAgICAgICB9KTtcbiAgICB9LFxuICAgIGNsb3NlZDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZXJyb3JpbmZvXzEuZGVmYXVsdC5mcm9tVmFsdWVzKHtcbiAgICAgICAgICAgIHN0YXR1c0NvZGU6IDQwMCxcbiAgICAgICAgICAgIGNvZGU6IENvbm5lY3Rpb25FcnJvckNvZGVzLkNMT1NFRCxcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdDb25uZWN0aW9uIGNsb3NlZCcsXG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgdW5rbm93bkNvbm5lY3Rpb25FcnI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGVycm9yaW5mb18xLmRlZmF1bHQuZnJvbVZhbHVlcyh7XG4gICAgICAgICAgICBzdGF0dXNDb2RlOiA1MDAsXG4gICAgICAgICAgICBjb2RlOiBDb25uZWN0aW9uRXJyb3JDb2Rlcy5VTktOT1dOX0NPTk5FQ1RJT05fRVJSLFxuICAgICAgICAgICAgbWVzc2FnZTogJ0ludGVybmFsIGNvbm5lY3Rpb24gZXJyb3InLFxuICAgICAgICB9KTtcbiAgICB9LFxuICAgIHVua25vd25DaGFubmVsRXJyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBlcnJvcmluZm9fMS5kZWZhdWx0LmZyb21WYWx1ZXMoe1xuICAgICAgICAgICAgc3RhdHVzQ29kZTogNTAwLFxuICAgICAgICAgICAgY29kZTogQ29ubmVjdGlvbkVycm9yQ29kZXMuVU5LTk9XTl9DT05ORUNUSU9OX0VSUixcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdJbnRlcm5hbCBjaGFubmVsIGVycm9yJyxcbiAgICAgICAgfSk7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBpc1JldHJpYWJsZShlcnIpIHtcbiAgICBpZiAoIWVyci5zdGF0dXNDb2RlIHx8ICFlcnIuY29kZSB8fCBlcnIuc3RhdHVzQ29kZSA+PSA1MDApIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBPYmplY3QudmFsdWVzKENvbm5lY3Rpb25FcnJvckNvZGVzKS5pbmNsdWRlcyhlcnIuY29kZSk7XG59XG5leHBvcnRzLmlzUmV0cmlhYmxlID0gaXNSZXRyaWFibGU7XG5leHBvcnRzLmRlZmF1bHQgPSBDb25uZWN0aW9uRXJyb3JzO1xuXG5cbi8qKiovIH0pLFxuLyogMjEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBYSFJTdGF0ZXM7XG4oZnVuY3Rpb24gKFhIUlN0YXRlcykge1xuICAgIFhIUlN0YXRlc1tYSFJTdGF0ZXNbXCJSRVFfU0VORFwiXSA9IDBdID0gXCJSRVFfU0VORFwiO1xuICAgIFhIUlN0YXRlc1tYSFJTdGF0ZXNbXCJSRVFfUkVDVlwiXSA9IDFdID0gXCJSRVFfUkVDVlwiO1xuICAgIFhIUlN0YXRlc1tYSFJTdGF0ZXNbXCJSRVFfUkVDVl9QT0xMXCJdID0gMl0gPSBcIlJFUV9SRUNWX1BPTExcIjtcbiAgICBYSFJTdGF0ZXNbWEhSU3RhdGVzW1wiUkVRX1JFQ1ZfU1RSRUFNXCJdID0gM10gPSBcIlJFUV9SRUNWX1NUUkVBTVwiO1xufSkoWEhSU3RhdGVzIHx8IChYSFJTdGF0ZXMgPSB7fSkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gWEhSU3RhdGVzO1xuXG5cbi8qKiovIH0pLFxuLyogMjIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkge1xuXHRpZiAodHJ1ZSkge1xuXHRcdC8vIENvbW1vbkpTXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShfX3dlYnBhY2tfcmVxdWlyZV9fKDYpLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDU4KSwgX193ZWJwYWNrX3JlcXVpcmVfXygxMSksIF9fd2VicGFja19yZXF1aXJlX18oNDApLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDMyKSwgX193ZWJwYWNrX3JlcXVpcmVfXygyNCksIF9fd2VicGFja19yZXF1aXJlX18oMjcpLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDI4KSwgX193ZWJwYWNrX3JlcXVpcmVfXyg1OSksIF9fd2VicGFja19yZXF1aXJlX18oNjApKTtcblx0fVxuXHRlbHNlIHt9XG59KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykge1xuXG5cdHJldHVybiBDcnlwdG9KUztcblxufSkpO1xuXG4vKioqLyB9KSxcbi8qIDIzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgdHNsaWJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG52YXIgbG9nZ2VyXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKTtcbnZhciBNdWx0aWNhc3RlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBQcml2YXRlIGNvbnN0cnVjdG9yOyB1c2Ugc3RhdGljIE11bHRpY2FzdGVyLmNyZWF0ZSBpbnN0ZWFkXG4gICAgZnVuY3Rpb24gTXVsdGljYXN0ZXIobWVtYmVycykge1xuICAgICAgICB0aGlzLm1lbWJlcnMgPSBtZW1iZXJzIHx8IFtdO1xuICAgIH1cbiAgICBNdWx0aWNhc3Rlci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBfYSA9IDAsIF9iID0gdGhpcy5tZW1iZXJzOyBfYSA8IF9iLmxlbmd0aDsgX2ErKykge1xuICAgICAgICAgICAgdmFyIG1lbWJlciA9IF9iW19hXTtcbiAgICAgICAgICAgIGlmIChtZW1iZXIpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBtZW1iZXIuYXBwbHkodm9pZCAwLCBhcmdzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfRVJST1IsICdNdWx0aWNhc3RlciBtdWx0aXBsZSBjYWxsYmFjayBoYW5kbGVyJywgJ1VuZXhwZWN0ZWQgZXhjZXB0aW9uOiAnICsgZSArICc7IHN0YWNrID0gJyArIGUuc3RhY2spO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgTXVsdGljYXN0ZXIucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICAoX2EgPSB0aGlzLm1lbWJlcnMpLnB1c2guYXBwbHkoX2EsIGFyZ3MpO1xuICAgIH07XG4gICAgTXVsdGljYXN0ZXIuY3JlYXRlID0gZnVuY3Rpb24gKG1lbWJlcnMpIHtcbiAgICAgICAgdmFyIGluc3RhbmNlID0gbmV3IE11bHRpY2FzdGVyKG1lbWJlcnMpO1xuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaW5zdGFuY2UuY2FsbC5hcHBseShpbnN0YW5jZSwgYXJncyk7XG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIHB1c2g6IGZ1bmN0aW9uIChmbikgeyByZXR1cm4gaW5zdGFuY2UucHVzaChmbik7IH0sXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIE11bHRpY2FzdGVyO1xufSgpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IE11bHRpY2FzdGVyO1xuXG5cbi8qKiovIH0pLFxuLyogMjQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkge1xuXHRpZiAodHJ1ZSkge1xuXHRcdC8vIENvbW1vbkpTXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShfX3dlYnBhY2tfcmVxdWlyZV9fKDYpKTtcblx0fVxuXHRlbHNlIHt9XG59KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykge1xuXG5cdChmdW5jdGlvbiAoKSB7XG5cdCAgICAvLyBTaG9ydGN1dHNcblx0ICAgIHZhciBDID0gQ3J5cHRvSlM7XG5cdCAgICB2YXIgQ19saWIgPSBDLmxpYjtcblx0ICAgIHZhciBCYXNlID0gQ19saWIuQmFzZTtcblx0ICAgIHZhciBDX2VuYyA9IEMuZW5jO1xuXHQgICAgdmFyIFV0ZjggPSBDX2VuYy5VdGY4O1xuXHQgICAgdmFyIENfYWxnbyA9IEMuYWxnbztcblxuXHQgICAgLyoqXG5cdCAgICAgKiBITUFDIGFsZ29yaXRobS5cblx0ICAgICAqL1xuXHQgICAgdmFyIEhNQUMgPSBDX2FsZ28uSE1BQyA9IEJhc2UuZXh0ZW5kKHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBJbml0aWFsaXplcyBhIG5ld2x5IGNyZWF0ZWQgSE1BQy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7SGFzaGVyfSBoYXNoZXIgVGhlIGhhc2ggYWxnb3JpdGhtIHRvIHVzZS5cblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IGtleSBUaGUgc2VjcmV0IGtleS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGhtYWNIYXNoZXIgPSBDcnlwdG9KUy5hbGdvLkhNQUMuY3JlYXRlKENyeXB0b0pTLmFsZ28uU0hBMjU2LCBrZXkpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGluaXQ6IGZ1bmN0aW9uIChoYXNoZXIsIGtleSkge1xuXHQgICAgICAgICAgICAvLyBJbml0IGhhc2hlclxuXHQgICAgICAgICAgICBoYXNoZXIgPSB0aGlzLl9oYXNoZXIgPSBuZXcgaGFzaGVyLmluaXQoKTtcblxuXHQgICAgICAgICAgICAvLyBDb252ZXJ0IHN0cmluZyB0byBXb3JkQXJyYXksIGVsc2UgYXNzdW1lIFdvcmRBcnJheSBhbHJlYWR5XG5cdCAgICAgICAgICAgIGlmICh0eXBlb2Yga2V5ID09ICdzdHJpbmcnKSB7XG5cdCAgICAgICAgICAgICAgICBrZXkgPSBVdGY4LnBhcnNlKGtleSk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIGhhc2hlckJsb2NrU2l6ZSA9IGhhc2hlci5ibG9ja1NpemU7XG5cdCAgICAgICAgICAgIHZhciBoYXNoZXJCbG9ja1NpemVCeXRlcyA9IGhhc2hlckJsb2NrU2l6ZSAqIDQ7XG5cblx0ICAgICAgICAgICAgLy8gQWxsb3cgYXJiaXRyYXJ5IGxlbmd0aCBrZXlzXG5cdCAgICAgICAgICAgIGlmIChrZXkuc2lnQnl0ZXMgPiBoYXNoZXJCbG9ja1NpemVCeXRlcykge1xuXHQgICAgICAgICAgICAgICAga2V5ID0gaGFzaGVyLmZpbmFsaXplKGtleSk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBDbGFtcCBleGNlc3MgYml0c1xuXHQgICAgICAgICAgICBrZXkuY2xhbXAoKTtcblxuXHQgICAgICAgICAgICAvLyBDbG9uZSBrZXkgZm9yIGlubmVyIGFuZCBvdXRlciBwYWRzXG5cdCAgICAgICAgICAgIHZhciBvS2V5ID0gdGhpcy5fb0tleSA9IGtleS5jbG9uZSgpO1xuXHQgICAgICAgICAgICB2YXIgaUtleSA9IHRoaXMuX2lLZXkgPSBrZXkuY2xvbmUoKTtcblxuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIG9LZXlXb3JkcyA9IG9LZXkud29yZHM7XG5cdCAgICAgICAgICAgIHZhciBpS2V5V29yZHMgPSBpS2V5LndvcmRzO1xuXG5cdCAgICAgICAgICAgIC8vIFhPUiBrZXlzIHdpdGggcGFkIGNvbnN0YW50c1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhhc2hlckJsb2NrU2l6ZTsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICBvS2V5V29yZHNbaV0gXj0gMHg1YzVjNWM1Yztcblx0ICAgICAgICAgICAgICAgIGlLZXlXb3Jkc1tpXSBePSAweDM2MzYzNjM2O1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIG9LZXkuc2lnQnl0ZXMgPSBpS2V5LnNpZ0J5dGVzID0gaGFzaGVyQmxvY2tTaXplQnl0ZXM7XG5cblx0ICAgICAgICAgICAgLy8gU2V0IGluaXRpYWwgdmFsdWVzXG5cdCAgICAgICAgICAgIHRoaXMucmVzZXQoKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogUmVzZXRzIHRoaXMgSE1BQyB0byBpdHMgaW5pdGlhbCBzdGF0ZS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgaG1hY0hhc2hlci5yZXNldCgpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHJlc2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0XG5cdCAgICAgICAgICAgIHZhciBoYXNoZXIgPSB0aGlzLl9oYXNoZXI7XG5cblx0ICAgICAgICAgICAgLy8gUmVzZXRcblx0ICAgICAgICAgICAgaGFzaGVyLnJlc2V0KCk7XG5cdCAgICAgICAgICAgIGhhc2hlci51cGRhdGUodGhpcy5faUtleSk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIFVwZGF0ZXMgdGhpcyBITUFDIHdpdGggYSBtZXNzYWdlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlVXBkYXRlIFRoZSBtZXNzYWdlIHRvIGFwcGVuZC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge0hNQUN9IFRoaXMgSE1BQyBpbnN0YW5jZS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgaG1hY0hhc2hlci51cGRhdGUoJ21lc3NhZ2UnKTtcblx0ICAgICAgICAgKiAgICAgaG1hY0hhc2hlci51cGRhdGUod29yZEFycmF5KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICB1cGRhdGU6IGZ1bmN0aW9uIChtZXNzYWdlVXBkYXRlKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2hhc2hlci51cGRhdGUobWVzc2FnZVVwZGF0ZSk7XG5cblx0ICAgICAgICAgICAgLy8gQ2hhaW5hYmxlXG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBGaW5hbGl6ZXMgdGhlIEhNQUMgY29tcHV0YXRpb24uXG5cdCAgICAgICAgICogTm90ZSB0aGF0IHRoZSBmaW5hbGl6ZSBvcGVyYXRpb24gaXMgZWZmZWN0aXZlbHkgYSBkZXN0cnVjdGl2ZSwgcmVhZC1vbmNlIG9wZXJhdGlvbi5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZVVwZGF0ZSAoT3B0aW9uYWwpIEEgZmluYWwgbWVzc2FnZSB1cGRhdGUuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBITUFDLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgaG1hYyA9IGhtYWNIYXNoZXIuZmluYWxpemUoKTtcblx0ICAgICAgICAgKiAgICAgdmFyIGhtYWMgPSBobWFjSGFzaGVyLmZpbmFsaXplKCdtZXNzYWdlJyk7XG5cdCAgICAgICAgICogICAgIHZhciBobWFjID0gaG1hY0hhc2hlci5maW5hbGl6ZSh3b3JkQXJyYXkpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGZpbmFsaXplOiBmdW5jdGlvbiAobWVzc2FnZVVwZGF0ZSkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICB2YXIgaGFzaGVyID0gdGhpcy5faGFzaGVyO1xuXG5cdCAgICAgICAgICAgIC8vIENvbXB1dGUgSE1BQ1xuXHQgICAgICAgICAgICB2YXIgaW5uZXJIYXNoID0gaGFzaGVyLmZpbmFsaXplKG1lc3NhZ2VVcGRhdGUpO1xuXHQgICAgICAgICAgICBoYXNoZXIucmVzZXQoKTtcblx0ICAgICAgICAgICAgdmFyIGhtYWMgPSBoYXNoZXIuZmluYWxpemUodGhpcy5fb0tleS5jbG9uZSgpLmNvbmNhdChpbm5lckhhc2gpKTtcblxuXHQgICAgICAgICAgICByZXR1cm4gaG1hYztcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0fSgpKTtcblxuXG59KSk7XG5cbi8qKiovIH0pLFxuLyogMjUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaXNTdWNjZXNzQ29kZSA9IHZvaWQgMDtcbnZhciBIdHRwU3RhdHVzQ29kZXM7XG4oZnVuY3Rpb24gKEh0dHBTdGF0dXNDb2Rlcykge1xuICAgIEh0dHBTdGF0dXNDb2Rlc1tIdHRwU3RhdHVzQ29kZXNbXCJTdWNjZXNzXCJdID0gMjAwXSA9IFwiU3VjY2Vzc1wiO1xuICAgIEh0dHBTdGF0dXNDb2Rlc1tIdHRwU3RhdHVzQ29kZXNbXCJOb0NvbnRlbnRcIl0gPSAyMDRdID0gXCJOb0NvbnRlbnRcIjtcbiAgICBIdHRwU3RhdHVzQ29kZXNbSHR0cFN0YXR1c0NvZGVzW1wiQmFkUmVxdWVzdFwiXSA9IDQwMF0gPSBcIkJhZFJlcXVlc3RcIjtcbiAgICBIdHRwU3RhdHVzQ29kZXNbSHR0cFN0YXR1c0NvZGVzW1wiVW5hdXRob3JpemVkXCJdID0gNDAxXSA9IFwiVW5hdXRob3JpemVkXCI7XG4gICAgSHR0cFN0YXR1c0NvZGVzW0h0dHBTdGF0dXNDb2Rlc1tcIkZvcmJpZGRlblwiXSA9IDQwM10gPSBcIkZvcmJpZGRlblwiO1xuICAgIEh0dHBTdGF0dXNDb2Rlc1tIdHRwU3RhdHVzQ29kZXNbXCJSZXF1ZXN0VGltZW91dFwiXSA9IDQwOF0gPSBcIlJlcXVlc3RUaW1lb3V0XCI7XG4gICAgSHR0cFN0YXR1c0NvZGVzW0h0dHBTdGF0dXNDb2Rlc1tcIkludGVybmFsU2VydmVyRXJyb3JcIl0gPSA1MDBdID0gXCJJbnRlcm5hbFNlcnZlckVycm9yXCI7XG59KShIdHRwU3RhdHVzQ29kZXMgfHwgKEh0dHBTdGF0dXNDb2RlcyA9IHt9KSk7XG5mdW5jdGlvbiBpc1N1Y2Nlc3NDb2RlKHN0YXR1c0NvZGUpIHtcbiAgICByZXR1cm4gc3RhdHVzQ29kZSA+PSBIdHRwU3RhdHVzQ29kZXMuU3VjY2VzcyAmJiBzdGF0dXNDb2RlIDwgSHR0cFN0YXR1c0NvZGVzLkJhZFJlcXVlc3Q7XG59XG5leHBvcnRzLmlzU3VjY2Vzc0NvZGUgPSBpc1N1Y2Nlc3NDb2RlO1xuZXhwb3J0cy5kZWZhdWx0ID0gSHR0cFN0YXR1c0NvZGVzO1xuXG5cbi8qKiovIH0pLFxuLyogMjYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciB0c2xpYl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciBwcm90b2NvbG1lc3NhZ2VfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oMTApKTtcbnZhciBVdGlscyA9IHRzbGliXzEuX19pbXBvcnRTdGFyKF9fd2VicGFja19yZXF1aXJlX18oMSkpO1xudmFyIGV2ZW50ZW1pdHRlcl8xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXyg3KSk7XG52YXIgbG9nZ2VyXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKTtcbnZhciBjb25uZWN0aW9uZXJyb3JzXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKDIwKSk7XG52YXIgZXJyb3JpbmZvXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKDQpKTtcbnZhciBwbGF0Zm9ybV8xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygzKSk7XG52YXIgYWN0aW9ucyA9IHByb3RvY29sbWVzc2FnZV8xLmRlZmF1bHQuQWN0aW9uO1xudmFyIGNsb3NlTWVzc2FnZSA9IHByb3RvY29sbWVzc2FnZV8xLmRlZmF1bHQuZnJvbVZhbHVlcyh7IGFjdGlvbjogYWN0aW9ucy5DTE9TRSB9KTtcbnZhciBkaXNjb25uZWN0TWVzc2FnZSA9IHByb3RvY29sbWVzc2FnZV8xLmRlZmF1bHQuZnJvbVZhbHVlcyh7IGFjdGlvbjogYWN0aW9ucy5ESVNDT05ORUNUIH0pO1xuLypcbiAqIFRyYW5zcG9ydCBpbnN0YW5jZXMgaW5oZXJpdCBmcm9tIEV2ZW50RW1pdHRlciBhbmQgZW1pdCB0aGUgZm9sbG93aW5nIGV2ZW50czpcbiAqXG4gKiBldmVudCBuYW1lICAgICAgIGRhdGFcbiAqIGNsb3NlZCAgICAgICAgICAgZXJyb3JcbiAqIGZhaWxlZCAgICAgICAgICAgZXJyb3JcbiAqIGRpc3Bvc2VkXG4gKiBjb25uZWN0ZWQgICAgICAgIG51bGwgZXJyb3IsIGNvbm5lY3Rpb25TZXJpYWwsIGNvbm5lY3Rpb25JZCwgY29ubmVjdGlvbkRldGFpbHNcbiAqIGV2ZW50ICAgICAgICAgICAgY2hhbm5lbCBtZXNzYWdlIG9iamVjdFxuICovXG52YXIgVHJhbnNwb3J0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFRyYW5zcG9ydCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBUcmFuc3BvcnQoY29ubmVjdGlvbk1hbmFnZXIsIGF1dGgsIHBhcmFtcywgZm9yY2VKc29uUHJvdG9jb2wpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgaWYgKGZvcmNlSnNvblByb3RvY29sKSB7XG4gICAgICAgICAgICBwYXJhbXMuZm9ybWF0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgcGFyYW1zLmhlYXJ0YmVhdHMgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIF90aGlzLmNvbm5lY3Rpb25NYW5hZ2VyID0gY29ubmVjdGlvbk1hbmFnZXI7XG4gICAgICAgIGNvbm5lY3Rpb25NYW5hZ2VyLnJlZ2lzdGVyUHJvcG9zZWRUcmFuc3BvcnQoX3RoaXMpO1xuICAgICAgICBfdGhpcy5hdXRoID0gYXV0aDtcbiAgICAgICAgX3RoaXMucGFyYW1zID0gcGFyYW1zO1xuICAgICAgICBfdGhpcy50aW1lb3V0cyA9IHBhcmFtcy5vcHRpb25zLnRpbWVvdXRzO1xuICAgICAgICBfdGhpcy5mb3JtYXQgPSBwYXJhbXMuZm9ybWF0O1xuICAgICAgICBfdGhpcy5pc0Nvbm5lY3RlZCA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5pc0ZpbmlzaGVkID0gZmFsc2U7XG4gICAgICAgIF90aGlzLmlzRGlzcG9zZWQgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMubWF4SWRsZUludGVydmFsID0gbnVsbDtcbiAgICAgICAgX3RoaXMuaWRsZVRpbWVyID0gbnVsbDtcbiAgICAgICAgX3RoaXMubGFzdEFjdGl2aXR5ID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBUcmFuc3BvcnQucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbiAoKSB7IH07XG4gICAgVHJhbnNwb3J0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNDb25uZWN0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMucmVxdWVzdENsb3NlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5maW5pc2goJ2Nsb3NlZCcsIGNvbm5lY3Rpb25lcnJvcnNfMS5kZWZhdWx0LmNsb3NlZCgpKTtcbiAgICB9O1xuICAgIFRyYW5zcG9ydC5wcm90b3R5cGUuZGlzY29ubmVjdCA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgLyogVXNlZCBmb3IgbmV0d29yay90cmFuc3BvcnQgaXNzdWVzIHRoYXQgbmVlZCB0byByZXN1bHQgaW4gdGhlIHRyYW5zcG9ydFxuICAgICAgICAgKiBiZWluZyBkaXNjb25uZWN0ZWQsIGJ1dCBzaG91bGQgbm90IHRyYW5zaXRpb24gdGhlIGNvbm5lY3Rpb24gdG8gJ2ZhaWxlZCcgKi9cbiAgICAgICAgaWYgKHRoaXMuaXNDb25uZWN0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMucmVxdWVzdERpc2Nvbm5lY3QoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmZpbmlzaCgnZGlzY29ubmVjdGVkJywgZXJyIHx8IGNvbm5lY3Rpb25lcnJvcnNfMS5kZWZhdWx0LmRpc2Nvbm5lY3RlZCgpKTtcbiAgICB9O1xuICAgIFRyYW5zcG9ydC5wcm90b3R5cGUuZmFpbCA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgLyogVXNlZCBmb3IgY2xpZW50LXNpZGUtZGV0ZWN0ZWQgZmF0YWwgY29ubmVjdGlvbiBpc3N1ZXMgKi9cbiAgICAgICAgaWYgKHRoaXMuaXNDb25uZWN0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMucmVxdWVzdERpc2Nvbm5lY3QoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmZpbmlzaCgnZmFpbGVkJywgZXJyIHx8IGNvbm5lY3Rpb25lcnJvcnNfMS5kZWZhdWx0LmZhaWxlZCgpKTtcbiAgICB9O1xuICAgIFRyYW5zcG9ydC5wcm90b3R5cGUuZmluaXNoID0gZnVuY3Rpb24gKGV2ZW50LCBlcnIpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAodGhpcy5pc0ZpbmlzaGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pc0ZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5pc0Nvbm5lY3RlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLm1heElkbGVJbnRlcnZhbCA9IG51bGw7XG4gICAgICAgIGNsZWFyVGltZW91dCgoX2EgPSB0aGlzLmlkbGVUaW1lcikgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogdW5kZWZpbmVkKTtcbiAgICAgICAgdGhpcy5pZGxlVGltZXIgPSBudWxsO1xuICAgICAgICB0aGlzLmVtaXQoZXZlbnQsIGVycik7XG4gICAgICAgIHRoaXMuZGlzcG9zZSgpO1xuICAgIH07XG4gICAgVHJhbnNwb3J0LnByb3RvdHlwZS5vblByb3RvY29sTWVzc2FnZSA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICAgIGlmIChsb2dnZXJfMS5kZWZhdWx0LnNob3VsZExvZyhsb2dnZXJfMS5kZWZhdWx0LkxPR19NSUNSTykpIHtcbiAgICAgICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01JQ1JPLCAnVHJhbnNwb3J0Lm9uUHJvdG9jb2xNZXNzYWdlKCknLCAncmVjZWl2ZWQgb24gJyArXG4gICAgICAgICAgICAgICAgdGhpcy5zaG9ydE5hbWUgK1xuICAgICAgICAgICAgICAgICc6ICcgK1xuICAgICAgICAgICAgICAgIHByb3RvY29sbWVzc2FnZV8xLmRlZmF1bHQuc3RyaW5naWZ5KG1lc3NhZ2UpICtcbiAgICAgICAgICAgICAgICAnOyBjb25uZWN0aW9uSWQgPSAnICtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbm5lY3Rpb25NYW5hZ2VyLmNvbm5lY3Rpb25JZCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vbkFjdGl2aXR5KCk7XG4gICAgICAgIHN3aXRjaCAobWVzc2FnZS5hY3Rpb24pIHtcbiAgICAgICAgICAgIGNhc2UgYWN0aW9ucy5IRUFSVEJFQVQ6XG4gICAgICAgICAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlDUk8sICdUcmFuc3BvcnQub25Qcm90b2NvbE1lc3NhZ2UoKScsIHRoaXMuc2hvcnROYW1lICsgJyBoZWFydGJlYXQ7IGNvbm5lY3Rpb25JZCA9ICcgKyB0aGlzLmNvbm5lY3Rpb25NYW5hZ2VyLmNvbm5lY3Rpb25JZCk7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdoZWFydGJlYXQnLCBtZXNzYWdlLmlkKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgYWN0aW9ucy5DT05ORUNURUQ6XG4gICAgICAgICAgICAgICAgdGhpcy5vbkNvbm5lY3QobWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdjb25uZWN0ZWQnLCBtZXNzYWdlLmVycm9yLCBtZXNzYWdlLmNvbm5lY3Rpb25JZCwgbWVzc2FnZS5jb25uZWN0aW9uRGV0YWlscywgbWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGFjdGlvbnMuQ0xPU0VEOlxuICAgICAgICAgICAgICAgIHRoaXMub25DbG9zZShtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgYWN0aW9ucy5ESVNDT05ORUNURUQ6XG4gICAgICAgICAgICAgICAgdGhpcy5vbkRpc2Nvbm5lY3QobWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGFjdGlvbnMuQUNLOlxuICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnYWNrJywgbWVzc2FnZS5tc2dTZXJpYWwsIG1lc3NhZ2UuY291bnQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBhY3Rpb25zLk5BQ0s6XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KCduYWNrJywgbWVzc2FnZS5tc2dTZXJpYWwsIG1lc3NhZ2UuY291bnQsIG1lc3NhZ2UuZXJyb3IpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBhY3Rpb25zLlNZTkM6XG4gICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uTWFuYWdlci5vbkNoYW5uZWxNZXNzYWdlKG1lc3NhZ2UsIHRoaXMpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBhY3Rpb25zLkFDVElWQVRFOlxuICAgICAgICAgICAgICAgIC8vIElnbm9yZWQuXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGFjdGlvbnMuQVVUSDpcbiAgICAgICAgICAgICAgICB0aGlzLmF1dGguYXV0aG9yaXplKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfRVJST1IsICdUcmFuc3BvcnQub25Qcm90b2NvbE1lc3NhZ2UoKScsICdBYmx5IHJlcXVlc3RlZCByZS1hdXRoZW50aWNhdGlvbiwgYnV0IHVuYWJsZSB0byBvYnRhaW4gYSBuZXcgdG9rZW46ICcgKyBVdGlscy5pbnNwZWN0RXJyb3IoZXJyKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgYWN0aW9ucy5FUlJPUjpcbiAgICAgICAgICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19NSU5PUiwgJ1RyYW5zcG9ydC5vblByb3RvY29sTWVzc2FnZSgpJywgJ3JlY2VpdmVkIGVycm9yIGFjdGlvbjsgY29ubmVjdGlvbklkID0gJyArXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29ubmVjdGlvbk1hbmFnZXIuY29ubmVjdGlvbklkICtcbiAgICAgICAgICAgICAgICAgICAgJzsgZXJyID0gJyArXG4gICAgICAgICAgICAgICAgICAgIHBsYXRmb3JtXzEuZGVmYXVsdC5Db25maWcuaW5zcGVjdChtZXNzYWdlLmVycm9yKSArXG4gICAgICAgICAgICAgICAgICAgIChtZXNzYWdlLmNoYW5uZWwgPyAnLCBjaGFubmVsOiAnICsgbWVzc2FnZS5jaGFubmVsIDogJycpKTtcbiAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS5jaGFubmVsID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkZhdGFsRXJyb3IobWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvKiBvdGhlcndpc2UgaXQncyBhIGNoYW5uZWwtc3BlY2lmaWMgZXJyb3IsIHNvIGhhbmRsZSBpdCBpbiB0aGUgY2hhbm5lbCAqL1xuICAgICAgICAgICAgICAgIHRoaXMuY29ubmVjdGlvbk1hbmFnZXIub25DaGFubmVsTWVzc2FnZShtZXNzYWdlLCB0aGlzKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgLyogYWxsIG90aGVyIGFjdGlvbnMgYXJlIGNoYW5uZWwtc3BlY2lmaWMgKi9cbiAgICAgICAgICAgICAgICB0aGlzLmNvbm5lY3Rpb25NYW5hZ2VyLm9uQ2hhbm5lbE1lc3NhZ2UobWVzc2FnZSwgdGhpcyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRyYW5zcG9ydC5wcm90b3R5cGUub25Db25uZWN0ID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICAgICAgdGhpcy5pc0Nvbm5lY3RlZCA9IHRydWU7XG4gICAgICAgIGlmICghbWVzc2FnZS5jb25uZWN0aW9uRGV0YWlscykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUcmFuc3BvcnQub25Db25uZWN0KCk6IENvbm5lY3QgbWVzc2FnZSByZWNpZXZlZCB3aXRob3V0IGNvbm5lY3Rpb25EZXRhaWxzJyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG1heFByb21pc2VkSWRsZSA9IG1lc3NhZ2UuY29ubmVjdGlvbkRldGFpbHMubWF4SWRsZUludGVydmFsO1xuICAgICAgICBpZiAobWF4UHJvbWlzZWRJZGxlKSB7XG4gICAgICAgICAgICB0aGlzLm1heElkbGVJbnRlcnZhbCA9IG1heFByb21pc2VkSWRsZSArIHRoaXMudGltZW91dHMucmVhbHRpbWVSZXF1ZXN0VGltZW91dDtcbiAgICAgICAgICAgIHRoaXMub25BY3Rpdml0eSgpO1xuICAgICAgICB9XG4gICAgICAgIC8qIGVsc2UgUmVhbHRpbWUgZGVjbGluZXMgdG8gZ3VhcmFudGVlIGFueSBtYXhpbXVtIGlkbGUgaW50ZXJ2YWwgLSBDRDJoICovXG4gICAgfTtcbiAgICBUcmFuc3BvcnQucHJvdG90eXBlLm9uRGlzY29ubmVjdCA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICAgIC8qIFVzZWQgZm9yIHdoZW4gdGhlIHNlcnZlciBoYXMgZGlzY29ubmVjdGVkIHRoZSBjbGllbnQgKHVzdWFsbHkgd2l0aCBhXG4gICAgICAgICAqIERJU0NPTk5FQ1RFRCBhY3Rpb24pICovXG4gICAgICAgIHZhciBlcnIgPSBtZXNzYWdlICYmIG1lc3NhZ2UuZXJyb3I7XG4gICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01JTk9SLCAnVHJhbnNwb3J0Lm9uRGlzY29ubmVjdCgpJywgJ2VyciA9ICcgKyBVdGlscy5pbnNwZWN0RXJyb3IoZXJyKSk7XG4gICAgICAgIHRoaXMuZmluaXNoKCdkaXNjb25uZWN0ZWQnLCBlcnIpO1xuICAgIH07XG4gICAgVHJhbnNwb3J0LnByb3RvdHlwZS5vbkZhdGFsRXJyb3IgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgICAvKiBPbiByZWNlaXB0IG9mIGEgZmF0YWwgY29ubmVjdGlvbiBlcnJvciwgd2UgY2FuIGFzc3VtZSB0aGF0IHRoZSBzZXJ2ZXJcbiAgICAgICAgICogd2lsbCBjbG9zZSB0aGUgY29ubmVjdGlvbiBhbmQgdGhlIHRyYW5zcG9ydCwgYW5kIGRvIG5vdCBuZWVkIHRvIHJlcXVlc3RcbiAgICAgICAgICogYSBkaXNjb25uZWN0aW9uIC0gUlROMTVpICovXG4gICAgICAgIHZhciBlcnIgPSBtZXNzYWdlICYmIG1lc3NhZ2UuZXJyb3I7XG4gICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01JTk9SLCAnVHJhbnNwb3J0Lm9uRmF0YWxFcnJvcigpJywgJ2VyciA9ICcgKyBVdGlscy5pbnNwZWN0RXJyb3IoZXJyKSk7XG4gICAgICAgIHRoaXMuZmluaXNoKCdmYWlsZWQnLCBlcnIpO1xuICAgIH07XG4gICAgVHJhbnNwb3J0LnByb3RvdHlwZS5vbkNsb3NlID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICAgICAgdmFyIGVyciA9IG1lc3NhZ2UgJiYgbWVzc2FnZS5lcnJvcjtcbiAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlOT1IsICdUcmFuc3BvcnQub25DbG9zZSgpJywgJ2VyciA9ICcgKyBVdGlscy5pbnNwZWN0RXJyb3IoZXJyKSk7XG4gICAgICAgIHRoaXMuZmluaXNoKCdjbG9zZWQnLCBlcnIpO1xuICAgIH07XG4gICAgVHJhbnNwb3J0LnByb3RvdHlwZS5yZXF1ZXN0Q2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01JTk9SLCAnVHJhbnNwb3J0LnJlcXVlc3RDbG9zZSgpJywgJycpO1xuICAgICAgICB0aGlzLnNlbmQoY2xvc2VNZXNzYWdlKTtcbiAgICB9O1xuICAgIFRyYW5zcG9ydC5wcm90b3R5cGUucmVxdWVzdERpc2Nvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01JTk9SLCAnVHJhbnNwb3J0LnJlcXVlc3REaXNjb25uZWN0KCknLCAnJyk7XG4gICAgICAgIHRoaXMuc2VuZChkaXNjb25uZWN0TWVzc2FnZSk7XG4gICAgfTtcbiAgICBUcmFuc3BvcnQucHJvdG90eXBlLnBpbmcgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgdmFyIG1zZyA9IHsgYWN0aW9uOiBwcm90b2NvbG1lc3NhZ2VfMS5kZWZhdWx0LkFjdGlvbi5IRUFSVEJFQVQgfTtcbiAgICAgICAgaWYgKGlkKVxuICAgICAgICAgICAgbXNnLmlkID0gaWQ7XG4gICAgICAgIHRoaXMuc2VuZChwcm90b2NvbG1lc3NhZ2VfMS5kZWZhdWx0LmZyb21WYWx1ZXMobXNnKSk7XG4gICAgfTtcbiAgICBUcmFuc3BvcnQucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01JTk9SLCAnVHJhbnNwb3J0LmRpc3Bvc2UoKScsICcnKTtcbiAgICAgICAgdGhpcy5pc0Rpc3Bvc2VkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5vZmYoKTtcbiAgICB9O1xuICAgIFRyYW5zcG9ydC5wcm90b3R5cGUub25BY3Rpdml0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLm1heElkbGVJbnRlcnZhbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubGFzdEFjdGl2aXR5ID0gdGhpcy5jb25uZWN0aW9uTWFuYWdlci5sYXN0QWN0aXZpdHkgPSBVdGlscy5ub3coKTtcbiAgICAgICAgdGhpcy5zZXRJZGxlVGltZXIodGhpcy5tYXhJZGxlSW50ZXJ2YWwgKyAxMDApO1xuICAgIH07XG4gICAgVHJhbnNwb3J0LnByb3RvdHlwZS5zZXRJZGxlVGltZXIgPSBmdW5jdGlvbiAodGltZW91dCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAoIXRoaXMuaWRsZVRpbWVyKSB7XG4gICAgICAgICAgICB0aGlzLmlkbGVUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF90aGlzLm9uSWRsZVRpbWVyRXhwaXJlKCk7XG4gICAgICAgICAgICB9LCB0aW1lb3V0KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVHJhbnNwb3J0LnByb3RvdHlwZS5vbklkbGVUaW1lckV4cGlyZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmxhc3RBY3Rpdml0eSB8fCAhdGhpcy5tYXhJZGxlSW50ZXJ2YWwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVHJhbnNwb3J0Lm9uSWRsZVRpbWVyRXhwaXJlKCk6IGxhc3RBY3Rpdml0eS9tYXhJZGxlSW50ZXJ2YWwgbm90IHNldCcpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaWRsZVRpbWVyID0gbnVsbDtcbiAgICAgICAgdmFyIHNpbmNlTGFzdCA9IFV0aWxzLm5vdygpIC0gdGhpcy5sYXN0QWN0aXZpdHk7XG4gICAgICAgIHZhciB0aW1lUmVtYWluaW5nID0gdGhpcy5tYXhJZGxlSW50ZXJ2YWwgLSBzaW5jZUxhc3Q7XG4gICAgICAgIGlmICh0aW1lUmVtYWluaW5nIDw9IDApIHtcbiAgICAgICAgICAgIHZhciBtc2cgPSAnTm8gYWN0aXZpdHkgc2VlbiBmcm9tIHJlYWx0aW1lIGluICcgKyBzaW5jZUxhc3QgKyAnbXM7IGFzc3VtaW5nIGNvbm5lY3Rpb24gaGFzIGRyb3BwZWQnO1xuICAgICAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfRVJST1IsICdUcmFuc3BvcnQub25JZGxlVGltZXJFeHBpcmUoKScsIG1zZyk7XG4gICAgICAgICAgICB0aGlzLmRpc2Nvbm5lY3QobmV3IGVycm9yaW5mb18xLmRlZmF1bHQobXNnLCA4MDAwMywgNDA4KSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNldElkbGVUaW1lcih0aW1lUmVtYWluaW5nICsgMTAwKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVHJhbnNwb3J0LnRyeUNvbm5lY3QgPSBmdW5jdGlvbiAodHJhbnNwb3J0Q3RvciwgY29ubmVjdGlvbk1hbmFnZXIsIGF1dGgsIHRyYW5zcG9ydFBhcmFtcywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIHRyYW5zcG9ydCA9IG5ldyB0cmFuc3BvcnRDdG9yKGNvbm5lY3Rpb25NYW5hZ2VyLCBhdXRoLCB0cmFuc3BvcnRQYXJhbXMpO1xuICAgICAgICB2YXIgdHJhbnNwb3J0QXR0ZW1wdFRpbWVyO1xuICAgICAgICB2YXIgZXJyb3JDYiA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0cmFuc3BvcnRBdHRlbXB0VGltZXIpO1xuICAgICAgICAgICAgY2FsbGJhY2soeyBldmVudDogdGhpcy5ldmVudCwgZXJyb3I6IGVyciB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHJlYWx0aW1lUmVxdWVzdFRpbWVvdXQgPSBjb25uZWN0aW9uTWFuYWdlci5vcHRpb25zLnRpbWVvdXRzLnJlYWx0aW1lUmVxdWVzdFRpbWVvdXQ7XG4gICAgICAgIHRyYW5zcG9ydEF0dGVtcHRUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdHJhbnNwb3J0Lm9mZihbJ3ByZWNvbm5lY3QnLCAnZGlzY29ubmVjdGVkJywgJ2ZhaWxlZCddKTtcbiAgICAgICAgICAgIHRyYW5zcG9ydC5kaXNwb3NlKCk7XG4gICAgICAgICAgICBlcnJvckNiLmNhbGwoeyBldmVudDogJ2Rpc2Nvbm5lY3RlZCcgfSwgbmV3IGVycm9yaW5mb18xLmRlZmF1bHQoJ1RpbWVvdXQgd2FpdGluZyBmb3IgdHJhbnNwb3J0IHRvIGluZGljYXRlIGl0c2VsZiB2aWFibGUnLCA1MDAwMCwgNTAwKSk7XG4gICAgICAgIH0sIHJlYWx0aW1lUmVxdWVzdFRpbWVvdXQpO1xuICAgICAgICB0cmFuc3BvcnQub24oWydmYWlsZWQnLCAnZGlzY29ubmVjdGVkJ10sIGVycm9yQ2IpO1xuICAgICAgICB0cmFuc3BvcnQub24oJ3ByZWNvbm5lY3QnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19NSU5PUiwgJ1RyYW5zcG9ydC50cnlDb25uZWN0KCknLCAndmlhYmxlIHRyYW5zcG9ydCAnICsgdHJhbnNwb3J0KTtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0cmFuc3BvcnRBdHRlbXB0VGltZXIpO1xuICAgICAgICAgICAgdHJhbnNwb3J0Lm9mZihbJ2ZhaWxlZCcsICdkaXNjb25uZWN0ZWQnXSwgZXJyb3JDYik7XG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCB0cmFuc3BvcnQpO1xuICAgICAgICB9KTtcbiAgICAgICAgdHJhbnNwb3J0LmNvbm5lY3QoKTtcbiAgICB9O1xuICAgIHJldHVybiBUcmFuc3BvcnQ7XG59KGV2ZW50ZW1pdHRlcl8xLmRlZmF1bHQpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IFRyYW5zcG9ydDtcblxuXG4vKioqLyB9KSxcbi8qIDI3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbjsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYgKHRydWUpIHtcblx0XHQvLyBDb21tb25KU1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkoX193ZWJwYWNrX3JlcXVpcmVfXyg2KSwgX193ZWJwYWNrX3JlcXVpcmVfXyg0MCksIF9fd2VicGFja19yZXF1aXJlX18oMjQpKTtcblx0fVxuXHRlbHNlIHt9XG59KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykge1xuXG5cdChmdW5jdGlvbiAoKSB7XG5cdCAgICAvLyBTaG9ydGN1dHNcblx0ICAgIHZhciBDID0gQ3J5cHRvSlM7XG5cdCAgICB2YXIgQ19saWIgPSBDLmxpYjtcblx0ICAgIHZhciBCYXNlID0gQ19saWIuQmFzZTtcblx0ICAgIHZhciBXb3JkQXJyYXkgPSBDX2xpYi5Xb3JkQXJyYXk7XG5cdCAgICB2YXIgQ19hbGdvID0gQy5hbGdvO1xuXHQgICAgdmFyIE1ENSA9IENfYWxnby5NRDU7XG5cblx0ICAgIC8qKlxuXHQgICAgICogVGhpcyBrZXkgZGVyaXZhdGlvbiBmdW5jdGlvbiBpcyBtZWFudCB0byBjb25mb3JtIHdpdGggRVZQX0J5dGVzVG9LZXkuXG5cdCAgICAgKiB3d3cub3BlbnNzbC5vcmcvZG9jcy9jcnlwdG8vRVZQX0J5dGVzVG9LZXkuaHRtbFxuXHQgICAgICovXG5cdCAgICB2YXIgRXZwS0RGID0gQ19hbGdvLkV2cEtERiA9IEJhc2UuZXh0ZW5kKHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb25maWd1cmF0aW9uIG9wdGlvbnMuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcn0ga2V5U2l6ZSBUaGUga2V5IHNpemUgaW4gd29yZHMgdG8gZ2VuZXJhdGUuIERlZmF1bHQ6IDQgKDEyOCBiaXRzKVxuXHQgICAgICAgICAqIEBwcm9wZXJ0eSB7SGFzaGVyfSBoYXNoZXIgVGhlIGhhc2ggYWxnb3JpdGhtIHRvIHVzZS4gRGVmYXVsdDogTUQ1XG5cdCAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IGl0ZXJhdGlvbnMgVGhlIG51bWJlciBvZiBpdGVyYXRpb25zIHRvIHBlcmZvcm0uIERlZmF1bHQ6IDFcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBjZmc6IEJhc2UuZXh0ZW5kKHtcblx0ICAgICAgICAgICAga2V5U2l6ZTogMTI4LzMyLFxuXHQgICAgICAgICAgICBoYXNoZXI6IE1ENSxcblx0ICAgICAgICAgICAgaXRlcmF0aW9uczogMVxuXHQgICAgICAgIH0pLFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogSW5pdGlhbGl6ZXMgYSBuZXdseSBjcmVhdGVkIGtleSBkZXJpdmF0aW9uIGZ1bmN0aW9uLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNmZyAoT3B0aW9uYWwpIFRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgdG8gdXNlIGZvciB0aGUgZGVyaXZhdGlvbi5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGtkZiA9IENyeXB0b0pTLmFsZ28uRXZwS0RGLmNyZWF0ZSgpO1xuXHQgICAgICAgICAqICAgICB2YXIga2RmID0gQ3J5cHRvSlMuYWxnby5FdnBLREYuY3JlYXRlKHsga2V5U2l6ZTogOCB9KTtcblx0ICAgICAgICAgKiAgICAgdmFyIGtkZiA9IENyeXB0b0pTLmFsZ28uRXZwS0RGLmNyZWF0ZSh7IGtleVNpemU6IDgsIGl0ZXJhdGlvbnM6IDEwMDAgfSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgaW5pdDogZnVuY3Rpb24gKGNmZykge1xuXHQgICAgICAgICAgICB0aGlzLmNmZyA9IHRoaXMuY2ZnLmV4dGVuZChjZmcpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBEZXJpdmVzIGEga2V5IGZyb20gYSBwYXNzd29yZC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gcGFzc3dvcmQgVGhlIHBhc3N3b3JkLlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gc2FsdCBBIHNhbHQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBkZXJpdmVkIGtleS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGtleSA9IGtkZi5jb21wdXRlKHBhc3N3b3JkLCBzYWx0KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBjb21wdXRlOiBmdW5jdGlvbiAocGFzc3dvcmQsIHNhbHQpIHtcblx0ICAgICAgICAgICAgdmFyIGJsb2NrO1xuXG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0XG5cdCAgICAgICAgICAgIHZhciBjZmcgPSB0aGlzLmNmZztcblxuXHQgICAgICAgICAgICAvLyBJbml0IGhhc2hlclxuXHQgICAgICAgICAgICB2YXIgaGFzaGVyID0gY2ZnLmhhc2hlci5jcmVhdGUoKTtcblxuXHQgICAgICAgICAgICAvLyBJbml0aWFsIHZhbHVlc1xuXHQgICAgICAgICAgICB2YXIgZGVyaXZlZEtleSA9IFdvcmRBcnJheS5jcmVhdGUoKTtcblxuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIGRlcml2ZWRLZXlXb3JkcyA9IGRlcml2ZWRLZXkud29yZHM7XG5cdCAgICAgICAgICAgIHZhciBrZXlTaXplID0gY2ZnLmtleVNpemU7XG5cdCAgICAgICAgICAgIHZhciBpdGVyYXRpb25zID0gY2ZnLml0ZXJhdGlvbnM7XG5cblx0ICAgICAgICAgICAgLy8gR2VuZXJhdGUga2V5XG5cdCAgICAgICAgICAgIHdoaWxlIChkZXJpdmVkS2V5V29yZHMubGVuZ3RoIDwga2V5U2l6ZSkge1xuXHQgICAgICAgICAgICAgICAgaWYgKGJsb2NrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgaGFzaGVyLnVwZGF0ZShibG9jayk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBibG9jayA9IGhhc2hlci51cGRhdGUocGFzc3dvcmQpLmZpbmFsaXplKHNhbHQpO1xuXHQgICAgICAgICAgICAgICAgaGFzaGVyLnJlc2V0KCk7XG5cblx0ICAgICAgICAgICAgICAgIC8vIEl0ZXJhdGlvbnNcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgaXRlcmF0aW9uczsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgYmxvY2sgPSBoYXNoZXIuZmluYWxpemUoYmxvY2spO1xuXHQgICAgICAgICAgICAgICAgICAgIGhhc2hlci5yZXNldCgpO1xuXHQgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICBkZXJpdmVkS2V5LmNvbmNhdChibG9jayk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZGVyaXZlZEtleS5zaWdCeXRlcyA9IGtleVNpemUgKiA0O1xuXG5cdCAgICAgICAgICAgIHJldHVybiBkZXJpdmVkS2V5O1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXG5cdCAgICAvKipcblx0ICAgICAqIERlcml2ZXMgYSBrZXkgZnJvbSBhIHBhc3N3b3JkLlxuXHQgICAgICpcblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gcGFzc3dvcmQgVGhlIHBhc3N3b3JkLlxuXHQgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBzYWx0IEEgc2FsdC5cblx0ICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjZmcgKE9wdGlvbmFsKSBUaGUgY29uZmlndXJhdGlvbiBvcHRpb25zIHRvIHVzZSBmb3IgdGhpcyBjb21wdXRhdGlvbi5cblx0ICAgICAqXG5cdCAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBkZXJpdmVkIGtleS5cblx0ICAgICAqXG5cdCAgICAgKiBAc3RhdGljXG5cdCAgICAgKlxuXHQgICAgICogQGV4YW1wbGVcblx0ICAgICAqXG5cdCAgICAgKiAgICAgdmFyIGtleSA9IENyeXB0b0pTLkV2cEtERihwYXNzd29yZCwgc2FsdCk7XG5cdCAgICAgKiAgICAgdmFyIGtleSA9IENyeXB0b0pTLkV2cEtERihwYXNzd29yZCwgc2FsdCwgeyBrZXlTaXplOiA4IH0pO1xuXHQgICAgICogICAgIHZhciBrZXkgPSBDcnlwdG9KUy5FdnBLREYocGFzc3dvcmQsIHNhbHQsIHsga2V5U2l6ZTogOCwgaXRlcmF0aW9uczogMTAwMCB9KTtcblx0ICAgICAqL1xuXHQgICAgQy5FdnBLREYgPSBmdW5jdGlvbiAocGFzc3dvcmQsIHNhbHQsIGNmZykge1xuXHQgICAgICAgIHJldHVybiBFdnBLREYuY3JlYXRlKGNmZykuY29tcHV0ZShwYXNzd29yZCwgc2FsdCk7XG5cdCAgICB9O1xuXHR9KCkpO1xuXG5cblx0cmV0dXJuIENyeXB0b0pTLkV2cEtERjtcblxufSkpO1xuXG4vKioqLyB9KSxcbi8qIDI4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbjsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYgKHRydWUpIHtcblx0XHQvLyBDb21tb25KU1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkoX193ZWJwYWNrX3JlcXVpcmVfXyg2KSwgX193ZWJwYWNrX3JlcXVpcmVfXygyNykpO1xuXHR9XG5cdGVsc2Uge31cbn0odGhpcywgZnVuY3Rpb24gKENyeXB0b0pTKSB7XG5cblx0LyoqXG5cdCAqIENpcGhlciBjb3JlIGNvbXBvbmVudHMuXG5cdCAqL1xuXHRDcnlwdG9KUy5saWIuQ2lwaGVyIHx8IChmdW5jdGlvbiAodW5kZWZpbmVkKSB7XG5cdCAgICAvLyBTaG9ydGN1dHNcblx0ICAgIHZhciBDID0gQ3J5cHRvSlM7XG5cdCAgICB2YXIgQ19saWIgPSBDLmxpYjtcblx0ICAgIHZhciBCYXNlID0gQ19saWIuQmFzZTtcblx0ICAgIHZhciBXb3JkQXJyYXkgPSBDX2xpYi5Xb3JkQXJyYXk7XG5cdCAgICB2YXIgQnVmZmVyZWRCbG9ja0FsZ29yaXRobSA9IENfbGliLkJ1ZmZlcmVkQmxvY2tBbGdvcml0aG07XG5cdCAgICB2YXIgQ19lbmMgPSBDLmVuYztcblx0ICAgIHZhciBVdGY4ID0gQ19lbmMuVXRmODtcblx0ICAgIHZhciBCYXNlNjQgPSBDX2VuYy5CYXNlNjQ7XG5cdCAgICB2YXIgQ19hbGdvID0gQy5hbGdvO1xuXHQgICAgdmFyIEV2cEtERiA9IENfYWxnby5FdnBLREY7XG5cblx0ICAgIC8qKlxuXHQgICAgICogQWJzdHJhY3QgYmFzZSBjaXBoZXIgdGVtcGxhdGUuXG5cdCAgICAgKlxuXHQgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IGtleVNpemUgVGhpcyBjaXBoZXIncyBrZXkgc2l6ZS4gRGVmYXVsdDogNCAoMTI4IGJpdHMpXG5cdCAgICAgKiBAcHJvcGVydHkge251bWJlcn0gaXZTaXplIFRoaXMgY2lwaGVyJ3MgSVYgc2l6ZS4gRGVmYXVsdDogNCAoMTI4IGJpdHMpXG5cdCAgICAgKiBAcHJvcGVydHkge251bWJlcn0gX0VOQ19YRk9STV9NT0RFIEEgY29uc3RhbnQgcmVwcmVzZW50aW5nIGVuY3J5cHRpb24gbW9kZS5cblx0ICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBfREVDX1hGT1JNX01PREUgQSBjb25zdGFudCByZXByZXNlbnRpbmcgZGVjcnlwdGlvbiBtb2RlLlxuXHQgICAgICovXG5cdCAgICB2YXIgQ2lwaGVyID0gQ19saWIuQ2lwaGVyID0gQnVmZmVyZWRCbG9ja0FsZ29yaXRobS5leHRlbmQoe1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbmZpZ3VyYXRpb24gb3B0aW9ucy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwcm9wZXJ0eSB7V29yZEFycmF5fSBpdiBUaGUgSVYgdG8gdXNlIGZvciB0aGlzIG9wZXJhdGlvbi5cblx0ICAgICAgICAgKi9cblx0ICAgICAgICBjZmc6IEJhc2UuZXh0ZW5kKCksXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDcmVhdGVzIHRoaXMgY2lwaGVyIGluIGVuY3J5cHRpb24gbW9kZS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fSBrZXkgVGhlIGtleS5cblx0ICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gY2ZnIChPcHRpb25hbCkgVGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyB0byB1c2UgZm9yIHRoaXMgb3BlcmF0aW9uLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7Q2lwaGVyfSBBIGNpcGhlciBpbnN0YW5jZS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGNpcGhlciA9IENyeXB0b0pTLmFsZ28uQUVTLmNyZWF0ZUVuY3J5cHRvcihrZXlXb3JkQXJyYXksIHsgaXY6IGl2V29yZEFycmF5IH0pO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGNyZWF0ZUVuY3J5cHRvcjogZnVuY3Rpb24gKGtleSwgY2ZnKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZSh0aGlzLl9FTkNfWEZPUk1fTU9ERSwga2V5LCBjZmcpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDcmVhdGVzIHRoaXMgY2lwaGVyIGluIGRlY3J5cHRpb24gbW9kZS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fSBrZXkgVGhlIGtleS5cblx0ICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gY2ZnIChPcHRpb25hbCkgVGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyB0byB1c2UgZm9yIHRoaXMgb3BlcmF0aW9uLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7Q2lwaGVyfSBBIGNpcGhlciBpbnN0YW5jZS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGNpcGhlciA9IENyeXB0b0pTLmFsZ28uQUVTLmNyZWF0ZURlY3J5cHRvcihrZXlXb3JkQXJyYXksIHsgaXY6IGl2V29yZEFycmF5IH0pO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGNyZWF0ZURlY3J5cHRvcjogZnVuY3Rpb24gKGtleSwgY2ZnKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZSh0aGlzLl9ERUNfWEZPUk1fTU9ERSwga2V5LCBjZmcpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBJbml0aWFsaXplcyBhIG5ld2x5IGNyZWF0ZWQgY2lwaGVyLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IHhmb3JtTW9kZSBFaXRoZXIgdGhlIGVuY3J5cHRpb24gb3IgZGVjcnlwdGlvbiB0cmFuc29ybWF0aW9uIG1vZGUgY29uc3RhbnQuXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl9IGtleSBUaGUga2V5LlxuXHQgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjZmcgKE9wdGlvbmFsKSBUaGUgY29uZmlndXJhdGlvbiBvcHRpb25zIHRvIHVzZSBmb3IgdGhpcyBvcGVyYXRpb24uXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBjaXBoZXIgPSBDcnlwdG9KUy5hbGdvLkFFUy5jcmVhdGUoQ3J5cHRvSlMuYWxnby5BRVMuX0VOQ19YRk9STV9NT0RFLCBrZXlXb3JkQXJyYXksIHsgaXY6IGl2V29yZEFycmF5IH0pO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGluaXQ6IGZ1bmN0aW9uICh4Zm9ybU1vZGUsIGtleSwgY2ZnKSB7XG5cdCAgICAgICAgICAgIC8vIEFwcGx5IGNvbmZpZyBkZWZhdWx0c1xuXHQgICAgICAgICAgICB0aGlzLmNmZyA9IHRoaXMuY2ZnLmV4dGVuZChjZmcpO1xuXG5cdCAgICAgICAgICAgIC8vIFN0b3JlIHRyYW5zZm9ybSBtb2RlIGFuZCBrZXlcblx0ICAgICAgICAgICAgdGhpcy5feGZvcm1Nb2RlID0geGZvcm1Nb2RlO1xuXHQgICAgICAgICAgICB0aGlzLl9rZXkgPSBrZXk7XG5cblx0ICAgICAgICAgICAgLy8gU2V0IGluaXRpYWwgdmFsdWVzXG5cdCAgICAgICAgICAgIHRoaXMucmVzZXQoKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogUmVzZXRzIHRoaXMgY2lwaGVyIHRvIGl0cyBpbml0aWFsIHN0YXRlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICBjaXBoZXIucmVzZXQoKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICByZXNldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAvLyBSZXNldCBkYXRhIGJ1ZmZlclxuXHQgICAgICAgICAgICBCdWZmZXJlZEJsb2NrQWxnb3JpdGhtLnJlc2V0LmNhbGwodGhpcyk7XG5cblx0ICAgICAgICAgICAgLy8gUGVyZm9ybSBjb25jcmV0ZS1jaXBoZXIgbG9naWNcblx0ICAgICAgICAgICAgdGhpcy5fZG9SZXNldCgpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBBZGRzIGRhdGEgdG8gYmUgZW5jcnlwdGVkIG9yIGRlY3J5cHRlZC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gZGF0YVVwZGF0ZSBUaGUgZGF0YSB0byBlbmNyeXB0IG9yIGRlY3J5cHQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBkYXRhIGFmdGVyIHByb2Nlc3NpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBlbmNyeXB0ZWQgPSBjaXBoZXIucHJvY2VzcygnZGF0YScpO1xuXHQgICAgICAgICAqICAgICB2YXIgZW5jcnlwdGVkID0gY2lwaGVyLnByb2Nlc3Mod29yZEFycmF5KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBwcm9jZXNzOiBmdW5jdGlvbiAoZGF0YVVwZGF0ZSkge1xuXHQgICAgICAgICAgICAvLyBBcHBlbmRcblx0ICAgICAgICAgICAgdGhpcy5fYXBwZW5kKGRhdGFVcGRhdGUpO1xuXG5cdCAgICAgICAgICAgIC8vIFByb2Nlc3MgYXZhaWxhYmxlIGJsb2Nrc1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fcHJvY2VzcygpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBGaW5hbGl6ZXMgdGhlIGVuY3J5cHRpb24gb3IgZGVjcnlwdGlvbiBwcm9jZXNzLlxuXHQgICAgICAgICAqIE5vdGUgdGhhdCB0aGUgZmluYWxpemUgb3BlcmF0aW9uIGlzIGVmZmVjdGl2ZWx5IGEgZGVzdHJ1Y3RpdmUsIHJlYWQtb25jZSBvcGVyYXRpb24uXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IGRhdGFVcGRhdGUgVGhlIGZpbmFsIGRhdGEgdG8gZW5jcnlwdCBvciBkZWNyeXB0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgZGF0YSBhZnRlciBmaW5hbCBwcm9jZXNzaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgZW5jcnlwdGVkID0gY2lwaGVyLmZpbmFsaXplKCk7XG5cdCAgICAgICAgICogICAgIHZhciBlbmNyeXB0ZWQgPSBjaXBoZXIuZmluYWxpemUoJ2RhdGEnKTtcblx0ICAgICAgICAgKiAgICAgdmFyIGVuY3J5cHRlZCA9IGNpcGhlci5maW5hbGl6ZSh3b3JkQXJyYXkpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGZpbmFsaXplOiBmdW5jdGlvbiAoZGF0YVVwZGF0ZSkge1xuXHQgICAgICAgICAgICAvLyBGaW5hbCBkYXRhIHVwZGF0ZVxuXHQgICAgICAgICAgICBpZiAoZGF0YVVwZGF0ZSkge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5fYXBwZW5kKGRhdGFVcGRhdGUpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gUGVyZm9ybSBjb25jcmV0ZS1jaXBoZXIgbG9naWNcblx0ICAgICAgICAgICAgdmFyIGZpbmFsUHJvY2Vzc2VkRGF0YSA9IHRoaXMuX2RvRmluYWxpemUoKTtcblxuXHQgICAgICAgICAgICByZXR1cm4gZmluYWxQcm9jZXNzZWREYXRhO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBrZXlTaXplOiAxMjgvMzIsXG5cblx0ICAgICAgICBpdlNpemU6IDEyOC8zMixcblxuXHQgICAgICAgIF9FTkNfWEZPUk1fTU9ERTogMSxcblxuXHQgICAgICAgIF9ERUNfWEZPUk1fTU9ERTogMixcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENyZWF0ZXMgc2hvcnRjdXQgZnVuY3Rpb25zIHRvIGEgY2lwaGVyJ3Mgb2JqZWN0IGludGVyZmFjZS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7Q2lwaGVyfSBjaXBoZXIgVGhlIGNpcGhlciB0byBjcmVhdGUgYSBoZWxwZXIgZm9yLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7T2JqZWN0fSBBbiBvYmplY3Qgd2l0aCBlbmNyeXB0IGFuZCBkZWNyeXB0IHNob3J0Y3V0IGZ1bmN0aW9ucy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIEFFUyA9IENyeXB0b0pTLmxpYi5DaXBoZXIuX2NyZWF0ZUhlbHBlcihDcnlwdG9KUy5hbGdvLkFFUyk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgX2NyZWF0ZUhlbHBlcjogKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgZnVuY3Rpb24gc2VsZWN0Q2lwaGVyU3RyYXRlZ3koa2V5KSB7XG5cdCAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGtleSA9PSAnc3RyaW5nJykge1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBQYXNzd29yZEJhc2VkQ2lwaGVyO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gU2VyaWFsaXphYmxlQ2lwaGVyO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChjaXBoZXIpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICAgICAgICAgICAgZW5jcnlwdDogZnVuY3Rpb24gKG1lc3NhZ2UsIGtleSwgY2ZnKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxlY3RDaXBoZXJTdHJhdGVneShrZXkpLmVuY3J5cHQoY2lwaGVyLCBtZXNzYWdlLCBrZXksIGNmZyk7XG5cdCAgICAgICAgICAgICAgICAgICAgfSxcblxuXHQgICAgICAgICAgICAgICAgICAgIGRlY3J5cHQ6IGZ1bmN0aW9uIChjaXBoZXJ0ZXh0LCBrZXksIGNmZykge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsZWN0Q2lwaGVyU3RyYXRlZ3koa2V5KS5kZWNyeXB0KGNpcGhlciwgY2lwaGVydGV4dCwga2V5LCBjZmcpO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH07XG5cdCAgICAgICAgICAgIH07XG5cdCAgICAgICAgfSgpKVxuXHQgICAgfSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogQWJzdHJhY3QgYmFzZSBzdHJlYW0gY2lwaGVyIHRlbXBsYXRlLlxuXHQgICAgICpcblx0ICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBibG9ja1NpemUgVGhlIG51bWJlciBvZiAzMi1iaXQgd29yZHMgdGhpcyBjaXBoZXIgb3BlcmF0ZXMgb24uIERlZmF1bHQ6IDEgKDMyIGJpdHMpXG5cdCAgICAgKi9cblx0ICAgIHZhciBTdHJlYW1DaXBoZXIgPSBDX2xpYi5TdHJlYW1DaXBoZXIgPSBDaXBoZXIuZXh0ZW5kKHtcblx0ICAgICAgICBfZG9GaW5hbGl6ZTogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAvLyBQcm9jZXNzIHBhcnRpYWwgYmxvY2tzXG5cdCAgICAgICAgICAgIHZhciBmaW5hbFByb2Nlc3NlZEJsb2NrcyA9IHRoaXMuX3Byb2Nlc3MoISEnZmx1c2gnKTtcblxuXHQgICAgICAgICAgICByZXR1cm4gZmluYWxQcm9jZXNzZWRCbG9ja3M7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIGJsb2NrU2l6ZTogMVxuXHQgICAgfSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogTW9kZSBuYW1lc3BhY2UuXG5cdCAgICAgKi9cblx0ICAgIHZhciBDX21vZGUgPSBDLm1vZGUgPSB7fTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBBYnN0cmFjdCBiYXNlIGJsb2NrIGNpcGhlciBtb2RlIHRlbXBsYXRlLlxuXHQgICAgICovXG5cdCAgICB2YXIgQmxvY2tDaXBoZXJNb2RlID0gQ19saWIuQmxvY2tDaXBoZXJNb2RlID0gQmFzZS5leHRlbmQoe1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENyZWF0ZXMgdGhpcyBtb2RlIGZvciBlbmNyeXB0aW9uLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtDaXBoZXJ9IGNpcGhlciBBIGJsb2NrIGNpcGhlciBpbnN0YW5jZS5cblx0ICAgICAgICAgKiBAcGFyYW0ge0FycmF5fSBpdiBUaGUgSVYgd29yZHMuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBtb2RlID0gQ3J5cHRvSlMubW9kZS5DQkMuY3JlYXRlRW5jcnlwdG9yKGNpcGhlciwgaXYud29yZHMpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGNyZWF0ZUVuY3J5cHRvcjogZnVuY3Rpb24gKGNpcGhlciwgaXYpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuRW5jcnlwdG9yLmNyZWF0ZShjaXBoZXIsIGl2KTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ3JlYXRlcyB0aGlzIG1vZGUgZm9yIGRlY3J5cHRpb24uXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge0NpcGhlcn0gY2lwaGVyIEEgYmxvY2sgY2lwaGVyIGluc3RhbmNlLlxuXHQgICAgICAgICAqIEBwYXJhbSB7QXJyYXl9IGl2IFRoZSBJViB3b3Jkcy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIG1vZGUgPSBDcnlwdG9KUy5tb2RlLkNCQy5jcmVhdGVEZWNyeXB0b3IoY2lwaGVyLCBpdi53b3Jkcyk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgY3JlYXRlRGVjcnlwdG9yOiBmdW5jdGlvbiAoY2lwaGVyLCBpdikge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5EZWNyeXB0b3IuY3JlYXRlKGNpcGhlciwgaXYpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBJbml0aWFsaXplcyBhIG5ld2x5IGNyZWF0ZWQgbW9kZS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7Q2lwaGVyfSBjaXBoZXIgQSBibG9jayBjaXBoZXIgaW5zdGFuY2UuXG5cdCAgICAgICAgICogQHBhcmFtIHtBcnJheX0gaXYgVGhlIElWIHdvcmRzLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgbW9kZSA9IENyeXB0b0pTLm1vZGUuQ0JDLkVuY3J5cHRvci5jcmVhdGUoY2lwaGVyLCBpdi53b3Jkcyk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgaW5pdDogZnVuY3Rpb24gKGNpcGhlciwgaXYpIHtcblx0ICAgICAgICAgICAgdGhpcy5fY2lwaGVyID0gY2lwaGVyO1xuXHQgICAgICAgICAgICB0aGlzLl9pdiA9IGl2O1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXG5cdCAgICAvKipcblx0ICAgICAqIENpcGhlciBCbG9jayBDaGFpbmluZyBtb2RlLlxuXHQgICAgICovXG5cdCAgICB2YXIgQ0JDID0gQ19tb2RlLkNCQyA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQWJzdHJhY3QgYmFzZSBDQkMgbW9kZS5cblx0ICAgICAgICAgKi9cblx0ICAgICAgICB2YXIgQ0JDID0gQmxvY2tDaXBoZXJNb2RlLmV4dGVuZCgpO1xuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ0JDIGVuY3J5cHRvci5cblx0ICAgICAgICAgKi9cblx0ICAgICAgICBDQkMuRW5jcnlwdG9yID0gQ0JDLmV4dGVuZCh7XG5cdCAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgKiBQcm9jZXNzZXMgdGhlIGRhdGEgYmxvY2sgYXQgb2Zmc2V0LlxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiBAcGFyYW0ge0FycmF5fSB3b3JkcyBUaGUgZGF0YSB3b3JkcyB0byBvcGVyYXRlIG9uLlxuXHQgICAgICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0IFRoZSBvZmZzZXQgd2hlcmUgdGhlIGJsb2NrIHN0YXJ0cy5cblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogICAgIG1vZGUucHJvY2Vzc0Jsb2NrKGRhdGEud29yZHMsIG9mZnNldCk7XG5cdCAgICAgICAgICAgICAqL1xuXHQgICAgICAgICAgICBwcm9jZXNzQmxvY2s6IGZ1bmN0aW9uICh3b3Jkcywgb2Zmc2V0KSB7XG5cdCAgICAgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgICAgIHZhciBjaXBoZXIgPSB0aGlzLl9jaXBoZXI7XG5cdCAgICAgICAgICAgICAgICB2YXIgYmxvY2tTaXplID0gY2lwaGVyLmJsb2NrU2l6ZTtcblxuXHQgICAgICAgICAgICAgICAgLy8gWE9SIGFuZCBlbmNyeXB0XG5cdCAgICAgICAgICAgICAgICB4b3JCbG9jay5jYWxsKHRoaXMsIHdvcmRzLCBvZmZzZXQsIGJsb2NrU2l6ZSk7XG5cdCAgICAgICAgICAgICAgICBjaXBoZXIuZW5jcnlwdEJsb2NrKHdvcmRzLCBvZmZzZXQpO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBSZW1lbWJlciB0aGlzIGJsb2NrIHRvIHVzZSB3aXRoIG5leHQgYmxvY2tcblx0ICAgICAgICAgICAgICAgIHRoaXMuX3ByZXZCbG9jayA9IHdvcmRzLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgYmxvY2tTaXplKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0pO1xuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ0JDIGRlY3J5cHRvci5cblx0ICAgICAgICAgKi9cblx0ICAgICAgICBDQkMuRGVjcnlwdG9yID0gQ0JDLmV4dGVuZCh7XG5cdCAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgKiBQcm9jZXNzZXMgdGhlIGRhdGEgYmxvY2sgYXQgb2Zmc2V0LlxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiBAcGFyYW0ge0FycmF5fSB3b3JkcyBUaGUgZGF0YSB3b3JkcyB0byBvcGVyYXRlIG9uLlxuXHQgICAgICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0IFRoZSBvZmZzZXQgd2hlcmUgdGhlIGJsb2NrIHN0YXJ0cy5cblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogICAgIG1vZGUucHJvY2Vzc0Jsb2NrKGRhdGEud29yZHMsIG9mZnNldCk7XG5cdCAgICAgICAgICAgICAqL1xuXHQgICAgICAgICAgICBwcm9jZXNzQmxvY2s6IGZ1bmN0aW9uICh3b3Jkcywgb2Zmc2V0KSB7XG5cdCAgICAgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgICAgIHZhciBjaXBoZXIgPSB0aGlzLl9jaXBoZXI7XG5cdCAgICAgICAgICAgICAgICB2YXIgYmxvY2tTaXplID0gY2lwaGVyLmJsb2NrU2l6ZTtcblxuXHQgICAgICAgICAgICAgICAgLy8gUmVtZW1iZXIgdGhpcyBibG9jayB0byB1c2Ugd2l0aCBuZXh0IGJsb2NrXG5cdCAgICAgICAgICAgICAgICB2YXIgdGhpc0Jsb2NrID0gd29yZHMuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyBibG9ja1NpemUpO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBEZWNyeXB0IGFuZCBYT1Jcblx0ICAgICAgICAgICAgICAgIGNpcGhlci5kZWNyeXB0QmxvY2sod29yZHMsIG9mZnNldCk7XG5cdCAgICAgICAgICAgICAgICB4b3JCbG9jay5jYWxsKHRoaXMsIHdvcmRzLCBvZmZzZXQsIGJsb2NrU2l6ZSk7XG5cblx0ICAgICAgICAgICAgICAgIC8vIFRoaXMgYmxvY2sgYmVjb21lcyB0aGUgcHJldmlvdXMgYmxvY2tcblx0ICAgICAgICAgICAgICAgIHRoaXMuX3ByZXZCbG9jayA9IHRoaXNCbG9jaztcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0pO1xuXG5cdCAgICAgICAgZnVuY3Rpb24geG9yQmxvY2sod29yZHMsIG9mZnNldCwgYmxvY2tTaXplKSB7XG5cdCAgICAgICAgICAgIHZhciBibG9jaztcblxuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICB2YXIgaXYgPSB0aGlzLl9pdjtcblxuXHQgICAgICAgICAgICAvLyBDaG9vc2UgbWl4aW5nIGJsb2NrXG5cdCAgICAgICAgICAgIGlmIChpdikge1xuXHQgICAgICAgICAgICAgICAgYmxvY2sgPSBpdjtcblxuXHQgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIElWIGZvciBzdWJzZXF1ZW50IGJsb2Nrc1xuXHQgICAgICAgICAgICAgICAgdGhpcy5faXYgPSB1bmRlZmluZWQ7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICBibG9jayA9IHRoaXMuX3ByZXZCbG9jaztcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIFhPUiBibG9ja3Ncblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBibG9ja1NpemU7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgd29yZHNbb2Zmc2V0ICsgaV0gXj0gYmxvY2tbaV07XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cblx0ICAgICAgICByZXR1cm4gQ0JDO1xuXHQgICAgfSgpKTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBQYWRkaW5nIG5hbWVzcGFjZS5cblx0ICAgICAqL1xuXHQgICAgdmFyIENfcGFkID0gQy5wYWQgPSB7fTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBQS0NTICM1LzcgcGFkZGluZyBzdHJhdGVneS5cblx0ICAgICAqL1xuXHQgICAgdmFyIFBrY3M3ID0gQ19wYWQuUGtjczcgPSB7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogUGFkcyBkYXRhIHVzaW5nIHRoZSBhbGdvcml0aG0gZGVmaW5lZCBpbiBQS0NTICM1LzcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheX0gZGF0YSBUaGUgZGF0YSB0byBwYWQuXG5cdCAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IGJsb2NrU2l6ZSBUaGUgbXVsdGlwbGUgdGhhdCB0aGUgZGF0YSBzaG91bGQgYmUgcGFkZGVkIHRvLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICBDcnlwdG9KUy5wYWQuUGtjczcucGFkKHdvcmRBcnJheSwgNCk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgcGFkOiBmdW5jdGlvbiAoZGF0YSwgYmxvY2tTaXplKSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0XG5cdCAgICAgICAgICAgIHZhciBibG9ja1NpemVCeXRlcyA9IGJsb2NrU2l6ZSAqIDQ7XG5cblx0ICAgICAgICAgICAgLy8gQ291bnQgcGFkZGluZyBieXRlc1xuXHQgICAgICAgICAgICB2YXIgblBhZGRpbmdCeXRlcyA9IGJsb2NrU2l6ZUJ5dGVzIC0gZGF0YS5zaWdCeXRlcyAlIGJsb2NrU2l6ZUJ5dGVzO1xuXG5cdCAgICAgICAgICAgIC8vIENyZWF0ZSBwYWRkaW5nIHdvcmRcblx0ICAgICAgICAgICAgdmFyIHBhZGRpbmdXb3JkID0gKG5QYWRkaW5nQnl0ZXMgPDwgMjQpIHwgKG5QYWRkaW5nQnl0ZXMgPDwgMTYpIHwgKG5QYWRkaW5nQnl0ZXMgPDwgOCkgfCBuUGFkZGluZ0J5dGVzO1xuXG5cdCAgICAgICAgICAgIC8vIENyZWF0ZSBwYWRkaW5nXG5cdCAgICAgICAgICAgIHZhciBwYWRkaW5nV29yZHMgPSBbXTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuUGFkZGluZ0J5dGVzOyBpICs9IDQpIHtcblx0ICAgICAgICAgICAgICAgIHBhZGRpbmdXb3Jkcy5wdXNoKHBhZGRpbmdXb3JkKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB2YXIgcGFkZGluZyA9IFdvcmRBcnJheS5jcmVhdGUocGFkZGluZ1dvcmRzLCBuUGFkZGluZ0J5dGVzKTtcblxuXHQgICAgICAgICAgICAvLyBBZGQgcGFkZGluZ1xuXHQgICAgICAgICAgICBkYXRhLmNvbmNhdChwYWRkaW5nKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogVW5wYWRzIGRhdGEgdGhhdCBoYWQgYmVlbiBwYWRkZWQgdXNpbmcgdGhlIGFsZ29yaXRobSBkZWZpbmVkIGluIFBLQ1MgIzUvNy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fSBkYXRhIFRoZSBkYXRhIHRvIHVucGFkLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICBDcnlwdG9KUy5wYWQuUGtjczcudW5wYWQod29yZEFycmF5KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICB1bnBhZDogZnVuY3Rpb24gKGRhdGEpIHtcblx0ICAgICAgICAgICAgLy8gR2V0IG51bWJlciBvZiBwYWRkaW5nIGJ5dGVzIGZyb20gbGFzdCBieXRlXG5cdCAgICAgICAgICAgIHZhciBuUGFkZGluZ0J5dGVzID0gZGF0YS53b3Jkc1soZGF0YS5zaWdCeXRlcyAtIDEpID4+PiAyXSAmIDB4ZmY7XG5cblx0ICAgICAgICAgICAgLy8gUmVtb3ZlIHBhZGRpbmdcblx0ICAgICAgICAgICAgZGF0YS5zaWdCeXRlcyAtPSBuUGFkZGluZ0J5dGVzO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cblx0ICAgIC8qKlxuXHQgICAgICogQWJzdHJhY3QgYmFzZSBibG9jayBjaXBoZXIgdGVtcGxhdGUuXG5cdCAgICAgKlxuXHQgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IGJsb2NrU2l6ZSBUaGUgbnVtYmVyIG9mIDMyLWJpdCB3b3JkcyB0aGlzIGNpcGhlciBvcGVyYXRlcyBvbi4gRGVmYXVsdDogNCAoMTI4IGJpdHMpXG5cdCAgICAgKi9cblx0ICAgIHZhciBCbG9ja0NpcGhlciA9IENfbGliLkJsb2NrQ2lwaGVyID0gQ2lwaGVyLmV4dGVuZCh7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29uZmlndXJhdGlvbiBvcHRpb25zLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHByb3BlcnR5IHtNb2RlfSBtb2RlIFRoZSBibG9jayBtb2RlIHRvIHVzZS4gRGVmYXVsdDogQ0JDXG5cdCAgICAgICAgICogQHByb3BlcnR5IHtQYWRkaW5nfSBwYWRkaW5nIFRoZSBwYWRkaW5nIHN0cmF0ZWd5IHRvIHVzZS4gRGVmYXVsdDogUGtjczdcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBjZmc6IENpcGhlci5jZmcuZXh0ZW5kKHtcblx0ICAgICAgICAgICAgbW9kZTogQ0JDLFxuXHQgICAgICAgICAgICBwYWRkaW5nOiBQa2NzN1xuXHQgICAgICAgIH0pLFxuXG5cdCAgICAgICAgcmVzZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgdmFyIG1vZGVDcmVhdG9yO1xuXG5cdCAgICAgICAgICAgIC8vIFJlc2V0IGNpcGhlclxuXHQgICAgICAgICAgICBDaXBoZXIucmVzZXQuY2FsbCh0aGlzKTtcblxuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIGNmZyA9IHRoaXMuY2ZnO1xuXHQgICAgICAgICAgICB2YXIgaXYgPSBjZmcuaXY7XG5cdCAgICAgICAgICAgIHZhciBtb2RlID0gY2ZnLm1vZGU7XG5cblx0ICAgICAgICAgICAgLy8gUmVzZXQgYmxvY2sgbW9kZVxuXHQgICAgICAgICAgICBpZiAodGhpcy5feGZvcm1Nb2RlID09IHRoaXMuX0VOQ19YRk9STV9NT0RFKSB7XG5cdCAgICAgICAgICAgICAgICBtb2RlQ3JlYXRvciA9IG1vZGUuY3JlYXRlRW5jcnlwdG9yO1xuXHQgICAgICAgICAgICB9IGVsc2UgLyogaWYgKHRoaXMuX3hmb3JtTW9kZSA9PSB0aGlzLl9ERUNfWEZPUk1fTU9ERSkgKi8ge1xuXHQgICAgICAgICAgICAgICAgbW9kZUNyZWF0b3IgPSBtb2RlLmNyZWF0ZURlY3J5cHRvcjtcblx0ICAgICAgICAgICAgICAgIC8vIEtlZXAgYXQgbGVhc3Qgb25lIGJsb2NrIGluIHRoZSBidWZmZXIgZm9yIHVucGFkZGluZ1xuXHQgICAgICAgICAgICAgICAgdGhpcy5fbWluQnVmZmVyU2l6ZSA9IDE7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICBpZiAodGhpcy5fbW9kZSAmJiB0aGlzLl9tb2RlLl9fY3JlYXRvciA9PSBtb2RlQ3JlYXRvcikge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5fbW9kZS5pbml0KHRoaXMsIGl2ICYmIGl2LndvcmRzKTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuX21vZGUgPSBtb2RlQ3JlYXRvci5jYWxsKG1vZGUsIHRoaXMsIGl2ICYmIGl2LndvcmRzKTtcblx0ICAgICAgICAgICAgICAgIHRoaXMuX21vZGUuX19jcmVhdG9yID0gbW9kZUNyZWF0b3I7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgX2RvUHJvY2Vzc0Jsb2NrOiBmdW5jdGlvbiAod29yZHMsIG9mZnNldCkge1xuXHQgICAgICAgICAgICB0aGlzLl9tb2RlLnByb2Nlc3NCbG9jayh3b3Jkcywgb2Zmc2V0KTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgX2RvRmluYWxpemU6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgdmFyIGZpbmFsUHJvY2Vzc2VkQmxvY2tzO1xuXG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0XG5cdCAgICAgICAgICAgIHZhciBwYWRkaW5nID0gdGhpcy5jZmcucGFkZGluZztcblxuXHQgICAgICAgICAgICAvLyBGaW5hbGl6ZVxuXHQgICAgICAgICAgICBpZiAodGhpcy5feGZvcm1Nb2RlID09IHRoaXMuX0VOQ19YRk9STV9NT0RFKSB7XG5cdCAgICAgICAgICAgICAgICAvLyBQYWQgZGF0YVxuXHQgICAgICAgICAgICAgICAgcGFkZGluZy5wYWQodGhpcy5fZGF0YSwgdGhpcy5ibG9ja1NpemUpO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBQcm9jZXNzIGZpbmFsIGJsb2Nrc1xuXHQgICAgICAgICAgICAgICAgZmluYWxQcm9jZXNzZWRCbG9ja3MgPSB0aGlzLl9wcm9jZXNzKCEhJ2ZsdXNoJyk7XG5cdCAgICAgICAgICAgIH0gZWxzZSAvKiBpZiAodGhpcy5feGZvcm1Nb2RlID09IHRoaXMuX0RFQ19YRk9STV9NT0RFKSAqLyB7XG5cdCAgICAgICAgICAgICAgICAvLyBQcm9jZXNzIGZpbmFsIGJsb2Nrc1xuXHQgICAgICAgICAgICAgICAgZmluYWxQcm9jZXNzZWRCbG9ja3MgPSB0aGlzLl9wcm9jZXNzKCEhJ2ZsdXNoJyk7XG5cblx0ICAgICAgICAgICAgICAgIC8vIFVucGFkIGRhdGFcblx0ICAgICAgICAgICAgICAgIHBhZGRpbmcudW5wYWQoZmluYWxQcm9jZXNzZWRCbG9ja3MpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGZpbmFsUHJvY2Vzc2VkQmxvY2tzO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBibG9ja1NpemU6IDEyOC8zMlxuXHQgICAgfSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogQSBjb2xsZWN0aW9uIG9mIGNpcGhlciBwYXJhbWV0ZXJzLlxuXHQgICAgICpcblx0ICAgICAqIEBwcm9wZXJ0eSB7V29yZEFycmF5fSBjaXBoZXJ0ZXh0IFRoZSByYXcgY2lwaGVydGV4dC5cblx0ICAgICAqIEBwcm9wZXJ0eSB7V29yZEFycmF5fSBrZXkgVGhlIGtleSB0byB0aGlzIGNpcGhlcnRleHQuXG5cdCAgICAgKiBAcHJvcGVydHkge1dvcmRBcnJheX0gaXYgVGhlIElWIHVzZWQgaW4gdGhlIGNpcGhlcmluZyBvcGVyYXRpb24uXG5cdCAgICAgKiBAcHJvcGVydHkge1dvcmRBcnJheX0gc2FsdCBUaGUgc2FsdCB1c2VkIHdpdGggYSBrZXkgZGVyaXZhdGlvbiBmdW5jdGlvbi5cblx0ICAgICAqIEBwcm9wZXJ0eSB7Q2lwaGVyfSBhbGdvcml0aG0gVGhlIGNpcGhlciBhbGdvcml0aG0uXG5cdCAgICAgKiBAcHJvcGVydHkge01vZGV9IG1vZGUgVGhlIGJsb2NrIG1vZGUgdXNlZCBpbiB0aGUgY2lwaGVyaW5nIG9wZXJhdGlvbi5cblx0ICAgICAqIEBwcm9wZXJ0eSB7UGFkZGluZ30gcGFkZGluZyBUaGUgcGFkZGluZyBzY2hlbWUgdXNlZCBpbiB0aGUgY2lwaGVyaW5nIG9wZXJhdGlvbi5cblx0ICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBibG9ja1NpemUgVGhlIGJsb2NrIHNpemUgb2YgdGhlIGNpcGhlci5cblx0ICAgICAqIEBwcm9wZXJ0eSB7Rm9ybWF0fSBmb3JtYXR0ZXIgVGhlIGRlZmF1bHQgZm9ybWF0dGluZyBzdHJhdGVneSB0byBjb252ZXJ0IHRoaXMgY2lwaGVyIHBhcmFtcyBvYmplY3QgdG8gYSBzdHJpbmcuXG5cdCAgICAgKi9cblx0ICAgIHZhciBDaXBoZXJQYXJhbXMgPSBDX2xpYi5DaXBoZXJQYXJhbXMgPSBCYXNlLmV4dGVuZCh7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogSW5pdGlhbGl6ZXMgYSBuZXdseSBjcmVhdGVkIGNpcGhlciBwYXJhbXMgb2JqZWN0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNpcGhlclBhcmFtcyBBbiBvYmplY3Qgd2l0aCBhbnkgb2YgdGhlIHBvc3NpYmxlIGNpcGhlciBwYXJhbWV0ZXJzLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgY2lwaGVyUGFyYW1zID0gQ3J5cHRvSlMubGliLkNpcGhlclBhcmFtcy5jcmVhdGUoe1xuXHQgICAgICAgICAqICAgICAgICAgY2lwaGVydGV4dDogY2lwaGVydGV4dFdvcmRBcnJheSxcblx0ICAgICAgICAgKiAgICAgICAgIGtleToga2V5V29yZEFycmF5LFxuXHQgICAgICAgICAqICAgICAgICAgaXY6IGl2V29yZEFycmF5LFxuXHQgICAgICAgICAqICAgICAgICAgc2FsdDogc2FsdFdvcmRBcnJheSxcblx0ICAgICAgICAgKiAgICAgICAgIGFsZ29yaXRobTogQ3J5cHRvSlMuYWxnby5BRVMsXG5cdCAgICAgICAgICogICAgICAgICBtb2RlOiBDcnlwdG9KUy5tb2RlLkNCQyxcblx0ICAgICAgICAgKiAgICAgICAgIHBhZGRpbmc6IENyeXB0b0pTLnBhZC5QS0NTNyxcblx0ICAgICAgICAgKiAgICAgICAgIGJsb2NrU2l6ZTogNCxcblx0ICAgICAgICAgKiAgICAgICAgIGZvcm1hdHRlcjogQ3J5cHRvSlMuZm9ybWF0Lk9wZW5TU0xcblx0ICAgICAgICAgKiAgICAgfSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgaW5pdDogZnVuY3Rpb24gKGNpcGhlclBhcmFtcykge1xuXHQgICAgICAgICAgICB0aGlzLm1peEluKGNpcGhlclBhcmFtcyk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbnZlcnRzIHRoaXMgY2lwaGVyIHBhcmFtcyBvYmplY3QgdG8gYSBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge0Zvcm1hdH0gZm9ybWF0dGVyIChPcHRpb25hbCkgVGhlIGZvcm1hdHRpbmcgc3RyYXRlZ3kgdG8gdXNlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgc3RyaW5naWZpZWQgY2lwaGVyIHBhcmFtcy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEB0aHJvd3MgRXJyb3IgSWYgbmVpdGhlciB0aGUgZm9ybWF0dGVyIG5vciB0aGUgZGVmYXVsdCBmb3JtYXR0ZXIgaXMgc2V0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgc3RyaW5nID0gY2lwaGVyUGFyYW1zICsgJyc7XG5cdCAgICAgICAgICogICAgIHZhciBzdHJpbmcgPSBjaXBoZXJQYXJhbXMudG9TdHJpbmcoKTtcblx0ICAgICAgICAgKiAgICAgdmFyIHN0cmluZyA9IGNpcGhlclBhcmFtcy50b1N0cmluZyhDcnlwdG9KUy5mb3JtYXQuT3BlblNTTCk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uIChmb3JtYXR0ZXIpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIChmb3JtYXR0ZXIgfHwgdGhpcy5mb3JtYXR0ZXIpLnN0cmluZ2lmeSh0aGlzKTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBGb3JtYXQgbmFtZXNwYWNlLlxuXHQgICAgICovXG5cdCAgICB2YXIgQ19mb3JtYXQgPSBDLmZvcm1hdCA9IHt9O1xuXG5cdCAgICAvKipcblx0ICAgICAqIE9wZW5TU0wgZm9ybWF0dGluZyBzdHJhdGVneS5cblx0ICAgICAqL1xuXHQgICAgdmFyIE9wZW5TU0xGb3JtYXR0ZXIgPSBDX2Zvcm1hdC5PcGVuU1NMID0ge1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbnZlcnRzIGEgY2lwaGVyIHBhcmFtcyBvYmplY3QgdG8gYW4gT3BlblNTTC1jb21wYXRpYmxlIHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7Q2lwaGVyUGFyYW1zfSBjaXBoZXJQYXJhbXMgVGhlIGNpcGhlciBwYXJhbXMgb2JqZWN0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgT3BlblNTTC1jb21wYXRpYmxlIHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIG9wZW5TU0xTdHJpbmcgPSBDcnlwdG9KUy5mb3JtYXQuT3BlblNTTC5zdHJpbmdpZnkoY2lwaGVyUGFyYW1zKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBzdHJpbmdpZnk6IGZ1bmN0aW9uIChjaXBoZXJQYXJhbXMpIHtcblx0ICAgICAgICAgICAgdmFyIHdvcmRBcnJheTtcblxuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIGNpcGhlcnRleHQgPSBjaXBoZXJQYXJhbXMuY2lwaGVydGV4dDtcblx0ICAgICAgICAgICAgdmFyIHNhbHQgPSBjaXBoZXJQYXJhbXMuc2FsdDtcblxuXHQgICAgICAgICAgICAvLyBGb3JtYXRcblx0ICAgICAgICAgICAgaWYgKHNhbHQpIHtcblx0ICAgICAgICAgICAgICAgIHdvcmRBcnJheSA9IFdvcmRBcnJheS5jcmVhdGUoWzB4NTM2MTZjNzQsIDB4NjU2NDVmNWZdKS5jb25jYXQoc2FsdCkuY29uY2F0KGNpcGhlcnRleHQpO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgd29yZEFycmF5ID0gY2lwaGVydGV4dDtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHJldHVybiB3b3JkQXJyYXkudG9TdHJpbmcoQmFzZTY0KTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgYW4gT3BlblNTTC1jb21wYXRpYmxlIHN0cmluZyB0byBhIGNpcGhlciBwYXJhbXMgb2JqZWN0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG9wZW5TU0xTdHIgVGhlIE9wZW5TU0wtY29tcGF0aWJsZSBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtDaXBoZXJQYXJhbXN9IFRoZSBjaXBoZXIgcGFyYW1zIG9iamVjdC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGNpcGhlclBhcmFtcyA9IENyeXB0b0pTLmZvcm1hdC5PcGVuU1NMLnBhcnNlKG9wZW5TU0xTdHJpbmcpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHBhcnNlOiBmdW5jdGlvbiAob3BlblNTTFN0cikge1xuXHQgICAgICAgICAgICB2YXIgc2FsdDtcblxuXHQgICAgICAgICAgICAvLyBQYXJzZSBiYXNlNjRcblx0ICAgICAgICAgICAgdmFyIGNpcGhlcnRleHQgPSBCYXNlNjQucGFyc2Uob3BlblNTTFN0cik7XG5cblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICAgICAgdmFyIGNpcGhlcnRleHRXb3JkcyA9IGNpcGhlcnRleHQud29yZHM7XG5cblx0ICAgICAgICAgICAgLy8gVGVzdCBmb3Igc2FsdFxuXHQgICAgICAgICAgICBpZiAoY2lwaGVydGV4dFdvcmRzWzBdID09IDB4NTM2MTZjNzQgJiYgY2lwaGVydGV4dFdvcmRzWzFdID09IDB4NjU2NDVmNWYpIHtcblx0ICAgICAgICAgICAgICAgIC8vIEV4dHJhY3Qgc2FsdFxuXHQgICAgICAgICAgICAgICAgc2FsdCA9IFdvcmRBcnJheS5jcmVhdGUoY2lwaGVydGV4dFdvcmRzLnNsaWNlKDIsIDQpKTtcblxuXHQgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHNhbHQgZnJvbSBjaXBoZXJ0ZXh0XG5cdCAgICAgICAgICAgICAgICBjaXBoZXJ0ZXh0V29yZHMuc3BsaWNlKDAsIDQpO1xuXHQgICAgICAgICAgICAgICAgY2lwaGVydGV4dC5zaWdCeXRlcyAtPSAxNjtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHJldHVybiBDaXBoZXJQYXJhbXMuY3JlYXRlKHsgY2lwaGVydGV4dDogY2lwaGVydGV4dCwgc2FsdDogc2FsdCB9KTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXG5cdCAgICAvKipcblx0ICAgICAqIEEgY2lwaGVyIHdyYXBwZXIgdGhhdCByZXR1cm5zIGNpcGhlcnRleHQgYXMgYSBzZXJpYWxpemFibGUgY2lwaGVyIHBhcmFtcyBvYmplY3QuXG5cdCAgICAgKi9cblx0ICAgIHZhciBTZXJpYWxpemFibGVDaXBoZXIgPSBDX2xpYi5TZXJpYWxpemFibGVDaXBoZXIgPSBCYXNlLmV4dGVuZCh7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29uZmlndXJhdGlvbiBvcHRpb25zLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHByb3BlcnR5IHtGb3JtYXR0ZXJ9IGZvcm1hdCBUaGUgZm9ybWF0dGluZyBzdHJhdGVneSB0byBjb252ZXJ0IGNpcGhlciBwYXJhbSBvYmplY3RzIHRvIGFuZCBmcm9tIGEgc3RyaW5nLiBEZWZhdWx0OiBPcGVuU1NMXG5cdCAgICAgICAgICovXG5cdCAgICAgICAgY2ZnOiBCYXNlLmV4dGVuZCh7XG5cdCAgICAgICAgICAgIGZvcm1hdDogT3BlblNTTEZvcm1hdHRlclxuXHQgICAgICAgIH0pLFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogRW5jcnlwdHMgYSBtZXNzYWdlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtDaXBoZXJ9IGNpcGhlciBUaGUgY2lwaGVyIGFsZ29yaXRobSB0byB1c2UuXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGVuY3J5cHQuXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl9IGtleSBUaGUga2V5LlxuXHQgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjZmcgKE9wdGlvbmFsKSBUaGUgY29uZmlndXJhdGlvbiBvcHRpb25zIHRvIHVzZSBmb3IgdGhpcyBvcGVyYXRpb24uXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtDaXBoZXJQYXJhbXN9IEEgY2lwaGVyIHBhcmFtcyBvYmplY3QuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBjaXBoZXJ0ZXh0UGFyYW1zID0gQ3J5cHRvSlMubGliLlNlcmlhbGl6YWJsZUNpcGhlci5lbmNyeXB0KENyeXB0b0pTLmFsZ28uQUVTLCBtZXNzYWdlLCBrZXkpO1xuXHQgICAgICAgICAqICAgICB2YXIgY2lwaGVydGV4dFBhcmFtcyA9IENyeXB0b0pTLmxpYi5TZXJpYWxpemFibGVDaXBoZXIuZW5jcnlwdChDcnlwdG9KUy5hbGdvLkFFUywgbWVzc2FnZSwga2V5LCB7IGl2OiBpdiB9KTtcblx0ICAgICAgICAgKiAgICAgdmFyIGNpcGhlcnRleHRQYXJhbXMgPSBDcnlwdG9KUy5saWIuU2VyaWFsaXphYmxlQ2lwaGVyLmVuY3J5cHQoQ3J5cHRvSlMuYWxnby5BRVMsIG1lc3NhZ2UsIGtleSwgeyBpdjogaXYsIGZvcm1hdDogQ3J5cHRvSlMuZm9ybWF0Lk9wZW5TU0wgfSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgZW5jcnlwdDogZnVuY3Rpb24gKGNpcGhlciwgbWVzc2FnZSwga2V5LCBjZmcpIHtcblx0ICAgICAgICAgICAgLy8gQXBwbHkgY29uZmlnIGRlZmF1bHRzXG5cdCAgICAgICAgICAgIGNmZyA9IHRoaXMuY2ZnLmV4dGVuZChjZmcpO1xuXG5cdCAgICAgICAgICAgIC8vIEVuY3J5cHRcblx0ICAgICAgICAgICAgdmFyIGVuY3J5cHRvciA9IGNpcGhlci5jcmVhdGVFbmNyeXB0b3Ioa2V5LCBjZmcpO1xuXHQgICAgICAgICAgICB2YXIgY2lwaGVydGV4dCA9IGVuY3J5cHRvci5maW5hbGl6ZShtZXNzYWdlKTtcblxuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICB2YXIgY2lwaGVyQ2ZnID0gZW5jcnlwdG9yLmNmZztcblxuXHQgICAgICAgICAgICAvLyBDcmVhdGUgYW5kIHJldHVybiBzZXJpYWxpemFibGUgY2lwaGVyIHBhcmFtc1xuXHQgICAgICAgICAgICByZXR1cm4gQ2lwaGVyUGFyYW1zLmNyZWF0ZSh7XG5cdCAgICAgICAgICAgICAgICBjaXBoZXJ0ZXh0OiBjaXBoZXJ0ZXh0LFxuXHQgICAgICAgICAgICAgICAga2V5OiBrZXksXG5cdCAgICAgICAgICAgICAgICBpdjogY2lwaGVyQ2ZnLml2LFxuXHQgICAgICAgICAgICAgICAgYWxnb3JpdGhtOiBjaXBoZXIsXG5cdCAgICAgICAgICAgICAgICBtb2RlOiBjaXBoZXJDZmcubW9kZSxcblx0ICAgICAgICAgICAgICAgIHBhZGRpbmc6IGNpcGhlckNmZy5wYWRkaW5nLFxuXHQgICAgICAgICAgICAgICAgYmxvY2tTaXplOiBjaXBoZXIuYmxvY2tTaXplLFxuXHQgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiBjZmcuZm9ybWF0XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBEZWNyeXB0cyBzZXJpYWxpemVkIGNpcGhlcnRleHQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge0NpcGhlcn0gY2lwaGVyIFRoZSBjaXBoZXIgYWxnb3JpdGhtIHRvIHVzZS5cblx0ICAgICAgICAgKiBAcGFyYW0ge0NpcGhlclBhcmFtc3xzdHJpbmd9IGNpcGhlcnRleHQgVGhlIGNpcGhlcnRleHQgdG8gZGVjcnlwdC5cblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheX0ga2V5IFRoZSBrZXkuXG5cdCAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNmZyAoT3B0aW9uYWwpIFRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgdG8gdXNlIGZvciB0aGlzIG9wZXJhdGlvbi5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIHBsYWludGV4dC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHBsYWludGV4dCA9IENyeXB0b0pTLmxpYi5TZXJpYWxpemFibGVDaXBoZXIuZGVjcnlwdChDcnlwdG9KUy5hbGdvLkFFUywgZm9ybWF0dGVkQ2lwaGVydGV4dCwga2V5LCB7IGl2OiBpdiwgZm9ybWF0OiBDcnlwdG9KUy5mb3JtYXQuT3BlblNTTCB9KTtcblx0ICAgICAgICAgKiAgICAgdmFyIHBsYWludGV4dCA9IENyeXB0b0pTLmxpYi5TZXJpYWxpemFibGVDaXBoZXIuZGVjcnlwdChDcnlwdG9KUy5hbGdvLkFFUywgY2lwaGVydGV4dFBhcmFtcywga2V5LCB7IGl2OiBpdiwgZm9ybWF0OiBDcnlwdG9KUy5mb3JtYXQuT3BlblNTTCB9KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBkZWNyeXB0OiBmdW5jdGlvbiAoY2lwaGVyLCBjaXBoZXJ0ZXh0LCBrZXksIGNmZykge1xuXHQgICAgICAgICAgICAvLyBBcHBseSBjb25maWcgZGVmYXVsdHNcblx0ICAgICAgICAgICAgY2ZnID0gdGhpcy5jZmcuZXh0ZW5kKGNmZyk7XG5cblx0ICAgICAgICAgICAgLy8gQ29udmVydCBzdHJpbmcgdG8gQ2lwaGVyUGFyYW1zXG5cdCAgICAgICAgICAgIGNpcGhlcnRleHQgPSB0aGlzLl9wYXJzZShjaXBoZXJ0ZXh0LCBjZmcuZm9ybWF0KTtcblxuXHQgICAgICAgICAgICAvLyBEZWNyeXB0XG5cdCAgICAgICAgICAgIHZhciBwbGFpbnRleHQgPSBjaXBoZXIuY3JlYXRlRGVjcnlwdG9yKGtleSwgY2ZnKS5maW5hbGl6ZShjaXBoZXJ0ZXh0LmNpcGhlcnRleHQpO1xuXG5cdCAgICAgICAgICAgIHJldHVybiBwbGFpbnRleHQ7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbnZlcnRzIHNlcmlhbGl6ZWQgY2lwaGVydGV4dCB0byBDaXBoZXJQYXJhbXMsXG5cdCAgICAgICAgICogZWxzZSBhc3N1bWVkIENpcGhlclBhcmFtcyBhbHJlYWR5IGFuZCByZXR1cm5zIGNpcGhlcnRleHQgdW5jaGFuZ2VkLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtDaXBoZXJQYXJhbXN8c3RyaW5nfSBjaXBoZXJ0ZXh0IFRoZSBjaXBoZXJ0ZXh0LlxuXHQgICAgICAgICAqIEBwYXJhbSB7Rm9ybWF0dGVyfSBmb3JtYXQgVGhlIGZvcm1hdHRpbmcgc3RyYXRlZ3kgdG8gdXNlIHRvIHBhcnNlIHNlcmlhbGl6ZWQgY2lwaGVydGV4dC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge0NpcGhlclBhcmFtc30gVGhlIHVuc2VyaWFsaXplZCBjaXBoZXJ0ZXh0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgY2lwaGVydGV4dFBhcmFtcyA9IENyeXB0b0pTLmxpYi5TZXJpYWxpemFibGVDaXBoZXIuX3BhcnNlKGNpcGhlcnRleHRTdHJpbmdPclBhcmFtcywgZm9ybWF0KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBfcGFyc2U6IGZ1bmN0aW9uIChjaXBoZXJ0ZXh0LCBmb3JtYXQpIHtcblx0ICAgICAgICAgICAgaWYgKHR5cGVvZiBjaXBoZXJ0ZXh0ID09ICdzdHJpbmcnKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gZm9ybWF0LnBhcnNlKGNpcGhlcnRleHQsIHRoaXMpO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIGNpcGhlcnRleHQ7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBLZXkgZGVyaXZhdGlvbiBmdW5jdGlvbiBuYW1lc3BhY2UuXG5cdCAgICAgKi9cblx0ICAgIHZhciBDX2tkZiA9IEMua2RmID0ge307XG5cblx0ICAgIC8qKlxuXHQgICAgICogT3BlblNTTCBrZXkgZGVyaXZhdGlvbiBmdW5jdGlvbi5cblx0ICAgICAqL1xuXHQgICAgdmFyIE9wZW5TU0xLZGYgPSBDX2tkZi5PcGVuU1NMID0ge1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIERlcml2ZXMgYSBrZXkgYW5kIElWIGZyb20gYSBwYXNzd29yZC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXNzd29yZCBUaGUgcGFzc3dvcmQgdG8gZGVyaXZlIGZyb20uXG5cdCAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IGtleVNpemUgVGhlIHNpemUgaW4gd29yZHMgb2YgdGhlIGtleSB0byBnZW5lcmF0ZS5cblx0ICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gaXZTaXplIFRoZSBzaXplIGluIHdvcmRzIG9mIHRoZSBJViB0byBnZW5lcmF0ZS5cblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IHNhbHQgKE9wdGlvbmFsKSBBIDY0LWJpdCBzYWx0IHRvIHVzZS4gSWYgb21pdHRlZCwgYSBzYWx0IHdpbGwgYmUgZ2VuZXJhdGVkIHJhbmRvbWx5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7Q2lwaGVyUGFyYW1zfSBBIGNpcGhlciBwYXJhbXMgb2JqZWN0IHdpdGggdGhlIGtleSwgSVYsIGFuZCBzYWx0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgZGVyaXZlZFBhcmFtcyA9IENyeXB0b0pTLmtkZi5PcGVuU1NMLmV4ZWN1dGUoJ1Bhc3N3b3JkJywgMjU2LzMyLCAxMjgvMzIpO1xuXHQgICAgICAgICAqICAgICB2YXIgZGVyaXZlZFBhcmFtcyA9IENyeXB0b0pTLmtkZi5PcGVuU1NMLmV4ZWN1dGUoJ1Bhc3N3b3JkJywgMjU2LzMyLCAxMjgvMzIsICdzYWx0c2FsdCcpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGV4ZWN1dGU6IGZ1bmN0aW9uIChwYXNzd29yZCwga2V5U2l6ZSwgaXZTaXplLCBzYWx0KSB7XG5cdCAgICAgICAgICAgIC8vIEdlbmVyYXRlIHJhbmRvbSBzYWx0XG5cdCAgICAgICAgICAgIGlmICghc2FsdCkge1xuXHQgICAgICAgICAgICAgICAgc2FsdCA9IFdvcmRBcnJheS5yYW5kb20oNjQvOCk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBEZXJpdmUga2V5IGFuZCBJVlxuXHQgICAgICAgICAgICB2YXIga2V5ID0gRXZwS0RGLmNyZWF0ZSh7IGtleVNpemU6IGtleVNpemUgKyBpdlNpemUgfSkuY29tcHV0ZShwYXNzd29yZCwgc2FsdCk7XG5cblx0ICAgICAgICAgICAgLy8gU2VwYXJhdGUga2V5IGFuZCBJVlxuXHQgICAgICAgICAgICB2YXIgaXYgPSBXb3JkQXJyYXkuY3JlYXRlKGtleS53b3Jkcy5zbGljZShrZXlTaXplKSwgaXZTaXplICogNCk7XG5cdCAgICAgICAgICAgIGtleS5zaWdCeXRlcyA9IGtleVNpemUgKiA0O1xuXG5cdCAgICAgICAgICAgIC8vIFJldHVybiBwYXJhbXNcblx0ICAgICAgICAgICAgcmV0dXJuIENpcGhlclBhcmFtcy5jcmVhdGUoeyBrZXk6IGtleSwgaXY6IGl2LCBzYWx0OiBzYWx0IH0pO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cblx0ICAgIC8qKlxuXHQgICAgICogQSBzZXJpYWxpemFibGUgY2lwaGVyIHdyYXBwZXIgdGhhdCBkZXJpdmVzIHRoZSBrZXkgZnJvbSBhIHBhc3N3b3JkLFxuXHQgICAgICogYW5kIHJldHVybnMgY2lwaGVydGV4dCBhcyBhIHNlcmlhbGl6YWJsZSBjaXBoZXIgcGFyYW1zIG9iamVjdC5cblx0ICAgICAqL1xuXHQgICAgdmFyIFBhc3N3b3JkQmFzZWRDaXBoZXIgPSBDX2xpYi5QYXNzd29yZEJhc2VkQ2lwaGVyID0gU2VyaWFsaXphYmxlQ2lwaGVyLmV4dGVuZCh7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29uZmlndXJhdGlvbiBvcHRpb25zLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHByb3BlcnR5IHtLREZ9IGtkZiBUaGUga2V5IGRlcml2YXRpb24gZnVuY3Rpb24gdG8gdXNlIHRvIGdlbmVyYXRlIGEga2V5IGFuZCBJViBmcm9tIGEgcGFzc3dvcmQuIERlZmF1bHQ6IE9wZW5TU0xcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBjZmc6IFNlcmlhbGl6YWJsZUNpcGhlci5jZmcuZXh0ZW5kKHtcblx0ICAgICAgICAgICAga2RmOiBPcGVuU1NMS2RmXG5cdCAgICAgICAgfSksXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBFbmNyeXB0cyBhIG1lc3NhZ2UgdXNpbmcgYSBwYXNzd29yZC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7Q2lwaGVyfSBjaXBoZXIgVGhlIGNpcGhlciBhbGdvcml0aG0gdG8gdXNlLlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBlbmNyeXB0LlxuXHQgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXNzd29yZCBUaGUgcGFzc3dvcmQuXG5cdCAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNmZyAoT3B0aW9uYWwpIFRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgdG8gdXNlIGZvciB0aGlzIG9wZXJhdGlvbi5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge0NpcGhlclBhcmFtc30gQSBjaXBoZXIgcGFyYW1zIG9iamVjdC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGNpcGhlcnRleHRQYXJhbXMgPSBDcnlwdG9KUy5saWIuUGFzc3dvcmRCYXNlZENpcGhlci5lbmNyeXB0KENyeXB0b0pTLmFsZ28uQUVTLCBtZXNzYWdlLCAncGFzc3dvcmQnKTtcblx0ICAgICAgICAgKiAgICAgdmFyIGNpcGhlcnRleHRQYXJhbXMgPSBDcnlwdG9KUy5saWIuUGFzc3dvcmRCYXNlZENpcGhlci5lbmNyeXB0KENyeXB0b0pTLmFsZ28uQUVTLCBtZXNzYWdlLCAncGFzc3dvcmQnLCB7IGZvcm1hdDogQ3J5cHRvSlMuZm9ybWF0Lk9wZW5TU0wgfSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgZW5jcnlwdDogZnVuY3Rpb24gKGNpcGhlciwgbWVzc2FnZSwgcGFzc3dvcmQsIGNmZykge1xuXHQgICAgICAgICAgICAvLyBBcHBseSBjb25maWcgZGVmYXVsdHNcblx0ICAgICAgICAgICAgY2ZnID0gdGhpcy5jZmcuZXh0ZW5kKGNmZyk7XG5cblx0ICAgICAgICAgICAgLy8gRGVyaXZlIGtleSBhbmQgb3RoZXIgcGFyYW1zXG5cdCAgICAgICAgICAgIHZhciBkZXJpdmVkUGFyYW1zID0gY2ZnLmtkZi5leGVjdXRlKHBhc3N3b3JkLCBjaXBoZXIua2V5U2l6ZSwgY2lwaGVyLml2U2l6ZSk7XG5cblx0ICAgICAgICAgICAgLy8gQWRkIElWIHRvIGNvbmZpZ1xuXHQgICAgICAgICAgICBjZmcuaXYgPSBkZXJpdmVkUGFyYW1zLml2O1xuXG5cdCAgICAgICAgICAgIC8vIEVuY3J5cHRcblx0ICAgICAgICAgICAgdmFyIGNpcGhlcnRleHQgPSBTZXJpYWxpemFibGVDaXBoZXIuZW5jcnlwdC5jYWxsKHRoaXMsIGNpcGhlciwgbWVzc2FnZSwgZGVyaXZlZFBhcmFtcy5rZXksIGNmZyk7XG5cblx0ICAgICAgICAgICAgLy8gTWl4IGluIGRlcml2ZWQgcGFyYW1zXG5cdCAgICAgICAgICAgIGNpcGhlcnRleHQubWl4SW4oZGVyaXZlZFBhcmFtcyk7XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGNpcGhlcnRleHQ7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIERlY3J5cHRzIHNlcmlhbGl6ZWQgY2lwaGVydGV4dCB1c2luZyBhIHBhc3N3b3JkLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtDaXBoZXJ9IGNpcGhlciBUaGUgY2lwaGVyIGFsZ29yaXRobSB0byB1c2UuXG5cdCAgICAgICAgICogQHBhcmFtIHtDaXBoZXJQYXJhbXN8c3RyaW5nfSBjaXBoZXJ0ZXh0IFRoZSBjaXBoZXJ0ZXh0IHRvIGRlY3J5cHQuXG5cdCAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHBhc3N3b3JkIFRoZSBwYXNzd29yZC5cblx0ICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gY2ZnIChPcHRpb25hbCkgVGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyB0byB1c2UgZm9yIHRoaXMgb3BlcmF0aW9uLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgcGxhaW50ZXh0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgcGxhaW50ZXh0ID0gQ3J5cHRvSlMubGliLlBhc3N3b3JkQmFzZWRDaXBoZXIuZGVjcnlwdChDcnlwdG9KUy5hbGdvLkFFUywgZm9ybWF0dGVkQ2lwaGVydGV4dCwgJ3Bhc3N3b3JkJywgeyBmb3JtYXQ6IENyeXB0b0pTLmZvcm1hdC5PcGVuU1NMIH0pO1xuXHQgICAgICAgICAqICAgICB2YXIgcGxhaW50ZXh0ID0gQ3J5cHRvSlMubGliLlBhc3N3b3JkQmFzZWRDaXBoZXIuZGVjcnlwdChDcnlwdG9KUy5hbGdvLkFFUywgY2lwaGVydGV4dFBhcmFtcywgJ3Bhc3N3b3JkJywgeyBmb3JtYXQ6IENyeXB0b0pTLmZvcm1hdC5PcGVuU1NMIH0pO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGRlY3J5cHQ6IGZ1bmN0aW9uIChjaXBoZXIsIGNpcGhlcnRleHQsIHBhc3N3b3JkLCBjZmcpIHtcblx0ICAgICAgICAgICAgLy8gQXBwbHkgY29uZmlnIGRlZmF1bHRzXG5cdCAgICAgICAgICAgIGNmZyA9IHRoaXMuY2ZnLmV4dGVuZChjZmcpO1xuXG5cdCAgICAgICAgICAgIC8vIENvbnZlcnQgc3RyaW5nIHRvIENpcGhlclBhcmFtc1xuXHQgICAgICAgICAgICBjaXBoZXJ0ZXh0ID0gdGhpcy5fcGFyc2UoY2lwaGVydGV4dCwgY2ZnLmZvcm1hdCk7XG5cblx0ICAgICAgICAgICAgLy8gRGVyaXZlIGtleSBhbmQgb3RoZXIgcGFyYW1zXG5cdCAgICAgICAgICAgIHZhciBkZXJpdmVkUGFyYW1zID0gY2ZnLmtkZi5leGVjdXRlKHBhc3N3b3JkLCBjaXBoZXIua2V5U2l6ZSwgY2lwaGVyLml2U2l6ZSwgY2lwaGVydGV4dC5zYWx0KTtcblxuXHQgICAgICAgICAgICAvLyBBZGQgSVYgdG8gY29uZmlnXG5cdCAgICAgICAgICAgIGNmZy5pdiA9IGRlcml2ZWRQYXJhbXMuaXY7XG5cblx0ICAgICAgICAgICAgLy8gRGVjcnlwdFxuXHQgICAgICAgICAgICB2YXIgcGxhaW50ZXh0ID0gU2VyaWFsaXphYmxlQ2lwaGVyLmRlY3J5cHQuY2FsbCh0aGlzLCBjaXBoZXIsIGNpcGhlcnRleHQsIGRlcml2ZWRQYXJhbXMua2V5LCBjZmcpO1xuXG5cdCAgICAgICAgICAgIHJldHVybiBwbGFpbnRleHQ7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdH0oKSk7XG5cblxufSkpO1xuXG4vKioqLyB9KSxcbi8qIDI5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlJlcXVlc3QgPSBleHBvcnRzLmNyZWF0ZVJlcXVlc3QgPSB2b2lkIDA7XG52YXIgdHNsaWJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG52YXIgVXRpbHMgPSB0c2xpYl8xLl9faW1wb3J0U3RhcihfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKTtcbnZhciBjb21ldHRyYW5zcG9ydF8xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygxMikpO1xudmFyIHBsYXRmb3JtXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKDMpKTtcbnZhciBldmVudGVtaXR0ZXJfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oNykpO1xudmFyIGVycm9yaW5mb18xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcbnZhciBkZWZhdWx0c18xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXyg4KSk7XG52YXIgbG9nZ2VyXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKTtcbnZhciBYSFJTdGF0ZXNfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oMjEpKTtcbi8vIFdvcmthcm91bmQgZm9yIHNhbGVzZm9yY2UgbGlnaHRuaW5nIGxvY2tlciBjb21wYXRpYmlsaXR5XG52YXIgZ2xvYmFsT2JqZWN0ID0gVXRpbHMuZ2V0R2xvYmFsT2JqZWN0KCk7XG52YXIgbm9vcCA9IGZ1bmN0aW9uICgpIHsgfTtcbi8qIENhbid0IGp1c3QgdXNlIHdpbmRvdy5BYmx5LCBhcyB0aGF0IHdvbid0IGV4aXN0IGlmIHVzaW5nIHRoZSBjb21tb25qcyB2ZXJzaW9uLiAqL1xudmFyIF8gPSAoZ2xvYmFsT2JqZWN0Ll9hYmx5anNfanNvbnAgPSB7fSk7XG4vKiBleHByZXNzIHN0cmlwcyBvdXQgcGFyYW50aGVzZXMgZnJvbSB0aGUgY2FsbGJhY2shXG4gKiBLbHVkZ2UgdG8gc3RpbGwgYWxvdyBpdHMgcmVzcG9uc2VzIHRvIHdvcmssIHdoaWxlIG5vdCBrZWVwaW5nIHRoZVxuICogZnVuY3Rpb24gZm9ybSBmb3Igbm9ybWFsIHVzZSBhbmQgbm90IGNsdXR0ZXJpbmcgd2luZG93LkFibHlcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9leHByZXNzanMvZXhwcmVzcy9ibG9iLzViNGQ0YjRhYjEzMjQ3NDM1MzRmYmNkNDcwOWY0ZTc1YmI0YjRlOWQvbGliL3Jlc3BvbnNlLmpzI0wzMDVcbiAqL1xuXy5fID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgcmV0dXJuIF9bJ18nICsgaWRdIHx8IG5vb3A7XG59O1xudmFyIGlkQ291bnRlciA9IDE7XG52YXIgc2hvcnROYW1lID0gJ2pzb25wJztcbmZ1bmN0aW9uIGNyZWF0ZVJlcXVlc3QodXJpLCBoZWFkZXJzLCBwYXJhbXMsIGJvZHksIHJlcXVlc3RNb2RlLCB0aW1lb3V0cywgbWV0aG9kKSB7XG4gICAgLyogSlNPTlAgcmVxdWVzdHMgYXJlIHVzZWQgZWl0aGVyIHdpdGggdGhlIGNvbnRleHQgYmVpbmcgYSByZWFsdGltZVxuICAgICAqIHRyYW5zcG9ydCwgb3Igd2l0aCB0aW1lb3V0cyBwYXNzZWQgaW4gKGZvciB3aGVuIHVzZWQgYnkgYSByZXN0IGNsaWVudCksXG4gICAgICogb3IgY29tcGxldGVseSBzdGFuZGFsb25lLiAgVXNlIHRoZSBhcHByb3ByaWF0ZSB0aW1lb3V0cyBpbiBlYWNoIGNhc2UgKi9cbiAgICB0aW1lb3V0cyA9IHRpbWVvdXRzIHx8IGRlZmF1bHRzXzEuZGVmYXVsdC5USU1FT1VUUztcbiAgICByZXR1cm4gbmV3IFJlcXVlc3QodW5kZWZpbmVkLCB1cmksIGhlYWRlcnMsIFV0aWxzLmNvcHkocGFyYW1zKSwgYm9keSwgcmVxdWVzdE1vZGUsIHRpbWVvdXRzLCBtZXRob2QpO1xufVxuZXhwb3J0cy5jcmVhdGVSZXF1ZXN0ID0gY3JlYXRlUmVxdWVzdDtcbnZhciBKU09OUFRyYW5zcG9ydCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhKU09OUFRyYW5zcG9ydCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBKU09OUFRyYW5zcG9ydChjb25uZWN0aW9uTWFuYWdlciwgYXV0aCwgcGFyYW1zKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGNvbm5lY3Rpb25NYW5hZ2VyLCBhdXRoLCBwYXJhbXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnNob3J0TmFtZSA9IHNob3J0TmFtZTtcbiAgICAgICAgcGFyYW1zLnN0cmVhbSA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEpTT05QVHJhbnNwb3J0LmlzQXZhaWxhYmxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gcGxhdGZvcm1fMS5kZWZhdWx0LkNvbmZpZy5qc29ucFN1cHBvcnRlZCAmJiBwbGF0Zm9ybV8xLmRlZmF1bHQuQ29uZmlnLmFsbG93Q29tZXQ7XG4gICAgfTtcbiAgICBKU09OUFRyYW5zcG9ydC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAnSlNPTlBUcmFuc3BvcnQ7IHVyaT0nICsgdGhpcy5iYXNlVXJpICsgJzsgaXNDb25uZWN0ZWQ9JyArIHRoaXMuaXNDb25uZWN0ZWQ7XG4gICAgfTtcbiAgICBKU09OUFRyYW5zcG9ydC5wcm90b3R5cGUuY3JlYXRlUmVxdWVzdCA9IGZ1bmN0aW9uICh1cmksIGhlYWRlcnMsIHBhcmFtcywgYm9keSwgcmVxdWVzdE1vZGUsIHRpbWVvdXRzLCBtZXRob2QpIHtcbiAgICAgICAgLyogSlNPTlAgcmVxdWVzdHMgYXJlIHVzZWQgZWl0aGVyIHdpdGggdGhlIGNvbnRleHQgYmVpbmcgYSByZWFsdGltZVxuICAgICAgICAgKiB0cmFuc3BvcnQsIG9yIHdpdGggdGltZW91dHMgcGFzc2VkIGluIChmb3Igd2hlbiB1c2VkIGJ5IGEgcmVzdCBjbGllbnQpLFxuICAgICAgICAgKiBvciBjb21wbGV0ZWx5IHN0YW5kYWxvbmUuICBVc2UgdGhlIGFwcHJvcHJpYXRlIHRpbWVvdXRzIGluIGVhY2ggY2FzZSAqL1xuICAgICAgICB0aW1lb3V0cyA9ICh0aGlzID09PSBudWxsIHx8IHRoaXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHRoaXMudGltZW91dHMpIHx8IHRpbWVvdXRzIHx8IGRlZmF1bHRzXzEuZGVmYXVsdC5USU1FT1VUUztcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVJlcXVlc3QodXJpLCBoZWFkZXJzLCBwYXJhbXMsIGJvZHksIHJlcXVlc3RNb2RlLCB0aW1lb3V0cywgbWV0aG9kKTtcbiAgICB9O1xuICAgIHJldHVybiBKU09OUFRyYW5zcG9ydDtcbn0oY29tZXR0cmFuc3BvcnRfMS5kZWZhdWx0KSk7XG52YXIgUmVxdWVzdCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhSZXF1ZXN0LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFJlcXVlc3QoaWQsIHVyaSwgaGVhZGVycywgcGFyYW1zLCBib2R5LCByZXF1ZXN0TW9kZSwgdGltZW91dHMsIG1ldGhvZCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBpZiAoaWQgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIGlkID0gaWRDb3VudGVyKys7XG4gICAgICAgIF90aGlzLmlkID0gaWQ7XG4gICAgICAgIF90aGlzLnVyaSA9IHVyaTtcbiAgICAgICAgX3RoaXMucGFyYW1zID0gcGFyYW1zIHx8IHt9O1xuICAgICAgICBfdGhpcy5wYXJhbXMucm5kID0gVXRpbHMuY2hlYXBSYW5kU3RyKCk7XG4gICAgICAgIGlmIChoZWFkZXJzKSB7XG4gICAgICAgICAgICAvKiBKU09OUCBkb2Vzbid0IGFsbG93IGhlYWRlcnMuIENoZXJyeS1waWNrIGEgY291cGxlIHRvIHR1cm4gaW50byBxcyBwYXJhbXMgKi9cbiAgICAgICAgICAgIGlmIChoZWFkZXJzWydYLUFibHktVmVyc2lvbiddKVxuICAgICAgICAgICAgICAgIF90aGlzLnBhcmFtcy52ID0gaGVhZGVyc1snWC1BYmx5LVZlcnNpb24nXTtcbiAgICAgICAgICAgIGlmIChoZWFkZXJzWydYLUFibHktTGliJ10pXG4gICAgICAgICAgICAgICAgX3RoaXMucGFyYW1zLmxpYiA9IGhlYWRlcnNbJ1gtQWJseS1MaWInXTtcbiAgICAgICAgfVxuICAgICAgICBfdGhpcy5ib2R5ID0gYm9keTtcbiAgICAgICAgX3RoaXMubWV0aG9kID0gbWV0aG9kO1xuICAgICAgICBfdGhpcy5yZXF1ZXN0TW9kZSA9IHJlcXVlc3RNb2RlO1xuICAgICAgICBfdGhpcy50aW1lb3V0cyA9IHRpbWVvdXRzO1xuICAgICAgICBfdGhpcy5yZXF1ZXN0Q29tcGxldGUgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBSZXF1ZXN0LnByb3RvdHlwZS5leGVjID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgaWQgPSB0aGlzLmlkLCBib2R5ID0gdGhpcy5ib2R5LCBtZXRob2QgPSB0aGlzLm1ldGhvZCwgdXJpID0gdGhpcy51cmksIHBhcmFtcyA9IHRoaXMucGFyYW1zO1xuICAgICAgICBwYXJhbXMuY2FsbGJhY2sgPSAnX2FibHlqc19qc29ucC5fKCcgKyBpZCArICcpJztcbiAgICAgICAgcGFyYW1zLmVudmVsb3BlID0gJ2pzb25wJztcbiAgICAgICAgaWYgKGJvZHkpIHtcbiAgICAgICAgICAgIHBhcmFtcy5ib2R5ID0gYm9keTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWV0aG9kICYmIG1ldGhvZCAhPT0gJ2dldCcpIHtcbiAgICAgICAgICAgIHBhcmFtcy5tZXRob2QgPSBtZXRob2Q7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHNjcmlwdCA9ICh0aGlzLnNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpKTtcbiAgICAgICAgdmFyIHNyYyA9IHVyaSArIFV0aWxzLnRvUXVlcnlTdHJpbmcocGFyYW1zKTtcbiAgICAgICAgc2NyaXB0LnNyYyA9IHNyYztcbiAgICAgICAgaWYgKHNjcmlwdC5zcmMuc3BsaXQoJy8nKS5zbGljZSgtMSlbMF0gIT09IHNyYy5zcGxpdCgnLycpLnNsaWNlKC0xKVswXSkge1xuICAgICAgICAgICAgLyogVGhlIHNyYyBoYXMgYmVlbiB0cnVuY2F0ZWQuIENhbid0IGFib3J0LCBidXQgY2FuIGF0IGxlYXN0IGVtaXQgYW5cbiAgICAgICAgICAgICAqIGVycm9yIHNvIHRoZSB1c2VyIGtub3dzIHdoYXQncyBnb25lIHdyb25nLiAoQ2FuJ3QgY29tcGFyZSBzdHJpbmdzXG4gICAgICAgICAgICAgKiBkaXJlY3RseSBhcyBzcmMgbWF5IGhhdmUgYSBwb3J0LCBzY3JpcHQuc3JjIHdvbid0KSAqL1xuICAgICAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfRVJST1IsICdKU09OUCBSZXF1ZXN0LmV4ZWMoKScsICdXYXJuaW5nOiB0aGUgYnJvd3NlciBhcHBlYXJzIHRvIGhhdmUgdHJ1bmNhdGVkIHRoZSBzY3JpcHQgVVJJLiBUaGlzIHdpbGwgbGlrZWx5IHJlc3VsdCBpbiB0aGUgcmVxdWVzdCBmYWlsaW5nIGR1ZSB0byBhbiB1bnBhcnNlYWJsZSBib2R5IHBhcmFtJyk7XG4gICAgICAgIH1cbiAgICAgICAgc2NyaXB0LmFzeW5jID0gdHJ1ZTtcbiAgICAgICAgc2NyaXB0LnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0JztcbiAgICAgICAgc2NyaXB0LmNoYXJzZXQgPSAnVVRGLTgnO1xuICAgICAgICBzY3JpcHQub25lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgIF90aGlzLmNvbXBsZXRlKG5ldyBlcnJvcmluZm9fMS5QYXJ0aWFsRXJyb3JJbmZvKCdKU09OUCBzY3JpcHQgZXJyb3IgKGV2ZW50OiAnICsgcGxhdGZvcm1fMS5kZWZhdWx0LkNvbmZpZy5pbnNwZWN0KGVycikgKyAnKScsIG51bGwsIDQwMCkpO1xuICAgICAgICB9O1xuICAgICAgICBfWydfJyArIGlkXSA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICAgICAgICBpZiAobWVzc2FnZS5zdGF0dXNDb2RlKSB7XG4gICAgICAgICAgICAgICAgLyogSGFuZGxlIGFzIGVudmVsb3BlZCBqc29ucCwgYXMgYWxsIGpzb25wIHRyYW5zcG9ydCB1c2VzIHNob3VsZCBiZSAqL1xuICAgICAgICAgICAgICAgIHZhciByZXNwb25zZSA9IG1lc3NhZ2UucmVzcG9uc2U7XG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2Uuc3RhdHVzQ29kZSA9PSAyMDQpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuY29tcGxldGUobnVsbCwgbnVsbCwgbnVsbCwgbWVzc2FnZS5zdGF0dXNDb2RlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoIXJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmNvbXBsZXRlKG5ldyBlcnJvcmluZm9fMS5QYXJ0aWFsRXJyb3JJbmZvKCdJbnZhbGlkIHNlcnZlciByZXNwb25zZTogbm8gZW52ZWxvcGUgZGV0ZWN0ZWQnLCBudWxsLCA1MDApKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAobWVzc2FnZS5zdGF0dXNDb2RlIDwgNDAwIHx8IFV0aWxzLmlzQXJyYXkocmVzcG9uc2UpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8qIElmIHJlc3BvbnNlIGlzIGFuIGFycmF5LCBpdCdzIGFuIGFycmF5IG9mIHByb3RvY29sIG1lc3NhZ2VzIC0tIGV2ZW4gaWZcbiAgICAgICAgICAgICAgICAgICAgICogaXQgY29udGFpbnMgYW4gZXJyb3IgYWN0aW9uIChoZW5jZSB0aGUgbm9uc3VjY2VzcyBzdGF0dXNjb2RlKSwgd2UgY2FuXG4gICAgICAgICAgICAgICAgICAgICAqIGNvbnNpZGVyIHRoZSByZXF1ZXN0IHRvIGhhdmUgc3VjY2VlZGVkLCBqdXN0IHBhc3MgaXQgb24gdG9cbiAgICAgICAgICAgICAgICAgICAgICogb25Qcm90b2NvbE1lc3NhZ2UgdG8gZGVjaWRlIHdoYXQgdG8gZG8gKi9cbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuY29tcGxldGUobnVsbCwgcmVzcG9uc2UsIG1lc3NhZ2UuaGVhZGVycywgbWVzc2FnZS5zdGF0dXNDb2RlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlcnIgPSByZXNwb25zZS5lcnJvciB8fCBuZXcgZXJyb3JpbmZvXzEuUGFydGlhbEVycm9ySW5mbygnRXJyb3IgcmVzcG9uc2UgcmVjZWl2ZWQgZnJvbSBzZXJ2ZXInLCBudWxsLCBtZXNzYWdlLnN0YXR1c0NvZGUpO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5jb21wbGV0ZShlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8qIEhhbmRsZSBhcyBub24tZW52ZWxvcGVkIC0tIGFzIHdpbGwgYmUgZWcgZnJvbSBhIGN1c3RvbWVyJ3MgYXV0aFVybCBzZXJ2ZXIgKi9cbiAgICAgICAgICAgICAgICBfdGhpcy5jb21wbGV0ZShudWxsLCBtZXNzYWdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHRpbWVvdXQgPSB0aGlzLnJlcXVlc3RNb2RlID09IFhIUlN0YXRlc18xLmRlZmF1bHQuUkVRX1NFTkQgPyB0aGlzLnRpbWVvdXRzLmh0dHBSZXF1ZXN0VGltZW91dCA6IHRoaXMudGltZW91dHMucmVjdlRpbWVvdXQ7XG4gICAgICAgIHRoaXMudGltZXIgPSBzZXRUaW1lb3V0KHRoaXMuYWJvcnQuYmluZCh0aGlzKSwgdGltZW91dCk7XG4gICAgICAgIHZhciBoZWFkID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXTtcbiAgICAgICAgaGVhZC5pbnNlcnRCZWZvcmUoc2NyaXB0LCBoZWFkLmZpcnN0Q2hpbGQpO1xuICAgIH07XG4gICAgUmVxdWVzdC5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiAoZXJyLCBib2R5LCBoZWFkZXJzLCBzdGF0dXNDb2RlKSB7XG4gICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzIHx8IHt9O1xuICAgICAgICBpZiAoIXRoaXMucmVxdWVzdENvbXBsZXRlKSB7XG4gICAgICAgICAgICB0aGlzLnJlcXVlc3RDb21wbGV0ZSA9IHRydWU7XG4gICAgICAgICAgICB2YXIgY29udGVudFR5cGUgPSB2b2lkIDA7XG4gICAgICAgICAgICBpZiAoYm9keSkge1xuICAgICAgICAgICAgICAgIGNvbnRlbnRUeXBlID0gdHlwZW9mIGJvZHkgPT0gJ3N0cmluZycgPyAndGV4dC9wbGFpbicgOiAnYXBwbGljYXRpb24vanNvbic7XG4gICAgICAgICAgICAgICAgaGVhZGVyc1snY29udGVudC10eXBlJ10gPSBjb250ZW50VHlwZTtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ2RhdGEnLCBib2R5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZW1pdCgnY29tcGxldGUnLCBlcnIsIGJvZHksIGhlYWRlcnMsIC8qIHVucGFja2VkOiAqLyB0cnVlLCBzdGF0dXNDb2RlKTtcbiAgICAgICAgICAgIHRoaXMuZGlzcG9zZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBSZXF1ZXN0LnByb3RvdHlwZS5hYm9ydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5kaXNwb3NlKCk7XG4gICAgfTtcbiAgICBSZXF1ZXN0LnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdGltZXIgPSB0aGlzLnRpbWVyO1xuICAgICAgICBpZiAodGltZXIpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICAgICAgICB0aGlzLnRpbWVyID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc2NyaXB0ID0gdGhpcy5zY3JpcHQ7XG4gICAgICAgIGlmIChzY3JpcHQucGFyZW50Tm9kZSlcbiAgICAgICAgICAgIHNjcmlwdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHNjcmlwdCk7XG4gICAgICAgIGRlbGV0ZSBfW3RoaXMuaWRdO1xuICAgICAgICB0aGlzLmVtaXQoJ2Rpc3Bvc2VkJyk7XG4gICAgfTtcbiAgICByZXR1cm4gUmVxdWVzdDtcbn0oZXZlbnRlbWl0dGVyXzEuZGVmYXVsdCkpO1xuZXhwb3J0cy5SZXF1ZXN0ID0gUmVxdWVzdDtcbmZ1bmN0aW9uIGRlZmF1bHRfMShjb25uZWN0aW9uTWFuYWdlcikge1xuICAgIGdsb2JhbE9iamVjdC5KU09OUFRyYW5zcG9ydCA9IEpTT05QVHJhbnNwb3J0O1xuICAgIGlmIChKU09OUFRyYW5zcG9ydC5pc0F2YWlsYWJsZSgpKSB7XG4gICAgICAgIGNvbm5lY3Rpb25NYW5hZ2VyLnN1cHBvcnRlZFRyYW5zcG9ydHNbc2hvcnROYW1lXSA9IEpTT05QVHJhbnNwb3J0O1xuICAgIH1cbiAgICByZXR1cm4gSlNPTlBUcmFuc3BvcnQ7XG59XG5leHBvcnRzLmRlZmF1bHQgPSBkZWZhdWx0XzE7XG5cblxuLyoqKi8gfSksXG4vKiAzMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHRzbGliXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xudmFyIFV0aWxzID0gdHNsaWJfMS5fX2ltcG9ydFN0YXIoX193ZWJwYWNrX3JlcXVpcmVfXygxKSk7XG52YXIgbG9nZ2VyXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKTtcbnZhciBkZWZhdWx0c18xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXyg4KSk7XG52YXIgYXV0aF8xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygxNykpO1xudmFyIHB1c2hfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oNDYpKTtcbnZhciBwYWdpbmF0ZWRyZXNvdXJjZV8xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygxOSkpO1xudmFyIGNoYW5uZWxfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oMzMpKTtcbnZhciBlcnJvcmluZm9fMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oNCkpO1xudmFyIHN0YXRzXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKDQ5KSk7XG52YXIgSHR0cE1ldGhvZHNfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oMTgpKTtcbnZhciBwbGF0Zm9ybV8xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygzKSk7XG52YXIgbWVzc2FnZV8xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXyg5KSk7XG52YXIgcHJlc2VuY2VtZXNzYWdlXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKDE1KSk7XG52YXIgcmVzb3VyY2VfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oMTQpKTtcbnZhciBub29wID0gZnVuY3Rpb24gKCkgeyB9O1xudmFyIFJlc3QgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUmVzdChvcHRpb25zKSB7XG4gICAgICAgIGlmICghb3B0aW9ucykge1xuICAgICAgICAgICAgdmFyIG1zZyA9ICdubyBvcHRpb25zIHByb3ZpZGVkJztcbiAgICAgICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX0VSUk9SLCAnUmVzdCgpJywgbXNnKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBvcHRpb25zT2JqID0gZGVmYXVsdHNfMS5kZWZhdWx0Lm9iamVjdGlmeU9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgIGlmIChvcHRpb25zT2JqLmxvZykge1xuICAgICAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5zZXRMb2cob3B0aW9uc09iai5sb2cubGV2ZWwsIG9wdGlvbnNPYmoubG9nLmhhbmRsZXIpO1xuICAgICAgICB9XG4gICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01JQ1JPLCAnUmVzdCgpJywgJ2luaXRpYWxpemVkIHdpdGggY2xpZW50T3B0aW9ucyAnICsgcGxhdGZvcm1fMS5kZWZhdWx0LkNvbmZpZy5pbnNwZWN0KG9wdGlvbnMpKTtcbiAgICAgICAgdmFyIG5vcm1hbE9wdGlvbnMgPSAodGhpcy5vcHRpb25zID0gZGVmYXVsdHNfMS5kZWZhdWx0Lm5vcm1hbGlzZU9wdGlvbnMob3B0aW9uc09iaikpO1xuICAgICAgICAvKiBwcm9jZXNzIG9wdGlvbnMgKi9cbiAgICAgICAgaWYgKG5vcm1hbE9wdGlvbnMua2V5KSB7XG4gICAgICAgICAgICB2YXIga2V5TWF0Y2ggPSBub3JtYWxPcHRpb25zLmtleS5tYXRjaCgvXihbXjpcXHNdKyk6KFteOi5cXHNdKykkLyk7XG4gICAgICAgICAgICBpZiAoIWtleU1hdGNoKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1zZyA9ICdpbnZhbGlkIGtleSBwYXJhbWV0ZXInO1xuICAgICAgICAgICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX0VSUk9SLCAnUmVzdCgpJywgbXNnKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JpbmZvXzEuZGVmYXVsdChtc2csIDQwNDAwLCA0MDQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbm9ybWFsT3B0aW9ucy5rZXlOYW1lID0ga2V5TWF0Y2hbMV07XG4gICAgICAgICAgICBub3JtYWxPcHRpb25zLmtleVNlY3JldCA9IGtleU1hdGNoWzJdO1xuICAgICAgICB9XG4gICAgICAgIGlmICgnY2xpZW50SWQnIGluIG5vcm1hbE9wdGlvbnMpIHtcbiAgICAgICAgICAgIGlmICghKHR5cGVvZiBub3JtYWxPcHRpb25zLmNsaWVudElkID09PSAnc3RyaW5nJyB8fCBub3JtYWxPcHRpb25zLmNsaWVudElkID09PSBudWxsKSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JpbmZvXzEuZGVmYXVsdCgnY2xpZW50SWQgbXVzdCBiZSBlaXRoZXIgYSBzdHJpbmcgb3IgbnVsbCcsIDQwMDEyLCA0MDApO1xuICAgICAgICAgICAgZWxzZSBpZiAobm9ybWFsT3B0aW9ucy5jbGllbnRJZCA9PT0gJyonKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcmluZm9fMS5kZWZhdWx0KCdDYW7igJl0IHVzZSBcIipcIiBhcyBhIGNsaWVudElkIGFzIHRoYXQgc3RyaW5nIGlzIHJlc2VydmVkLiAoVG8gY2hhbmdlIHRoZSBkZWZhdWx0IHRva2VuIHJlcXVlc3QgYmVoYXZpb3VyIHRvIHVzZSBhIHdpbGRjYXJkIGNsaWVudElkLCB1c2Uge2RlZmF1bHRUb2tlblBhcmFtczoge2NsaWVudElkOiBcIipcIn19KScsIDQwMDEyLCA0MDApO1xuICAgICAgICB9XG4gICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01JTk9SLCAnUmVzdCgpJywgJ3N0YXJ0ZWQ7IHZlcnNpb24gPSAnICsgZGVmYXVsdHNfMS5kZWZhdWx0LnZlcnNpb24pO1xuICAgICAgICB0aGlzLmJhc2VVcmkgPSB0aGlzLmF1dGhvcml0eSA9IGZ1bmN0aW9uIChob3N0KSB7XG4gICAgICAgICAgICByZXR1cm4gZGVmYXVsdHNfMS5kZWZhdWx0LmdldEh0dHBTY2hlbWUobm9ybWFsT3B0aW9ucykgKyBob3N0ICsgJzonICsgZGVmYXVsdHNfMS5kZWZhdWx0LmdldFBvcnQobm9ybWFsT3B0aW9ucywgZmFsc2UpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9jdXJyZW50RmFsbGJhY2sgPSBudWxsO1xuICAgICAgICB0aGlzLnNlcnZlclRpbWVPZmZzZXQgPSBudWxsO1xuICAgICAgICB0aGlzLmh0dHAgPSBuZXcgcGxhdGZvcm1fMS5kZWZhdWx0Lkh0dHAobm9ybWFsT3B0aW9ucyk7XG4gICAgICAgIHRoaXMuYXV0aCA9IG5ldyBhdXRoXzEuZGVmYXVsdCh0aGlzLCBub3JtYWxPcHRpb25zKTtcbiAgICAgICAgdGhpcy5jaGFubmVscyA9IG5ldyBDaGFubmVscyh0aGlzKTtcbiAgICAgICAgdGhpcy5wdXNoID0gbmV3IHB1c2hfMS5kZWZhdWx0KHRoaXMpO1xuICAgIH1cbiAgICBSZXN0LnByb3RvdHlwZS5zdGF0cyA9IGZ1bmN0aW9uIChwYXJhbXMsIGNhbGxiYWNrKSB7XG4gICAgICAgIC8qIHBhcmFtcyBhbmQgY2FsbGJhY2sgYXJlIG9wdGlvbmFsOyBzZWUgaWYgcGFyYW1zIGNvbnRhaW5zIHRoZSBjYWxsYmFjayAqL1xuICAgICAgICBpZiAoY2FsbGJhY2sgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBwYXJhbXMgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrID0gcGFyYW1zO1xuICAgICAgICAgICAgICAgIHBhcmFtcyA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnByb21pc2VzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBVdGlscy5wcm9taXNpZnkodGhpcywgJ3N0YXRzJywgW3BhcmFtc10pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYWxsYmFjayA9IG5vb3A7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGhlYWRlcnMgPSBVdGlscy5kZWZhdWx0R2V0SGVhZGVycyh0aGlzLm9wdGlvbnMpLCBmb3JtYXQgPSB0aGlzLm9wdGlvbnMudXNlQmluYXJ5UHJvdG9jb2wgPyBVdGlscy5Gb3JtYXQubXNncGFjayA6IFV0aWxzLkZvcm1hdC5qc29uLCBlbnZlbG9wZSA9IHRoaXMuaHR0cC5zdXBwb3J0c0xpbmtIZWFkZXJzID8gdW5kZWZpbmVkIDogZm9ybWF0O1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmhlYWRlcnMpXG4gICAgICAgICAgICBVdGlscy5taXhpbihoZWFkZXJzLCB0aGlzLm9wdGlvbnMuaGVhZGVycyk7XG4gICAgICAgIG5ldyBwYWdpbmF0ZWRyZXNvdXJjZV8xLmRlZmF1bHQodGhpcywgJy9zdGF0cycsIGhlYWRlcnMsIGVudmVsb3BlLCBmdW5jdGlvbiAoYm9keSwgaGVhZGVycywgdW5wYWNrZWQpIHtcbiAgICAgICAgICAgIHZhciBzdGF0c1ZhbHVlcyA9IHVucGFja2VkID8gYm9keSA6IEpTT04ucGFyc2UoYm9keSk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0YXRzVmFsdWVzLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgICAgIHN0YXRzVmFsdWVzW2ldID0gc3RhdHNfMS5kZWZhdWx0LmZyb21WYWx1ZXMoc3RhdHNWYWx1ZXNbaV0pO1xuICAgICAgICAgICAgcmV0dXJuIHN0YXRzVmFsdWVzO1xuICAgICAgICB9KS5nZXQocGFyYW1zLCBjYWxsYmFjayk7XG4gICAgfTtcbiAgICBSZXN0LnByb3RvdHlwZS50aW1lID0gZnVuY3Rpb24gKHBhcmFtcywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgLyogcGFyYW1zIGFuZCBjYWxsYmFjayBhcmUgb3B0aW9uYWw7IHNlZSBpZiBwYXJhbXMgY29udGFpbnMgdGhlIGNhbGxiYWNrICovXG4gICAgICAgIGlmIChjYWxsYmFjayA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHBhcmFtcyA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sgPSBwYXJhbXM7XG4gICAgICAgICAgICAgICAgcGFyYW1zID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMucHJvbWlzZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFV0aWxzLnByb21pc2lmeSh0aGlzLCAndGltZScsIFtwYXJhbXNdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF9jYWxsYmFjayA9IGNhbGxiYWNrIHx8IG5vb3A7XG4gICAgICAgIHZhciBoZWFkZXJzID0gVXRpbHMuZGVmYXVsdEdldEhlYWRlcnModGhpcy5vcHRpb25zKTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5oZWFkZXJzKVxuICAgICAgICAgICAgVXRpbHMubWl4aW4oaGVhZGVycywgdGhpcy5vcHRpb25zLmhlYWRlcnMpO1xuICAgICAgICB2YXIgdGltZVVyaSA9IGZ1bmN0aW9uIChob3N0KSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuYXV0aG9yaXR5KGhvc3QpICsgJy90aW1lJztcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5odHRwLmRvKEh0dHBNZXRob2RzXzEuZGVmYXVsdC5HZXQsIHRoaXMsIHRpbWVVcmksIGhlYWRlcnMsIG51bGwsIHBhcmFtcywgZnVuY3Rpb24gKGVyciwgcmVzLCBoZWFkZXJzLCB1bnBhY2tlZCkge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIF9jYWxsYmFjayhlcnIpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdW5wYWNrZWQpXG4gICAgICAgICAgICAgICAgcmVzID0gSlNPTi5wYXJzZShyZXMpO1xuICAgICAgICAgICAgdmFyIHRpbWUgPSByZXNbMF07XG4gICAgICAgICAgICBpZiAoIXRpbWUpIHtcbiAgICAgICAgICAgICAgICBfY2FsbGJhY2sobmV3IGVycm9yaW5mb18xLmRlZmF1bHQoJ0ludGVybmFsIGVycm9yICh1bmV4cGVjdGVkIHJlc3VsdCB0eXBlIGZyb20gR0VUIC90aW1lKScsIDUwMDAwLCA1MDApKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKiBjYWxjdWxhdGUgdGltZSBvZmZzZXQgb25seSBvbmNlIGZvciB0aGlzIGRldmljZSBieSBhZGRpbmcgdG8gdGhlIHByb3RvdHlwZSAqL1xuICAgICAgICAgICAgX3RoaXMuc2VydmVyVGltZU9mZnNldCA9IHRpbWUgLSBVdGlscy5ub3coKTtcbiAgICAgICAgICAgIF9jYWxsYmFjayhudWxsLCB0aW1lKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBSZXN0LnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24gKG1ldGhvZCwgcGF0aCwgcGFyYW1zLCBib2R5LCBjdXN0b21IZWFkZXJzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgdXNlQmluYXJ5ID0gdGhpcy5vcHRpb25zLnVzZUJpbmFyeVByb3RvY29sLCBlbmNvZGVyID0gdXNlQmluYXJ5ID8gcGxhdGZvcm1fMS5kZWZhdWx0LkNvbmZpZy5tc2dwYWNrLmVuY29kZSA6IEpTT04uc3RyaW5naWZ5LCBkZWNvZGVyID0gdXNlQmluYXJ5ID8gcGxhdGZvcm1fMS5kZWZhdWx0LkNvbmZpZy5tc2dwYWNrLmRlY29kZSA6IEpTT04ucGFyc2UsIGZvcm1hdCA9IHVzZUJpbmFyeSA/IFV0aWxzLkZvcm1hdC5tc2dwYWNrIDogVXRpbHMuRm9ybWF0Lmpzb24sIGVudmVsb3BlID0gdGhpcy5odHRwLnN1cHBvcnRzTGlua0hlYWRlcnMgPyB1bmRlZmluZWQgOiBmb3JtYXQ7XG4gICAgICAgIHBhcmFtcyA9IHBhcmFtcyB8fCB7fTtcbiAgICAgICAgdmFyIF9tZXRob2QgPSBtZXRob2QudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgdmFyIGhlYWRlcnMgPSBfbWV0aG9kID09ICdnZXQnID8gVXRpbHMuZGVmYXVsdEdldEhlYWRlcnModGhpcy5vcHRpb25zLCBmb3JtYXQpIDogVXRpbHMuZGVmYXVsdFBvc3RIZWFkZXJzKHRoaXMub3B0aW9ucywgZm9ybWF0KTtcbiAgICAgICAgaWYgKGNhbGxiYWNrID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMucHJvbWlzZXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gVXRpbHMucHJvbWlzaWZ5KHRoaXMsICdyZXF1ZXN0JywgW21ldGhvZCwgcGF0aCwgcGFyYW1zLCBib2R5LCBjdXN0b21IZWFkZXJzXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYWxsYmFjayA9IG5vb3A7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBib2R5ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgYm9keSA9IGVuY29kZXIoYm9keSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5oZWFkZXJzKSB7XG4gICAgICAgICAgICBVdGlscy5taXhpbihoZWFkZXJzLCB0aGlzLm9wdGlvbnMuaGVhZGVycyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN1c3RvbUhlYWRlcnMpIHtcbiAgICAgICAgICAgIFV0aWxzLm1peGluKGhlYWRlcnMsIGN1c3RvbUhlYWRlcnMpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwYWdpbmF0ZWRSZXNvdXJjZSA9IG5ldyBwYWdpbmF0ZWRyZXNvdXJjZV8xLmRlZmF1bHQodGhpcywgcGF0aCwgaGVhZGVycywgZW52ZWxvcGUsIGZ1bmN0aW9uIChyZXNib2R5LCBoZWFkZXJzLCB1bnBhY2tlZCkge1xuICAgICAgICAgICAgcmV0dXJuIFV0aWxzLmVuc3VyZUFycmF5KHVucGFja2VkID8gcmVzYm9keSA6IGRlY29kZXIocmVzYm9keSkpO1xuICAgICAgICB9LCBcbiAgICAgICAgLyogdXNlSHR0cFBhZ2luYXRlZFJlc3BvbnNlOiAqLyB0cnVlKTtcbiAgICAgICAgaWYgKCFVdGlscy5hcnJJbihwbGF0Zm9ybV8xLmRlZmF1bHQuSHR0cC5tZXRob2RzLCBfbWV0aG9kKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yaW5mb18xLmRlZmF1bHQoJ1Vuc3VwcG9ydGVkIG1ldGhvZCAnICsgX21ldGhvZCwgNDA1MDAsIDQwNSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFV0aWxzLmFyckluKHBsYXRmb3JtXzEuZGVmYXVsdC5IdHRwLm1ldGhvZHNXaXRoQm9keSwgX21ldGhvZCkpIHtcbiAgICAgICAgICAgIHBhZ2luYXRlZFJlc291cmNlW19tZXRob2RdKHBhcmFtcywgYm9keSwgY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcGFnaW5hdGVkUmVzb3VyY2VbX21ldGhvZF0ocGFyYW1zLCBjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFJlc3QucHJvdG90eXBlLmJhdGNoUHVibGlzaCA9IGZ1bmN0aW9uIChzcGVjT3JTcGVjcywgY2FsbGJhY2tBcmcpIHtcbiAgICAgICAgaWYgKGNhbGxiYWNrQXJnID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMucHJvbWlzZXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gVXRpbHMucHJvbWlzaWZ5KHRoaXMsICdiYXRjaFB1Ymxpc2gnLCBbc3BlY09yU3BlY3NdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhbGxiYWNrQXJnID0gbm9vcDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2FsbGJhY2sgPSBjYWxsYmFja0FyZztcbiAgICAgICAgdmFyIHJlcXVlc3RCb2R5RFRPO1xuICAgICAgICB2YXIgc2luZ2xlU3BlY01vZGU7XG4gICAgICAgIGlmIChVdGlscy5pc0FycmF5KHNwZWNPclNwZWNzKSkge1xuICAgICAgICAgICAgcmVxdWVzdEJvZHlEVE8gPSBzcGVjT3JTcGVjcztcbiAgICAgICAgICAgIHNpbmdsZVNwZWNNb2RlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXF1ZXN0Qm9keURUTyA9IFtzcGVjT3JTcGVjc107XG4gICAgICAgICAgICBzaW5nbGVTcGVjTW9kZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGZvcm1hdCA9IHRoaXMub3B0aW9ucy51c2VCaW5hcnlQcm90b2NvbCA/IFV0aWxzLkZvcm1hdC5tc2dwYWNrIDogVXRpbHMuRm9ybWF0Lmpzb24sIGhlYWRlcnMgPSBVdGlscy5kZWZhdWx0UG9zdEhlYWRlcnModGhpcy5vcHRpb25zLCBmb3JtYXQpO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmhlYWRlcnMpXG4gICAgICAgICAgICBVdGlscy5taXhpbihoZWFkZXJzLCB0aGlzLm9wdGlvbnMuaGVhZGVycyk7XG4gICAgICAgIHZhciByZXF1ZXN0Qm9keSA9IFV0aWxzLmVuY29kZUJvZHkocmVxdWVzdEJvZHlEVE8sIGZvcm1hdCk7XG4gICAgICAgIHJlc291cmNlXzEuZGVmYXVsdC5wb3N0KHRoaXMsICcvbWVzc2FnZXMnLCByZXF1ZXN0Qm9keSwgaGVhZGVycywgeyBuZXdCYXRjaFJlc3BvbnNlOiAndHJ1ZScgfSwgbnVsbCwgZnVuY3Rpb24gKGVyciwgYm9keSwgaGVhZGVycywgdW5wYWNrZWQpIHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAvLyBUT0RPIHJlbW92ZSB0aGlzIHR5cGUgYXNzZXJ0aW9uIGFmdGVyIGZpeGluZyBodHRwczovL2dpdGh1Yi5jb20vYWJseS9hYmx5LWpzL2lzc3Vlcy8xNDA1XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgYmF0Y2hSZXN1bHRzID0gKHVucGFja2VkID8gYm9keSA6IFV0aWxzLmRlY29kZUJvZHkoYm9keSwgZm9ybWF0KSk7XG4gICAgICAgICAgICAvLyBJIGRvbid0IGxvdmUgdGhlIGJlbG93IHR5cGUgYXNzZXJ0aW9ucyBmb3IgYGNhbGxiYWNrYCBidXQgbm90IHN1cmUgaG93IHRvIGF2b2lkIHRoZW1cbiAgICAgICAgICAgIGlmIChzaW5nbGVTcGVjTW9kZSkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIGJhdGNoUmVzdWx0c1swXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCBiYXRjaFJlc3VsdHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFJlc3QucHJvdG90eXBlLmJhdGNoUHJlc2VuY2UgPSBmdW5jdGlvbiAoY2hhbm5lbHMsIGNhbGxiYWNrQXJnKSB7XG4gICAgICAgIGlmIChjYWxsYmFja0FyZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnByb21pc2VzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFV0aWxzLnByb21pc2lmeSh0aGlzLCAnYmF0Y2hQcmVzZW5jZScsIFtjaGFubmVsc10pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FsbGJhY2tBcmcgPSBub29wO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjYWxsYmFjayA9IGNhbGxiYWNrQXJnO1xuICAgICAgICB2YXIgZm9ybWF0ID0gdGhpcy5vcHRpb25zLnVzZUJpbmFyeVByb3RvY29sID8gVXRpbHMuRm9ybWF0Lm1zZ3BhY2sgOiBVdGlscy5Gb3JtYXQuanNvbiwgaGVhZGVycyA9IFV0aWxzLmRlZmF1bHRQb3N0SGVhZGVycyh0aGlzLm9wdGlvbnMsIGZvcm1hdCk7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuaGVhZGVycylcbiAgICAgICAgICAgIFV0aWxzLm1peGluKGhlYWRlcnMsIHRoaXMub3B0aW9ucy5oZWFkZXJzKTtcbiAgICAgICAgdmFyIGNoYW5uZWxzUGFyYW0gPSBjaGFubmVscy5qb2luKCcsJyk7XG4gICAgICAgIHJlc291cmNlXzEuZGVmYXVsdC5nZXQodGhpcywgJy9wcmVzZW5jZScsIGhlYWRlcnMsIHsgbmV3QmF0Y2hSZXNwb25zZTogJ3RydWUnLCBjaGFubmVsczogY2hhbm5lbHNQYXJhbSB9LCBudWxsLCBmdW5jdGlvbiAoZXJyLCBib2R5LCBoZWFkZXJzLCB1bnBhY2tlZCkge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIC8vIFRPRE8gcmVtb3ZlIHRoaXMgdHlwZSBhc3NlcnRpb24gYWZ0ZXIgZml4aW5nIGh0dHBzOi8vZ2l0aHViLmNvbS9hYmx5L2FibHktanMvaXNzdWVzLzE0MDVcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnIpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBiYXRjaFJlc3VsdCA9ICh1bnBhY2tlZCA/IGJvZHkgOiBVdGlscy5kZWNvZGVCb2R5KGJvZHksIGZvcm1hdCkpO1xuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgYmF0Y2hSZXN1bHQpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFJlc3QucHJvdG90eXBlLnNldExvZyA9IGZ1bmN0aW9uIChsb2dPcHRpb25zKSB7XG4gICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQuc2V0TG9nKGxvZ09wdGlvbnMubGV2ZWwsIGxvZ09wdGlvbnMuaGFuZGxlcik7XG4gICAgfTtcbiAgICBSZXN0LlByb21pc2UgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICBvcHRpb25zID0gZGVmYXVsdHNfMS5kZWZhdWx0Lm9iamVjdGlmeU9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgIG9wdGlvbnMucHJvbWlzZXMgPSB0cnVlO1xuICAgICAgICByZXR1cm4gbmV3IFJlc3Qob3B0aW9ucyk7XG4gICAgfTtcbiAgICBSZXN0LkNhbGxiYWNrcyA9IFJlc3Q7XG4gICAgUmVzdC5QbGF0Zm9ybSA9IHBsYXRmb3JtXzEuZGVmYXVsdDtcbiAgICBSZXN0Lk1lc3NhZ2UgPSBtZXNzYWdlXzEuZGVmYXVsdDtcbiAgICBSZXN0LlByZXNlbmNlTWVzc2FnZSA9IHByZXNlbmNlbWVzc2FnZV8xLmRlZmF1bHQ7XG4gICAgcmV0dXJuIFJlc3Q7XG59KCkpO1xudmFyIENoYW5uZWxzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENoYW5uZWxzKHJlc3QpIHtcbiAgICAgICAgdGhpcy5yZXN0ID0gcmVzdDtcbiAgICAgICAgdGhpcy5hbGwgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIH1cbiAgICBDaGFubmVscy5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKG5hbWUsIGNoYW5uZWxPcHRpb25zKSB7XG4gICAgICAgIG5hbWUgPSBTdHJpbmcobmFtZSk7XG4gICAgICAgIHZhciBjaGFubmVsID0gdGhpcy5hbGxbbmFtZV07XG4gICAgICAgIGlmICghY2hhbm5lbCkge1xuICAgICAgICAgICAgdGhpcy5hbGxbbmFtZV0gPSBjaGFubmVsID0gbmV3IGNoYW5uZWxfMS5kZWZhdWx0KHRoaXMucmVzdCwgbmFtZSwgY2hhbm5lbE9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNoYW5uZWxPcHRpb25zKSB7XG4gICAgICAgICAgICBjaGFubmVsLnNldE9wdGlvbnMoY2hhbm5lbE9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjaGFubmVsO1xuICAgIH07XG4gICAgLyogSW5jbHVkZWQgdG8gc3VwcG9ydCBjZXJ0YWluIG5pY2hlIHVzZS1jYXNlczsgbW9zdCB1c2VycyBzaG91bGQgaWdub3JlIHRoaXMuXG4gICAgICogUGxlYXNlIGRvIG5vdCB1c2UgdGhpcyB1bmxlc3MgeW91IGtub3cgd2hhdCB5b3UncmUgZG9pbmcgKi9cbiAgICBDaGFubmVscy5wcm90b3R5cGUucmVsZWFzZSA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLmFsbFtTdHJpbmcobmFtZSldO1xuICAgIH07XG4gICAgcmV0dXJuIENoYW5uZWxzO1xufSgpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IFJlc3Q7XG5cblxuLyoqKi8gfSksXG4vKiAzMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG47KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7XG5cdGlmICh0cnVlKSB7XG5cdFx0Ly8gQ29tbW9uSlNcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KF9fd2VicGFja19yZXF1aXJlX18oNikpO1xuXHR9XG5cdGVsc2Uge31cbn0odGhpcywgZnVuY3Rpb24gKENyeXB0b0pTKSB7XG5cblx0cmV0dXJuIENyeXB0b0pTLmVuYy5VdGY4O1xuXG59KSk7XG5cbi8qKiovIH0pLFxuLyogMzIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkge1xuXHRpZiAodHJ1ZSkge1xuXHRcdC8vIENvbW1vbkpTXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShfX3dlYnBhY2tfcmVxdWlyZV9fKDYpKTtcblx0fVxuXHRlbHNlIHt9XG59KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykge1xuXG5cdChmdW5jdGlvbiAoTWF0aCkge1xuXHQgICAgLy8gU2hvcnRjdXRzXG5cdCAgICB2YXIgQyA9IENyeXB0b0pTO1xuXHQgICAgdmFyIENfbGliID0gQy5saWI7XG5cdCAgICB2YXIgV29yZEFycmF5ID0gQ19saWIuV29yZEFycmF5O1xuXHQgICAgdmFyIEhhc2hlciA9IENfbGliLkhhc2hlcjtcblx0ICAgIHZhciBDX2FsZ28gPSBDLmFsZ287XG5cblx0ICAgIC8vIEluaXRpYWxpemF0aW9uIGFuZCByb3VuZCBjb25zdGFudHMgdGFibGVzXG5cdCAgICB2YXIgSCA9IFtdO1xuXHQgICAgdmFyIEsgPSBbXTtcblxuXHQgICAgLy8gQ29tcHV0ZSBjb25zdGFudHNcblx0ICAgIChmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgZnVuY3Rpb24gaXNQcmltZShuKSB7XG5cdCAgICAgICAgICAgIHZhciBzcXJ0TiA9IE1hdGguc3FydChuKTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgZmFjdG9yID0gMjsgZmFjdG9yIDw9IHNxcnROOyBmYWN0b3IrKykge1xuXHQgICAgICAgICAgICAgICAgaWYgKCEobiAlIGZhY3RvcikpIHtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBmdW5jdGlvbiBnZXRGcmFjdGlvbmFsQml0cyhuKSB7XG5cdCAgICAgICAgICAgIHJldHVybiAoKG4gLSAobiB8IDApKSAqIDB4MTAwMDAwMDAwKSB8IDA7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgdmFyIG4gPSAyO1xuXHQgICAgICAgIHZhciBuUHJpbWUgPSAwO1xuXHQgICAgICAgIHdoaWxlIChuUHJpbWUgPCA2NCkge1xuXHQgICAgICAgICAgICBpZiAoaXNQcmltZShuKSkge1xuXHQgICAgICAgICAgICAgICAgaWYgKG5QcmltZSA8IDgpIHtcblx0ICAgICAgICAgICAgICAgICAgICBIW25QcmltZV0gPSBnZXRGcmFjdGlvbmFsQml0cyhNYXRoLnBvdyhuLCAxIC8gMikpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgS1tuUHJpbWVdID0gZ2V0RnJhY3Rpb25hbEJpdHMoTWF0aC5wb3cobiwgMSAvIDMpKTtcblxuXHQgICAgICAgICAgICAgICAgblByaW1lKys7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICBuKys7XG5cdCAgICAgICAgfVxuXHQgICAgfSgpKTtcblxuXHQgICAgLy8gUmV1c2FibGUgb2JqZWN0XG5cdCAgICB2YXIgVyA9IFtdO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFNIQS0yNTYgaGFzaCBhbGdvcml0aG0uXG5cdCAgICAgKi9cblx0ICAgIHZhciBTSEEyNTYgPSBDX2FsZ28uU0hBMjU2ID0gSGFzaGVyLmV4dGVuZCh7XG5cdCAgICAgICAgX2RvUmVzZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgdGhpcy5faGFzaCA9IG5ldyBXb3JkQXJyYXkuaW5pdChILnNsaWNlKDApKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgX2RvUHJvY2Vzc0Jsb2NrOiBmdW5jdGlvbiAoTSwgb2Zmc2V0KSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0XG5cdCAgICAgICAgICAgIHZhciBIID0gdGhpcy5faGFzaC53b3JkcztcblxuXHQgICAgICAgICAgICAvLyBXb3JraW5nIHZhcmlhYmxlc1xuXHQgICAgICAgICAgICB2YXIgYSA9IEhbMF07XG5cdCAgICAgICAgICAgIHZhciBiID0gSFsxXTtcblx0ICAgICAgICAgICAgdmFyIGMgPSBIWzJdO1xuXHQgICAgICAgICAgICB2YXIgZCA9IEhbM107XG5cdCAgICAgICAgICAgIHZhciBlID0gSFs0XTtcblx0ICAgICAgICAgICAgdmFyIGYgPSBIWzVdO1xuXHQgICAgICAgICAgICB2YXIgZyA9IEhbNl07XG5cdCAgICAgICAgICAgIHZhciBoID0gSFs3XTtcblxuXHQgICAgICAgICAgICAvLyBDb21wdXRhdGlvblxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDY0OyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIGlmIChpIDwgMTYpIHtcblx0ICAgICAgICAgICAgICAgICAgICBXW2ldID0gTVtvZmZzZXQgKyBpXSB8IDA7XG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBnYW1tYTB4ID0gV1tpIC0gMTVdO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBnYW1tYTAgID0gKChnYW1tYTB4IDw8IDI1KSB8IChnYW1tYTB4ID4+PiA3KSkgIF5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgoZ2FtbWEweCA8PCAxNCkgfCAoZ2FtbWEweCA+Pj4gMTgpKSBeXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGdhbW1hMHggPj4+IDMpO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGdhbW1hMXggPSBXW2kgLSAyXTtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgZ2FtbWExICA9ICgoZ2FtbWExeCA8PCAxNSkgfCAoZ2FtbWExeCA+Pj4gMTcpKSBeXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKGdhbW1hMXggPDwgMTMpIHwgKGdhbW1hMXggPj4+IDE5KSkgXlxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChnYW1tYTF4ID4+PiAxMCk7XG5cblx0ICAgICAgICAgICAgICAgICAgICBXW2ldID0gZ2FtbWEwICsgV1tpIC0gN10gKyBnYW1tYTEgKyBXW2kgLSAxNl07XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIHZhciBjaCAgPSAoZSAmIGYpIF4gKH5lICYgZyk7XG5cdCAgICAgICAgICAgICAgICB2YXIgbWFqID0gKGEgJiBiKSBeIChhICYgYykgXiAoYiAmIGMpO1xuXG5cdCAgICAgICAgICAgICAgICB2YXIgc2lnbWEwID0gKChhIDw8IDMwKSB8IChhID4+PiAyKSkgXiAoKGEgPDwgMTkpIHwgKGEgPj4+IDEzKSkgXiAoKGEgPDwgMTApIHwgKGEgPj4+IDIyKSk7XG5cdCAgICAgICAgICAgICAgICB2YXIgc2lnbWExID0gKChlIDw8IDI2KSB8IChlID4+PiA2KSkgXiAoKGUgPDwgMjEpIHwgKGUgPj4+IDExKSkgXiAoKGUgPDwgNykgIHwgKGUgPj4+IDI1KSk7XG5cblx0ICAgICAgICAgICAgICAgIHZhciB0MSA9IGggKyBzaWdtYTEgKyBjaCArIEtbaV0gKyBXW2ldO1xuXHQgICAgICAgICAgICAgICAgdmFyIHQyID0gc2lnbWEwICsgbWFqO1xuXG5cdCAgICAgICAgICAgICAgICBoID0gZztcblx0ICAgICAgICAgICAgICAgIGcgPSBmO1xuXHQgICAgICAgICAgICAgICAgZiA9IGU7XG5cdCAgICAgICAgICAgICAgICBlID0gKGQgKyB0MSkgfCAwO1xuXHQgICAgICAgICAgICAgICAgZCA9IGM7XG5cdCAgICAgICAgICAgICAgICBjID0gYjtcblx0ICAgICAgICAgICAgICAgIGIgPSBhO1xuXHQgICAgICAgICAgICAgICAgYSA9ICh0MSArIHQyKSB8IDA7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBJbnRlcm1lZGlhdGUgaGFzaCB2YWx1ZVxuXHQgICAgICAgICAgICBIWzBdID0gKEhbMF0gKyBhKSB8IDA7XG5cdCAgICAgICAgICAgIEhbMV0gPSAoSFsxXSArIGIpIHwgMDtcblx0ICAgICAgICAgICAgSFsyXSA9IChIWzJdICsgYykgfCAwO1xuXHQgICAgICAgICAgICBIWzNdID0gKEhbM10gKyBkKSB8IDA7XG5cdCAgICAgICAgICAgIEhbNF0gPSAoSFs0XSArIGUpIHwgMDtcblx0ICAgICAgICAgICAgSFs1XSA9IChIWzVdICsgZikgfCAwO1xuXHQgICAgICAgICAgICBIWzZdID0gKEhbNl0gKyBnKSB8IDA7XG5cdCAgICAgICAgICAgIEhbN10gPSAoSFs3XSArIGgpIHwgMDtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgX2RvRmluYWxpemU6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBkYXRhID0gdGhpcy5fZGF0YTtcblx0ICAgICAgICAgICAgdmFyIGRhdGFXb3JkcyA9IGRhdGEud29yZHM7XG5cblx0ICAgICAgICAgICAgdmFyIG5CaXRzVG90YWwgPSB0aGlzLl9uRGF0YUJ5dGVzICogODtcblx0ICAgICAgICAgICAgdmFyIG5CaXRzTGVmdCA9IGRhdGEuc2lnQnl0ZXMgKiA4O1xuXG5cdCAgICAgICAgICAgIC8vIEFkZCBwYWRkaW5nXG5cdCAgICAgICAgICAgIGRhdGFXb3Jkc1tuQml0c0xlZnQgPj4+IDVdIHw9IDB4ODAgPDwgKDI0IC0gbkJpdHNMZWZ0ICUgMzIpO1xuXHQgICAgICAgICAgICBkYXRhV29yZHNbKCgobkJpdHNMZWZ0ICsgNjQpID4+PiA5KSA8PCA0KSArIDE0XSA9IE1hdGguZmxvb3IobkJpdHNUb3RhbCAvIDB4MTAwMDAwMDAwKTtcblx0ICAgICAgICAgICAgZGF0YVdvcmRzWygoKG5CaXRzTGVmdCArIDY0KSA+Pj4gOSkgPDwgNCkgKyAxNV0gPSBuQml0c1RvdGFsO1xuXHQgICAgICAgICAgICBkYXRhLnNpZ0J5dGVzID0gZGF0YVdvcmRzLmxlbmd0aCAqIDQ7XG5cblx0ICAgICAgICAgICAgLy8gSGFzaCBmaW5hbCBibG9ja3Ncblx0ICAgICAgICAgICAgdGhpcy5fcHJvY2VzcygpO1xuXG5cdCAgICAgICAgICAgIC8vIFJldHVybiBmaW5hbCBjb21wdXRlZCBoYXNoXG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9oYXNoO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBjbG9uZTogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB2YXIgY2xvbmUgPSBIYXNoZXIuY2xvbmUuY2FsbCh0aGlzKTtcblx0ICAgICAgICAgICAgY2xvbmUuX2hhc2ggPSB0aGlzLl9oYXNoLmNsb25lKCk7XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGNsb25lO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBoYXNoZXIncyBvYmplY3QgaW50ZXJmYWNlLlxuXHQgICAgICpcblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBoYXNoLlxuXHQgICAgICpcblx0ICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIGhhc2guXG5cdCAgICAgKlxuXHQgICAgICogQHN0YXRpY1xuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlXG5cdCAgICAgKlxuXHQgICAgICogICAgIHZhciBoYXNoID0gQ3J5cHRvSlMuU0hBMjU2KCdtZXNzYWdlJyk7XG5cdCAgICAgKiAgICAgdmFyIGhhc2ggPSBDcnlwdG9KUy5TSEEyNTYod29yZEFycmF5KTtcblx0ICAgICAqL1xuXHQgICAgQy5TSEEyNTYgPSBIYXNoZXIuX2NyZWF0ZUhlbHBlcihTSEEyNTYpO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBITUFDJ3Mgb2JqZWN0IGludGVyZmFjZS5cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC5cblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30ga2V5IFRoZSBzZWNyZXQga2V5LlxuXHQgICAgICpcblx0ICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIEhNQUMuXG5cdCAgICAgKlxuXHQgICAgICogQHN0YXRpY1xuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlXG5cdCAgICAgKlxuXHQgICAgICogICAgIHZhciBobWFjID0gQ3J5cHRvSlMuSG1hY1NIQTI1NihtZXNzYWdlLCBrZXkpO1xuXHQgICAgICovXG5cdCAgICBDLkhtYWNTSEEyNTYgPSBIYXNoZXIuX2NyZWF0ZUhtYWNIZWxwZXIoU0hBMjU2KTtcblx0fShNYXRoKSk7XG5cblxuXHRyZXR1cm4gQ3J5cHRvSlMuU0hBMjU2O1xuXG59KSk7XG5cbi8qKiovIH0pLFxuLyogMzMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciB0c2xpYl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciBVdGlscyA9IHRzbGliXzEuX19pbXBvcnRTdGFyKF9fd2VicGFja19yZXF1aXJlX18oMSkpO1xudmFyIGV2ZW50ZW1pdHRlcl8xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXyg3KSk7XG52YXIgbG9nZ2VyXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKTtcbnZhciBwcmVzZW5jZV8xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygzNCkpO1xudmFyIG1lc3NhZ2VfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oOSkpO1xudmFyIGVycm9yaW5mb18xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXyg0KSk7XG52YXIgcGFnaW5hdGVkcmVzb3VyY2VfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oMTkpKTtcbnZhciByZXNvdXJjZV8xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygxNCkpO1xudmFyIHBsYXRmb3JtXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKDMpKTtcbmZ1bmN0aW9uIG5vb3AoKSB7IH1cbnZhciBNU0dfSURfRU5UUk9QWV9CWVRFUyA9IDk7XG5mdW5jdGlvbiBhbGxFbXB0eUlkcyhtZXNzYWdlcykge1xuICAgIHJldHVybiBVdGlscy5hcnJFdmVyeShtZXNzYWdlcywgZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuICFtZXNzYWdlLmlkO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gbm9ybWFsaXNlQ2hhbm5lbE9wdGlvbnMob3B0aW9ucykge1xuICAgIHZhciBjaGFubmVsT3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgaWYgKGNoYW5uZWxPcHRpb25zLmNpcGhlcikge1xuICAgICAgICBpZiAoIXBsYXRmb3JtXzEuZGVmYXVsdC5DcnlwdG8pXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0VuY3J5cHRpb24gbm90IGVuYWJsZWQ7IHVzZSBhYmx5LmVuY3J5cHRpb24uanMgaW5zdGVhZCcpO1xuICAgICAgICB2YXIgY2lwaGVyID0gcGxhdGZvcm1fMS5kZWZhdWx0LkNyeXB0by5nZXRDaXBoZXIoY2hhbm5lbE9wdGlvbnMuY2lwaGVyKTtcbiAgICAgICAgY2hhbm5lbE9wdGlvbnMuY2lwaGVyID0gY2lwaGVyLmNpcGhlclBhcmFtcztcbiAgICAgICAgY2hhbm5lbE9wdGlvbnMuY2hhbm5lbENpcGhlciA9IGNpcGhlci5jaXBoZXI7XG4gICAgfVxuICAgIGVsc2UgaWYgKCdjaXBoZXInIGluIGNoYW5uZWxPcHRpb25zKSB7XG4gICAgICAgIC8qIERvbid0IGRlYWN0aXZhdGUgYW4gZXhpc3RpbmcgY2lwaGVyIHVubGVzcyBvcHRpb25zXG4gICAgICAgICAqIGhhcyBhICdjaXBoZXInIGtleSB0aGF0J3MgZmFsc2V5ICovXG4gICAgICAgIGNoYW5uZWxPcHRpb25zLmNpcGhlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgY2hhbm5lbE9wdGlvbnMuY2hhbm5lbENpcGhlciA9IG51bGw7XG4gICAgfVxuICAgIHJldHVybiBjaGFubmVsT3B0aW9ucztcbn1cbnZhciBDaGFubmVsID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKENoYW5uZWwsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQ2hhbm5lbChyZXN0LCBuYW1lLCBjaGFubmVsT3B0aW9ucykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19NSU5PUiwgJ0NoYW5uZWwoKScsICdzdGFydGVkOyBuYW1lID0gJyArIG5hbWUpO1xuICAgICAgICBfdGhpcy5yZXN0ID0gcmVzdDtcbiAgICAgICAgX3RoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIF90aGlzLmJhc2VQYXRoID0gJy9jaGFubmVscy8nICsgZW5jb2RlVVJJQ29tcG9uZW50KG5hbWUpO1xuICAgICAgICBfdGhpcy5wcmVzZW5jZSA9IG5ldyBwcmVzZW5jZV8xLmRlZmF1bHQoX3RoaXMpO1xuICAgICAgICBfdGhpcy5jaGFubmVsT3B0aW9ucyA9IG5vcm1hbGlzZUNoYW5uZWxPcHRpb25zKGNoYW5uZWxPcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBDaGFubmVsLnByb3RvdHlwZS5zZXRPcHRpb25zID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5jaGFubmVsT3B0aW9ucyA9IG5vcm1hbGlzZUNoYW5uZWxPcHRpb25zKG9wdGlvbnMpO1xuICAgIH07XG4gICAgQ2hhbm5lbC5wcm90b3R5cGUuaGlzdG9yeSA9IGZ1bmN0aW9uIChwYXJhbXMsIGNhbGxiYWNrKSB7XG4gICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01JQ1JPLCAnQ2hhbm5lbC5oaXN0b3J5KCknLCAnY2hhbm5lbCA9ICcgKyB0aGlzLm5hbWUpO1xuICAgICAgICAvKiBwYXJhbXMgYW5kIGNhbGxiYWNrIGFyZSBvcHRpb25hbDsgc2VlIGlmIHBhcmFtcyBjb250YWlucyB0aGUgY2FsbGJhY2sgKi9cbiAgICAgICAgaWYgKGNhbGxiYWNrID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcGFyYW1zID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayA9IHBhcmFtcztcbiAgICAgICAgICAgICAgICBwYXJhbXMgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucmVzdC5vcHRpb25zLnByb21pc2VzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBVdGlscy5wcm9taXNpZnkodGhpcywgJ2hpc3RvcnknLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYWxsYmFjayA9IG5vb3A7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5faGlzdG9yeShwYXJhbXMsIGNhbGxiYWNrKTtcbiAgICB9O1xuICAgIENoYW5uZWwucHJvdG90eXBlLl9oaXN0b3J5ID0gZnVuY3Rpb24gKHBhcmFtcywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIHJlc3QgPSB0aGlzLnJlc3QsIGZvcm1hdCA9IHJlc3Qub3B0aW9ucy51c2VCaW5hcnlQcm90b2NvbCA/IFV0aWxzLkZvcm1hdC5tc2dwYWNrIDogVXRpbHMuRm9ybWF0Lmpzb24sIGVudmVsb3BlID0gdGhpcy5yZXN0Lmh0dHAuc3VwcG9ydHNMaW5rSGVhZGVycyA/IHVuZGVmaW5lZCA6IGZvcm1hdCwgaGVhZGVycyA9IFV0aWxzLmRlZmF1bHRHZXRIZWFkZXJzKHJlc3Qub3B0aW9ucywgZm9ybWF0KTtcbiAgICAgICAgaWYgKHJlc3Qub3B0aW9ucy5oZWFkZXJzKVxuICAgICAgICAgICAgVXRpbHMubWl4aW4oaGVhZGVycywgcmVzdC5vcHRpb25zLmhlYWRlcnMpO1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHRoaXMuY2hhbm5lbE9wdGlvbnM7XG4gICAgICAgIG5ldyBwYWdpbmF0ZWRyZXNvdXJjZV8xLmRlZmF1bHQocmVzdCwgdGhpcy5iYXNlUGF0aCArICcvbWVzc2FnZXMnLCBoZWFkZXJzLCBlbnZlbG9wZSwgZnVuY3Rpb24gKGJvZHksIGhlYWRlcnMsIHVucGFja2VkKSB7XG4gICAgICAgICAgICByZXR1cm4gbWVzc2FnZV8xLmRlZmF1bHQuZnJvbVJlc3BvbnNlQm9keShib2R5LCBvcHRpb25zLCB1bnBhY2tlZCA/IHVuZGVmaW5lZCA6IGZvcm1hdCk7XG4gICAgICAgIH0pLmdldChwYXJhbXMsIGNhbGxiYWNrKTtcbiAgICB9O1xuICAgIENoYW5uZWwucHJvdG90eXBlLnB1Ymxpc2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBhcmdDb3VudCA9IGFyZ3VtZW50cy5sZW5ndGgsIGZpcnN0ID0gYXJndW1lbnRzWzBdLCBzZWNvbmQgPSBhcmd1bWVudHNbMV07XG4gICAgICAgIHZhciBjYWxsYmFjayA9IGFyZ3VtZW50c1thcmdDb3VudCAtIDFdO1xuICAgICAgICB2YXIgbWVzc2FnZXM7XG4gICAgICAgIHZhciBwYXJhbXM7XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnJlc3Qub3B0aW9ucy5wcm9taXNlcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBVdGlscy5wcm9taXNpZnkodGhpcywgJ3B1Ymxpc2gnLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FsbGJhY2sgPSBub29wO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgZmlyc3QgPT09ICdzdHJpbmcnIHx8IGZpcnN0ID09PSBudWxsKSB7XG4gICAgICAgICAgICAvKiAobmFtZSwgZGF0YSwgLi4uKSAqL1xuICAgICAgICAgICAgbWVzc2FnZXMgPSBbbWVzc2FnZV8xLmRlZmF1bHQuZnJvbVZhbHVlcyh7IG5hbWU6IGZpcnN0LCBkYXRhOiBzZWNvbmQgfSldO1xuICAgICAgICAgICAgcGFyYW1zID0gYXJndW1lbnRzWzJdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKFV0aWxzLmlzT2JqZWN0KGZpcnN0KSkge1xuICAgICAgICAgICAgbWVzc2FnZXMgPSBbbWVzc2FnZV8xLmRlZmF1bHQuZnJvbVZhbHVlcyhmaXJzdCldO1xuICAgICAgICAgICAgcGFyYW1zID0gYXJndW1lbnRzWzFdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKFV0aWxzLmlzQXJyYXkoZmlyc3QpKSB7XG4gICAgICAgICAgICBtZXNzYWdlcyA9IG1lc3NhZ2VfMS5kZWZhdWx0LmZyb21WYWx1ZXNBcnJheShmaXJzdCk7XG4gICAgICAgICAgICBwYXJhbXMgPSBhcmd1bWVudHNbMV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JpbmZvXzEuZGVmYXVsdCgnVGhlIHNpbmdsZS1hcmd1bWVudCBmb3JtIG9mIHB1Ymxpc2goKSBleHBlY3RzIGEgbWVzc2FnZSBvYmplY3Qgb3IgYW4gYXJyYXkgb2YgbWVzc2FnZSBvYmplY3RzJywgNDAwMTMsIDQwMCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBwYXJhbXMgIT09ICdvYmplY3QnIHx8ICFwYXJhbXMpIHtcbiAgICAgICAgICAgIC8qIE5vIHBhcmFtcyBzdXBwbGllZCAoc28gYWZ0ZXItbWVzc2FnZSBhcmd1bWVudCBpcyBqdXN0IHRoZSBjYWxsYmFjayBvciB1bmRlZmluZWQpICovXG4gICAgICAgICAgICBwYXJhbXMgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVzdCA9IHRoaXMucmVzdCwgb3B0aW9ucyA9IHJlc3Qub3B0aW9ucywgZm9ybWF0ID0gb3B0aW9ucy51c2VCaW5hcnlQcm90b2NvbCA/IFV0aWxzLkZvcm1hdC5tc2dwYWNrIDogVXRpbHMuRm9ybWF0Lmpzb24sIGlkZW1wb3RlbnRSZXN0UHVibGlzaGluZyA9IHJlc3Qub3B0aW9ucy5pZGVtcG90ZW50UmVzdFB1Ymxpc2hpbmcsIGhlYWRlcnMgPSBVdGlscy5kZWZhdWx0UG9zdEhlYWRlcnMocmVzdC5vcHRpb25zLCBmb3JtYXQpO1xuICAgICAgICBpZiAob3B0aW9ucy5oZWFkZXJzKVxuICAgICAgICAgICAgVXRpbHMubWl4aW4oaGVhZGVycywgb3B0aW9ucy5oZWFkZXJzKTtcbiAgICAgICAgaWYgKGlkZW1wb3RlbnRSZXN0UHVibGlzaGluZyAmJiBhbGxFbXB0eUlkcyhtZXNzYWdlcykpIHtcbiAgICAgICAgICAgIHZhciBtc2dJZEJhc2VfMSA9IFV0aWxzLnJhbmRvbVN0cmluZyhNU0dfSURfRU5UUk9QWV9CWVRFUyk7XG4gICAgICAgICAgICBVdGlscy5hcnJGb3JFYWNoKG1lc3NhZ2VzLCBmdW5jdGlvbiAobWVzc2FnZSwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlLmlkID0gbXNnSWRCYXNlXzEgKyAnOicgKyBpbmRleC50b1N0cmluZygpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgbWVzc2FnZV8xLmRlZmF1bHQuZW5jb2RlQXJyYXkobWVzc2FnZXMsIHRoaXMuY2hhbm5lbE9wdGlvbnMsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnIpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qIFJTTDFpICovXG4gICAgICAgICAgICB2YXIgc2l6ZSA9IG1lc3NhZ2VfMS5kZWZhdWx0LmdldE1lc3NhZ2VzU2l6ZShtZXNzYWdlcyksIG1heE1lc3NhZ2VTaXplID0gb3B0aW9ucy5tYXhNZXNzYWdlU2l6ZTtcbiAgICAgICAgICAgIGlmIChzaXplID4gbWF4TWVzc2FnZVNpemUpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhuZXcgZXJyb3JpbmZvXzEuZGVmYXVsdCgnTWF4aW11bSBzaXplIG9mIG1lc3NhZ2VzIHRoYXQgY2FuIGJlIHB1Ymxpc2hlZCBhdCBvbmNlIGV4Y2VlZGVkICggd2FzICcgK1xuICAgICAgICAgICAgICAgICAgICBzaXplICtcbiAgICAgICAgICAgICAgICAgICAgJyBieXRlczsgbGltaXQgaXMgJyArXG4gICAgICAgICAgICAgICAgICAgIG1heE1lc3NhZ2VTaXplICtcbiAgICAgICAgICAgICAgICAgICAgJyBieXRlcyknLCA0MDAwOSwgNDAwKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3RoaXMuX3B1Ymxpc2gobWVzc2FnZV8xLmRlZmF1bHQuc2VyaWFsaXplKG1lc3NhZ2VzLCBmb3JtYXQpLCBoZWFkZXJzLCBwYXJhbXMsIGNhbGxiYWNrKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBDaGFubmVsLnByb3RvdHlwZS5fcHVibGlzaCA9IGZ1bmN0aW9uIChyZXF1ZXN0Qm9keSwgaGVhZGVycywgcGFyYW1zLCBjYWxsYmFjaykge1xuICAgICAgICByZXNvdXJjZV8xLmRlZmF1bHQucG9zdCh0aGlzLnJlc3QsIHRoaXMuYmFzZVBhdGggKyAnL21lc3NhZ2VzJywgcmVxdWVzdEJvZHksIGhlYWRlcnMsIHBhcmFtcywgbnVsbCwgY2FsbGJhY2spO1xuICAgIH07XG4gICAgQ2hhbm5lbC5wcm90b3R5cGUuc3RhdHVzID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicgJiYgdGhpcy5yZXN0Lm9wdGlvbnMucHJvbWlzZXMpIHtcbiAgICAgICAgICAgIHJldHVybiBVdGlscy5wcm9taXNpZnkodGhpcywgJ3N0YXR1cycsIFtdKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZm9ybWF0ID0gdGhpcy5yZXN0Lm9wdGlvbnMudXNlQmluYXJ5UHJvdG9jb2wgPyBVdGlscy5Gb3JtYXQubXNncGFjayA6IFV0aWxzLkZvcm1hdC5qc29uO1xuICAgICAgICB2YXIgaGVhZGVycyA9IFV0aWxzLmRlZmF1bHRQb3N0SGVhZGVycyh0aGlzLnJlc3Qub3B0aW9ucywgZm9ybWF0KTtcbiAgICAgICAgcmVzb3VyY2VfMS5kZWZhdWx0LmdldCh0aGlzLnJlc3QsIHRoaXMuYmFzZVBhdGgsIGhlYWRlcnMsIHt9LCBmb3JtYXQsIGNhbGxiYWNrIHx8IG5vb3ApO1xuICAgIH07XG4gICAgcmV0dXJuIENoYW5uZWw7XG59KGV2ZW50ZW1pdHRlcl8xLmRlZmF1bHQpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IENoYW5uZWw7XG5cblxuLyoqKi8gfSksXG4vKiAzNCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHRzbGliXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xudmFyIFV0aWxzID0gdHNsaWJfMS5fX2ltcG9ydFN0YXIoX193ZWJwYWNrX3JlcXVpcmVfXygxKSk7XG52YXIgZXZlbnRlbWl0dGVyXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKDcpKTtcbnZhciBsb2dnZXJfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oMikpO1xudmFyIHBhZ2luYXRlZHJlc291cmNlXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKDE5KSk7XG52YXIgcHJlc2VuY2VtZXNzYWdlXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKDE1KSk7XG5mdW5jdGlvbiBub29wKCkgeyB9XG52YXIgUHJlc2VuY2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoUHJlc2VuY2UsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUHJlc2VuY2UoY2hhbm5lbCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5jaGFubmVsID0gY2hhbm5lbDtcbiAgICAgICAgX3RoaXMuYmFzZVBhdGggPSBjaGFubmVsLmJhc2VQYXRoICsgJy9wcmVzZW5jZSc7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgUHJlc2VuY2UucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChwYXJhbXMsIGNhbGxiYWNrKSB7XG4gICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01JQ1JPLCAnUHJlc2VuY2UuZ2V0KCknLCAnY2hhbm5lbCA9ICcgKyB0aGlzLmNoYW5uZWwubmFtZSk7XG4gICAgICAgIC8qIHBhcmFtcyBhbmQgY2FsbGJhY2sgYXJlIG9wdGlvbmFsOyBzZWUgaWYgcGFyYW1zIGNvbnRhaW5zIHRoZSBjYWxsYmFjayAqL1xuICAgICAgICBpZiAoY2FsbGJhY2sgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBwYXJhbXMgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrID0gcGFyYW1zO1xuICAgICAgICAgICAgICAgIHBhcmFtcyA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jaGFubmVsLnJlc3Qub3B0aW9ucy5wcm9taXNlcykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gVXRpbHMucHJvbWlzaWZ5KHRoaXMsICdnZXQnLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYWxsYmFjayA9IG5vb3A7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlc3QgPSB0aGlzLmNoYW5uZWwucmVzdCwgZm9ybWF0ID0gcmVzdC5vcHRpb25zLnVzZUJpbmFyeVByb3RvY29sID8gVXRpbHMuRm9ybWF0Lm1zZ3BhY2sgOiBVdGlscy5Gb3JtYXQuanNvbiwgZW52ZWxvcGUgPSB0aGlzLmNoYW5uZWwucmVzdC5odHRwLnN1cHBvcnRzTGlua0hlYWRlcnMgPyB1bmRlZmluZWQgOiBmb3JtYXQsIGhlYWRlcnMgPSBVdGlscy5kZWZhdWx0R2V0SGVhZGVycyhyZXN0Lm9wdGlvbnMsIGZvcm1hdCk7XG4gICAgICAgIGlmIChyZXN0Lm9wdGlvbnMuaGVhZGVycylcbiAgICAgICAgICAgIFV0aWxzLm1peGluKGhlYWRlcnMsIHJlc3Qub3B0aW9ucy5oZWFkZXJzKTtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLmNoYW5uZWwuY2hhbm5lbE9wdGlvbnM7XG4gICAgICAgIG5ldyBwYWdpbmF0ZWRyZXNvdXJjZV8xLmRlZmF1bHQocmVzdCwgdGhpcy5iYXNlUGF0aCwgaGVhZGVycywgZW52ZWxvcGUsIGZ1bmN0aW9uIChib2R5LCBoZWFkZXJzLCB1bnBhY2tlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHByZXNlbmNlbWVzc2FnZV8xLmRlZmF1bHQuZnJvbVJlc3BvbnNlQm9keShib2R5LCBvcHRpb25zLCB1bnBhY2tlZCA/IHVuZGVmaW5lZCA6IGZvcm1hdCk7XG4gICAgICAgIH0pLmdldChwYXJhbXMsIGNhbGxiYWNrKTtcbiAgICB9O1xuICAgIFByZXNlbmNlLnByb3RvdHlwZS5oaXN0b3J5ID0gZnVuY3Rpb24gKHBhcmFtcywgY2FsbGJhY2spIHtcbiAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlDUk8sICdQcmVzZW5jZS5oaXN0b3J5KCknLCAnY2hhbm5lbCA9ICcgKyB0aGlzLmNoYW5uZWwubmFtZSk7XG4gICAgICAgIHJldHVybiB0aGlzLl9oaXN0b3J5KHBhcmFtcywgY2FsbGJhY2spO1xuICAgIH07XG4gICAgUHJlc2VuY2UucHJvdG90eXBlLl9oaXN0b3J5ID0gZnVuY3Rpb24gKHBhcmFtcywgY2FsbGJhY2spIHtcbiAgICAgICAgLyogcGFyYW1zIGFuZCBjYWxsYmFjayBhcmUgb3B0aW9uYWw7IHNlZSBpZiBwYXJhbXMgY29udGFpbnMgdGhlIGNhbGxiYWNrICovXG4gICAgICAgIGlmIChjYWxsYmFjayA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHBhcmFtcyA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sgPSBwYXJhbXM7XG4gICAgICAgICAgICAgICAgcGFyYW1zID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNoYW5uZWwucmVzdC5vcHRpb25zLnByb21pc2VzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBVdGlscy5wcm9taXNpZnkodGhpcywgJ19oaXN0b3J5JywgW3BhcmFtc10pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYWxsYmFjayA9IG5vb3A7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlc3QgPSB0aGlzLmNoYW5uZWwucmVzdCwgZm9ybWF0ID0gcmVzdC5vcHRpb25zLnVzZUJpbmFyeVByb3RvY29sID8gVXRpbHMuRm9ybWF0Lm1zZ3BhY2sgOiBVdGlscy5Gb3JtYXQuanNvbiwgZW52ZWxvcGUgPSB0aGlzLmNoYW5uZWwucmVzdC5odHRwLnN1cHBvcnRzTGlua0hlYWRlcnMgPyB1bmRlZmluZWQgOiBmb3JtYXQsIGhlYWRlcnMgPSBVdGlscy5kZWZhdWx0R2V0SGVhZGVycyhyZXN0Lm9wdGlvbnMsIGZvcm1hdCk7XG4gICAgICAgIGlmIChyZXN0Lm9wdGlvbnMuaGVhZGVycylcbiAgICAgICAgICAgIFV0aWxzLm1peGluKGhlYWRlcnMsIHJlc3Qub3B0aW9ucy5oZWFkZXJzKTtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLmNoYW5uZWwuY2hhbm5lbE9wdGlvbnM7XG4gICAgICAgIG5ldyBwYWdpbmF0ZWRyZXNvdXJjZV8xLmRlZmF1bHQocmVzdCwgdGhpcy5iYXNlUGF0aCArICcvaGlzdG9yeScsIGhlYWRlcnMsIGVudmVsb3BlLCBmdW5jdGlvbiAoYm9keSwgaGVhZGVycywgdW5wYWNrZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBwcmVzZW5jZW1lc3NhZ2VfMS5kZWZhdWx0LmZyb21SZXNwb25zZUJvZHkoYm9keSwgb3B0aW9ucywgdW5wYWNrZWQgPyB1bmRlZmluZWQgOiBmb3JtYXQpO1xuICAgICAgICB9KS5nZXQocGFyYW1zLCBjYWxsYmFjayk7XG4gICAgfTtcbiAgICByZXR1cm4gUHJlc2VuY2U7XG59KGV2ZW50ZW1pdHRlcl8xLmRlZmF1bHQpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IFByZXNlbmNlO1xuXG5cbi8qKiovIH0pLFxuLyogMzUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24oZ2xvYmFsKSB7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlRyYW5zcG9ydFBhcmFtcyA9IHZvaWQgMDtcbnZhciB0c2xpYl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciBwcm90b2NvbG1lc3NhZ2VfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oMTApKTtcbnZhciBVdGlscyA9IHRzbGliXzEuX19pbXBvcnRTdGFyKF9fd2VicGFja19yZXF1aXJlX18oMSkpO1xudmFyIHByb3RvY29sXzEgPSB0c2xpYl8xLl9faW1wb3J0U3RhcihfX3dlYnBhY2tfcmVxdWlyZV9fKDUyKSk7XG52YXIgZGVmYXVsdHNfMSA9IHRzbGliXzEuX19pbXBvcnRTdGFyKF9fd2VicGFja19yZXF1aXJlX18oOCkpO1xudmFyIHBsYXRmb3JtXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKDMpKTtcbnZhciBldmVudGVtaXR0ZXJfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oNykpO1xudmFyIG1lc3NhZ2VxdWV1ZV8xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygzNikpO1xudmFyIGxvZ2dlcl8xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygyKSk7XG52YXIgY29ubmVjdGlvbnN0YXRlY2hhbmdlXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKDM3KSk7XG52YXIgY29ubmVjdGlvbmVycm9yc18xID0gdHNsaWJfMS5fX2ltcG9ydFN0YXIoX193ZWJwYWNrX3JlcXVpcmVfXygyMCkpO1xudmFyIGVycm9yaW5mb18xID0gdHNsaWJfMS5fX2ltcG9ydFN0YXIoX193ZWJwYWNrX3JlcXVpcmVfXyg0KSk7XG52YXIgYXV0aF8xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygxNykpO1xudmFyIG1lc3NhZ2VfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oOSkpO1xudmFyIG11bHRpY2FzdGVyXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKDIzKSk7XG52YXIgd2Vic29ja2V0dHJhbnNwb3J0XzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKDUzKSk7XG52YXIgdHJhbnNwb3J0XzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKDI2KSk7XG52YXIgSHR0cFN0YXR1c0NvZGVzXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKDI1KSk7XG52YXIgaGF2ZVdlYlN0b3JhZ2UgPSBmdW5jdGlvbiAoKSB7IHZhciBfYTsgcmV0dXJuIHR5cGVvZiBwbGF0Zm9ybV8xLmRlZmF1bHQuV2ViU3RvcmFnZSAhPT0gJ3VuZGVmaW5lZCcgJiYgKChfYSA9IHBsYXRmb3JtXzEuZGVmYXVsdC5XZWJTdG9yYWdlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubG9jYWxTdXBwb3J0ZWQpOyB9O1xudmFyIGhhdmVTZXNzaW9uU3RvcmFnZSA9IGZ1bmN0aW9uICgpIHsgdmFyIF9hOyByZXR1cm4gdHlwZW9mIHBsYXRmb3JtXzEuZGVmYXVsdC5XZWJTdG9yYWdlICE9PSAndW5kZWZpbmVkJyAmJiAoKF9hID0gcGxhdGZvcm1fMS5kZWZhdWx0LldlYlN0b3JhZ2UpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zZXNzaW9uU3VwcG9ydGVkKTsgfTtcbnZhciBhY3Rpb25zID0gcHJvdG9jb2xtZXNzYWdlXzEuZGVmYXVsdC5BY3Rpb247XG52YXIgbm9vcCA9IGZ1bmN0aW9uICgpIHsgfTtcbnZhciB0cmFuc3BvcnRQcmVmZXJlbmNlTmFtZSA9ICdhYmx5LXRyYW5zcG9ydC1wcmVmZXJlbmNlJztcbnZhciBzZXNzaW9uUmVjb3ZlcnlOYW1lID0gJ2FibHktY29ubmVjdGlvbi1yZWNvdmVyeSc7XG5mdW5jdGlvbiBnZXRTZXNzaW9uUmVjb3ZlckRhdGEoKSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICByZXR1cm4gaGF2ZVNlc3Npb25TdG9yYWdlKCkgJiYgKChfYiA9IChfYSA9IHBsYXRmb3JtXzEuZGVmYXVsdC5XZWJTdG9yYWdlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZ2V0U2Vzc2lvbikgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EsIHNlc3Npb25SZWNvdmVyeU5hbWUpKTtcbn1cbmZ1bmN0aW9uIHNldFNlc3Npb25SZWNvdmVyRGF0YSh2YWx1ZSkge1xuICAgIHZhciBfYSwgX2I7XG4gICAgcmV0dXJuIGhhdmVTZXNzaW9uU3RvcmFnZSgpICYmICgoX2IgPSAoX2EgPSBwbGF0Zm9ybV8xLmRlZmF1bHQuV2ViU3RvcmFnZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNldFNlc3Npb24pID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKF9hLCBzZXNzaW9uUmVjb3ZlcnlOYW1lLCB2YWx1ZSkpO1xufVxuZnVuY3Rpb24gY2xlYXJTZXNzaW9uUmVjb3ZlckRhdGEoKSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICByZXR1cm4gaGF2ZVNlc3Npb25TdG9yYWdlKCkgJiYgKChfYiA9IChfYSA9IHBsYXRmb3JtXzEuZGVmYXVsdC5XZWJTdG9yYWdlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucmVtb3ZlU2Vzc2lvbikgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EsIHNlc3Npb25SZWNvdmVyeU5hbWUpKTtcbn1cbmZ1bmN0aW9uIGJldHRlclRyYW5zcG9ydFRoYW4oYSwgYikge1xuICAgIHJldHVybiAoVXRpbHMuYXJySW5kZXhPZihwbGF0Zm9ybV8xLmRlZmF1bHQuRGVmYXVsdHMudHJhbnNwb3J0UHJlZmVyZW5jZU9yZGVyLCBhLnNob3J0TmFtZSkgPlxuICAgICAgICBVdGlscy5hcnJJbmRleE9mKHBsYXRmb3JtXzEuZGVmYXVsdC5EZWZhdWx0cy50cmFuc3BvcnRQcmVmZXJlbmNlT3JkZXIsIGIuc2hvcnROYW1lKSk7XG59XG5mdW5jdGlvbiBidW5kbGVXaXRoKGRlc3QsIHNyYywgbWF4U2l6ZSkge1xuICAgIHZhciBhY3Rpb247XG4gICAgaWYgKGRlc3QuY2hhbm5lbCAhPT0gc3JjLmNoYW5uZWwpIHtcbiAgICAgICAgLyogUlRMNmQzICovXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKChhY3Rpb24gPSBkZXN0LmFjdGlvbikgIT09IGFjdGlvbnMuUFJFU0VOQ0UgJiYgYWN0aW9uICE9PSBhY3Rpb25zLk1FU1NBR0UpIHtcbiAgICAgICAgLyogUlRMNmQgLSBjYW4gb25seSBidW5kbGUgbWVzc2FnZXMgb3IgcHJlc2VuY2UgKi9cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoYWN0aW9uICE9PSBzcmMuYWN0aW9uKSB7XG4gICAgICAgIC8qIFJUTDZkNCAqL1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHZhciBraW5kID0gYWN0aW9uID09PSBhY3Rpb25zLlBSRVNFTkNFID8gJ3ByZXNlbmNlJyA6ICdtZXNzYWdlcycsIHByb3Bvc2VkID0gZGVzdFtraW5kXS5jb25jYXQoc3JjW2tpbmRdKSwgc2l6ZSA9IG1lc3NhZ2VfMS5kZWZhdWx0LmdldE1lc3NhZ2VzU2l6ZShwcm9wb3NlZCk7XG4gICAgaWYgKHNpemUgPiBtYXhTaXplKSB7XG4gICAgICAgIC8qIFJUTDZkMSAqL1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICghVXRpbHMuYWxsU2FtZShwcm9wb3NlZCwgJ2NsaWVudElkJykpIHtcbiAgICAgICAgLyogUlRMNmQyICovXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKCFVdGlscy5hcnJFdmVyeShwcm9wb3NlZCwgZnVuY3Rpb24gKG1zZykge1xuICAgICAgICByZXR1cm4gIW1zZy5pZDtcbiAgICB9KSkge1xuICAgICAgICAvKiBSVEw2ZDcgKi9cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvKiB3ZSdyZSBnb29kIHRvIGdvISAqL1xuICAgIGRlc3Rba2luZF0gPSBwcm9wb3NlZDtcbiAgICByZXR1cm4gdHJ1ZTtcbn1cbmZ1bmN0aW9uIGRlY29kZVJlY292ZXJ5S2V5KHJlY292ZXJ5S2V5KSB7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UocmVjb3ZlcnlLZXkpO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG52YXIgVHJhbnNwb3J0UGFyYW1zID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRyYW5zcG9ydFBhcmFtcyhvcHRpb25zLCBob3N0LCBtb2RlLCBjb25uZWN0aW9uS2V5KSB7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMuaG9zdCA9IGhvc3Q7XG4gICAgICAgIHRoaXMubW9kZSA9IG1vZGU7XG4gICAgICAgIHRoaXMuY29ubmVjdGlvbktleSA9IGNvbm5lY3Rpb25LZXk7XG4gICAgICAgIHRoaXMuZm9ybWF0ID0gb3B0aW9ucy51c2VCaW5hcnlQcm90b2NvbCA/IFV0aWxzLkZvcm1hdC5tc2dwYWNrIDogVXRpbHMuRm9ybWF0Lmpzb247XG4gICAgfVxuICAgIFRyYW5zcG9ydFBhcmFtcy5wcm90b3R5cGUuZ2V0Q29ubmVjdFBhcmFtcyA9IGZ1bmN0aW9uIChhdXRoUGFyYW1zKSB7XG4gICAgICAgIHZhciBwYXJhbXMgPSBhdXRoUGFyYW1zID8gVXRpbHMuY29weShhdXRoUGFyYW1zKSA6IHt9O1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgc3dpdGNoICh0aGlzLm1vZGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ3VwZ3JhZGUnOlxuICAgICAgICAgICAgICAgIHBhcmFtcy51cGdyYWRlID0gdGhpcy5jb25uZWN0aW9uS2V5O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAncmVzdW1lJzpcbiAgICAgICAgICAgICAgICBwYXJhbXMucmVzdW1lID0gdGhpcy5jb25uZWN0aW9uS2V5O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAncmVjb3Zlcic6IHtcbiAgICAgICAgICAgICAgICB2YXIgcmVjb3ZlcnlDb250ZXh0ID0gZGVjb2RlUmVjb3ZlcnlLZXkob3B0aW9ucy5yZWNvdmVyKTtcbiAgICAgICAgICAgICAgICBpZiAocmVjb3ZlcnlDb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcmFtcy5yZWNvdmVyID0gcmVjb3ZlcnlDb250ZXh0LmNvbm5lY3Rpb25LZXk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5jbGllbnRJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBwYXJhbXMuY2xpZW50SWQgPSBvcHRpb25zLmNsaWVudElkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmVjaG9NZXNzYWdlcyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHBhcmFtcy5lY2hvID0gJ2ZhbHNlJztcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5mb3JtYXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcGFyYW1zLmZvcm1hdCA9IHRoaXMuZm9ybWF0O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnN0cmVhbSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBwYXJhbXMuc3RyZWFtID0gdGhpcy5zdHJlYW07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaGVhcnRiZWF0cyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBwYXJhbXMuaGVhcnRiZWF0cyA9IHRoaXMuaGVhcnRiZWF0cztcbiAgICAgICAgfVxuICAgICAgICBwYXJhbXMudiA9IGRlZmF1bHRzXzEuZGVmYXVsdC5wcm90b2NvbFZlcnNpb247XG4gICAgICAgIHBhcmFtcy5hZ2VudCA9IGVuY29kZVVSSUNvbXBvbmVudCgoMCwgZGVmYXVsdHNfMS5nZXRBZ2VudFN0cmluZykodGhpcy5vcHRpb25zKSk7XG4gICAgICAgIGlmIChvcHRpb25zLnRyYW5zcG9ydFBhcmFtcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBVdGlscy5taXhpbihwYXJhbXMsIG9wdGlvbnMudHJhbnNwb3J0UGFyYW1zKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFyYW1zO1xuICAgIH07XG4gICAgVHJhbnNwb3J0UGFyYW1zLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9ICdbbW9kZT0nICsgdGhpcy5tb2RlO1xuICAgICAgICBpZiAodGhpcy5ob3N0KSB7XG4gICAgICAgICAgICByZXN1bHQgKz0gJyxob3N0PScgKyB0aGlzLmhvc3Q7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuY29ubmVjdGlvbktleSkge1xuICAgICAgICAgICAgcmVzdWx0ICs9ICcsY29ubmVjdGlvbktleT0nICsgdGhpcy5jb25uZWN0aW9uS2V5O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmZvcm1hdCkge1xuICAgICAgICAgICAgcmVzdWx0ICs9ICcsZm9ybWF0PScgKyB0aGlzLmZvcm1hdDtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQgKz0gJ10nO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gICAgcmV0dXJuIFRyYW5zcG9ydFBhcmFtcztcbn0oKSk7XG5leHBvcnRzLlRyYW5zcG9ydFBhcmFtcyA9IFRyYW5zcG9ydFBhcmFtcztcbnZhciBDb25uZWN0aW9uTWFuYWdlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhDb25uZWN0aW9uTWFuYWdlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBDb25uZWN0aW9uTWFuYWdlcihyZWFsdGltZSwgb3B0aW9ucykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5kaXNjb25uZWN0ZWRSZXRyeUNvdW50ID0gMDtcbiAgICAgICAgQ29ubmVjdGlvbk1hbmFnZXIuaW5pdFRyYW5zcG9ydHMoKTtcbiAgICAgICAgX3RoaXMucmVhbHRpbWUgPSByZWFsdGltZTtcbiAgICAgICAgX3RoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHZhciB0aW1lb3V0cyA9IG9wdGlvbnMudGltZW91dHM7XG4gICAgICAgIC8qIGNvbm5lY3RpbmdUaW1lb3V0OiBsZWF2ZSBwcmVmZXJlbmNlQ29ubmVjdFRpbWVvdXQgKH42cykgdG8gdHJ5IHRoZVxuICAgICAgICAgKiBwcmVmZXJlbmNlIHRyYW5zcG9ydCwgdGhlbiByZWFsdGltZVJlcXVlc3RUaW1lb3V0ICh+MTBzKSB0byBlc3RhYmxpc2hcbiAgICAgICAgICogdGhlIGJhc2UgdHJhbnNwb3J0IGluIGNhc2UgdGhhdCBmYWlscyAqL1xuICAgICAgICB2YXIgY29ubmVjdGluZ1RpbWVvdXQgPSB0aW1lb3V0cy5wcmVmZXJlbmNlQ29ubmVjdFRpbWVvdXQgKyB0aW1lb3V0cy5yZWFsdGltZVJlcXVlc3RUaW1lb3V0O1xuICAgICAgICBfdGhpcy5zdGF0ZXMgPSB7XG4gICAgICAgICAgICBpbml0aWFsaXplZDoge1xuICAgICAgICAgICAgICAgIHN0YXRlOiAnaW5pdGlhbGl6ZWQnLFxuICAgICAgICAgICAgICAgIHRlcm1pbmFsOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBxdWV1ZUV2ZW50czogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzZW5kRXZlbnRzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBmYWlsU3RhdGU6ICdkaXNjb25uZWN0ZWQnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbm5lY3Rpbmc6IHtcbiAgICAgICAgICAgICAgICBzdGF0ZTogJ2Nvbm5lY3RpbmcnLFxuICAgICAgICAgICAgICAgIHRlcm1pbmFsOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBxdWV1ZUV2ZW50czogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzZW5kRXZlbnRzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICByZXRyeURlbGF5OiBjb25uZWN0aW5nVGltZW91dCxcbiAgICAgICAgICAgICAgICBmYWlsU3RhdGU6ICdkaXNjb25uZWN0ZWQnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbm5lY3RlZDoge1xuICAgICAgICAgICAgICAgIHN0YXRlOiAnY29ubmVjdGVkJyxcbiAgICAgICAgICAgICAgICB0ZXJtaW5hbDogZmFsc2UsXG4gICAgICAgICAgICAgICAgcXVldWVFdmVudHM6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNlbmRFdmVudHM6IHRydWUsXG4gICAgICAgICAgICAgICAgZmFpbFN0YXRlOiAnZGlzY29ubmVjdGVkJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzeW5jaHJvbml6aW5nOiB7XG4gICAgICAgICAgICAgICAgc3RhdGU6ICdjb25uZWN0ZWQnLFxuICAgICAgICAgICAgICAgIHRlcm1pbmFsOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBxdWV1ZUV2ZW50czogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzZW5kRXZlbnRzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBmb3JjZVF1ZXVlRXZlbnRzOiB0cnVlLFxuICAgICAgICAgICAgICAgIGZhaWxTdGF0ZTogJ2Rpc2Nvbm5lY3RlZCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGlzY29ubmVjdGVkOiB7XG4gICAgICAgICAgICAgICAgc3RhdGU6ICdkaXNjb25uZWN0ZWQnLFxuICAgICAgICAgICAgICAgIHRlcm1pbmFsOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBxdWV1ZUV2ZW50czogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzZW5kRXZlbnRzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICByZXRyeURlbGF5OiB0aW1lb3V0cy5kaXNjb25uZWN0ZWRSZXRyeVRpbWVvdXQsXG4gICAgICAgICAgICAgICAgZmFpbFN0YXRlOiAnZGlzY29ubmVjdGVkJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdXNwZW5kZWQ6IHtcbiAgICAgICAgICAgICAgICBzdGF0ZTogJ3N1c3BlbmRlZCcsXG4gICAgICAgICAgICAgICAgdGVybWluYWw6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHF1ZXVlRXZlbnRzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzZW5kRXZlbnRzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICByZXRyeURlbGF5OiB0aW1lb3V0cy5zdXNwZW5kZWRSZXRyeVRpbWVvdXQsXG4gICAgICAgICAgICAgICAgZmFpbFN0YXRlOiAnc3VzcGVuZGVkJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjbG9zaW5nOiB7XG4gICAgICAgICAgICAgICAgc3RhdGU6ICdjbG9zaW5nJyxcbiAgICAgICAgICAgICAgICB0ZXJtaW5hbDogZmFsc2UsXG4gICAgICAgICAgICAgICAgcXVldWVFdmVudHM6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNlbmRFdmVudHM6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHJldHJ5RGVsYXk6IHRpbWVvdXRzLnJlYWx0aW1lUmVxdWVzdFRpbWVvdXQsXG4gICAgICAgICAgICAgICAgZmFpbFN0YXRlOiAnY2xvc2VkJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjbG9zZWQ6IHsgc3RhdGU6ICdjbG9zZWQnLCB0ZXJtaW5hbDogdHJ1ZSwgcXVldWVFdmVudHM6IGZhbHNlLCBzZW5kRXZlbnRzOiBmYWxzZSwgZmFpbFN0YXRlOiAnY2xvc2VkJyB9LFxuICAgICAgICAgICAgZmFpbGVkOiB7IHN0YXRlOiAnZmFpbGVkJywgdGVybWluYWw6IHRydWUsIHF1ZXVlRXZlbnRzOiBmYWxzZSwgc2VuZEV2ZW50czogZmFsc2UsIGZhaWxTdGF0ZTogJ2ZhaWxlZCcgfSxcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuc3RhdGUgPSBfdGhpcy5zdGF0ZXMuaW5pdGlhbGl6ZWQ7XG4gICAgICAgIF90aGlzLmVycm9yUmVhc29uID0gbnVsbDtcbiAgICAgICAgX3RoaXMucXVldWVkTWVzc2FnZXMgPSBuZXcgbWVzc2FnZXF1ZXVlXzEuZGVmYXVsdCgpO1xuICAgICAgICBfdGhpcy5tc2dTZXJpYWwgPSAwO1xuICAgICAgICBfdGhpcy5jb25uZWN0aW9uRGV0YWlscyA9IHVuZGVmaW5lZDtcbiAgICAgICAgX3RoaXMuY29ubmVjdGlvbklkID0gdW5kZWZpbmVkO1xuICAgICAgICBfdGhpcy5jb25uZWN0aW9uS2V5ID0gdW5kZWZpbmVkO1xuICAgICAgICBfdGhpcy5jb25uZWN0aW9uU3RhdGVUdGwgPSB0aW1lb3V0cy5jb25uZWN0aW9uU3RhdGVUdGw7XG4gICAgICAgIF90aGlzLm1heElkbGVJbnRlcnZhbCA9IG51bGw7XG4gICAgICAgIF90aGlzLnRyYW5zcG9ydHMgPSBVdGlscy5pbnRlcnNlY3Qob3B0aW9ucy50cmFuc3BvcnRzIHx8IGRlZmF1bHRzXzEuZGVmYXVsdC5kZWZhdWx0VHJhbnNwb3J0cywgQ29ubmVjdGlvbk1hbmFnZXIuc3VwcG9ydGVkVHJhbnNwb3J0cyk7XG4gICAgICAgIC8qIGJhc2VUcmFuc3BvcnRzIHNlbGVjdHMgdGhlIGxlZnRtb3N0IHRyYW5zcG9ydCBpbiB0aGUgRGVmYXVsdHMuYmFzZVRyYW5zcG9ydE9yZGVyIGxpc3RcbiAgICAgICAgICogdGhhdCdzIGJvdGggcmVxdWVzdGVkIGFuZCBzdXBwb3J0ZWQuIE5vcm1hbGx5IHRoaXMgd2lsbCBiZSB4aHJfcG9sbGluZztcbiAgICAgICAgICogaWYgeGhyIGlzbid0IHN1cHBvcnRlZCBpdCB3aWxsIGJlIGpzb25wLiBJZiB0aGUgdXNlciBoYXMgZm9yY2VkIGFcbiAgICAgICAgICogdHJhbnNwb3J0LCBpdCdsbCBqdXN0IGJlIHRoYXQgb25lLiAqL1xuICAgICAgICBfdGhpcy5iYXNlVHJhbnNwb3J0ID0gVXRpbHMuaW50ZXJzZWN0KGRlZmF1bHRzXzEuZGVmYXVsdC5iYXNlVHJhbnNwb3J0T3JkZXIsIF90aGlzLnRyYW5zcG9ydHMpWzBdO1xuICAgICAgICBfdGhpcy51cGdyYWRlVHJhbnNwb3J0cyA9IFV0aWxzLmludGVyc2VjdChfdGhpcy50cmFuc3BvcnRzLCBkZWZhdWx0c18xLmRlZmF1bHQudXBncmFkZVRyYW5zcG9ydHMpO1xuICAgICAgICBfdGhpcy50cmFuc3BvcnRQcmVmZXJlbmNlID0gbnVsbDtcbiAgICAgICAgX3RoaXMuaHR0cEhvc3RzID0gZGVmYXVsdHNfMS5kZWZhdWx0LmdldEhvc3RzKG9wdGlvbnMpO1xuICAgICAgICBfdGhpcy5hY3RpdmVQcm90b2NvbCA9IG51bGw7XG4gICAgICAgIF90aGlzLnByb3Bvc2VkVHJhbnNwb3J0cyA9IFtdO1xuICAgICAgICBfdGhpcy5wZW5kaW5nVHJhbnNwb3J0cyA9IFtdO1xuICAgICAgICBfdGhpcy5ob3N0ID0gbnVsbDtcbiAgICAgICAgX3RoaXMubGFzdEF1dG9SZWNvbm5lY3RBdHRlbXB0ID0gbnVsbDtcbiAgICAgICAgX3RoaXMubGFzdEFjdGl2aXR5ID0gbnVsbDtcbiAgICAgICAgX3RoaXMuZm9yY2VGYWxsYmFja0hvc3QgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuY29ubmVjdENvdW50ZXIgPSAwO1xuICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19NSU5PUiwgJ1JlYWx0aW1lLkNvbm5lY3Rpb25NYW5hZ2VyKCknLCAnc3RhcnRlZCcpO1xuICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19NSUNSTywgJ1JlYWx0aW1lLkNvbm5lY3Rpb25NYW5hZ2VyKCknLCAncmVxdWVzdGVkIHRyYW5zcG9ydHMgPSBbJyArIChvcHRpb25zLnRyYW5zcG9ydHMgfHwgZGVmYXVsdHNfMS5kZWZhdWx0LmRlZmF1bHRUcmFuc3BvcnRzKSArICddJyk7XG4gICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01JQ1JPLCAnUmVhbHRpbWUuQ29ubmVjdGlvbk1hbmFnZXIoKScsICdhdmFpbGFibGUgdHJhbnNwb3J0cyA9IFsnICsgX3RoaXMudHJhbnNwb3J0cyArICddJyk7XG4gICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01JQ1JPLCAnUmVhbHRpbWUuQ29ubmVjdGlvbk1hbmFnZXIoKScsICdodHRwIGhvc3RzID0gWycgKyBfdGhpcy5odHRwSG9zdHMgKyAnXScpO1xuICAgICAgICBpZiAoIV90aGlzLnRyYW5zcG9ydHMubGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgbXNnID0gJ25vIHJlcXVlc3RlZCB0cmFuc3BvcnRzIGF2YWlsYWJsZSc7XG4gICAgICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19FUlJPUiwgJ3JlYWx0aW1lLkNvbm5lY3Rpb25NYW5hZ2VyKCknLCBtc2cpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGFkZEV2ZW50TGlzdGVuZXIgPSBwbGF0Zm9ybV8xLmRlZmF1bHQuQ29uZmlnLmFkZEV2ZW50TGlzdGVuZXI7XG4gICAgICAgIGlmIChhZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICAgICAgICAvKiBpbnRlcmNlcHQgY2xvc2UgZXZlbnQgaW4gYnJvd3NlciB0byBwZXJzaXN0IGNvbm5lY3Rpb24gaWQgaWYgcmVxdWVzdGVkICovXG4gICAgICAgICAgICBpZiAoaGF2ZVNlc3Npb25TdG9yYWdlKCkgJiYgdHlwZW9mIG9wdGlvbnMucmVjb3ZlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIC8qIFVzdWFsbHkgY2FuJ3QgdXNlIGJpbmQgYXMgbm90IHN1cHBvcnRlZCBpbiBJRTgsIGJ1dCBJRSBkb2Vzbid0IHN1cHBvcnQgc2Vzc2lvblN0b3JhZ2UsIHNvLi4uICovXG4gICAgICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcignYmVmb3JldW5sb2FkJywgX3RoaXMucGVyc2lzdENvbm5lY3Rpb24uYmluZChfdGhpcykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuY2xvc2VPblVubG9hZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXIoJ2JlZm9yZXVubG9hZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUFKT1IsICdSZWFsdGltZS5Db25uZWN0aW9uTWFuYWdlcigpJywgJ2JlZm9yZXVubG9hZCBldmVudCBoYXMgdHJpZ2dlcmVkIHRoZSBjb25uZWN0aW9uIHRvIGNsb3NlIGFzIGNsb3NlT25VbmxvYWQgaXMgdHJ1ZScpO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5yZXF1ZXN0U3RhdGUoeyBzdGF0ZTogJ2Nsb3NpbmcnIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyogTGlzdGVuIGZvciBvbmxpbmUgYW5kIG9mZmxpbmUgZXZlbnRzICovXG4gICAgICAgICAgICBhZGRFdmVudExpc3RlbmVyKCdvbmxpbmUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLnN0YXRlID09IF90aGlzLnN0YXRlcy5kaXNjb25uZWN0ZWQgfHwgX3RoaXMuc3RhdGUgPT0gX3RoaXMuc3RhdGVzLnN1c3BlbmRlZCkge1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19NSU5PUiwgJ0Nvbm5lY3Rpb25NYW5hZ2VyIGNhdWdodCBicm93c2VyIOKAmG9ubGluZeKAmSBldmVudCcsICdyZWF0dGVtcHRpbmcgY29ubmVjdGlvbicpO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5yZXF1ZXN0U3RhdGUoeyBzdGF0ZTogJ2Nvbm5lY3RpbmcnIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChfdGhpcy5zdGF0ZSA9PSBfdGhpcy5zdGF0ZXMuY29ubmVjdGluZykge1xuICAgICAgICAgICAgICAgICAgICAvLyBSVE4yMGM6IGlmICdvbmxpbmUnIGV2ZW50IHJlY2lldmVkIHdoaWxlIENPTk5FQ1RJTkcsIGFiYW5kb24gY29ubmVjdGlvbiBhdHRlbXB0IGFuZCByZXRyeVxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5wZW5kaW5nVHJhbnNwb3J0cy5mb3JFYWNoKGZ1bmN0aW9uICh0cmFuc3BvcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIERldGFjaCB0cmFuc3BvcnQgbGlzdGVuZXJzIHRvIGF2b2lkIGNvbm5lY3Rpb24gc3RhdGUgc2lkZSBlZmZlY3RzIGZyb20gY2FsbGluZyBkaXNwb3NlXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc3BvcnQub2ZmKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5kaXNjb25uZWN0QWxsVHJhbnNwb3J0cygpO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5zdGFydENvbm5lY3QoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXIoJ29mZmxpbmUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLnN0YXRlID09IF90aGlzLnN0YXRlcy5jb25uZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlOT1IsICdDb25uZWN0aW9uTWFuYWdlciBjYXVnaHQgYnJvd3NlciDigJhvZmZsaW5l4oCZIGV2ZW50JywgJ2Rpc2Nvbm5lY3RpbmcgYWN0aXZlIHRyYW5zcG9ydCcpO1xuICAgICAgICAgICAgICAgICAgICAvLyBOb3Qgc3VmZmljaWVudCB0byBqdXN0IGdvIHRvIHRoZSAnZGlzY29ubmVjdGVkJyBzdGF0ZSwgd2FudCB0b1xuICAgICAgICAgICAgICAgICAgICAvLyBmb3JjZSBhbGwgdHJhbnNwb3J0cyB0byByZWF0dGVtcHQgdGhlIGNvbm5lY3Rpb24uIFdpbGwgaW1tZWRpYXRlbHlcbiAgICAgICAgICAgICAgICAgICAgLy8gcmV0cnkuXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmRpc2Nvbm5lY3RBbGxUcmFuc3BvcnRzKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBDb25uZWN0aW9uTWFuYWdlci5pbml0VHJhbnNwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgKDAsIHdlYnNvY2tldHRyYW5zcG9ydF8xLmRlZmF1bHQpKENvbm5lY3Rpb25NYW5hZ2VyKTtcbiAgICAgICAgVXRpbHMuYXJyRm9yRWFjaChwbGF0Zm9ybV8xLmRlZmF1bHQuVHJhbnNwb3J0cywgZnVuY3Rpb24gKGluaXRGbikge1xuICAgICAgICAgICAgaW5pdEZuKENvbm5lY3Rpb25NYW5hZ2VyKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBDb25uZWN0aW9uTWFuYWdlci5wcm90b3R5cGUuY3JlYXRlVHJhbnNwb3J0UGFyYW1zID0gZnVuY3Rpb24gKGhvc3QsIG1vZGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBUcmFuc3BvcnRQYXJhbXModGhpcy5vcHRpb25zLCBob3N0LCBtb2RlLCB0aGlzLmNvbm5lY3Rpb25LZXkpO1xuICAgIH07XG4gICAgQ29ubmVjdGlvbk1hbmFnZXIucHJvdG90eXBlLmdldFRyYW5zcG9ydFBhcmFtcyA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgZGVjaWRlTW9kZSA9IGZ1bmN0aW9uIChtb2RlQ2IpIHtcbiAgICAgICAgICAgIGlmIChfdGhpcy5jb25uZWN0aW9uS2V5KSB7XG4gICAgICAgICAgICAgICAgbW9kZUNiKCdyZXN1bWUnKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIF90aGlzLm9wdGlvbnMucmVjb3ZlciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBtb2RlQ2IoJ3JlY292ZXInKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcmVjb3ZlckZuID0gX3RoaXMub3B0aW9ucy5yZWNvdmVyLCBsYXN0U2Vzc2lvbkRhdGEgPSBnZXRTZXNzaW9uUmVjb3ZlckRhdGEoKTtcbiAgICAgICAgICAgIGlmIChsYXN0U2Vzc2lvbkRhdGEgJiYgdHlwZW9mIHJlY292ZXJGbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01JTk9SLCAnQ29ubmVjdGlvbk1hbmFnZXIuZ2V0VHJhbnNwb3J0UGFyYW1zKCknLCAnQ2FsbGluZyBjbGllbnRPcHRpb25zLXByb3ZpZGVkIHJlY292ZXIgZnVuY3Rpb24gd2l0aCBsYXN0IHNlc3Npb24gZGF0YScpO1xuICAgICAgICAgICAgICAgIHJlY292ZXJGbihsYXN0U2Vzc2lvbkRhdGEsIGZ1bmN0aW9uIChzaG91bGRSZWNvdmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzaG91bGRSZWNvdmVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5vcHRpb25zLnJlY292ZXIgPSBsYXN0U2Vzc2lvbkRhdGEucmVjb3ZlcnlLZXk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlQ2IoJ3JlY292ZXInKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVDYignY2xlYW4nKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1vZGVDYignY2xlYW4nKTtcbiAgICAgICAgfTtcbiAgICAgICAgZGVjaWRlTW9kZShmdW5jdGlvbiAobW9kZSkge1xuICAgICAgICAgICAgdmFyIHRyYW5zcG9ydFBhcmFtcyA9IF90aGlzLmNyZWF0ZVRyYW5zcG9ydFBhcmFtcyhudWxsLCBtb2RlKTtcbiAgICAgICAgICAgIGlmIChtb2RlID09PSAncmVjb3ZlcicpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19NSU5PUiwgJ0Nvbm5lY3Rpb25NYW5hZ2VyLmdldFRyYW5zcG9ydFBhcmFtcygpJywgJ1RyYW5zcG9ydCByZWNvdmVyeSBtb2RlID0gcmVjb3ZlcjsgcmVjb3ZlcnlLZXkgPSAnICsgX3RoaXMub3B0aW9ucy5yZWNvdmVyKTtcbiAgICAgICAgICAgICAgICB2YXIgcmVjb3ZlcnlDb250ZXh0ID0gZGVjb2RlUmVjb3ZlcnlLZXkoX3RoaXMub3B0aW9ucy5yZWNvdmVyKTtcbiAgICAgICAgICAgICAgICBpZiAocmVjb3ZlcnlDb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLm1zZ1NlcmlhbCA9IHJlY292ZXJ5Q29udGV4dC5tc2dTZXJpYWw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlOT1IsICdDb25uZWN0aW9uTWFuYWdlci5nZXRUcmFuc3BvcnRQYXJhbXMoKScsICdUcmFuc3BvcnQgcGFyYW1zID0gJyArIHRyYW5zcG9ydFBhcmFtcy50b1N0cmluZygpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhbGxiYWNrKHRyYW5zcG9ydFBhcmFtcyk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQXR0ZW1wdCB0byBjb25uZWN0IHVzaW5nIGEgZ2l2ZW4gdHJhbnNwb3J0XG4gICAgICogQHBhcmFtIHRyYW5zcG9ydFBhcmFtc1xuICAgICAqIEBwYXJhbSBjYW5kaWRhdGUsIHRoZSB0cmFuc3BvcnQgdG8gdHJ5XG4gICAgICogQHBhcmFtIGNhbGxiYWNrXG4gICAgICovXG4gICAgQ29ubmVjdGlvbk1hbmFnZXIucHJvdG90eXBlLnRyeUFUcmFuc3BvcnQgPSBmdW5jdGlvbiAodHJhbnNwb3J0UGFyYW1zLCBjYW5kaWRhdGUsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01JQ1JPLCAnQ29ubmVjdGlvbk1hbmFnZXIudHJ5QVRyYW5zcG9ydCgpJywgJ3RyeWluZyAnICsgY2FuZGlkYXRlKTtcbiAgICAgICAgdHJhbnNwb3J0XzEuZGVmYXVsdC50cnlDb25uZWN0KENvbm5lY3Rpb25NYW5hZ2VyLnN1cHBvcnRlZFRyYW5zcG9ydHNbY2FuZGlkYXRlXSwgdGhpcywgdGhpcy5yZWFsdGltZS5hdXRoLCB0cmFuc3BvcnRQYXJhbXMsIGZ1bmN0aW9uICh3cmFwcGVkRXJyLCB0cmFuc3BvcnQpIHtcbiAgICAgICAgICAgIHZhciBzdGF0ZSA9IF90aGlzLnN0YXRlO1xuICAgICAgICAgICAgaWYgKHN0YXRlID09IF90aGlzLnN0YXRlcy5jbG9zaW5nIHx8IHN0YXRlID09IF90aGlzLnN0YXRlcy5jbG9zZWQgfHwgc3RhdGUgPT0gX3RoaXMuc3RhdGVzLmZhaWxlZCkge1xuICAgICAgICAgICAgICAgIGlmICh0cmFuc3BvcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlOT1IsICdDb25uZWN0aW9uTWFuYWdlci50cnlBVHJhbnNwb3J0KCknLCAnY29ubmVjdGlvbiAnICsgc3RhdGUuc3RhdGUgKyAnIHdoaWxlIHdlIHdlcmUgYXR0ZW1wdGluZyB0aGUgdHJhbnNwb3J0OyBjbG9zaW5nICcgKyB0cmFuc3BvcnQpO1xuICAgICAgICAgICAgICAgICAgICB0cmFuc3BvcnQuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHdyYXBwZWRFcnIpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19NSU5PUiwgJ0Nvbm5lY3Rpb25NYW5hZ2VyLnRyeUFUcmFuc3BvcnQoKScsICd0cmFuc3BvcnQgJyArIGNhbmRpZGF0ZSArICcgJyArIHdyYXBwZWRFcnIuZXZlbnQgKyAnLCBlcnI6ICcgKyB3cmFwcGVkRXJyLmVycm9yLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgICAgIC8qIENvbWV0IHRyYW5zcG9ydCBvbmNvbm5lY3QgdG9rZW4gZXJyb3JzIGNhbiBiZSBkZWFsdCB3aXRoIGhlcmUuXG4gICAgICAgICAgICAgICAgICogV2Vic29ja2V0IG9uZXMgb25seSBoYXBwZW4gYWZ0ZXIgdGhlIHRyYW5zcG9ydCBjbGFpbXMgdG8gYmUgdmlhYmxlLFxuICAgICAgICAgICAgICAgICAqIHNvIGFyZSBkZWFsdCB3aXRoIGFzIG5vbi1vbmNvbm5lY3QgdG9rZW4gZXJyb3JzICovXG4gICAgICAgICAgICAgICAgaWYgKGF1dGhfMS5kZWZhdWx0LmlzVG9rZW5FcnIod3JhcHBlZEVyci5lcnJvcikgJiZcbiAgICAgICAgICAgICAgICAgICAgIShfdGhpcy5lcnJvclJlYXNvbiAmJiBhdXRoXzEuZGVmYXVsdC5pc1Rva2VuRXJyKF90aGlzLmVycm9yUmVhc29uKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuZXJyb3JSZWFzb24gPSB3cmFwcGVkRXJyLmVycm9yO1xuICAgICAgICAgICAgICAgICAgICAvKiByZS1nZXQgYSB0b2tlbiBhbmQgdHJ5IGFnYWluICovXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnJlYWx0aW1lLmF1dGguX2ZvcmNlTmV3VG9rZW4obnVsbCwgbnVsbCwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmFjdE9uRXJyb3JGcm9tQXV0aG9yaXplKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMudHJ5QVRyYW5zcG9ydCh0cmFuc3BvcnRQYXJhbXMsIGNhbmRpZGF0ZSwgY2FsbGJhY2spO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAod3JhcHBlZEVyci5ldmVudCA9PT0gJ2ZhaWxlZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgLyogRXJyb3IgdGhhdCdzIGZhdGFsIHRvIHRoZSBjb25uZWN0aW9uICovXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLm5vdGlmeVN0YXRlKHsgc3RhdGU6ICdmYWlsZWQnLCBlcnJvcjogd3JhcHBlZEVyci5lcnJvciB9KTtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHdyYXBwZWRFcnIuZXZlbnQgPT09ICdkaXNjb25uZWN0ZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghKDAsIGNvbm5lY3Rpb25lcnJvcnNfMS5pc1JldHJpYWJsZSkod3JhcHBlZEVyci5lcnJvcikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIEVycm9yIHJlY2VpdmVkIGZyb20gdGhlIHNlcnZlciB0aGF0IGRvZXMgbm90IGNhbGwgZm9yIHRyeWluZyBhIGZhbGxiYWNrIGhvc3QsIGVnIGEgcmF0ZSBsaW1pdCAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMubm90aWZ5U3RhdGUoeyBzdGF0ZTogX3RoaXMuc3RhdGVzLmNvbm5lY3RpbmcuZmFpbFN0YXRlLCBlcnJvcjogd3JhcHBlZEVyci5lcnJvciB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLyogRXJyb3Igd2l0aCB0aGF0IHRyYW5zcG9ydCBvbmx5OyBjb250aW51ZSB0cnlpbmcgb3RoZXIgZmFsbGJhY2sgaG9zdHMgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19NSUNSTywgJ0Nvbm5lY3Rpb25NYW5hZ2VyLnRyeUFUcmFuc3BvcnQoKScsICd2aWFibGUgdHJhbnNwb3J0ICcgKyBjYW5kaWRhdGUgKyAnOyBzZXR0aW5nIHBlbmRpbmcnKTtcbiAgICAgICAgICAgIF90aGlzLnNldFRyYW5zcG9ydFBlbmRpbmcodHJhbnNwb3J0LCB0cmFuc3BvcnRQYXJhbXMpO1xuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgdHJhbnNwb3J0KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDYWxsZWQgd2hlbiBhIHRyYW5zcG9ydCBpcyBpbmRpY2F0ZWQgdG8gYmUgdmlhYmxlLCBhbmQgdGhlIENvbm5lY3Rpb25NYW5hZ2VyXG4gICAgICogZXhwZWN0cyB0byBhY3RpdmF0ZSB0aGlzIHRyYW5zcG9ydCBhcyBzb29uIGFzIGl0IGlzIGNvbm5lY3RlZC5cbiAgICAgKiBAcGFyYW0gdHJhbnNwb3J0XG4gICAgICogQHBhcmFtIHRyYW5zcG9ydFBhcmFtc1xuICAgICAqL1xuICAgIENvbm5lY3Rpb25NYW5hZ2VyLnByb3RvdHlwZS5zZXRUcmFuc3BvcnRQZW5kaW5nID0gZnVuY3Rpb24gKHRyYW5zcG9ydCwgdHJhbnNwb3J0UGFyYW1zKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBtb2RlID0gdHJhbnNwb3J0UGFyYW1zLm1vZGU7XG4gICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01JTk9SLCAnQ29ubmVjdGlvbk1hbmFnZXIuc2V0VHJhbnNwb3J0UGVuZGluZygpJywgJ3RyYW5zcG9ydCA9ICcgKyB0cmFuc3BvcnQgKyAnOyBtb2RlID0gJyArIG1vZGUpO1xuICAgICAgICBVdGlscy5hcnJEZWxldGVWYWx1ZSh0aGlzLnByb3Bvc2VkVHJhbnNwb3J0cywgdHJhbnNwb3J0KTtcbiAgICAgICAgdGhpcy5wZW5kaW5nVHJhbnNwb3J0cy5wdXNoKHRyYW5zcG9ydCk7XG4gICAgICAgIHZhciBvcHRpbWFsVHJhbnNwb3J0ID0gcGxhdGZvcm1fMS5kZWZhdWx0LkRlZmF1bHRzLnRyYW5zcG9ydFByZWZlcmVuY2VPcmRlcltwbGF0Zm9ybV8xLmRlZmF1bHQuRGVmYXVsdHMudHJhbnNwb3J0UHJlZmVyZW5jZU9yZGVyLmxlbmd0aCAtIDFdO1xuICAgICAgICB0cmFuc3BvcnQub25jZSgnY29ubmVjdGVkJywgZnVuY3Rpb24gKGVycm9yLCBjb25uZWN0aW9uSWQsIGNvbm5lY3Rpb25EZXRhaWxzKSB7XG4gICAgICAgICAgICBpZiAobW9kZSA9PSAndXBncmFkZScgJiYgX3RoaXMuYWN0aXZlUHJvdG9jb2wpIHtcbiAgICAgICAgICAgICAgICAvKiAgaWYgd3MgYW5kIHhocnMgYXJlIGNvbm5lY3RpbmcgaW4gcGFyYWxsZWwsIGRlbGF5IHhocnMgYWN0aXZhdGlvbiB0byBsZXQgd3MgZ28gYWhlYWQgKi9cbiAgICAgICAgICAgICAgICBpZiAodHJhbnNwb3J0LnNob3J0TmFtZSAhPT0gb3B0aW1hbFRyYW5zcG9ydCAmJlxuICAgICAgICAgICAgICAgICAgICBVdGlscy5hcnJJbihfdGhpcy5nZXRVcGdyYWRlUG9zc2liaWxpdGllcygpLCBvcHRpbWFsVHJhbnNwb3J0KSAmJlxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5hY3RpdmVQcm90b2NvbCkge1xuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnNjaGVkdWxlVHJhbnNwb3J0QWN0aXZhdGlvbihlcnJvciwgdHJhbnNwb3J0LCBjb25uZWN0aW9uSWQsIGNvbm5lY3Rpb25EZXRhaWxzKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgX3RoaXMub3B0aW9ucy50aW1lb3V0cy5wYXJhbGxlbFVwZ3JhZGVEZWxheSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5zY2hlZHVsZVRyYW5zcG9ydEFjdGl2YXRpb24oZXJyb3IsIHRyYW5zcG9ydCwgY29ubmVjdGlvbklkLCBjb25uZWN0aW9uRGV0YWlscyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuYWN0aXZhdGVUcmFuc3BvcnQoZXJyb3IsIHRyYW5zcG9ydCwgY29ubmVjdGlvbklkLCBjb25uZWN0aW9uRGV0YWlscyk7XG4gICAgICAgICAgICAgICAgLyogYWxsb3cgY29ubmVjdEltcGwgdG8gc3RhcnQgdGhlIHVwZ3JhZGUgcHJvY2VzcyBpZiBuZWVkZWQsIGJ1dCBhbGxvd1xuICAgICAgICAgICAgICAgICAqIG90aGVyIGV2ZW50IGhhbmRsZXJzLCBpbmNsdWRpbmcgYWN0aXZhdGluZyB0aGUgdHJhbnNwb3J0LCB0byBydW4gZmlyc3QgKi9cbiAgICAgICAgICAgICAgICBwbGF0Zm9ybV8xLmRlZmF1bHQuQ29uZmlnLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuY29ubmVjdEltcGwodHJhbnNwb3J0UGFyYW1zKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtb2RlID09PSAncmVjb3ZlcicgJiYgX3RoaXMub3B0aW9ucy5yZWNvdmVyKSB7XG4gICAgICAgICAgICAgICAgLyogQWZ0ZXIgYSBzdWNjZXNzZnVsIHJlY292ZXJ5LCB3ZSB1bnBlcnNpc3QsIGFzIGEgcmVjb3Zlcnkga2V5IGNhbm5vdFxuICAgICAgICAgICAgICAgICAqIGJlIHVzZWQgbW9yZSB0aGFuIG9uY2UgKi9cbiAgICAgICAgICAgICAgICBfdGhpcy5vcHRpb25zLnJlY292ZXIgPSBudWxsO1xuICAgICAgICAgICAgICAgIF90aGlzLnVucGVyc2lzdENvbm5lY3Rpb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgdHJhbnNwb3J0Lm9uKFsnZGlzY29ubmVjdGVkJywgJ2Nsb3NlZCcsICdmYWlsZWQnXSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICBzZWxmLmRlYWN0aXZhdGVUcmFuc3BvcnQodHJhbnNwb3J0LCB0aGlzLmV2ZW50LCBlcnJvcik7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmVtaXQoJ3RyYW5zcG9ydC5wZW5kaW5nJywgdHJhbnNwb3J0KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENhbGxlZCB3aGVuIGFuIHVwZ3JhZGUgdHJhbnNwb3J0IGlzIGNvbm5lY3RlZCxcbiAgICAgKiB0byBzY2hlZHVsZSB0aGUgYWN0aXZhdGlvbiBvZiB0aGF0IHRyYW5zcG9ydC5cbiAgICAgKiBAcGFyYW0gZXJyb3JcbiAgICAgKiBAcGFyYW0gdHJhbnNwb3J0XG4gICAgICogQHBhcmFtIGNvbm5lY3Rpb25JZFxuICAgICAqIEBwYXJhbSBjb25uZWN0aW9uRGV0YWlsc1xuICAgICAqL1xuICAgIENvbm5lY3Rpb25NYW5hZ2VyLnByb3RvdHlwZS5zY2hlZHVsZVRyYW5zcG9ydEFjdGl2YXRpb24gPSBmdW5jdGlvbiAoZXJyb3IsIHRyYW5zcG9ydCwgY29ubmVjdGlvbklkLCBjb25uZWN0aW9uRGV0YWlscykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgY3VycmVudFRyYW5zcG9ydCA9IHRoaXMuYWN0aXZlUHJvdG9jb2wgJiYgdGhpcy5hY3RpdmVQcm90b2NvbC5nZXRUcmFuc3BvcnQoKSwgYWJhbmRvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRyYW5zcG9ydC5kaXNjb25uZWN0KCk7XG4gICAgICAgICAgICBVdGlscy5hcnJEZWxldGVWYWx1ZShfdGhpcy5wZW5kaW5nVHJhbnNwb3J0cywgdHJhbnNwb3J0KTtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUgIT09IHRoaXMuc3RhdGVzLmNvbm5lY3RlZCAmJiB0aGlzLnN0YXRlICE9PSB0aGlzLnN0YXRlcy5jb25uZWN0aW5nKSB7XG4gICAgICAgICAgICAvKiBUaGlzIGlzIG1vc3QgbGlrZWx5IHRvIGhhcHBlbiBmb3IgdGhlIGRlbGF5ZWQgWEhScywgd2hlbiBYSFJzIGFuZCB3cyBhcmUgc2NoZWR1bGVkIGluIHBhcmFsbGVsKi9cbiAgICAgICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01JTk9SLCAnQ29ubmVjdGlvbk1hbmFnZXIuc2NoZWR1bGVUcmFuc3BvcnRBY3RpdmF0aW9uKCknLCAnQ3VycmVudCBjb25uZWN0aW9uIHN0YXRlICgnICtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLnN0YXRlICtcbiAgICAgICAgICAgICAgICAodGhpcy5zdGF0ZSA9PT0gdGhpcy5zdGF0ZXMuc3luY2hyb25pemluZyA/ICcsIGJ1dCB3aXRoIGFuIHVwZ3JhZGUgYWxyZWFkeSBpbiBwcm9ncmVzcycgOiAnJykgK1xuICAgICAgICAgICAgICAgICcpIGlzIG5vdCB2YWxpZCB0byB1cGdyYWRlIGluOyBhYmFuZG9uaW5nIHVwZ3JhZGUgdG8gJyArXG4gICAgICAgICAgICAgICAgdHJhbnNwb3J0LnNob3J0TmFtZSk7XG4gICAgICAgICAgICBhYmFuZG9uKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN1cnJlbnRUcmFuc3BvcnQgJiYgIWJldHRlclRyYW5zcG9ydFRoYW4odHJhbnNwb3J0LCBjdXJyZW50VHJhbnNwb3J0KSkge1xuICAgICAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlOT1IsICdDb25uZWN0aW9uTWFuYWdlci5zY2hlZHVsZVRyYW5zcG9ydEFjdGl2YXRpb24oKScsICdQcm9wb3NlZCB0cmFuc3BvcnQgJyArXG4gICAgICAgICAgICAgICAgdHJhbnNwb3J0LnNob3J0TmFtZSArXG4gICAgICAgICAgICAgICAgJyBpcyBubyBiZXR0ZXIgdGhhbiBjdXJyZW50IGFjdGl2ZSB0cmFuc3BvcnQgJyArXG4gICAgICAgICAgICAgICAgY3VycmVudFRyYW5zcG9ydC5zaG9ydE5hbWUgK1xuICAgICAgICAgICAgICAgICcgLSBhYmFuZG9uaW5nIHVwZ3JhZGUnKTtcbiAgICAgICAgICAgIGFiYW5kb24oKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19NSU5PUiwgJ0Nvbm5lY3Rpb25NYW5hZ2VyLnNjaGVkdWxlVHJhbnNwb3J0QWN0aXZhdGlvbigpJywgJ1NjaGVkdWxpbmcgdHJhbnNwb3J0IHVwZ3JhZGU7IHRyYW5zcG9ydCA9ICcgKyB0cmFuc3BvcnQpO1xuICAgICAgICB2YXIgb2xkUHJvdG9jb2wgPSBudWxsO1xuICAgICAgICBpZiAoIXRyYW5zcG9ydC5pc0Nvbm5lY3RlZCkge1xuICAgICAgICAgICAgLyogVGhpcyBpcyBvbmx5IHBvc3NpYmxlIGlmIHRoZSB4aHIgc3RyZWFtaW5nIHRyYW5zcG9ydCB3YXMgZGlzY29ubmVjdGVkIGR1cmluZyB0aGUgcGFyYWxsZWxVcGdyYWRlRGVsYXkgKi9cbiAgICAgICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01JTk9SLCAnQ29ubmVjdGlvbk1hbmFnZXIuc2NoZWR1bGVUcmFuc3BvcnRBY3RpdmF0aW9uKCknLCAnUHJvcG9zZWQgdHJhbnNwb3J0ICcgKyB0cmFuc3BvcnQuc2hvcnROYW1lICsgJ2lzIG5vIGxvbmdlciBjb25uZWN0ZWQ7IGFiYW5kb25pbmcgdXBncmFkZScpO1xuICAgICAgICAgICAgYWJhbmRvbigpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnN0YXRlID09PSB0aGlzLnN0YXRlcy5jb25uZWN0ZWQpIHtcbiAgICAgICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01JQ1JPLCAnQ29ubmVjdGlvbk1hbmFnZXIuc2NoZWR1bGVUcmFuc3BvcnRBY3RpdmF0aW9uKCknLCAnQ3VycmVudGx5IGNvbm5lY3RlZCwgc28gdGVtcG9yYXJpbHkgcGF1c2luZyBldmVudHMgdW50aWwgdGhlIHVwZ3JhZGUgaXMgY29tcGxldGUnKTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSB0aGlzLnN0YXRlcy5zeW5jaHJvbml6aW5nO1xuICAgICAgICAgICAgb2xkUHJvdG9jb2wgPSB0aGlzLmFjdGl2ZVByb3RvY29sO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuc3RhdGUgIT09IHRoaXMuc3RhdGVzLmNvbm5lY3RpbmcpIHtcbiAgICAgICAgICAgIC8qIE5vdGU6IHVwZ3JhZGluZyBmcm9tIHRoZSBjb25uZWN0aW5nIHN0YXRlIGlzIHZhbGlkIGlmIHRoZSBvbGQgYWN0aXZlXG4gICAgICAgICAgICAgKiB0cmFuc3BvcnQgd2FzIGRlYWN0aXZhdGVkIGFmdGVyIHRoZSB1cGdyYWRlIHRyYW5zcG9ydCBmaXJzdCBjb25uZWN0ZWQ7XG4gICAgICAgICAgICAgKiBzZWUgbG9naWMgaW4gZGVhY3RpdmF0ZVRyYW5zcG9ydCAqL1xuICAgICAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlOT1IsICdDb25uZWN0aW9uTWFuYWdlci5zY2hlZHVsZVRyYW5zcG9ydEFjdGl2YXRpb24oKScsICdDdXJyZW50IGNvbm5lY3Rpb24gc3RhdGUgKCcgK1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuc3RhdGUgK1xuICAgICAgICAgICAgICAgICh0aGlzLnN0YXRlID09PSB0aGlzLnN0YXRlcy5zeW5jaHJvbml6aW5nID8gJywgYnV0IHdpdGggYW4gdXBncmFkZSBhbHJlYWR5IGluIHByb2dyZXNzJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgJykgaXMgbm90IHZhbGlkIHRvIHVwZ3JhZGUgaW47IGFiYW5kb25pbmcgdXBncmFkZSB0byAnICtcbiAgICAgICAgICAgICAgICB0cmFuc3BvcnQuc2hvcnROYW1lKTtcbiAgICAgICAgICAgIGFiYW5kb24oKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19NSU5PUiwgJ0Nvbm5lY3Rpb25NYW5hZ2VyLnNjaGVkdWxlVHJhbnNwb3J0QWN0aXZhdGlvbigpJywgJ1N5bmNpbmcgdHJhbnNwb3J0OyB0cmFuc3BvcnQgPSAnICsgdHJhbnNwb3J0KTtcbiAgICAgICAgdmFyIGZpbmlzaFVwZ3JhZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19NSU5PUiwgJ0Nvbm5lY3Rpb25NYW5hZ2VyLnNjaGVkdWxlVHJhbnNwb3J0QWN0aXZhdGlvbigpJywgJ0FjdGl2YXRpbmcgdHJhbnNwb3J0OyB0cmFuc3BvcnQgPSAnICsgdHJhbnNwb3J0KTtcbiAgICAgICAgICAgIC8vIFNlbmQgQUNUSVZBVEUgdG8gdGVsbCB0aGUgc2VydmVyIHRvIG1ha2UgdGhpcyB0cmFuc3BvcnQgdGhlXG4gICAgICAgICAgICAvLyBhY3RpdmUgdHJhbnNwb3J0LCB3aGljaCBzdXNwZW5kcyBjaGFubmVscyB1bnRpbCB3ZSByZS1hdHRhY2guXG4gICAgICAgICAgICB0cmFuc3BvcnQuc2VuZChwcm90b2NvbG1lc3NhZ2VfMS5kZWZhdWx0LmZyb21WYWx1ZXMoe1xuICAgICAgICAgICAgICAgIGFjdGlvbjogYWN0aW9ucy5BQ1RJVkFURSxcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIF90aGlzLmFjdGl2YXRlVHJhbnNwb3J0KGVycm9yLCB0cmFuc3BvcnQsIGNvbm5lY3Rpb25JZCwgY29ubmVjdGlvbkRldGFpbHMpO1xuICAgICAgICAgICAgLyogUmVzdG9yZSBwcmUtc3luYyBzdGF0ZS4gSWYgc3RhdGUgaGFzIGNoYW5nZWQgaW4gdGhlIG1lYW50aW1lLFxuICAgICAgICAgICAgICogZG9uJ3QgdG91Y2ggaXQgLS0gc2luY2UgdGhlIHdlYnNvY2tldCB0cmFuc3BvcnQgd2FpdHMgYSB0aWNrIGJlZm9yZVxuICAgICAgICAgICAgICogZGlzcG9zaW5nIGl0c2VsZiwgaXQncyBwb3NzaWJsZSBmb3IgaXQgdG8gaGF2ZSBoYXBwaWx5IHN5bmNlZFxuICAgICAgICAgICAgICogd2l0aG91dCBlcnIgd2hpbGUsIHVua25vd24gdG8gaXQsIHRoZSBjb25uZWN0aW9uIGhhcyBjbG9zZWQgaW4gdGhlXG4gICAgICAgICAgICAgKiBtZWFudGltZSBhbmQgdGhlIHdzIHRyYW5zcG9ydCBpcyBzY2hlZHVsZWQgZm9yIGRlYXRoICovXG4gICAgICAgICAgICBpZiAoX3RoaXMuc3RhdGUgPT09IF90aGlzLnN0YXRlcy5zeW5jaHJvbml6aW5nKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlDUk8sICdDb25uZWN0aW9uTWFuYWdlci5zY2hlZHVsZVRyYW5zcG9ydEFjdGl2YXRpb24oKScsICdQcmUtdXBncmFkZSBwcm90b2NvbCBpZGxlLCBzZW5kaW5nIHF1ZXVlZCBtZXNzYWdlcyBvbiB1cGdyYWRlZCB0cmFuc3BvcnQ7IHRyYW5zcG9ydCA9ICcgKyB0cmFuc3BvcnQpO1xuICAgICAgICAgICAgICAgIF90aGlzLnN0YXRlID0gX3RoaXMuc3RhdGVzLmNvbm5lY3RlZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01JTk9SLCAnQ29ubmVjdGlvbk1hbmFnZXIuc2NoZWR1bGVUcmFuc3BvcnRBY3RpdmF0aW9uKCknLCAnUHJlLXVwZ3JhZGUgcHJvdG9jb2wgaWRsZSwgYnV0IHN0YXRlIGlzIG5vdyAnICsgX3RoaXMuc3RhdGUuc3RhdGUgKyAnLCBzbyBsZWF2aW5nIHVuY2hhbmdlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKF90aGlzLnN0YXRlLnNlbmRFdmVudHMpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5zZW5kUXVldWVkTWVzc2FnZXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLyogV2FpdCB1bnRpbCBzeW5jIGlzIGRvbmUgYW5kIG9sZCB0cmFuc3BvcnQgaXMgaWRsZSBiZWZvcmUgYWN0aXZhdGluZyBuZXcgdHJhbnNwb3J0LiBUaGlzXG4gICAgICAgICAqIGd1YXJhbnRlZXMgdGhhdCBtZXNzYWdlcyBhcnJpdmUgYXQgcmVhbHRpbWUgaW4gdGhlIHNhbWUgb3JkZXIgdGhleSBhcmUgc2VudC5cbiAgICAgICAgICpcbiAgICAgICAgICogSWYgYSBtZXNzYWdlIHRpbWVzIG91dCBvbiB0aGUgb2xkIHRyYW5zcG9ydCwgc2luY2UgaXQncyBzdGlsbCB0aGUgYWN0aXZlIHRyYW5zcG9ydCB0aGVcbiAgICAgICAgICogbWVzc2FnZSB3aWxsIGJlIHJlcXVldWVkLiBkZWFjdGl2YXRlVHJhbnNwb3J0IHdpbGwgc2VlIHRoZSBwZW5kaW5nIHRyYW5zcG9ydCBhbmQgbm90aWZ5XG4gICAgICAgICAqIHRoZSBgY29ubmVjdGluZ2Agc3RhdGUgd2l0aG91dCBzdGFydGluZyBhIG5ldyBjb25uZWN0aW9uLCBzbyB0aGUgbmV3IHRyYW5zcG9ydCBjYW4gdGFrZVxuICAgICAgICAgKiBvdmVyIG9uY2UgZGVhY3RpdmF0ZVRyYW5zcG9ydCBjbGVhcnMgdGhlIG9sZCBwcm90b2NvbCdzIHF1ZXVlLlxuICAgICAgICAgKlxuICAgICAgICAgKiBJZiB0aGVyZSBpcyBubyBvbGQgcHJvdG9jb2wsIHRoYXQgbWVhbnQgdGhhdCB3ZSB3ZXJlbid0IGluIHRoZSBjb25uZWN0ZWQgc3RhdGUgYXQgdGhlXG4gICAgICAgICAqIGJlZ2lubmluZyBvZiB0aGUgc3luYyAtIGxpa2VseSB0aGUgYmFzZSB0cmFuc3BvcnQgZGllZCBqdXN0IGJlZm9yZSB0aGUgc3luYy4gU28gY2FuIGp1c3RcbiAgICAgICAgICogZmluaXNoIHRoZSB1cGdyYWRlLiBJZiB3ZSdyZSBhY3R1YWxseSBpbiBjbG9zaW5nL2ZhaWxlZCByYXRoZXIgdGhhbiBjb25uZWN0aW5nLCB0aGF0J3NcbiAgICAgICAgICogZmluZSwgYWN0aXZhdGV0cmFuc3BvcnQgd2lsbCBkZWFsIHdpdGggdGhhdC4gKi9cbiAgICAgICAgaWYgKG9sZFByb3RvY29sKSB7XG4gICAgICAgICAgICAvKiBNb3N0IG9mIHRoZSB0aW1lIHRoaXMgd2lsbCBiZSBhbHJlYWR5IHRydWU6IHRoZSBuZXctdHJhbnNwb3J0IHN5bmMgd2lsbCBoYXZlIGdpdmVuXG4gICAgICAgICAgICAgKiBlbm91Z2ggdGltZSBmb3IgaW4tZmxpZ2h0IG1lc3NhZ2VzIG9uIHRoZSBvbGQgdHJhbnNwb3J0IHRvIGNvbXBsZXRlLiAqL1xuICAgICAgICAgICAgb2xkUHJvdG9jb2wub25jZUlkbGUoZmluaXNoVXBncmFkZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBmaW5pc2hVcGdyYWRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENhbGxlZCB3aGVuIGEgdHJhbnNwb3J0IGlzIGNvbm5lY3RlZCwgYW5kIHRoZSBjb25uZWN0aW9ubWFuYWdlciBkZWNpZGVzIHRoYXRcbiAgICAgKiBpdCB3aWxsIG5vdyBiZSB0aGUgYWN0aXZlIHRyYW5zcG9ydC4gUmV0dXJucyB3aGV0aGVyIG9yIG5vdCBpdCBhY3RpdmF0ZWRcbiAgICAgKiB0aGUgdHJhbnNwb3J0IChpZiB0aGUgY29ubmVjdGlvbiBpcyBjbG9zaW5nL2Nsb3NlZCBpdCB3aWxsIGNob29zZSBub3QgdG8pLlxuICAgICAqIEBwYXJhbSB0cmFuc3BvcnQgdGhlIHRyYW5zcG9ydCBpbnN0YW5jZVxuICAgICAqIEBwYXJhbSBjb25uZWN0aW9uSWQgdGhlIGlkIG9mIHRoZSBuZXcgYWN0aXZlIGNvbm5lY3Rpb25cbiAgICAgKiBAcGFyYW0gY29ubmVjdGlvbkRldGFpbHMgdGhlIGRldGFpbHMgb2YgdGhlIG5ldyBhY3RpdmUgY29ubmVjdGlvblxuICAgICAqL1xuICAgIENvbm5lY3Rpb25NYW5hZ2VyLnByb3RvdHlwZS5hY3RpdmF0ZVRyYW5zcG9ydCA9IGZ1bmN0aW9uIChlcnJvciwgdHJhbnNwb3J0LCBjb25uZWN0aW9uSWQsIGNvbm5lY3Rpb25EZXRhaWxzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01JTk9SLCAnQ29ubmVjdGlvbk1hbmFnZXIuYWN0aXZhdGVUcmFuc3BvcnQoKScsICd0cmFuc3BvcnQgPSAnICsgdHJhbnNwb3J0KTtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19FUlJPUiwgJ0Nvbm5lY3Rpb25NYW5hZ2VyLmFjdGl2YXRlVHJhbnNwb3J0KCknLCAnZXJyb3IgPSAnICsgZXJyb3IpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb25uZWN0aW9uSWQpIHtcbiAgICAgICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01JQ1JPLCAnQ29ubmVjdGlvbk1hbmFnZXIuYWN0aXZhdGVUcmFuc3BvcnQoKScsICdjb25uZWN0aW9uSWQgPSAgJyArIGNvbm5lY3Rpb25JZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbm5lY3Rpb25EZXRhaWxzKSB7XG4gICAgICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19NSUNSTywgJ0Nvbm5lY3Rpb25NYW5hZ2VyLmFjdGl2YXRlVHJhbnNwb3J0KCknLCAnY29ubmVjdGlvbkRldGFpbHMgPSAgJyArIEpTT04uc3RyaW5naWZ5KGNvbm5lY3Rpb25EZXRhaWxzKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wZXJzaXN0VHJhbnNwb3J0UHJlZmVyZW5jZSh0cmFuc3BvcnQpO1xuICAgICAgICAvKiBpZiB0aGUgY29ubmVjdGlvbm1hbmFnZXIgbW92ZWQgdG8gdGhlIGNsb3NpbmcvY2xvc2VkIHN0YXRlIGJlZm9yZSB0aGlzXG4gICAgICAgICAqIGNvbm5lY3Rpb24gZXZlbnQsIHRoZW4gd2Ugd29uJ3QgYWN0aXZhdGUgdGhpcyB0cmFuc3BvcnQgKi9cbiAgICAgICAgdmFyIGV4aXN0aW5nU3RhdGUgPSB0aGlzLnN0YXRlLCBjb25uZWN0ZWRTdGF0ZSA9IHRoaXMuc3RhdGVzLmNvbm5lY3RlZC5zdGF0ZTtcbiAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlOT1IsICdDb25uZWN0aW9uTWFuYWdlci5hY3RpdmF0ZVRyYW5zcG9ydCgpJywgJ2N1cnJlbnQgc3RhdGUgPSAnICsgZXhpc3RpbmdTdGF0ZS5zdGF0ZSk7XG4gICAgICAgIGlmIChleGlzdGluZ1N0YXRlLnN0YXRlID09IHRoaXMuc3RhdGVzLmNsb3Npbmcuc3RhdGUgfHxcbiAgICAgICAgICAgIGV4aXN0aW5nU3RhdGUuc3RhdGUgPT0gdGhpcy5zdGF0ZXMuY2xvc2VkLnN0YXRlIHx8XG4gICAgICAgICAgICBleGlzdGluZ1N0YXRlLnN0YXRlID09IHRoaXMuc3RhdGVzLmZhaWxlZC5zdGF0ZSkge1xuICAgICAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlOT1IsICdDb25uZWN0aW9uTWFuYWdlci5hY3RpdmF0ZVRyYW5zcG9ydCgpJywgJ0Rpc2Nvbm5lY3RpbmcgdHJhbnNwb3J0IGFuZCBhYmFuZG9uaW5nJyk7XG4gICAgICAgICAgICB0cmFuc3BvcnQuZGlzY29ubmVjdCgpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIC8qIHJlbW92ZSB0aGlzIHRyYW5zcG9ydCBmcm9tIHBlbmRpbmcgdHJhbnNwb3J0cyAqL1xuICAgICAgICBVdGlscy5hcnJEZWxldGVWYWx1ZSh0aGlzLnBlbmRpbmdUcmFuc3BvcnRzLCB0cmFuc3BvcnQpO1xuICAgICAgICAvKiBpZiB0aGUgdHJhbnNwb3J0IGlzIG5vdCBjb25uZWN0ZWQgdGhlbiBkb24ndCBhY3RpdmF0ZSBpdCAqL1xuICAgICAgICBpZiAoIXRyYW5zcG9ydC5pc0Nvbm5lY3RlZCkge1xuICAgICAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlOT1IsICdDb25uZWN0aW9uTWFuYWdlci5hY3RpdmF0ZVRyYW5zcG9ydCgpJywgJ0RlY2xpbmluZyB0byBhY3RpdmF0ZSB0cmFuc3BvcnQgJyArIHRyYW5zcG9ydCArICcgc2luY2UgaXQgYXBwZWFycyB0byBubyBsb25nZXIgYmUgY29ubmVjdGVkJyk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgLyogdGhlIGdpdmVuIHRyYW5zcG9ydCBpcyBjb25uZWN0ZWQ7IHRoaXMgd2lsbCBpbW1lZGlhdGVseVxuICAgICAgICAgKiB0YWtlIG92ZXIgYXMgdGhlIGFjdGl2ZSB0cmFuc3BvcnQgKi9cbiAgICAgICAgdmFyIGV4aXN0aW5nQWN0aXZlUHJvdG9jb2wgPSB0aGlzLmFjdGl2ZVByb3RvY29sO1xuICAgICAgICB0aGlzLmFjdGl2ZVByb3RvY29sID0gbmV3IHByb3RvY29sXzEuZGVmYXVsdCh0cmFuc3BvcnQpO1xuICAgICAgICB0aGlzLmhvc3QgPSB0cmFuc3BvcnQucGFyYW1zLmhvc3Q7XG4gICAgICAgIHZhciBjb25uZWN0aW9uS2V5ID0gY29ubmVjdGlvbkRldGFpbHMuY29ubmVjdGlvbktleTtcbiAgICAgICAgaWYgKGNvbm5lY3Rpb25LZXkgJiYgdGhpcy5jb25uZWN0aW9uS2V5ICE9IGNvbm5lY3Rpb25LZXkpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0Q29ubmVjdGlvbihjb25uZWN0aW9uSWQsIGNvbm5lY3Rpb25EZXRhaWxzLCAhIWVycm9yKTtcbiAgICAgICAgfVxuICAgICAgICAvKiBSZWJyb2FkY2FzdCBhbnkgbmV3IGNvbm5lY3Rpb25EZXRhaWxzIGZyb20gdGhlIGFjdGl2ZSB0cmFuc3BvcnQsIHdoaWNoXG4gICAgICAgICAqIGNhbiBjb21lIGF0IGFueSB0aW1lIChlZyBmb2xsb3dpbmcgYSByZWF1dGgpLCBhbmQgZW1pdCBhbiBSVE4yNCBVUERBVEVcbiAgICAgICAgICogZXZlbnQuIChMaXN0ZW5lciBhZGRlZCBvbiBuZXh0VGljayBiZWNhdXNlIHdlJ3JlIGluIGEgdHJhbnNwb3J0Lm9uKCdjb25uZWN0ZWQnKVxuICAgICAgICAgKiBjYWxsYmFjayBhdCB0aGUgbW9tZW50OyBpZiB3ZSBhZGQgaXQgbm93IHdlJ2xsIGJlIGFkZGluZyBpdCB0byB0aGUgZW5kXG4gICAgICAgICAqIG9mIHRoZSBsaXN0ZW5lcnMgYXJyYXkgYW5kIGl0J2xsIGJlIGNhbGxlZCBpbW1lZGlhdGVseSkgKi9cbiAgICAgICAgdGhpcy5vbkNvbm5lY3Rpb25EZXRhaWxzVXBkYXRlKGNvbm5lY3Rpb25EZXRhaWxzLCB0cmFuc3BvcnQpO1xuICAgICAgICBwbGF0Zm9ybV8xLmRlZmF1bHQuQ29uZmlnLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRyYW5zcG9ydC5vbignY29ubmVjdGVkJywgZnVuY3Rpb24gKGNvbm5lY3RlZEVyciwgX2Nvbm5lY3Rpb25JZCwgY29ubmVjdGlvbkRldGFpbHMpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5vbkNvbm5lY3Rpb25EZXRhaWxzVXBkYXRlKGNvbm5lY3Rpb25EZXRhaWxzLCB0cmFuc3BvcnQpO1xuICAgICAgICAgICAgICAgIF90aGlzLmVtaXQoJ3VwZGF0ZScsIG5ldyBjb25uZWN0aW9uc3RhdGVjaGFuZ2VfMS5kZWZhdWx0KGNvbm5lY3RlZFN0YXRlLCBjb25uZWN0ZWRTdGF0ZSwgbnVsbCwgY29ubmVjdGVkRXJyKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8qIElmIHByZXZpb3VzbHkgbm90IGNvbm5lY3RlZCwgbm90aWZ5IHRoZSBzdGF0ZSBjaGFuZ2UgKGluY2x1ZGluZyBhbnlcbiAgICAgICAgICogZXJyb3IpLiAqL1xuICAgICAgICBpZiAoZXhpc3RpbmdTdGF0ZS5zdGF0ZSA9PT0gdGhpcy5zdGF0ZXMuY29ubmVjdGVkLnN0YXRlKSB7XG4gICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAvKiBpZiB1cGdyYWRpbmcgd2l0aG91dCBlcnJvciwgbGVhdmUgYW55IGV4aXN0aW5nIGVycm9yUmVhc29uIGFsb25lICovXG4gICAgICAgICAgICAgICAgdGhpcy5lcnJvclJlYXNvbiA9IHRoaXMucmVhbHRpbWUuY29ubmVjdGlvbi5lcnJvclJlYXNvbiA9IGVycm9yO1xuICAgICAgICAgICAgICAgIC8qIE9ubHkgYm90aGVyIGVtaXR0aW5nIGFuIHVwZ3JhZGUgaWYgdGhlcmUncyBhbiBlcnJvcjsgb3RoZXJ3aXNlIGl0J3NcbiAgICAgICAgICAgICAgICAgKiBqdXN0IGEgdHJhbnNwb3J0IHVwZ3JhZGUsIHNvIGF1dGggZGV0YWlscyB3b24ndCBoYXZlIGNoYW5nZWQgKi9cbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ3VwZGF0ZScsIG5ldyBjb25uZWN0aW9uc3RhdGVjaGFuZ2VfMS5kZWZhdWx0KGNvbm5lY3RlZFN0YXRlLCBjb25uZWN0ZWRTdGF0ZSwgbnVsbCwgZXJyb3IpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubm90aWZ5U3RhdGUoeyBzdGF0ZTogJ2Nvbm5lY3RlZCcsIGVycm9yOiBlcnJvciB9KTtcbiAgICAgICAgICAgIHRoaXMuZXJyb3JSZWFzb24gPSB0aGlzLnJlYWx0aW1lLmNvbm5lY3Rpb24uZXJyb3JSZWFzb24gPSBlcnJvciB8fCBudWxsO1xuICAgICAgICB9XG4gICAgICAgIC8qIFNlbmQgYWZ0ZXIgdGhlIGNvbm5lY3Rpb24gc3RhdGUgdXBkYXRlLCBhcyBDaGFubmVscyBob29rcyBpbnRvIHRoaXMgdG9cbiAgICAgICAgICogcmVzZW5kIGF0dGFjaGVzIG9uIGEgbmV3IHRyYW5zcG9ydCBpZiBuZWNlc3NhcnkgKi9cbiAgICAgICAgdGhpcy5lbWl0KCd0cmFuc3BvcnQuYWN0aXZlJywgdHJhbnNwb3J0KTtcbiAgICAgICAgLyogR3JhY2VmdWxseSB0ZXJtaW5hdGUgZXhpc3RpbmcgcHJvdG9jb2wgKi9cbiAgICAgICAgaWYgKGV4aXN0aW5nQWN0aXZlUHJvdG9jb2wpIHtcbiAgICAgICAgICAgIGlmIChleGlzdGluZ0FjdGl2ZVByb3RvY29sLm1lc3NhZ2VRdWV1ZS5jb3VudCgpID4gMCkge1xuICAgICAgICAgICAgICAgIC8qIFdlIGNvdWxkIGp1c3QgcmVxdWV1ZSBwZW5kaW5nIG1lc3NhZ2VzIG9uIHRoZSBuZXcgdHJhbnNwb3J0LCBidXRcbiAgICAgICAgICAgICAgICAgKiBhY3R1YWxseSB0aGlzIHNob3VsZCBuZXZlciBoYXBwZW46IHRyYW5zcG9ydHMgc2hvdWxkIG9ubHkgdGFrZSBvdmVyXG4gICAgICAgICAgICAgICAgICogZnJvbSBvdGhlciBhY3RpdmUgdHJhbnNwb3J0cyB3aGVuIHVwZ3JhZGluZywgYW5kIHVwZ3JhZGluZyB3YWl0cyBmb3JcbiAgICAgICAgICAgICAgICAgKiB0aGUgb2xkIHRyYW5zcG9ydCB0byBiZSBpZGxlLiBTbyBsb2cgYW4gZXJyb3IuICovXG4gICAgICAgICAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfRVJST1IsICdDb25uZWN0aW9uTWFuYWdlci5hY3RpdmF0ZVRyYW5zcG9ydCgpJywgJ1ByZXZpb3VzIGFjdGl2ZSBwcm90b2NvbCAoZm9yIHRyYW5zcG9ydCAnICtcbiAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmdBY3RpdmVQcm90b2NvbC50cmFuc3BvcnQuc2hvcnROYW1lICtcbiAgICAgICAgICAgICAgICAgICAgJywgbmV3IG9uZSBpcyAnICtcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNwb3J0LnNob3J0TmFtZSArXG4gICAgICAgICAgICAgICAgICAgICcpIGZpbmlzaGluZyB3aXRoICcgK1xuICAgICAgICAgICAgICAgICAgICBleGlzdGluZ0FjdGl2ZVByb3RvY29sLm1lc3NhZ2VRdWV1ZS5jb3VudCgpICtcbiAgICAgICAgICAgICAgICAgICAgJyBtZXNzYWdlcyBzdGlsbCBwZW5kaW5nJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZXhpc3RpbmdBY3RpdmVQcm90b2NvbC50cmFuc3BvcnQgPT09IHRyYW5zcG9ydCkge1xuICAgICAgICAgICAgICAgIHZhciBtc2cgPSAnQXNzdW1wdGlvbiB2aW9sYXRlZDogYWN0aXZhdGluZyBhIHRyYW5zcG9ydCB0aGF0IHdhcyBhbHNvIHRoZSB0cmFuc3BvcnQgZm9yIHRoZSBwcmV2aW91cyBhY3RpdmUgcHJvdG9jb2w7IHRyYW5zcG9ydCA9ICcgK1xuICAgICAgICAgICAgICAgICAgICB0cmFuc3BvcnQuc2hvcnROYW1lICtcbiAgICAgICAgICAgICAgICAgICAgJzsgc3RhY2sgPSAnICtcbiAgICAgICAgICAgICAgICAgICAgbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICAgICAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfRVJST1IsICdDb25uZWN0aW9uTWFuYWdlci5hY3RpdmF0ZVRyYW5zcG9ydCgpJywgbXNnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGV4aXN0aW5nQWN0aXZlUHJvdG9jb2wuZmluaXNoKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLyogVGVybWluYXRlIGFueSBvdGhlciBwZW5kaW5nIHRyYW5zcG9ydChzKSwgYW5kXG4gICAgICAgICAqIGFib3J0IGFueSBub3QteWV0LXBlbmRpbmcgdHJhbnNwb3J0IGF0dGVtcHRzICovXG4gICAgICAgIFV0aWxzLnNhZmVBcnJGb3JFYWNoKHRoaXMucGVuZGluZ1RyYW5zcG9ydHMsIGZ1bmN0aW9uIChwZW5kaW5nVHJhbnNwb3J0KSB7XG4gICAgICAgICAgICBpZiAocGVuZGluZ1RyYW5zcG9ydCA9PT0gdHJhbnNwb3J0KSB7XG4gICAgICAgICAgICAgICAgdmFyIG1zZyA9ICdBc3N1bXB0aW9uIHZpb2xhdGVkOiBhY3RpdmF0aW5nIGEgdHJhbnNwb3J0IHRoYXQgaXMgc3RpbGwgbWFya2VkIGFzIGEgcGVuZGluZyB0cmFuc3BvcnQ7IHRyYW5zcG9ydCA9ICcgK1xuICAgICAgICAgICAgICAgICAgICB0cmFuc3BvcnQuc2hvcnROYW1lICtcbiAgICAgICAgICAgICAgICAgICAgJzsgc3RhY2sgPSAnICtcbiAgICAgICAgICAgICAgICAgICAgbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICAgICAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfRVJST1IsICdDb25uZWN0aW9uTWFuYWdlci5hY3RpdmF0ZVRyYW5zcG9ydCgpJywgbXNnKTtcbiAgICAgICAgICAgICAgICBVdGlscy5hcnJEZWxldGVWYWx1ZShfdGhpcy5wZW5kaW5nVHJhbnNwb3J0cywgdHJhbnNwb3J0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlbmRpbmdUcmFuc3BvcnQuZGlzY29ubmVjdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgVXRpbHMuc2FmZUFyckZvckVhY2godGhpcy5wcm9wb3NlZFRyYW5zcG9ydHMsIGZ1bmN0aW9uIChwcm9wb3NlZFRyYW5zcG9ydCkge1xuICAgICAgICAgICAgaWYgKHByb3Bvc2VkVHJhbnNwb3J0ID09PSB0cmFuc3BvcnQpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19FUlJPUiwgJ0Nvbm5lY3Rpb25NYW5hZ2VyLmFjdGl2YXRlVHJhbnNwb3J0KCknLCAnQXNzdW1wdGlvbiB2aW9sYXRlZDogYWN0aXZhdGluZyBhIHRyYW5zcG9ydCB0aGF0IGlzIHN0aWxsIG1hcmtlZCBhcyBhIHByb3Bvc2VkIHRyYW5zcG9ydDsgdHJhbnNwb3J0ID0gJyArXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zcG9ydC5zaG9ydE5hbWUgK1xuICAgICAgICAgICAgICAgICAgICAnOyBzdGFjayA9ICcgK1xuICAgICAgICAgICAgICAgICAgICBuZXcgRXJyb3IoKS5zdGFjayk7XG4gICAgICAgICAgICAgICAgVXRpbHMuYXJyRGVsZXRlVmFsdWUoX3RoaXMucHJvcG9zZWRUcmFuc3BvcnRzLCB0cmFuc3BvcnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcHJvcG9zZWRUcmFuc3BvcnQuZGlzcG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDYWxsZWQgd2hlbiBhIHRyYW5zcG9ydCBpcyBubyBsb25nZXIgdGhlIGFjdGl2ZSB0cmFuc3BvcnQuIFRoaXMgY2FuIG9jY3VyXG4gICAgICogaW4gYW55IHRyYW5zcG9ydCBjb25uZWN0aW9uIHN0YXRlLlxuICAgICAqIEBwYXJhbSB0cmFuc3BvcnRcbiAgICAgKi9cbiAgICBDb25uZWN0aW9uTWFuYWdlci5wcm90b3R5cGUuZGVhY3RpdmF0ZVRyYW5zcG9ydCA9IGZ1bmN0aW9uICh0cmFuc3BvcnQsIHN0YXRlLCBlcnJvcikge1xuICAgICAgICB2YXIgY3VycmVudFByb3RvY29sID0gdGhpcy5hY3RpdmVQcm90b2NvbCwgd2FzQWN0aXZlID0gY3VycmVudFByb3RvY29sICYmIGN1cnJlbnRQcm90b2NvbC5nZXRUcmFuc3BvcnQoKSA9PT0gdHJhbnNwb3J0LCB3YXNQZW5kaW5nID0gVXRpbHMuYXJyRGVsZXRlVmFsdWUodGhpcy5wZW5kaW5nVHJhbnNwb3J0cywgdHJhbnNwb3J0KSwgd2FzUHJvcG9zZWQgPSBVdGlscy5hcnJEZWxldGVWYWx1ZSh0aGlzLnByb3Bvc2VkVHJhbnNwb3J0cywgdHJhbnNwb3J0KSwgbm9UcmFuc3BvcnRzU2NoZWR1bGVkRm9yQWN0aXZhdGlvbiA9IHRoaXMubm9UcmFuc3BvcnRzU2NoZWR1bGVkRm9yQWN0aXZhdGlvbigpO1xuICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19NSU5PUiwgJ0Nvbm5lY3Rpb25NYW5hZ2VyLmRlYWN0aXZhdGVUcmFuc3BvcnQoKScsICd0cmFuc3BvcnQgPSAnICsgdHJhbnNwb3J0KTtcbiAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlOT1IsICdDb25uZWN0aW9uTWFuYWdlci5kZWFjdGl2YXRlVHJhbnNwb3J0KCknLCAnc3RhdGUgPSAnICtcbiAgICAgICAgICAgIHN0YXRlICtcbiAgICAgICAgICAgICh3YXNBY3RpdmUgPyAnOyB3YXMgYWN0aXZlJyA6IHdhc1BlbmRpbmcgPyAnOyB3YXMgcGVuZGluZycgOiB3YXNQcm9wb3NlZCA/ICc7IHdhcyBwcm9wb3NlZCcgOiAnJykgK1xuICAgICAgICAgICAgKG5vVHJhbnNwb3J0c1NjaGVkdWxlZEZvckFjdGl2YXRpb24gPyAnJyA6ICc7IGFub3RoZXIgdHJhbnNwb3J0IGlzIHNjaGVkdWxlZCBmb3IgYWN0aXZhdGlvbicpKTtcbiAgICAgICAgaWYgKGVycm9yICYmIGVycm9yLm1lc3NhZ2UpXG4gICAgICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19NSUNSTywgJ0Nvbm5lY3Rpb25NYW5hZ2VyLmRlYWN0aXZhdGVUcmFuc3BvcnQoKScsICdyZWFzb24gPSAgJyArIGVycm9yLm1lc3NhZ2UpO1xuICAgICAgICBpZiAod2FzQWN0aXZlKSB7XG4gICAgICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19NSUNSTywgJ0Nvbm5lY3Rpb25NYW5hZ2VyLmRlYWN0aXZhdGVUcmFuc3BvcnQoKScsICdHZXR0aW5nLCBjbGVhcmluZywgYW5kIHJlcXVldWluZyAnICtcbiAgICAgICAgICAgICAgICB0aGlzLmFjdGl2ZVByb3RvY29sLm1lc3NhZ2VRdWV1ZS5jb3VudCgpICtcbiAgICAgICAgICAgICAgICAnIHBlbmRpbmcgbWVzc2FnZXMnKTtcbiAgICAgICAgICAgIHRoaXMucXVldWVQZW5kaW5nTWVzc2FnZXMoY3VycmVudFByb3RvY29sLmdldFBlbmRpbmdNZXNzYWdlcygpKTtcbiAgICAgICAgICAgIC8qIENsZWFyIGFueSBtZXNzYWdlcyB3ZSByZXF1ZXVlIHRvIGFsbG93IHRoZSBwcm90b2NvbCB0byBiZWNvbWUgaWRsZS5cbiAgICAgICAgICAgICAqIEluIGNhc2Ugb2YgYW4gdXBncmFkZSwgdGhpcyB3aWxsIHRyaWdnZXIgYW4gaW1tZWRpYXRlIGFjdGl2YXRpb24gb2ZcbiAgICAgICAgICAgICAqIHRoZSB1cGdyYWRlIHRyYW5zcG9ydCwgc28gZGVsYXkgYSB0aWNrIHNvIHRoaXMgdHJhbnNwb3J0IGNhbiBmaW5pc2hcbiAgICAgICAgICAgICAqIGRlYWN0aXZhdGluZyAqL1xuICAgICAgICAgICAgcGxhdGZvcm1fMS5kZWZhdWx0LkNvbmZpZy5uZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFByb3RvY29sLmNsZWFyUGVuZGluZ01lc3NhZ2VzKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlUHJvdG9jb2wgPSB0aGlzLmhvc3QgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZW1pdCgndHJhbnNwb3J0LmluYWN0aXZlJywgdHJhbnNwb3J0KTtcbiAgICAgICAgLyogdGhpcyB0cmFuc3BvcnQgc3RhdGUgY2hhbmdlIGlzIGEgc3RhdGUgY2hhbmdlIGZvciB0aGUgY29ubmVjdGlvbm1hbmFnZXIgaWZcbiAgICAgICAgICogLSB0aGUgdHJhbnNwb3J0IHdhcyB0aGUgYWN0aXZlIHRyYW5zcG9ydCBhbmQgdGhlcmUgYXJlIG5vIHRyYW5zcG9ydHNcbiAgICAgICAgICogICB3aGljaCBhcmUgY29ubmVjdGVkIGFuZCBzY2hlZHVsZWQgZm9yIGFjdGl2YXRpb24sIGp1c3Qgd2FpdGluZyBmb3IgdGhlXG4gICAgICAgICAqICAgYWN0aXZlIHRyYW5zcG9ydCB0byBmaW5pc2ggd2hhdCBpdHMgZG9pbmc7IG9yXG4gICAgICAgICAqIC0gdGhlIHRyYW5zcG9ydCB3YXMgdGhlIGFjdGl2ZSB0cmFuc3BvcnQgYW5kIHRoZSBlcnJvciB3YXMgZmF0YWwgKHNvXG4gICAgICAgICAqICAgdW5oZWFsYWJsZSBieSBhbm90aGVyIHRyYW5zcG9ydCk7IG9yXG4gICAgICAgICAqIC0gdGhlcmUgaXMgbm8gYWN0aXZlIHRyYW5zcG9ydCwgYW5kIHRoaXMgaXMgdGhlIGxhc3QgcmVtYWluaW5nXG4gICAgICAgICAqICAgcGVuZGluZyB0cmFuc3BvcnQgKHNvIHdlIHdlcmUgaW4gdGhlIGNvbm5lY3Rpbmcgc3RhdGUpXG4gICAgICAgICAqL1xuICAgICAgICBpZiAoKHdhc0FjdGl2ZSAmJiBub1RyYW5zcG9ydHNTY2hlZHVsZWRGb3JBY3RpdmF0aW9uKSB8fFxuICAgICAgICAgICAgKHdhc0FjdGl2ZSAmJiBzdGF0ZSA9PT0gJ2ZhaWxlZCcpIHx8XG4gICAgICAgICAgICBzdGF0ZSA9PT0gJ2Nsb3NlZCcgfHxcbiAgICAgICAgICAgIChjdXJyZW50UHJvdG9jb2wgPT09IG51bGwgJiYgd2FzUGVuZGluZyAmJiB0aGlzLnBlbmRpbmdUcmFuc3BvcnRzLmxlbmd0aCA9PT0gMCkpIHtcbiAgICAgICAgICAgIC8qIElmIHdlJ3JlIGRpc2Nvbm5lY3RlZCB3aXRoIGEgNXh4IHdlIG5lZWQgdG8gdHJ5IGZhbGxiYWNrIGhvc3RzXG4gICAgICAgICAgICAgKiAoUlROMTRkKSwgYnV0IChhKSBkdWUgdG8gaG93IHRoZSB1cGdyYWRlIHNlcXVlbmNlIHdvcmtzLCB0aGVcbiAgICAgICAgICAgICAqIGhvc3QvdHJhbnNwb3J0IHNlbGVjdGlvbiBzZXF1ZW5jZSBvbmx5IGNhcmVzIGFib3V0IGdldHRpbmcgdG9cbiAgICAgICAgICAgICAqIGBwcmVjb25uZWN0YCAoZWcgZXN0YWJsaXNoaW5nIGEgd2Vic29ja2V0KSBnZXR0aW5nIGEgYGRpc2Nvbm5lY3RlZGBcbiAgICAgICAgICAgICAqIHByb3RvY29sIG1lc3NhZ2UgYWZ0ZXJ3YXJkcyBpcyB0b28gbGF0ZTsgYW5kIChiKSBob3N0IHJldHJ5IG9ubHlcbiAgICAgICAgICAgICAqIGFwcGxpZXMgdG8gY29ubmVjdEJhc2UgdW5sZXNzIHRoZSBzdG9yZWQgcHJlZmVyZW5jZSB0cmFuc3BvcnQgZG9lc24ndFxuICAgICAgICAgICAgICogd29yay4gV2Ugc29sdmUgdGhpcyBieSB1bnBlcnNpc3RpbmcgdGhlIHRyYW5zcG9ydCBwcmVmZXJlbmNlIGFuZFxuICAgICAgICAgICAgICogc2V0dGluZyBhbiBpbnN0YW5jZSB2YXJpYWJsZSB0byBmb3JjZSBmYWxsYmFjayBob3N0cyB0byBiZSB1c2VkIChpZlxuICAgICAgICAgICAgICogYW55KSBoZXJlLiBCaXQgb2YgYSBrbHVkZ2UsIGJ1dCBubyByZWFsIGJldHRlciBhbHRlcm5hdGl2ZXMgd2l0aG91dFxuICAgICAgICAgICAgICogcmV3cml0aW5nIHRoZSBlbnRpcmUgdGhpbmcgKi9cbiAgICAgICAgICAgIGlmIChzdGF0ZSA9PT0gJ2Rpc2Nvbm5lY3RlZCcgJiYgZXJyb3IgJiYgZXJyb3Iuc3RhdHVzQ29kZSA+IDUwMCAmJiB0aGlzLmh0dHBIb3N0cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51bnBlcnNpc3RUcmFuc3BvcnRQcmVmZXJlbmNlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5mb3JjZUZhbGxiYWNrSG9zdCA9IHRydWU7XG4gICAgICAgICAgICAgICAgLyogYW5kIHRyeSB0byBjb25uZWN0IGFnYWluIHRvIHRyeSBhIGZhbGxiYWNrIGhvc3Qgd2l0aG91dCB3YWl0aW5nIGZvciB0aGUgdXN1YWwgMTVzIGRpc2Nvbm5lY3RlZFJldHJ5VGltZW91dCAqL1xuICAgICAgICAgICAgICAgIHRoaXMubm90aWZ5U3RhdGUoeyBzdGF0ZTogc3RhdGUsIGVycm9yOiBlcnJvciwgcmV0cnlJbW1lZGlhdGVseTogdHJ1ZSB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKiBUT0RPIHJlbW92ZSBiZWxvdyBsaW5lIG9uY2UgcmVhbHRpbWUgc2VuZHMgdG9rZW4gZXJyb3JzIGFzIERJU0NPTk5FQ1RFRHMgKi9cbiAgICAgICAgICAgIHZhciBuZXdDb25uZWN0aW9uU3RhdGUgPSBzdGF0ZSA9PT0gJ2ZhaWxlZCcgJiYgYXV0aF8xLmRlZmF1bHQuaXNUb2tlbkVycihlcnJvcikgPyAnZGlzY29ubmVjdGVkJyA6IHN0YXRlO1xuICAgICAgICAgICAgdGhpcy5ub3RpZnlTdGF0ZSh7IHN0YXRlOiBuZXdDb25uZWN0aW9uU3RhdGUsIGVycm9yOiBlcnJvciB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAod2FzQWN0aXZlICYmIHN0YXRlID09PSAnZGlzY29ubmVjdGVkJyAmJiB0aGlzLnN0YXRlICE9PSB0aGlzLnN0YXRlcy5zeW5jaHJvbml6aW5nKSB7XG4gICAgICAgICAgICAvKiBJZiB3ZSB3ZXJlIGFjdGl2ZSBidXQgdGhlcmUgaXMgYW5vdGhlciB0cmFuc3BvcnQgc2NoZWR1bGVkIGZvclxuICAgICAgICAgICAgICogYWN0aXZhdGlvbiwgZ28gaW50byB0byB0aGUgY29ubmVjdGluZyBzdGF0ZSB1bnRpbCB0aGF0IHRyYW5zcG9ydFxuICAgICAgICAgICAgICogYWN0aXZhdGVzIGFuZCBzZXRzIHVzIGJhY2sgdG8gY29ubmVjdGVkLiAobWFudWFsbHkgc3RhcnRpbmcgdGhlXG4gICAgICAgICAgICAgKiB0cmFuc2l0aW9uIHRpbWVycyBpbiBjYXNlIHRoYXQgbmV2ZXIgaGFwcGVucykuIChJZiB3ZSB3ZXJlIGluIHRoZVxuICAgICAgICAgICAgICogc3luY2hyb25pemluZyBzdGF0ZSwgdGhlbiB0aGF0J3MgZmluZSwgdGhlIG9sZCB0cmFuc3BvcnQganVzdCBnb3QgaXRzXG4gICAgICAgICAgICAgKiBkaXNjb25uZWN0ZWQgYmVmb3JlIHRoZSBuZXcgb25lIGdvdCB0aGUgc3luYyAtLSBpZ25vcmUgaXQgYW5kIGtlZXBcbiAgICAgICAgICAgICAqIHdhaXRpbmcgZm9yIHRoZSBzeW5jLiBJZiBpdCBmYWlscyB3ZSBoYXZlIGEgc2VwYXJhdGUgc3luYyB0aW1lciB0aGF0XG4gICAgICAgICAgICAgKiB3aWxsIGV4cGlyZSkuICovXG4gICAgICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19NSUNSTywgJ0Nvbm5lY3Rpb25NYW5hZ2VyLmRlYWN0aXZhdGVUcmFuc3BvcnQoKScsICd3YXNBY3RpdmUgYnV0IGFub3RoZXIgdHJhbnNwb3J0IGlzIGNvbm5lY3RlZCBhbmQgc2NoZWR1bGVkIGZvciBhY3RpdmF0aW9uLCBzbyBnb2luZyBpbnRvIHRoZSBjb25uZWN0aW5nIHN0YXRlIHVudGlsIGl0IGFjdGl2YXRlcycpO1xuICAgICAgICAgICAgdGhpcy5zdGFydFN1c3BlbmRUaW1lcigpO1xuICAgICAgICAgICAgdGhpcy5zdGFydFRyYW5zaXRpb25UaW1lcih0aGlzLnN0YXRlcy5jb25uZWN0aW5nKTtcbiAgICAgICAgICAgIHRoaXMubm90aWZ5U3RhdGUoeyBzdGF0ZTogJ2Nvbm5lY3RpbmcnLCBlcnJvcjogZXJyb3IgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qIEhlbHBlciB0aGF0IHJldHVybnMgdHJ1ZSBpZiB0aGVyZSBhcmUgbm8gdHJhbnNwb3J0cyB3aGljaCBhcmUgcGVuZGluZyxcbiAgICAgKiBoYXZlIGJlZW4gY29ubmVjdGVkLCBhbmQgYXJlIGp1c3Qgd2FpdGluZyBmb3Igb25jZU5vUGVuZGluZyB0byBmaXJlIGJlZm9yZVxuICAgICAqIGJlaW5nIGFjdGl2YXRlZCAqL1xuICAgIENvbm5lY3Rpb25NYW5hZ2VyLnByb3RvdHlwZS5ub1RyYW5zcG9ydHNTY2hlZHVsZWRGb3JBY3RpdmF0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKFV0aWxzLmlzRW1wdHkodGhpcy5wZW5kaW5nVHJhbnNwb3J0cykgfHxcbiAgICAgICAgICAgIHRoaXMucGVuZGluZ1RyYW5zcG9ydHMuZXZlcnkoZnVuY3Rpb24gKHRyYW5zcG9ydCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAhdHJhbnNwb3J0LmlzQ29ubmVjdGVkO1xuICAgICAgICAgICAgfSkpO1xuICAgIH07XG4gICAgQ29ubmVjdGlvbk1hbmFnZXIucHJvdG90eXBlLnNldENvbm5lY3Rpb24gPSBmdW5jdGlvbiAoY29ubmVjdGlvbklkLCBjb25uZWN0aW9uRGV0YWlscywgaGFzQ29ubmVjdGlvbkVycm9yKSB7XG4gICAgICAgIC8qIGlmIGNvbm5lY3Rpb25LZXkgY2hhbmdlcyBidXQgY29ubmVjdGlvbklkIHN0YXlzIHRoZSBzYW1lLCB0aGVuIGp1c3QgYVxuICAgICAgICAgKiB0cmFuc3BvcnQgY2hhbmdlIG9uIHRoZSBzYW1lIGNvbm5lY3Rpb24uIElmIGNvbm5lY3Rpb25JZCBjaGFuZ2VzLCB3ZSdyZVxuICAgICAgICAgKiBvbiBhIG5ldyBjb25uZWN0aW9uLCB3aXRoIGltcGxpY2F0aW9ucyBmb3IgbXNnU2VyaWFsIGFuZCBjaGFubmVsIHN0YXRlICovXG4gICAgICAgIC8qIElmIG5vIHByZXZpb3VzIGNvbm5lY3Rpb25JZCwgZG9uJ3QgcmVzZXQgdGhlIG1zZ1NlcmlhbCBhcyBpdCBtYXkgaGF2ZVxuICAgICAgICAgKiBiZWVuIHNldCBieSByZWNvdmVyIGRhdGEgKHVubGVzcyB0aGUgcmVjb3ZlciBmYWlsZWQpICovXG4gICAgICAgIHZhciBwcmV2Q29ubklkID0gdGhpcy5jb25uZWN0aW9uSWQsIGNvbm5JZENoYW5nZWQgPSBwcmV2Q29ubklkICYmIHByZXZDb25uSWQgIT09IGNvbm5lY3Rpb25JZCwgcmVjb3ZlckZhaWx1cmUgPSAhcHJldkNvbm5JZCAmJiBoYXNDb25uZWN0aW9uRXJyb3I7XG4gICAgICAgIGlmIChjb25uSWRDaGFuZ2VkIHx8IHJlY292ZXJGYWlsdXJlKSB7XG4gICAgICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19NSU5PUiwgJ0Nvbm5lY3Rpb25NYW5hZ2VyLnNldENvbm5lY3Rpb24oKScsICdSZXNldHRpbmcgbXNnU2VyaWFsJyk7XG4gICAgICAgICAgICB0aGlzLm1zZ1NlcmlhbCA9IDA7XG4gICAgICAgICAgICAvLyBSVE4xOWEyOiBJbiB0aGUgZXZlbnQgb2YgYSBuZXcgY29ubmVjdGlvbklkLCBwcmV2aW91cyBtc2dTZXJpYWxzIGFyZVxuICAgICAgICAgICAgLy8gbWVhbmluZ2xlc3MuXG4gICAgICAgICAgICB0aGlzLnF1ZXVlZE1lc3NhZ2VzLnJlc2V0U2VuZEF0dGVtcHRlZCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmNvbm5lY3Rpb25JZCAhPT0gY29ubmVjdGlvbklkKSB7XG4gICAgICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19NSU5PUiwgJ0Nvbm5lY3Rpb25NYW5hZ2VyLnNldENvbm5lY3Rpb24oKScsICdOZXcgY29ubmVjdGlvbklkOyByZWF0dGFjaGluZyBhbnkgYXR0YWNoZWQgY2hhbm5lbHMnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlYWx0aW1lLmNvbm5lY3Rpb24uaWQgPSB0aGlzLmNvbm5lY3Rpb25JZCA9IGNvbm5lY3Rpb25JZDtcbiAgICAgICAgdGhpcy5yZWFsdGltZS5jb25uZWN0aW9uLmtleSA9IHRoaXMuY29ubmVjdGlvbktleSA9IGNvbm5lY3Rpb25EZXRhaWxzLmNvbm5lY3Rpb25LZXk7XG4gICAgfTtcbiAgICBDb25uZWN0aW9uTWFuYWdlci5wcm90b3R5cGUuY2xlYXJDb25uZWN0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnJlYWx0aW1lLmNvbm5lY3Rpb24uaWQgPSB0aGlzLmNvbm5lY3Rpb25JZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5yZWFsdGltZS5jb25uZWN0aW9uLmtleSA9IHRoaXMuY29ubmVjdGlvbktleSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5tc2dTZXJpYWwgPSAwO1xuICAgICAgICB0aGlzLnVucGVyc2lzdENvbm5lY3Rpb24oKTtcbiAgICB9O1xuICAgIENvbm5lY3Rpb25NYW5hZ2VyLnByb3RvdHlwZS5jcmVhdGVSZWNvdmVyeUtleSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gUlROMTZnMi5cbiAgICAgICAgaWYgKCF0aGlzLmNvbm5lY3Rpb25LZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICBjb25uZWN0aW9uS2V5OiB0aGlzLmNvbm5lY3Rpb25LZXksXG4gICAgICAgICAgICBtc2dTZXJpYWw6IHRoaXMubXNnU2VyaWFsLFxuICAgICAgICAgICAgY2hhbm5lbFNlcmlhbHM6IHRoaXMucmVhbHRpbWUuY2hhbm5lbHMuY2hhbm5lbFNlcmlhbHMoKSxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBDb25uZWN0aW9uTWFuYWdlci5wcm90b3R5cGUuY2hlY2tDb25uZWN0aW9uU3RhdGVGcmVzaG5lc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5sYXN0QWN0aXZpdHkgfHwgIXRoaXMuY29ubmVjdGlvbklkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHNpbmNlTGFzdCA9IFV0aWxzLm5vdygpIC0gdGhpcy5sYXN0QWN0aXZpdHk7XG4gICAgICAgIGlmIChzaW5jZUxhc3QgPiB0aGlzLmNvbm5lY3Rpb25TdGF0ZVR0bCArIHRoaXMubWF4SWRsZUludGVydmFsKSB7XG4gICAgICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19NSU5PUiwgJ0Nvbm5lY3Rpb25NYW5hZ2VyLmNoZWNrQ29ubmVjdGlvblN0YXRlRnJlc2huZXNzKCknLCAnTGFzdCBrbm93biBhY3Rpdml0eSBmcm9tIHJlYWx0aW1lIHdhcyAnICsgc2luY2VMYXN0ICsgJ21zIGFnbzsgZGlzY2FyZGluZyBjb25uZWN0aW9uIHN0YXRlJyk7XG4gICAgICAgICAgICB0aGlzLmNsZWFyQ29ubmVjdGlvbigpO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZXMuY29ubmVjdGluZy5mYWlsU3RhdGUgPSAnc3VzcGVuZGVkJztcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHdoZW4gdGhlIGNvbm5lY3Rpb25tYW5hZ2VyIHdhbnRzIHRvIHBlcnNpc3QgdHJhbnNwb3J0XG4gICAgICogc3RhdGUgZm9yIGxhdGVyIHJlY292ZXJ5LiBPbmx5IGFwcGxpY2FibGUgaW4gdGhlIGJyb3dzZXIgY29udGV4dC5cbiAgICAgKi9cbiAgICBDb25uZWN0aW9uTWFuYWdlci5wcm90b3R5cGUucGVyc2lzdENvbm5lY3Rpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChoYXZlU2Vzc2lvblN0b3JhZ2UoKSkge1xuICAgICAgICAgICAgdmFyIHJlY292ZXJ5S2V5ID0gdGhpcy5jcmVhdGVSZWNvdmVyeUtleSgpO1xuICAgICAgICAgICAgaWYgKHJlY292ZXJ5S2V5KSB7XG4gICAgICAgICAgICAgICAgc2V0U2Vzc2lvblJlY292ZXJEYXRhKHtcbiAgICAgICAgICAgICAgICAgICAgcmVjb3ZlcnlLZXk6IHJlY292ZXJ5S2V5LFxuICAgICAgICAgICAgICAgICAgICBkaXNjb25uZWN0ZWRBdDogVXRpbHMubm93KCksXG4gICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uOiBnbG9iYWwubG9jYXRpb24sXG4gICAgICAgICAgICAgICAgICAgIGNsaWVudElkOiB0aGlzLnJlYWx0aW1lLmF1dGguY2xpZW50SWQsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENhbGxlZCB3aGVuIHRoZSBjb25uZWN0aW9ubWFuYWdlciB3YW50cyB0byBwZXJzaXN0IHRyYW5zcG9ydFxuICAgICAqIHN0YXRlIGZvciBsYXRlciByZWNvdmVyeS4gT25seSBhcHBsaWNhYmxlIGluIHRoZSBicm93c2VyIGNvbnRleHQuXG4gICAgICovXG4gICAgQ29ubmVjdGlvbk1hbmFnZXIucHJvdG90eXBlLnVucGVyc2lzdENvbm5lY3Rpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNsZWFyU2Vzc2lvblJlY292ZXJEYXRhKCk7XG4gICAgfTtcbiAgICAvKioqKioqKioqKioqKioqKioqKioqXG4gICAgICogc3RhdGUgbWFuYWdlbWVudFxuICAgICAqKioqKioqKioqKioqKioqKioqKiovXG4gICAgQ29ubmVjdGlvbk1hbmFnZXIucHJvdG90eXBlLmdldEVycm9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lcnJvclJlYXNvbiB8fCB0aGlzLmdldFN0YXRlRXJyb3IoKTtcbiAgICB9O1xuICAgIENvbm5lY3Rpb25NYW5hZ2VyLnByb3RvdHlwZS5nZXRTdGF0ZUVycm9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICByZXR1cm4gKF9iID0gKF9hID0gY29ubmVjdGlvbmVycm9yc18xLmRlZmF1bHQpW3RoaXMuc3RhdGUuc3RhdGVdKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSk7XG4gICAgfTtcbiAgICBDb25uZWN0aW9uTWFuYWdlci5wcm90b3R5cGUuYWN0aXZlU3RhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRlLnF1ZXVlRXZlbnRzIHx8IHRoaXMuc3RhdGUuc2VuZEV2ZW50cztcbiAgICB9O1xuICAgIENvbm5lY3Rpb25NYW5hZ2VyLnByb3RvdHlwZS5lbmFjdFN0YXRlQ2hhbmdlID0gZnVuY3Rpb24gKHN0YXRlQ2hhbmdlKSB7XG4gICAgICAgIHZhciBsb2dMZXZlbCA9IHN0YXRlQ2hhbmdlLmN1cnJlbnQgPT09ICdmYWlsZWQnID8gbG9nZ2VyXzEuZGVmYXVsdC5MT0dfRVJST1IgOiBsb2dnZXJfMS5kZWZhdWx0LkxPR19NQUpPUjtcbiAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nTGV2ZWwsICdDb25uZWN0aW9uIHN0YXRlJywgc3RhdGVDaGFuZ2UuY3VycmVudCArIChzdGF0ZUNoYW5nZS5yZWFzb24gPyAnOyByZWFzb246ICcgKyBzdGF0ZUNoYW5nZS5yZWFzb24gOiAnJykpO1xuICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19NSU5PUiwgJ0Nvbm5lY3Rpb25NYW5hZ2VyLmVuYWN0U3RhdGVDaGFuZ2UnLCAnc2V0dGluZyBuZXcgc3RhdGU6ICcgK1xuICAgICAgICAgICAgc3RhdGVDaGFuZ2UuY3VycmVudCArXG4gICAgICAgICAgICAnOyByZWFzb24gPSAnICtcbiAgICAgICAgICAgIChzdGF0ZUNoYW5nZS5yZWFzb24gJiYgc3RhdGVDaGFuZ2UucmVhc29uLm1lc3NhZ2UpKTtcbiAgICAgICAgdmFyIG5ld1N0YXRlID0gKHRoaXMuc3RhdGUgPSB0aGlzLnN0YXRlc1tzdGF0ZUNoYW5nZS5jdXJyZW50XSk7XG4gICAgICAgIGlmIChzdGF0ZUNoYW5nZS5yZWFzb24pIHtcbiAgICAgICAgICAgIHRoaXMuZXJyb3JSZWFzb24gPSBzdGF0ZUNoYW5nZS5yZWFzb247XG4gICAgICAgICAgICB0aGlzLnJlYWx0aW1lLmNvbm5lY3Rpb24uZXJyb3JSZWFzb24gPSBzdGF0ZUNoYW5nZS5yZWFzb247XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5ld1N0YXRlLnRlcm1pbmFsIHx8IG5ld1N0YXRlLnN0YXRlID09PSAnc3VzcGVuZGVkJykge1xuICAgICAgICAgICAgLyogc3VzcGVuZGVkIGlzIG5vbnRlcm1pbmFsLCBidXQgb25jZSBpbiB0aGUgc3VzcGVuZGVkIHN0YXRlLCByZWFsdGltZVxuICAgICAgICAgICAgICogd2lsbCBoYXZlIGRpc2NhcmRlZCBvdXIgY29ubmVjdGlvbiBzdGF0ZSwgc28gZnV0aGVyIGNvbm5lY3Rpb25cbiAgICAgICAgICAgICAqIGF0dGVtcHRzIHNob3VsZCBzdGFydCBmcm9tIHNjcmF0Y2ggKi9cbiAgICAgICAgICAgIHRoaXMuY2xlYXJDb25uZWN0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lbWl0KCdjb25uZWN0aW9uc3RhdGUnLCBzdGF0ZUNoYW5nZSk7XG4gICAgfTtcbiAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAgICAqIENvbm5lY3Rpb25NYW5hZ2VyIGNvbm5lY3Rpb24gbGlmZWN5Y2xlXG4gICAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4gICAgQ29ubmVjdGlvbk1hbmFnZXIucHJvdG90eXBlLnN0YXJ0VHJhbnNpdGlvblRpbWVyID0gZnVuY3Rpb24gKHRyYW5zaXRpb25TdGF0ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19NSU5PUiwgJ0Nvbm5lY3Rpb25NYW5hZ2VyLnN0YXJ0VHJhbnNpdGlvblRpbWVyKCknLCAndHJhbnNpdGlvblN0YXRlOiAnICsgdHJhbnNpdGlvblN0YXRlLnN0YXRlKTtcbiAgICAgICAgaWYgKHRoaXMudHJhbnNpdGlvblRpbWVyKSB7XG4gICAgICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19NSU5PUiwgJ0Nvbm5lY3Rpb25NYW5hZ2VyLnN0YXJ0VHJhbnNpdGlvblRpbWVyKCknLCAnY2xlYXJpbmcgYWxyZWFkeS1ydW5uaW5nIHRpbWVyJyk7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50cmFuc2l0aW9uVGltZXIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudHJhbnNpdGlvblRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMudHJhbnNpdGlvblRpbWVyKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMudHJhbnNpdGlvblRpbWVyID0gbnVsbDtcbiAgICAgICAgICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19NSU5PUiwgJ0Nvbm5lY3Rpb25NYW5hZ2VyICcgKyB0cmFuc2l0aW9uU3RhdGUuc3RhdGUgKyAnIHRpbWVyIGV4cGlyZWQnLCAncmVxdWVzdGluZyBuZXcgc3RhdGU6ICcgKyB0cmFuc2l0aW9uU3RhdGUuZmFpbFN0YXRlKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5ub3RpZnlTdGF0ZSh7IHN0YXRlOiB0cmFuc2l0aW9uU3RhdGUuZmFpbFN0YXRlIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCB0cmFuc2l0aW9uU3RhdGUucmV0cnlEZWxheSk7XG4gICAgfTtcbiAgICBDb25uZWN0aW9uTWFuYWdlci5wcm90b3R5cGUuY2FuY2VsVHJhbnNpdGlvblRpbWVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19NSU5PUiwgJ0Nvbm5lY3Rpb25NYW5hZ2VyLmNhbmNlbFRyYW5zaXRpb25UaW1lcigpJywgJycpO1xuICAgICAgICBpZiAodGhpcy50cmFuc2l0aW9uVGltZXIpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRyYW5zaXRpb25UaW1lcik7XG4gICAgICAgICAgICB0aGlzLnRyYW5zaXRpb25UaW1lciA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENvbm5lY3Rpb25NYW5hZ2VyLnByb3RvdHlwZS5zdGFydFN1c3BlbmRUaW1lciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKHRoaXMuc3VzcGVuZFRpbWVyKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLnN1c3BlbmRUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKF90aGlzLnN1c3BlbmRUaW1lcikge1xuICAgICAgICAgICAgICAgIF90aGlzLnN1c3BlbmRUaW1lciA9IG51bGw7XG4gICAgICAgICAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlOT1IsICdDb25uZWN0aW9uTWFuYWdlciBzdXNwZW5kIHRpbWVyIGV4cGlyZWQnLCAncmVxdWVzdGluZyBuZXcgc3RhdGU6IHN1c3BlbmRlZCcpO1xuICAgICAgICAgICAgICAgIF90aGlzLnN0YXRlcy5jb25uZWN0aW5nLmZhaWxTdGF0ZSA9ICdzdXNwZW5kZWQnO1xuICAgICAgICAgICAgICAgIF90aGlzLm5vdGlmeVN0YXRlKHsgc3RhdGU6ICdzdXNwZW5kZWQnIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCB0aGlzLmNvbm5lY3Rpb25TdGF0ZVR0bCk7XG4gICAgfTtcbiAgICBDb25uZWN0aW9uTWFuYWdlci5wcm90b3R5cGUuY2hlY2tTdXNwZW5kVGltZXIgPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgaWYgKHN0YXRlICE9PSAnZGlzY29ubmVjdGVkJyAmJiBzdGF0ZSAhPT0gJ3N1c3BlbmRlZCcgJiYgc3RhdGUgIT09ICdjb25uZWN0aW5nJylcbiAgICAgICAgICAgIHRoaXMuY2FuY2VsU3VzcGVuZFRpbWVyKCk7XG4gICAgfTtcbiAgICBDb25uZWN0aW9uTWFuYWdlci5wcm90b3R5cGUuY2FuY2VsU3VzcGVuZFRpbWVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnN0YXRlcy5jb25uZWN0aW5nLmZhaWxTdGF0ZSA9ICdkaXNjb25uZWN0ZWQnO1xuICAgICAgICBpZiAodGhpcy5zdXNwZW5kVGltZXIpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnN1c3BlbmRUaW1lcik7XG4gICAgICAgICAgICB0aGlzLnN1c3BlbmRUaW1lciA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENvbm5lY3Rpb25NYW5hZ2VyLnByb3RvdHlwZS5zdGFydFJldHJ5VGltZXIgPSBmdW5jdGlvbiAoaW50ZXJ2YWwpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5yZXRyeVRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19NSU5PUiwgJ0Nvbm5lY3Rpb25NYW5hZ2VyIHJldHJ5IHRpbWVyIGV4cGlyZWQnLCAncmV0cnlpbmcnKTtcbiAgICAgICAgICAgIF90aGlzLnJldHJ5VGltZXIgPSBudWxsO1xuICAgICAgICAgICAgX3RoaXMucmVxdWVzdFN0YXRlKHsgc3RhdGU6ICdjb25uZWN0aW5nJyB9KTtcbiAgICAgICAgfSwgaW50ZXJ2YWwpO1xuICAgIH07XG4gICAgQ29ubmVjdGlvbk1hbmFnZXIucHJvdG90eXBlLmNhbmNlbFJldHJ5VGltZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnJldHJ5VGltZXIpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnJldHJ5VGltZXIpO1xuICAgICAgICAgICAgdGhpcy5yZXRyeVRpbWVyID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQ29ubmVjdGlvbk1hbmFnZXIucHJvdG90eXBlLm5vdGlmeVN0YXRlID0gZnVuY3Rpb24gKGluZGljYXRlZCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICB2YXIgc3RhdGUgPSBpbmRpY2F0ZWQuc3RhdGU7XG4gICAgICAgIC8qIFdlIHJldHJ5IGltbWVkaWF0ZWx5IGlmOlxuICAgICAgICAgKiAtIHNvbWV0aGluZyBkaXNjb25uZWN0cyB1cyB3aGlsZSB3ZSdyZSBjb25uZWN0ZWQsIG9yXG4gICAgICAgICAqIC0gYSB2aWFibGUgKGJ1dCBub3QgeWV0IGFjdGl2ZSkgdHJhbnNwb3J0IGZhaWxzIGR1ZSB0byBhIHRva2VuIGVycm9yIChzb1xuICAgICAgICAgKiAgIHRoaXMuZXJyb3JSZWFzb24gd2lsbCBiZSBzZXQsIGFuZCBzdGFydENvbm5lY3Qgd2lsbCBkbyBhIGZvcmNlZFxuICAgICAgICAgKiAgIGF1dGhvcml6ZSkuIElmIHRoaXMuZXJyb3JSZWFzb24gaXMgYWxyZWFkeSBzZXQgKHRvIGEgdG9rZW4gZXJyb3IpLFxuICAgICAgICAgKiAgIHRoZW4gdGhlcmUgaGFzIGJlZW4gYXQgbGVhc3Qgb25lIHByZXZpb3VzIGF0dGVtcHQgdG8gY29ubmVjdCB0aGF0IGFsc29cbiAgICAgICAgICogICBmYWlsZWQgZm9yIGEgdG9rZW4gZXJyb3IsIHNvIGJ5IFJUTjE0YiB3ZSBnbyB0byBESVNDT05ORUNURUQgYW5kIHdhaXRcbiAgICAgICAgICogICBiZWZvcmUgdHJ5aW5nIGFnYWluICovXG4gICAgICAgIHZhciByZXRyeUltbWVkaWF0ZWx5ID0gc3RhdGUgPT09ICdkaXNjb25uZWN0ZWQnICYmXG4gICAgICAgICAgICAodGhpcy5zdGF0ZSA9PT0gdGhpcy5zdGF0ZXMuY29ubmVjdGVkIHx8XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9PT0gdGhpcy5zdGF0ZXMuc3luY2hyb25pemluZyB8fFxuICAgICAgICAgICAgICAgIGluZGljYXRlZC5yZXRyeUltbWVkaWF0ZWx5IHx8XG4gICAgICAgICAgICAgICAgKHRoaXMuc3RhdGUgPT09IHRoaXMuc3RhdGVzLmNvbm5lY3RpbmcgJiZcbiAgICAgICAgICAgICAgICAgICAgaW5kaWNhdGVkLmVycm9yICYmXG4gICAgICAgICAgICAgICAgICAgIGF1dGhfMS5kZWZhdWx0LmlzVG9rZW5FcnIoaW5kaWNhdGVkLmVycm9yKSAmJlxuICAgICAgICAgICAgICAgICAgICAhKHRoaXMuZXJyb3JSZWFzb24gJiYgYXV0aF8xLmRlZmF1bHQuaXNUb2tlbkVycih0aGlzLmVycm9yUmVhc29uKSkpKTtcbiAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlOT1IsICdDb25uZWN0aW9uTWFuYWdlci5ub3RpZnlTdGF0ZSgpJywgJ25ldyBzdGF0ZTogJyArIHN0YXRlICsgKHJldHJ5SW1tZWRpYXRlbHkgPyAnOyB3aWxsIHJldHJ5IGNvbm5lY3Rpb24gaW1tZWRpYXRlbHknIDogJycpKTtcbiAgICAgICAgLyogZG8gbm90aGluZyBpZiB3ZSdyZSBhbHJlYWR5IGluIHRoZSBpbmRpY2F0ZWQgc3RhdGUgKi9cbiAgICAgICAgaWYgKHN0YXRlID09IHRoaXMuc3RhdGUuc3RhdGUpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIC8qIGtpbGwgdGltZXJzIChwb3NzaWJseSBleGNlcHRpbmcgc3VzcGVuZCB0aW1lciBkZXBlbmRpbmcgb24gdGhlIG5vdGlmaWVkXG4gICAgICAgICAqIHN0YXRlKSwgYXMgdGhlc2UgYXJlIHN1cGVyc2VkZWQgYnkgdGhpcyBub3RpZmljYXRpb24gKi9cbiAgICAgICAgdGhpcy5jYW5jZWxUcmFuc2l0aW9uVGltZXIoKTtcbiAgICAgICAgdGhpcy5jYW5jZWxSZXRyeVRpbWVyKCk7XG4gICAgICAgIHRoaXMuY2hlY2tTdXNwZW5kVGltZXIoaW5kaWNhdGVkLnN0YXRlKTtcbiAgICAgICAgaWYgKHN0YXRlID09PSAnc3VzcGVuZGVkJyB8fCBzdGF0ZSA9PT0gJ2Nvbm5lY3RlZCcpIHtcbiAgICAgICAgICAgIHRoaXMuZGlzY29ubmVjdGVkUmV0cnlDb3VudCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgLyogZG8gbm90aGluZyBpZiB3ZSdyZSB1bmFibGUgdG8gbW92ZSBmcm9tIHRoZSBjdXJyZW50IHN0YXRlICovXG4gICAgICAgIGlmICh0aGlzLnN0YXRlLnRlcm1pbmFsKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAvKiBwcm9jZXNzIG5ldyBzdGF0ZSAqL1xuICAgICAgICB2YXIgbmV3U3RhdGUgPSB0aGlzLnN0YXRlc1tpbmRpY2F0ZWQuc3RhdGVdO1xuICAgICAgICB2YXIgcmV0cnlEZWxheSA9IG5ld1N0YXRlLnJldHJ5RGVsYXk7XG4gICAgICAgIGlmIChuZXdTdGF0ZS5zdGF0ZSA9PT0gJ2Rpc2Nvbm5lY3RlZCcpIHtcbiAgICAgICAgICAgIHRoaXMuZGlzY29ubmVjdGVkUmV0cnlDb3VudCsrO1xuICAgICAgICAgICAgcmV0cnlEZWxheSA9IFV0aWxzLmdldFJldHJ5VGltZShuZXdTdGF0ZS5yZXRyeURlbGF5LCB0aGlzLmRpc2Nvbm5lY3RlZFJldHJ5Q291bnQpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjaGFuZ2UgPSBuZXcgY29ubmVjdGlvbnN0YXRlY2hhbmdlXzEuZGVmYXVsdCh0aGlzLnN0YXRlLnN0YXRlLCBuZXdTdGF0ZS5zdGF0ZSwgcmV0cnlEZWxheSwgaW5kaWNhdGVkLmVycm9yIHx8ICgoX2IgPSAoX2EgPSBjb25uZWN0aW9uZXJyb3JzXzEuZGVmYXVsdClbbmV3U3RhdGUuc3RhdGVdKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSkpKTtcbiAgICAgICAgaWYgKHJldHJ5SW1tZWRpYXRlbHkpIHtcbiAgICAgICAgICAgIHZhciBhdXRvUmVjb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5zdGF0ZSA9PT0gX3RoaXMuc3RhdGVzLmRpc2Nvbm5lY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5sYXN0QXV0b1JlY29ubmVjdEF0dGVtcHQgPSBVdGlscy5ub3coKTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMucmVxdWVzdFN0YXRlKHsgc3RhdGU6ICdjb25uZWN0aW5nJyB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFyIHNpbmNlTGFzdCA9IHRoaXMubGFzdEF1dG9SZWNvbm5lY3RBdHRlbXB0ICYmIFV0aWxzLm5vdygpIC0gdGhpcy5sYXN0QXV0b1JlY29ubmVjdEF0dGVtcHQgKyAxO1xuICAgICAgICAgICAgaWYgKHNpbmNlTGFzdCAmJiBzaW5jZUxhc3QgPCAxMDAwKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlDUk8sICdDb25uZWN0aW9uTWFuYWdlci5ub3RpZnlTdGF0ZSgpJywgJ0xhc3QgcmVjb25uZWN0IGF0dGVtcHQgd2FzIG9ubHkgJyArXG4gICAgICAgICAgICAgICAgICAgIHNpbmNlTGFzdCArXG4gICAgICAgICAgICAgICAgICAgICdtcyBhZ28sIHdhaXRpbmcgYW5vdGhlciAnICtcbiAgICAgICAgICAgICAgICAgICAgKDEwMDAgLSBzaW5jZUxhc3QpICtcbiAgICAgICAgICAgICAgICAgICAgJ21zIGJlZm9yZSB0cnlpbmcgYWdhaW4nKTtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGF1dG9SZWNvbm5lY3QsIDEwMDAgLSBzaW5jZUxhc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcGxhdGZvcm1fMS5kZWZhdWx0LkNvbmZpZy5uZXh0VGljayhhdXRvUmVjb25uZWN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzdGF0ZSA9PT0gJ2Rpc2Nvbm5lY3RlZCcgfHwgc3RhdGUgPT09ICdzdXNwZW5kZWQnKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0UmV0cnlUaW1lcihyZXRyeURlbGF5KTtcbiAgICAgICAgfVxuICAgICAgICAvKiBJZiBnb2luZyBpbnRvIGRpc2Nvbm5lY3Qvc3VzcGVuZGVkIChhbmQgbm90IHJldHJ5aW5nIGltbWVkaWF0ZWx5KSwgb3IgYVxuICAgICAgICAgKiB0ZXJtaW5hbCBzdGF0ZSwgZW5zdXJlIHRoZXJlIGFyZSBubyBvcnBoYW5lZCB0cmFuc3BvcnRzIGhhbmdpbmcgYXJvdW5kLiAqL1xuICAgICAgICBpZiAoKHN0YXRlID09PSAnZGlzY29ubmVjdGVkJyAmJiAhcmV0cnlJbW1lZGlhdGVseSkgfHwgc3RhdGUgPT09ICdzdXNwZW5kZWQnIHx8IG5ld1N0YXRlLnRlcm1pbmFsKSB7XG4gICAgICAgICAgICAvKiBXYWl0IHRpbGwgdGhlIG5leHQgdGljayBzbyB0aGUgY29ubmVjdGlvbiBzdGF0ZSBjaGFuZ2UgaXMgZW5hY3RlZCxcbiAgICAgICAgICAgICAqIHNvIGFib3J0aW5nIHRyYW5zcG9ydHMgZG9lc24ndCB0cmlnZ2VyIHJlZHVuZGFudCBzdGF0ZSBjaGFuZ2VzICovXG4gICAgICAgICAgICBwbGF0Zm9ybV8xLmRlZmF1bHQuQ29uZmlnLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5kaXNjb25uZWN0QWxsVHJhbnNwb3J0cygpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXRlID09ICdjb25uZWN0ZWQnICYmICF0aGlzLmFjdGl2ZVByb3RvY29sKSB7XG4gICAgICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19FUlJPUiwgJ0Nvbm5lY3Rpb25NYW5hZ2VyLm5vdGlmeVN0YXRlKCknLCAnQnJva2VuIGludmFyaWFudDogYXR0ZW1wdGVkIHRvIGdvIGludG8gY29ubmVjdGVkIHN0YXRlLCBidXQgdGhlcmUgaXMgbm8gYWN0aXZlIHByb3RvY29sJyk7XG4gICAgICAgIH1cbiAgICAgICAgLyogaW1wbGVtZW50IHRoZSBjaGFuZ2UgYW5kIG5vdGlmeSAqL1xuICAgICAgICB0aGlzLmVuYWN0U3RhdGVDaGFuZ2UoY2hhbmdlKTtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuc2VuZEV2ZW50cykge1xuICAgICAgICAgICAgdGhpcy5zZW5kUXVldWVkTWVzc2FnZXMoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghdGhpcy5zdGF0ZS5xdWV1ZUV2ZW50cykge1xuICAgICAgICAgICAgdGhpcy5yZWFsdGltZS5jaGFubmVscy5wcm9wb2dhdGVDb25uZWN0aW9uSW50ZXJydXB0aW9uKHN0YXRlLCBjaGFuZ2UucmVhc29uKTtcbiAgICAgICAgICAgIHRoaXMuZmFpbFF1ZXVlZE1lc3NhZ2VzKGNoYW5nZS5yZWFzb24pOyAvLyBSVE43Y1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDb25uZWN0aW9uTWFuYWdlci5wcm90b3R5cGUucmVxdWVzdFN0YXRlID0gZnVuY3Rpb24gKHJlcXVlc3QpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgdmFyIHN0YXRlID0gcmVxdWVzdC5zdGF0ZTtcbiAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlOT1IsICdDb25uZWN0aW9uTWFuYWdlci5yZXF1ZXN0U3RhdGUoKScsICdyZXF1ZXN0ZWQgc3RhdGU6ICcgKyBzdGF0ZSArICc7IGN1cnJlbnQgc3RhdGU6ICcgKyB0aGlzLnN0YXRlLnN0YXRlKTtcbiAgICAgICAgaWYgKHN0YXRlID09IHRoaXMuc3RhdGUuc3RhdGUpXG4gICAgICAgICAgICByZXR1cm47IC8qIHNpbGVudGx5IGRvIG5vdGhpbmcgKi9cbiAgICAgICAgLyoga2lsbCBydW5uaW5nIHRpbWVycywgYXMgdGhpcyByZXF1ZXN0IHN1cGVyc2VkZXMgdGhlbSAqL1xuICAgICAgICB0aGlzLmNhbmNlbFRyYW5zaXRpb25UaW1lcigpO1xuICAgICAgICB0aGlzLmNhbmNlbFJldHJ5VGltZXIoKTtcbiAgICAgICAgLyogZm9yIHN1c3BlbmQgdGltZXIgY2hlY2sgcmF0aGVyIHRoYW4gY2FuY2VsIC0tIGVnIHJlcXVlc3RpbmcgYSBjb25uZWN0aW5nXG4gICAgICAgICAqIHN0YXRlIHNob3VsZCBub3QgcmVzZXQgdGhlIHN1c3BlbmQgdGltZXIgKi9cbiAgICAgICAgdGhpcy5jaGVja1N1c3BlbmRUaW1lcihzdGF0ZSk7XG4gICAgICAgIGlmIChzdGF0ZSA9PSAnY29ubmVjdGluZycgJiYgdGhpcy5zdGF0ZS5zdGF0ZSA9PSAnY29ubmVjdGVkJylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaWYgKHN0YXRlID09ICdjbG9zaW5nJyAmJiB0aGlzLnN0YXRlLnN0YXRlID09ICdjbG9zZWQnKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgbmV3U3RhdGUgPSB0aGlzLnN0YXRlc1tzdGF0ZV0sIGNoYW5nZSA9IG5ldyBjb25uZWN0aW9uc3RhdGVjaGFuZ2VfMS5kZWZhdWx0KHRoaXMuc3RhdGUuc3RhdGUsIG5ld1N0YXRlLnN0YXRlLCBudWxsLCByZXF1ZXN0LmVycm9yIHx8ICgoX2IgPSAoX2EgPSBjb25uZWN0aW9uZXJyb3JzXzEuZGVmYXVsdClbbmV3U3RhdGUuc3RhdGVdKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSkpKTtcbiAgICAgICAgdGhpcy5lbmFjdFN0YXRlQ2hhbmdlKGNoYW5nZSk7XG4gICAgICAgIGlmIChzdGF0ZSA9PSAnY29ubmVjdGluZycpIHtcbiAgICAgICAgICAgIHBsYXRmb3JtXzEuZGVmYXVsdC5Db25maWcubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF90aGlzLnN0YXJ0Q29ubmVjdCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXRlID09ICdjbG9zaW5nJykge1xuICAgICAgICAgICAgdGhpcy5jbG9zZUltcGwoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQ29ubmVjdGlvbk1hbmFnZXIucHJvdG90eXBlLnN0YXJ0Q29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUgIT09IHRoaXMuc3RhdGVzLmNvbm5lY3RpbmcpIHtcbiAgICAgICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01JTk9SLCAnQ29ubmVjdGlvbk1hbmFnZXIuc3RhcnRDb25uZWN0KCknLCAnTXVzdCBiZSBpbiBjb25uZWN0aW5nIHN0YXRlIHRvIGNvbm5lY3QsIGJ1dCB3YXMgJyArIHRoaXMuc3RhdGUuc3RhdGUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBhdXRoID0gdGhpcy5yZWFsdGltZS5hdXRoO1xuICAgICAgICAvKiBUaGUgcG9pbnQgb2YgdGhlIGNvbm5lY3RDb3VudGVyIG1lY2hhbmlzbSBpcyB0byBlbnN1cmUgdGhhdCB0aGVcbiAgICAgICAgICogY29ubmVjdGlvbiBwcm9jZWR1cmUgY2FuIGJlIGNhbmNlbGxlZC4gV2Ugd2FudCBkaXNjb25uZWN0QWxsVHJhbnNwb3J0c1xuICAgICAgICAgKiB0byBiZSBhYmxlIHRvIHN0b3AgYW55IGluLXByb2dyZXNzIGNvbm5lY3Rpb24sIGV2ZW4gYmVmb3JlIGl0IGdldHMgdG9cbiAgICAgICAgICogdGhlIHN0YWdlIG9mIGhhdmluZyBhIHBlbmRpbmcgKG9yIGV2ZW4gYSBwcm9wb3NlZCkgdHJhbnNwb3J0IHRoYXQgaXQgY2FuXG4gICAgICAgICAqIGRpc3Bvc2UoKSBvZi4gU28gd2UgY2hlY2sgdGhhdCBpdCdzIHN0aWxsIGN1cnJlbnQgYWZ0ZXIgYW55IGFzeW5jIHN0YWdlLFxuICAgICAgICAgKiB1cCB1bnRpbCB0aGUgc3RhZ2UgdGhhdCBpcyBzeW5jaHJvbm91cyB3aXRoIGluc3RhbnRpYXRpbmcgYSB0cmFuc3BvcnQgKi9cbiAgICAgICAgdmFyIGNvbm5lY3RDb3VudCA9ICsrdGhpcy5jb25uZWN0Q291bnRlcjtcbiAgICAgICAgdmFyIGNvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5jaGVja0Nvbm5lY3Rpb25TdGF0ZUZyZXNobmVzcygpO1xuICAgICAgICAgICAgX3RoaXMuZ2V0VHJhbnNwb3J0UGFyYW1zKGZ1bmN0aW9uICh0cmFuc3BvcnRQYXJhbXMpIHtcbiAgICAgICAgICAgICAgICBpZiAodHJhbnNwb3J0UGFyYW1zLm1vZGUgPT09ICdyZWNvdmVyJyAmJiB0cmFuc3BvcnRQYXJhbXMub3B0aW9ucy5yZWNvdmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZWNvdmVyeUNvbnRleHQgPSBkZWNvZGVSZWNvdmVyeUtleSh0cmFuc3BvcnRQYXJhbXMub3B0aW9ucy5yZWNvdmVyKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlY292ZXJ5Q29udGV4dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMucmVhbHRpbWUuY2hhbm5lbHMucmVjb3ZlckNoYW5uZWxzKHJlY292ZXJ5Q29udGV4dC5jaGFubmVsU2VyaWFscyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGNvbm5lY3RDb3VudCAhPT0gX3RoaXMuY29ubmVjdENvdW50ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfdGhpcy5jb25uZWN0SW1wbCh0cmFuc3BvcnRQYXJhbXMsIGNvbm5lY3RDb3VudCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlOT1IsICdDb25uZWN0aW9uTWFuYWdlci5zdGFydENvbm5lY3QoKScsICdzdGFydGluZyBjb25uZWN0aW9uJyk7XG4gICAgICAgIHRoaXMuc3RhcnRTdXNwZW5kVGltZXIoKTtcbiAgICAgICAgdGhpcy5zdGFydFRyYW5zaXRpb25UaW1lcih0aGlzLnN0YXRlcy5jb25uZWN0aW5nKTtcbiAgICAgICAgaWYgKGF1dGgubWV0aG9kID09PSAnYmFzaWMnKSB7XG4gICAgICAgICAgICBjb25uZWN0KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgYXV0aENiID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgIGlmIChjb25uZWN0Q291bnQgIT09IF90aGlzLmNvbm5lY3RDb3VudGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5hY3RPbkVycm9yRnJvbUF1dGhvcml6ZShlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29ubmVjdCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAodGhpcy5lcnJvclJlYXNvbiAmJiBhdXRoXzEuZGVmYXVsdC5pc1Rva2VuRXJyKHRoaXMuZXJyb3JSZWFzb24pKSB7XG4gICAgICAgICAgICAgICAgLyogRm9yY2UgYSByZWZldGNoIG9mIGEgbmV3IHRva2VuICovXG4gICAgICAgICAgICAgICAgYXV0aC5fZm9yY2VOZXdUb2tlbihudWxsLCBudWxsLCBhdXRoQ2IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgYXV0aC5fZW5zdXJlVmFsaWRBdXRoQ3JlZGVudGlhbHMoZmFsc2UsIGF1dGhDYik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFRoZXJlIGFyZSB0aHJlZSBzdGFnZXMgaW4gY29ubmVjdGluZzpcbiAgICAgKiAtIHByZWZlcmVuY2U6IGlmIHRoZXJlIGlzIGEgY2FjaGVkIHRyYW5zcG9ydCBwcmVmZXJlbmNlLCB3ZSB0cnkgdG8gY29ubmVjdFxuICAgICAqICAgb24gdGhhdC4gSWYgdGhhdCBmYWlscyBvciB0aW1lcyBvdXQgd2UgYWJvcnQgdGhlIGF0dGVtcHQsIHJlbW92ZSB0aGVcbiAgICAgKiAgIHByZWZlcmVuY2UgYW5kIGZhbGwgYmFjayB0byBiYXNlLiBJZiBpdCBzdWNjZWVkcywgd2UgdHJ5IHVwZ3JhZGluZyBpdCBpZlxuICAgICAqICAgbmVlZGVkICh3aWxsIG9ubHkgYmUgaW4gdGhlIGNhc2Ugd2hlcmUgdGhlIHByZWZlcmVuY2UgaXMgeGhycyBhbmQgdGhlXG4gICAgICogICBicm93c2VyIHN1cHBvcnRzIHdzKS5cbiAgICAgKiAtIGJhc2U6IHdlIHRyeSB0byBjb25uZWN0IHdpdGggdGhlIGJlc3QgdHJhbnNwb3J0IHRoYXQgd2UgdGhpbmsgd2lsbFxuICAgICAqICAgbmV2ZXIgZmFpbCBmb3IgdGhpcyBicm93c2VyICh1c3VhbGx5IHRoaXMgaXMgeGhyX3BvbGxpbmc7IGZvciB2ZXJ5IG9sZFxuICAgICAqICAgYnJvd3NlcnMgd2lsbCBiZSBqc29ucCwgZm9yIG5vZGUgd2lsbCBiZSBjb21ldCkuIElmIGl0IGRvZXNuJ3Qgd29yaywgd2VcbiAgICAgKiAgIHRyeSBmYWxsYmFjayBob3N0cy5cbiAgICAgKiAtIHVwZ3JhZGU6IGdpdmVuIGEgY29ubmVjdGVkIHRyYW5zcG9ydCwgd2Ugc2VlIGlmIHRoZXJlIGFyZSBhbnkgYmV0dGVyXG4gICAgICogICBvbmVzLCBhbmQgaWYgc28sIHRyeSB0byB1cGdyYWRlIHRvIHRoZW0uXG4gICAgICpcbiAgICAgKiBjb25uZWN0SW1wbCB3b3JrcyBvdXQgd2hhdCBzdGFnZSB5b3UncmUgYXQgKHdoaWNoIGlzIHB1cmVseSBhIGZ1bmN0aW9uIG9mXG4gICAgICogdGhlIGN1cnJlbnQgY29ubmVjdGlvbiBzdGF0ZSBhbmQgd2hldGhlciB0aGVyZSBhcmUgYW55IHN0b3JlZCBwcmVmZXJlbmNlcyksXG4gICAgICogYW5kIGRpc3BhdGNoZXMgYWNjb3JkaW5nbHkuIEFmdGVyIGEgdHJhbnNwb3J0IGhhcyBiZWVuIHNldCBwZW5kaW5nLFxuICAgICAqIHRyeUFUcmFuc3BvcnQgY2FsbHMgY29ubmVjdEltcGwgdG8gc2VlIGlmIHRoZXJlJ3MgYW5vdGhlciBzdGFnZSB0byBiZSBkb25lLlxuICAgICAqICovXG4gICAgQ29ubmVjdGlvbk1hbmFnZXIucHJvdG90eXBlLmNvbm5lY3RJbXBsID0gZnVuY3Rpb24gKHRyYW5zcG9ydFBhcmFtcywgY29ubmVjdENvdW50KSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IHRoaXMuc3RhdGUuc3RhdGU7XG4gICAgICAgIGlmIChzdGF0ZSAhPT0gdGhpcy5zdGF0ZXMuY29ubmVjdGluZy5zdGF0ZSAmJiBzdGF0ZSAhPT0gdGhpcy5zdGF0ZXMuY29ubmVjdGVkLnN0YXRlKSB7XG4gICAgICAgICAgICAvKiBPbmx5IGtlZXAgdHJ5aW5nIGFzIGxvbmcgYXMgaW4gdGhlICdjb25uZWN0aW5nJyBzdGF0ZSAob3IgJ2Nvbm5lY3RlZCdcbiAgICAgICAgICAgICAqIGZvciB1cGdyYWRpbmcpLiBBbnkgb3BlcmF0aW9uIGNhbiBwdXQgdXMgaW50byAnZGlzY29ubmVjdGVkJyB0byBjYW5jZWxcbiAgICAgICAgICAgICAqIGNvbm5lY3Rpb24gYXR0ZW1wdHMgYW5kIHdhaXQgYmVmb3JlIHJldHJ5aW5nLCBvciAnZmFpbGVkJyB0byBmYWlsLiAqL1xuICAgICAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlOT1IsICdDb25uZWN0aW9uTWFuYWdlci5jb25uZWN0SW1wbCgpJywgJ011c3QgYmUgaW4gY29ubmVjdGluZyBzdGF0ZSB0byBjb25uZWN0IChvciBjb25uZWN0ZWQgdG8gdXBncmFkZSksIGJ1dCB3YXMgJyArIHN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLnBlbmRpbmdUcmFuc3BvcnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlOT1IsICdDb25uZWN0aW9uTWFuYWdlci5jb25uZWN0SW1wbCgpJywgJ1RyYW5zcG9ydHMgJyArIHRoaXMucGVuZGluZ1RyYW5zcG9ydHNbMF0udG9TdHJpbmcoKSArICcgY3VycmVudGx5IHBlbmRpbmc7IHRha2luZyBubyBhY3Rpb24nKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzdGF0ZSA9PSB0aGlzLnN0YXRlcy5jb25uZWN0ZWQuc3RhdGUpIHtcbiAgICAgICAgICAgIHRoaXMudXBncmFkZUlmTmVlZGVkKHRyYW5zcG9ydFBhcmFtcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy50cmFuc3BvcnRzLmxlbmd0aCA+IDEgJiYgdGhpcy5nZXRUcmFuc3BvcnRQcmVmZXJlbmNlKCkpIHtcbiAgICAgICAgICAgIHRoaXMuY29ubmVjdFByZWZlcmVuY2UodHJhbnNwb3J0UGFyYW1zLCBjb25uZWN0Q291bnQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jb25uZWN0QmFzZSh0cmFuc3BvcnRQYXJhbXMsIGNvbm5lY3RDb3VudCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENvbm5lY3Rpb25NYW5hZ2VyLnByb3RvdHlwZS5jb25uZWN0UHJlZmVyZW5jZSA9IGZ1bmN0aW9uICh0cmFuc3BvcnRQYXJhbXMsIGNvbm5lY3RDb3VudCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgcHJlZmVyZW5jZSA9IHRoaXMuZ2V0VHJhbnNwb3J0UHJlZmVyZW5jZSgpO1xuICAgICAgICB2YXIgcHJlZmVyZW5jZVRpbWVvdXRFeHBpcmVkID0gZmFsc2U7XG4gICAgICAgIGlmICghVXRpbHMuYXJySW4odGhpcy50cmFuc3BvcnRzLCBwcmVmZXJlbmNlKSkge1xuICAgICAgICAgICAgdGhpcy51bnBlcnNpc3RUcmFuc3BvcnRQcmVmZXJlbmNlKCk7XG4gICAgICAgICAgICB0aGlzLmNvbm5lY3RJbXBsKHRyYW5zcG9ydFBhcmFtcywgY29ubmVjdENvdW50KTtcbiAgICAgICAgfVxuICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19NSU5PUiwgJ0Nvbm5lY3Rpb25NYW5hZ2VyLmNvbm5lY3RQcmVmZXJlbmNlKCknLCAnVHJ5aW5nIHRvIGNvbm5lY3Qgd2l0aCBzdG9yZWQgdHJhbnNwb3J0IHByZWZlcmVuY2UgJyArIHByZWZlcmVuY2UpO1xuICAgICAgICB2YXIgcHJlZmVyZW5jZVRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHByZWZlcmVuY2VUaW1lb3V0RXhwaXJlZCA9IHRydWU7XG4gICAgICAgICAgICBpZiAoIShfdGhpcy5zdGF0ZS5zdGF0ZSA9PT0gX3RoaXMuc3RhdGVzLmNvbm5lY3RlZC5zdGF0ZSkpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19NSU5PUiwgJ0Nvbm5lY3Rpb25NYW5hZ2VyLmNvbm5lY3RQcmVmZXJlbmNlKCknLCAnU2hvcnRjaXJjdWl0IGNvbm5lY3Rpb24gYXR0ZW1wdCB3aXRoICcgKyBwcmVmZXJlbmNlICsgJyBmYWlsZWQ7IGNsZWFyaW5nIHByZWZlcmVuY2UgYW5kIHRyeWluZyBmcm9tIHNjcmF0Y2gnKTtcbiAgICAgICAgICAgICAgICAvKiBBYm9ydCBhbGwgY29ubmVjdGlvbiBhdHRlbXB0cy4gKFRoaXMgYWxzbyBkaXNjb25uZWN0cyB0aGUgYWN0aXZlXG4gICAgICAgICAgICAgICAgICogcHJvdG9jb2wsIGJ1dCBub25lIGV4aXN0cyBpZiB3ZSdyZSBub3QgaW4gdGhlIGNvbm5lY3RlZCBzdGF0ZSkgKi9cbiAgICAgICAgICAgICAgICBfdGhpcy5kaXNjb25uZWN0QWxsVHJhbnNwb3J0cygpO1xuICAgICAgICAgICAgICAgIC8qIEJlIHF1aXRlIGFncmVzc2l2ZSBhYm91dCBjbGVhcmluZyB0aGUgc3RvcmVkIHByZWZlcmVuY2UgaWYgZXZlciBpdCBkb2Vzbid0IHdvcmsgKi9cbiAgICAgICAgICAgICAgICBfdGhpcy51bnBlcnNpc3RUcmFuc3BvcnRQcmVmZXJlbmNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfdGhpcy5jb25uZWN0SW1wbCh0cmFuc3BvcnRQYXJhbXMsIGNvbm5lY3RDb3VudCk7XG4gICAgICAgIH0sIHRoaXMub3B0aW9ucy50aW1lb3V0cy5wcmVmZXJlbmNlQ29ubmVjdFRpbWVvdXQpO1xuICAgICAgICAvKiBGb3IgY29ubmVjdFByZWZlcmVuY2UsIGp1c3QgdXNlIHRoZSBtYWluIGhvc3QuIElmIGhvc3QgZmFsbGJhY2sgaXMgbmVlZGVkLCBkbyBpdCBpbiBjb25uZWN0QmFzZS5cbiAgICAgICAgICogVGhlIHdzdHJhbnNwb3J0IGl0IHdpbGwgc3Vic3RpdHV0ZSB0aGUgaHR0cGhvc3QgZm9yIGFuIGFwcHJvcHJpYXRlIHdzaG9zdCAqL1xuICAgICAgICB0cmFuc3BvcnRQYXJhbXMuaG9zdCA9IHRoaXMuaHR0cEhvc3RzWzBdO1xuICAgICAgICB0aGlzLnRyeUFUcmFuc3BvcnQodHJhbnNwb3J0UGFyYW1zLCBwcmVmZXJlbmNlLCBmdW5jdGlvbiAoZmF0YWwsIHRyYW5zcG9ydCkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHByZWZlcmVuY2VUaW1lb3V0KTtcbiAgICAgICAgICAgIGlmIChwcmVmZXJlbmNlVGltZW91dEV4cGlyZWQgJiYgdHJhbnNwb3J0KSB7XG4gICAgICAgICAgICAgICAgLyogVmlhYmxlLCBidXQgdG9vIGxhdGUgLSBjb25uZWN0SW1wbCgpIHdpbGwgYWxyZWFkeSBiZSB0cnlpbmdcbiAgICAgICAgICAgICAgICAgKiBjb25uZWN0QmFzZSwgYW5kIHdlIHdlcmVuJ3QgaW4gdXBncmFkZSBtb2RlLiBKdXN0IHJlbW92ZSB0aGVcbiAgICAgICAgICAgICAgICAgKiBvbmNvbm5lY3RlZCBsaXN0ZW5lciBhbmQgZ2V0IHJpZCBvZiBpdCAqL1xuICAgICAgICAgICAgICAgIHRyYW5zcG9ydC5vZmYoKTtcbiAgICAgICAgICAgICAgICB0cmFuc3BvcnQuZGlzY29ubmVjdCgpO1xuICAgICAgICAgICAgICAgIFV0aWxzLmFyckRlbGV0ZVZhbHVlKF90aGlzLnBlbmRpbmdUcmFuc3BvcnRzLCB0cmFuc3BvcnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoIXRyYW5zcG9ydCAmJiAhZmF0YWwpIHtcbiAgICAgICAgICAgICAgICAvKiBQcmVmZXJlbmNlIGZhaWxlZCBpbiBhIHRyYW5zcG9ydC1zcGVjaWZpYyB3YXkuIFRyeSBtb3JlICovXG4gICAgICAgICAgICAgICAgX3RoaXMudW5wZXJzaXN0VHJhbnNwb3J0UHJlZmVyZW5jZSgpO1xuICAgICAgICAgICAgICAgIF90aGlzLmNvbm5lY3RJbXBsKHRyYW5zcG9ydFBhcmFtcywgY29ubmVjdENvdW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qIElmIHN1Y2VlZGVkLCBvciBmYWlsZWQgZmF0YWxseSwgbm90aGluZyB0byBkbyAqL1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFRyeSB0byBlc3RhYmxpc2ggYSB0cmFuc3BvcnQgb24gdGhlIGJhc2UgdHJhbnNwb3J0ICh0aGUgYmVzdCB0cmFuc3BvcnRcbiAgICAgKiBzdWNoIHRoYXQgaWYgaXQgZG9lc24ndCB3b3JrLCBub3RoaW5nIHdpbGwgd29yaykgYXMgZGV0ZXJtaW5lZCB0aHJvdWdoXG4gICAgICogc3RhdGljIGZlYXR1cmUgZGV0ZWN0aW9uLCBjaGVja2luZyBmb3IgbmV0d29yayBjb25uZWN0aXZpdHkgYW5kIHRyeWluZ1xuICAgICAqIGZhbGxiYWNrIGhvc3RzIGlmIGFwcGxpY2FibGUuXG4gICAgICogQHBhcmFtIHRyYW5zcG9ydFBhcmFtc1xuICAgICAqL1xuICAgIENvbm5lY3Rpb25NYW5hZ2VyLnByb3RvdHlwZS5jb25uZWN0QmFzZSA9IGZ1bmN0aW9uICh0cmFuc3BvcnRQYXJhbXMsIGNvbm5lY3RDb3VudCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgZ2l2ZVVwID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgX3RoaXMubm90aWZ5U3RhdGUoeyBzdGF0ZTogX3RoaXMuc3RhdGVzLmNvbm5lY3RpbmcuZmFpbFN0YXRlLCBlcnJvcjogZXJyIH0pO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgY2FuZGlkYXRlSG9zdHMgPSB0aGlzLmh0dHBIb3N0cy5zbGljZSgpO1xuICAgICAgICB2YXIgaG9zdEF0dGVtcHRDYiA9IGZ1bmN0aW9uIChmYXRhbCwgdHJhbnNwb3J0KSB7XG4gICAgICAgICAgICBpZiAoY29ubmVjdENvdW50ICE9PSBfdGhpcy5jb25uZWN0Q291bnRlcikge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdHJhbnNwb3J0ICYmICFmYXRhbCkge1xuICAgICAgICAgICAgICAgIHRyeUZhbGxiYWNrSG9zdHMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlOT1IsICdDb25uZWN0aW9uTWFuYWdlci5jb25uZWN0QmFzZSgpJywgJ1RyeWluZyB0byBjb25uZWN0IHdpdGggYmFzZSB0cmFuc3BvcnQgJyArIHRoaXMuYmFzZVRyYW5zcG9ydCk7XG4gICAgICAgIC8qIGZpcnN0IHRyeSB0byBlc3RhYmxpc2ggYSBjb25uZWN0aW9uIHdpdGggdGhlIHByaW9yaXR5IGhvc3Qgd2l0aCBodHRwIHRyYW5zcG9ydCAqL1xuICAgICAgICB2YXIgaG9zdCA9IGNhbmRpZGF0ZUhvc3RzLnNoaWZ0KCk7XG4gICAgICAgIGlmICghaG9zdCkge1xuICAgICAgICAgICAgZ2l2ZVVwKG5ldyBlcnJvcmluZm9fMS5kZWZhdWx0KCdVbmFibGUgdG8gY29ubmVjdCAobm8gYXZhaWxhYmxlIGhvc3QpJywgODAwMDMsIDQwNCkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRyYW5zcG9ydFBhcmFtcy5ob3N0ID0gaG9zdDtcbiAgICAgICAgLyogdGhpcyBpcyB3aGF0IHdlJ2xsIGJlIGRvaW5nIGlmIHRoZSBhdHRlbXB0IGZvciB0aGUgbWFpbiBob3N0IGZhaWxzICovXG4gICAgICAgIHZhciB0cnlGYWxsYmFja0hvc3RzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLyogaWYgdGhlcmUgYXJlbid0IGFueSBmYWxsYmFjayBob3N0cywgZmFpbCAqL1xuICAgICAgICAgICAgaWYgKCFjYW5kaWRhdGVIb3N0cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBnaXZlVXAobmV3IGVycm9yaW5mb18xLmRlZmF1bHQoJ1VuYWJsZSB0byBjb25uZWN0IChhbmQgbm8gbW9yZSBmYWxsYmFjayBob3N0cyB0byB0cnkpJywgODAwMDMsIDQwNCkpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qIGJlZm9yZSB0cnlpbmcgYW55IGZhbGxiYWNrIChvciBhbnkgcmVtYWluaW5nIGZhbGxiYWNrKSB3ZSBkZWNpZGUgaWZcbiAgICAgICAgICAgICAqIHRoZXJlIGlzIGEgcHJvYmxlbSB3aXRoIHRoZSBhYmx5IGhvc3QsIG9yIHRoZXJlIGlzIGEgZ2VuZXJhbCBjb25uZWN0aXZpdHlcbiAgICAgICAgICAgICAqIHByb2JsZW0gKi9cbiAgICAgICAgICAgIGlmICghX3RoaXMucmVhbHRpbWUuaHR0cC5jaGVja0Nvbm5lY3Rpdml0eSkge1xuICAgICAgICAgICAgICAgIGdpdmVVcChuZXcgZXJyb3JpbmZvXzEuUGFydGlhbEVycm9ySW5mbygnSW50ZXJuYWwgZXJyb3I6IEh0dHAuY2hlY2tDb25uZWN0aXZpdHkgbm90IHNldCcsIG51bGwsIDUwMCkpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF90aGlzLnJlYWx0aW1lLmh0dHAuY2hlY2tDb25uZWN0aXZpdHkoZnVuY3Rpb24gKGVyciwgY29ubmVjdGl2aXR5KSB7XG4gICAgICAgICAgICAgICAgaWYgKGNvbm5lY3RDb3VudCAhPT0gX3RoaXMuY29ubmVjdENvdW50ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvKiB3ZSBrbm93IGVyciB3b24ndCBoYXBwZW4gYnV0IGhhbmRsZSBpdCBoZXJlIGFueXdheSAqL1xuICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2l2ZVVwKGVycik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFjb25uZWN0aXZpdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgLyogdGhlIGludGVybmV0IGlzbid0IHJlYWNoYWJsZSwgc28gZG9uJ3QgdHJ5IHRoZSBmYWxsYmFjayBob3N0cyAqL1xuICAgICAgICAgICAgICAgICAgICBnaXZlVXAobmV3IGVycm9yaW5mb18xLmRlZmF1bHQoJ1VuYWJsZSB0byBjb25uZWN0IChuZXR3b3JrIHVucmVhY2hhYmxlKScsIDgwMDAzLCA0MDQpKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvKiB0aGUgbmV0d29yayBpcyB0aGVyZSwgc28gdGhlcmUncyBhIHByb2JsZW0gd2l0aCB0aGUgbWFpbiBob3N0LCBvclxuICAgICAgICAgICAgICAgICAqIGl0cyBkbnMuIFRyeSB0aGUgZmFsbGJhY2sgaG9zdHMuIFdlIGNvdWxkIHRyeSB0aGVtIHNpbXVsdGFuZW91c2x5IGJ1dFxuICAgICAgICAgICAgICAgICAqIHRoYXQgd291bGQgcG90ZW50aWFsbHkgY2F1c2UgYSBodWdlIHNwaWtlIGluIGxvYWQgb24gdGhlIGxvYWQgYmFsYW5jZXIgKi9cbiAgICAgICAgICAgICAgICB0cmFuc3BvcnRQYXJhbXMuaG9zdCA9IFV0aWxzLmFyclBvcFJhbmRvbUVsZW1lbnQoY2FuZGlkYXRlSG9zdHMpO1xuICAgICAgICAgICAgICAgIF90aGlzLnRyeUFUcmFuc3BvcnQodHJhbnNwb3J0UGFyYW1zLCBfdGhpcy5iYXNlVHJhbnNwb3J0LCBob3N0QXR0ZW1wdENiKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBpZiAodGhpcy5mb3JjZUZhbGxiYWNrSG9zdCAmJiBjYW5kaWRhdGVIb3N0cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMuZm9yY2VGYWxsYmFja0hvc3QgPSBmYWxzZTtcbiAgICAgICAgICAgIHRyeUZhbGxiYWNrSG9zdHMoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRyeUFUcmFuc3BvcnQodHJhbnNwb3J0UGFyYW1zLCB0aGlzLmJhc2VUcmFuc3BvcnQsIGhvc3RBdHRlbXB0Q2IpO1xuICAgIH07XG4gICAgQ29ubmVjdGlvbk1hbmFnZXIucHJvdG90eXBlLmdldFVwZ3JhZGVQb3NzaWJpbGl0aWVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvKiByZXR1cm5zIHRoZSBzdWJzZXQgb2YgdXBncmFkZVRyYW5zcG9ydHMgdG8gdGhlIHJpZ2h0IG9mIHRoZSBjdXJyZW50XG4gICAgICAgICAqIHRyYW5zcG9ydCBpbiB1cGdyYWRlVHJhbnNwb3J0cyAoaWYgaXQncyBpbiB0aGVyZSAtIGlmIG5vdCwgY3VycmVudFNlcmlhbFxuICAgICAgICAgKiB3aWxsIGJlIC0xLCBzbyByZXR1cm4gdXBncmFkZVRyYW5zcG9ydHMuc2xpY2UoMCkgPT0gdXBncmFkZVRyYW5zcG9ydHMgKi9cbiAgICAgICAgdmFyIGN1cnJlbnQgPSB0aGlzLmFjdGl2ZVByb3RvY29sLmdldFRyYW5zcG9ydCgpLnNob3J0TmFtZTtcbiAgICAgICAgdmFyIGN1cnJlbnRTZXJpYWwgPSBVdGlscy5hcnJJbmRleE9mKHRoaXMudXBncmFkZVRyYW5zcG9ydHMsIGN1cnJlbnQpO1xuICAgICAgICByZXR1cm4gdGhpcy51cGdyYWRlVHJhbnNwb3J0cy5zbGljZShjdXJyZW50U2VyaWFsICsgMSk7XG4gICAgfTtcbiAgICBDb25uZWN0aW9uTWFuYWdlci5wcm90b3R5cGUudXBncmFkZUlmTmVlZGVkID0gZnVuY3Rpb24gKHRyYW5zcG9ydFBhcmFtcykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgdXBncmFkZVBvc3NpYmlsaXRpZXMgPSB0aGlzLmdldFVwZ3JhZGVQb3NzaWJpbGl0aWVzKCk7XG4gICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01JTk9SLCAnQ29ubmVjdGlvbk1hbmFnZXIudXBncmFkZUlmTmVlZGVkKCknLCAndXBncmFkZSBwb3NzaWJpbGl0aWVzOiAnICsgcGxhdGZvcm1fMS5kZWZhdWx0LkNvbmZpZy5pbnNwZWN0KHVwZ3JhZGVQb3NzaWJpbGl0aWVzKSk7XG4gICAgICAgIGlmICghdXBncmFkZVBvc3NpYmlsaXRpZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgVXRpbHMuYXJyRm9yRWFjaCh1cGdyYWRlUG9zc2liaWxpdGllcywgZnVuY3Rpb24gKHVwZ3JhZGVUcmFuc3BvcnQpIHtcbiAgICAgICAgICAgIC8qIE5vdGU6IHRoZSB0cmFuc3BvcnQgbWF5IG11dGF0ZSB0aGUgcGFyYW1zLCBzbyBnaXZlIGVhY2ggdHJhbnNwb3J0IGEgZnJlc2ggb25lICovXG4gICAgICAgICAgICB2YXIgdXBncmFkZVRyYW5zcG9ydFBhcmFtcyA9IF90aGlzLmNyZWF0ZVRyYW5zcG9ydFBhcmFtcyh0cmFuc3BvcnRQYXJhbXMuaG9zdCwgJ3VwZ3JhZGUnKTtcbiAgICAgICAgICAgIF90aGlzLnRyeUFUcmFuc3BvcnQodXBncmFkZVRyYW5zcG9ydFBhcmFtcywgdXBncmFkZVRyYW5zcG9ydCwgbm9vcCk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQ29ubmVjdGlvbk1hbmFnZXIucHJvdG90eXBlLmNsb3NlSW1wbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlOT1IsICdDb25uZWN0aW9uTWFuYWdlci5jbG9zZUltcGwoKScsICdjbG9zaW5nIGNvbm5lY3Rpb24nKTtcbiAgICAgICAgdGhpcy5jYW5jZWxTdXNwZW5kVGltZXIoKTtcbiAgICAgICAgdGhpcy5zdGFydFRyYW5zaXRpb25UaW1lcih0aGlzLnN0YXRlcy5jbG9zaW5nKTtcbiAgICAgICAgVXRpbHMuc2FmZUFyckZvckVhY2godGhpcy5wZW5kaW5nVHJhbnNwb3J0cywgZnVuY3Rpb24gKHRyYW5zcG9ydCkge1xuICAgICAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlDUk8sICdDb25uZWN0aW9uTWFuYWdlci5jbG9zZUltcGwoKScsICdDbG9zaW5nIHBlbmRpbmcgdHJhbnNwb3J0OiAnICsgdHJhbnNwb3J0KTtcbiAgICAgICAgICAgIGlmICh0cmFuc3BvcnQpXG4gICAgICAgICAgICAgICAgdHJhbnNwb3J0LmNsb3NlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBVdGlscy5zYWZlQXJyRm9yRWFjaCh0aGlzLnByb3Bvc2VkVHJhbnNwb3J0cywgZnVuY3Rpb24gKHRyYW5zcG9ydCkge1xuICAgICAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlDUk8sICdDb25uZWN0aW9uTWFuYWdlci5jbG9zZUltcGwoKScsICdEaXNwb3Npbmcgb2YgcHJvcG9zZWQgdHJhbnNwb3J0OiAnICsgdHJhbnNwb3J0KTtcbiAgICAgICAgICAgIGlmICh0cmFuc3BvcnQpXG4gICAgICAgICAgICAgICAgdHJhbnNwb3J0LmRpc3Bvc2UoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICh0aGlzLmFjdGl2ZVByb3RvY29sKSB7XG4gICAgICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19NSUNSTywgJ0Nvbm5lY3Rpb25NYW5hZ2VyLmNsb3NlSW1wbCgpJywgJ0Nsb3NpbmcgYWN0aXZlIHRyYW5zcG9ydDogJyArIHRoaXMuYWN0aXZlUHJvdG9jb2wuZ2V0VHJhbnNwb3J0KCkpO1xuICAgICAgICAgICAgdGhpcy5hY3RpdmVQcm90b2NvbC5nZXRUcmFuc3BvcnQoKS5jbG9zZSgpO1xuICAgICAgICB9XG4gICAgICAgIC8qIElmIHRoZXJlIHdhcyBhbiBhY3RpdmUgdHJhbnNwb3J0LCB0aGlzIHdpbGwgcHJvYmFibHkgYmVcbiAgICAgICAgICogcHJlZW1wdGVkIGJ5IHRoZSBub3RpZnlTdGF0ZSBjYWxsIGluIGRlYWN0aXZhdGVUcmFuc3BvcnQgKi9cbiAgICAgICAgdGhpcy5ub3RpZnlTdGF0ZSh7IHN0YXRlOiAnY2xvc2VkJyB9KTtcbiAgICB9O1xuICAgIENvbm5lY3Rpb25NYW5hZ2VyLnByb3RvdHlwZS5vbkF1dGhVcGRhdGVkID0gZnVuY3Rpb24gKHRva2VuRGV0YWlscywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBzd2l0Y2ggKHRoaXMuc3RhdGUuc3RhdGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ2Nvbm5lY3RlZCc6IHtcbiAgICAgICAgICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19NSUNSTywgJ0Nvbm5lY3Rpb25NYW5hZ2VyLm9uQXV0aFVwZGF0ZWQoKScsICdTZW5kaW5nIEFVVEggbWVzc2FnZSBvbiBhY3RpdmUgdHJhbnNwb3J0Jyk7XG4gICAgICAgICAgICAgICAgLyogSWYgdGhlcmUgYXJlIGFueSBwcm9wb3NlZC9wZW5kaW5nIHRyYW5zcG9ydHMgKGVnIGFuIHVwZ3JhZGUgdGhhdFxuICAgICAgICAgICAgICAgICAqIGlzbid0IHlldCBzY2hlZHVsZWQgZm9yIGFjdGl2YXRpb24pIHRoYXQgaGFzbid0IHlldCBzdGFydGVkIHN5bmNpbmcsXG4gICAgICAgICAgICAgICAgICoganVzdCB0byBnZXQgcmlkIG9mIHRoZW0gJiByZXN0YXJ0IHRoZSB1cGdyYWRlIHdpdGggdGhlIG5ldyB0b2tlbiwgdG9cbiAgICAgICAgICAgICAgICAgKiBhdm9pZCBhIHJhY2UgY29uZGl0aW9uLiAoSWYgaXQgaGFzIHN0YXJ0ZWQgc3luY2luZywgdGhlIEFVVEggd2lsbCBiZVxuICAgICAgICAgICAgICAgICAqIHF1ZXVlZCB1bnRpbCB0aGUgdXBncmFkZSBpcyBjb21wbGV0ZSwgc28gZXZlcnl0aGluZydzIGZpbmUpICovXG4gICAgICAgICAgICAgICAgaWYgKCh0aGlzLnBlbmRpbmdUcmFuc3BvcnRzLmxlbmd0aCB8fCB0aGlzLnByb3Bvc2VkVHJhbnNwb3J0cy5sZW5ndGgpICYmXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgIT09IHRoaXMuc3RhdGVzLnN5bmNocm9uaXppbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNjb25uZWN0QWxsVHJhbnNwb3J0cygvKiBleGNlcHRBY3RpdmU6ICovIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdHJhbnNwb3J0UGFyYW1zXzEgPSB0aGlzLmFjdGl2ZVByb3RvY29sLmdldFRyYW5zcG9ydCgpLnBhcmFtcztcbiAgICAgICAgICAgICAgICAgICAgcGxhdGZvcm1fMS5kZWZhdWx0LkNvbmZpZy5uZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuc3RhdGUuc3RhdGUgPT09ICdjb25uZWN0ZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMudXBncmFkZUlmTmVlZGVkKHRyYW5zcG9ydFBhcmFtc18xKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8qIERvIGFueSB0cmFuc3BvcnQtc3BlY2lmaWMgbmV3LXRva2VuIGFjdGlvbiAqL1xuICAgICAgICAgICAgICAgIHZhciBhY3RpdmVUcmFuc3BvcnQgPSAoX2EgPSB0aGlzLmFjdGl2ZVByb3RvY29sKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZ2V0VHJhbnNwb3J0KCk7XG4gICAgICAgICAgICAgICAgaWYgKGFjdGl2ZVRyYW5zcG9ydCAmJiBhY3RpdmVUcmFuc3BvcnQub25BdXRoVXBkYXRlZCkge1xuICAgICAgICAgICAgICAgICAgICBhY3RpdmVUcmFuc3BvcnQub25BdXRoVXBkYXRlZCh0b2tlbkRldGFpbHMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgYXV0aE1zZyA9IHByb3RvY29sbWVzc2FnZV8xLmRlZmF1bHQuZnJvbVZhbHVlcyh7XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbjogYWN0aW9ucy5BVVRILFxuICAgICAgICAgICAgICAgICAgICBhdXRoOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY2Nlc3NUb2tlbjogdG9rZW5EZXRhaWxzLnRva2VuLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMuc2VuZChhdXRoTXNnKTtcbiAgICAgICAgICAgICAgICAvKiBUaGUgYW5zd2VyIHdpbGwgY29tZSBiYWNrIGFzIGVpdGhlciBhIGNvbm5lY3Rpb25kZXRhaWxzIGV2ZW50XG4gICAgICAgICAgICAgICAgICogKHJlYWx0aW1lIHNlbmRzIGEgQ09OTkVDVEVEIHRvIGFja25vd2xlZGdlIHRoZSByZWF1dGgpIG9yIGFcbiAgICAgICAgICAgICAgICAgKiBzdGF0ZWNoYW5nZSB0byBmYWlsZWQgKi9cbiAgICAgICAgICAgICAgICB2YXIgc3VjY2Vzc0xpc3RlbmVyXzEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLm9mZihmYWlsdXJlTGlzdGVuZXJfMSk7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHRva2VuRGV0YWlscyk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB2YXIgZmFpbHVyZUxpc3RlbmVyXzEgPSBmdW5jdGlvbiAoc3RhdGVDaGFuZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlQ2hhbmdlLmN1cnJlbnQgPT09ICdmYWlsZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5vZmYoc3VjY2Vzc0xpc3RlbmVyXzEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMub2ZmKGZhaWx1cmVMaXN0ZW5lcl8xKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHN0YXRlQ2hhbmdlLnJlYXNvbiB8fCBfdGhpcy5nZXRTdGF0ZUVycm9yKCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB0aGlzLm9uY2UoJ2Nvbm5lY3Rpb25kZXRhaWxzJywgc3VjY2Vzc0xpc3RlbmVyXzEpO1xuICAgICAgICAgICAgICAgIHRoaXMub24oJ2Nvbm5lY3Rpb25zdGF0ZScsIGZhaWx1cmVMaXN0ZW5lcl8xKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ2Nvbm5lY3RpbmcnOlxuICAgICAgICAgICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01JQ1JPLCAnQ29ubmVjdGlvbk1hbmFnZXIub25BdXRoVXBkYXRlZCgpJywgJ0Fib3J0aW5nIGN1cnJlbnQgY29ubmVjdGlvbiBhdHRlbXB0cyBpbiBvcmRlciB0byBzdGFydCBhZ2FpbiB3aXRoIHRoZSBuZXcgYXV0aCBkZXRhaWxzJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5kaXNjb25uZWN0QWxsVHJhbnNwb3J0cygpO1xuICAgICAgICAgICAgLyogZmFsbHRocm91Z2ggdG8gYWRkIHN0YXRlY2hhbmdlIGxpc3RlbmVyICovXG4gICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlDUk8sICdDb25uZWN0aW9uTWFuYWdlci5vbkF1dGhVcGRhdGVkKCknLCAnQ29ubmVjdGlvbiBzdGF0ZSBpcyAnICsgdGhpcy5zdGF0ZS5zdGF0ZSArICc7IHdhaXRpbmcgdW50aWwgZWl0aGVyIGNvbm5lY3RlZCBvciBmYWlsZWQnKTtcbiAgICAgICAgICAgICAgICB2YXIgbGlzdGVuZXJfMSA9IGZ1bmN0aW9uIChzdGF0ZUNoYW5nZSkge1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHN0YXRlQ2hhbmdlLmN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2Nvbm5lY3RlZCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMub2ZmKGxpc3RlbmVyXzEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHRva2VuRGV0YWlscyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdmYWlsZWQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnY2xvc2VkJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3N1c3BlbmRlZCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMub2ZmKGxpc3RlbmVyXzEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHN0YXRlQ2hhbmdlLnJlYXNvbiB8fCBfdGhpcy5nZXRTdGF0ZUVycm9yKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBpZ25vcmUgdGlsbCB3ZSBnZXQgZWl0aGVyIGNvbm5lY3RlZCBvciBmYWlsZWQgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdGhpcy5vbignY29ubmVjdGlvbnN0YXRlJywgbGlzdGVuZXJfMSk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGUuc3RhdGUgPT09ICdjb25uZWN0aW5nJykge1xuICAgICAgICAgICAgICAgICAgICAvKiBjYW4gaGFwcGVuIGlmIGluIHRoZSBjb25uZWN0aW5nIHN0YXRlIGJ1dCBubyB0cmFuc3BvcnQgd2FzIHBlbmRpbmdcbiAgICAgICAgICAgICAgICAgICAgICogeWV0LCBzbyBkaXNjb25uZWN0QWxsVHJhbnNwb3J0cyBkaWQgbm90IHRyaWdnZXIgYSBkaXNjb25uZWN0ZWQgc3RhdGUgKi9cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFydENvbm5lY3QoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVxdWVzdFN0YXRlKHsgc3RhdGU6ICdjb25uZWN0aW5nJyB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENvbm5lY3Rpb25NYW5hZ2VyLnByb3RvdHlwZS5kaXNjb25uZWN0QWxsVHJhbnNwb3J0cyA9IGZ1bmN0aW9uIChleGNlcHRBY3RpdmUpIHtcbiAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlOT1IsICdDb25uZWN0aW9uTWFuYWdlci5kaXNjb25uZWN0QWxsVHJhbnNwb3J0cygpJywgJ0Rpc2Nvbm5lY3RpbmcgYWxsIHRyYW5zcG9ydHMnICsgKGV4Y2VwdEFjdGl2ZSA/ICcgZXhjZXB0IHRoZSBhY3RpdmUgdHJhbnNwb3J0JyA6ICcnKSk7XG4gICAgICAgIC8qIFRoaXMgd2lsbCBwcmV2ZW50IGFueSBjb25uZWN0aW9uIHByb2NlZHVyZSBpbiBhbiBhc3luYyBwYXJ0IG9mIG9uZSBvZiBpdHMgZWFybHkgc3RhZ2VzIGZyb20gY29udGludWluZyAqL1xuICAgICAgICB0aGlzLmNvbm5lY3RDb3VudGVyKys7XG4gICAgICAgIFV0aWxzLnNhZmVBcnJGb3JFYWNoKHRoaXMucGVuZGluZ1RyYW5zcG9ydHMsIGZ1bmN0aW9uICh0cmFuc3BvcnQpIHtcbiAgICAgICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01JQ1JPLCAnQ29ubmVjdGlvbk1hbmFnZXIuZGlzY29ubmVjdEFsbFRyYW5zcG9ydHMoKScsICdEaXNjb25uZWN0aW5nIHBlbmRpbmcgdHJhbnNwb3J0OiAnICsgdHJhbnNwb3J0KTtcbiAgICAgICAgICAgIGlmICh0cmFuc3BvcnQpXG4gICAgICAgICAgICAgICAgdHJhbnNwb3J0LmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMucGVuZGluZ1RyYW5zcG9ydHMgPSBbXTtcbiAgICAgICAgVXRpbHMuc2FmZUFyckZvckVhY2godGhpcy5wcm9wb3NlZFRyYW5zcG9ydHMsIGZ1bmN0aW9uICh0cmFuc3BvcnQpIHtcbiAgICAgICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01JQ1JPLCAnQ29ubmVjdGlvbk1hbmFnZXIuZGlzY29ubmVjdEFsbFRyYW5zcG9ydHMoKScsICdEaXNwb3Npbmcgb2YgcHJvcG9zZWQgdHJhbnNwb3J0OiAnICsgdHJhbnNwb3J0KTtcbiAgICAgICAgICAgIGlmICh0cmFuc3BvcnQpXG4gICAgICAgICAgICAgICAgdHJhbnNwb3J0LmRpc3Bvc2UoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMucHJvcG9zZWRUcmFuc3BvcnRzID0gW107XG4gICAgICAgIGlmICh0aGlzLmFjdGl2ZVByb3RvY29sICYmICFleGNlcHRBY3RpdmUpIHtcbiAgICAgICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01JQ1JPLCAnQ29ubmVjdGlvbk1hbmFnZXIuZGlzY29ubmVjdEFsbFRyYW5zcG9ydHMoKScsICdEaXNjb25uZWN0aW5nIGFjdGl2ZSB0cmFuc3BvcnQ6ICcgKyB0aGlzLmFjdGl2ZVByb3RvY29sLmdldFRyYW5zcG9ydCgpKTtcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlUHJvdG9jb2wuZ2V0VHJhbnNwb3J0KCkuZGlzY29ubmVjdCgpO1xuICAgICAgICB9XG4gICAgICAgIC8qIE5vIG5lZWQgdG8gbm90aWZ5IHN0YXRlIGRpc2Nvbm5lY3RlZDsgZGlzY29ubmVjdGluZyB0aGUgYWN0aXZlIHRyYW5zcG9ydFxuICAgICAgICAgKiB3aWxsIGhhdmUgdGhhdCBlZmZlY3QgKi9cbiAgICB9O1xuICAgIC8qKioqKioqKioqKioqKioqKipcbiAgICAgKiBldmVudCBxdWV1ZWluZ1xuICAgICAqKioqKioqKioqKioqKioqKiovXG4gICAgQ29ubmVjdGlvbk1hbmFnZXIucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAobXNnLCBxdWV1ZUV2ZW50LCBjYWxsYmFjaykge1xuICAgICAgICBjYWxsYmFjayA9IGNhbGxiYWNrIHx8IG5vb3A7XG4gICAgICAgIHZhciBzdGF0ZSA9IHRoaXMuc3RhdGU7XG4gICAgICAgIGlmIChzdGF0ZS5zZW5kRXZlbnRzKSB7XG4gICAgICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19NSUNSTywgJ0Nvbm5lY3Rpb25NYW5hZ2VyLnNlbmQoKScsICdzZW5kaW5nIGV2ZW50Jyk7XG4gICAgICAgICAgICB0aGlzLnNlbmRJbXBsKG5ldyBwcm90b2NvbF8xLlBlbmRpbmdNZXNzYWdlKG1zZywgY2FsbGJhY2spKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc2hvdWxkUXVldWUgPSAocXVldWVFdmVudCAmJiBzdGF0ZS5xdWV1ZUV2ZW50cykgfHwgc3RhdGUuZm9yY2VRdWV1ZUV2ZW50cztcbiAgICAgICAgaWYgKCFzaG91bGRRdWV1ZSkge1xuICAgICAgICAgICAgdmFyIGVyciA9ICdyZWplY3RpbmcgZXZlbnQsIHF1ZXVlRXZlbnQgd2FzICcgKyBxdWV1ZUV2ZW50ICsgJywgc3RhdGUgd2FzICcgKyBzdGF0ZS5zdGF0ZTtcbiAgICAgICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01JQ1JPLCAnQ29ubmVjdGlvbk1hbmFnZXIuc2VuZCgpJywgZXJyKTtcbiAgICAgICAgICAgIGNhbGxiYWNrKHRoaXMuZXJyb3JSZWFzb24gfHwgbmV3IGVycm9yaW5mb18xLmRlZmF1bHQoZXJyLCA5MDAwMCwgNDAwKSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxvZ2dlcl8xLmRlZmF1bHQuc2hvdWxkTG9nKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01JQ1JPKSkge1xuICAgICAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlDUk8sICdDb25uZWN0aW9uTWFuYWdlci5zZW5kKCknLCAncXVldWVpbmcgbXNnOyAnICsgcHJvdG9jb2xtZXNzYWdlXzEuZGVmYXVsdC5zdHJpbmdpZnkobXNnKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5xdWV1ZShtc2csIGNhbGxiYWNrKTtcbiAgICB9O1xuICAgIENvbm5lY3Rpb25NYW5hZ2VyLnByb3RvdHlwZS5zZW5kSW1wbCA9IGZ1bmN0aW9uIChwZW5kaW5nTWVzc2FnZSkge1xuICAgICAgICB2YXIgbXNnID0gcGVuZGluZ01lc3NhZ2UubWVzc2FnZTtcbiAgICAgICAgLyogSWYgaGF2ZSBhbHJlYWR5IGF0dGVtcHRlZCB0byBzZW5kIHRoaXMsIHJlc2VuZCB3aXRoIHRoZSBzYW1lIG1zZ1NlcmlhbCxcbiAgICAgICAgICogc28gQWJseSBjYW4gZGVkdXAgaWYgdGhlIHByZXZpb3VzIHNlbmQgc3VjY2VlZGVkICovXG4gICAgICAgIGlmIChwZW5kaW5nTWVzc2FnZS5hY2tSZXF1aXJlZCAmJiAhcGVuZGluZ01lc3NhZ2Uuc2VuZEF0dGVtcHRlZCkge1xuICAgICAgICAgICAgbXNnLm1zZ1NlcmlhbCA9IHRoaXMubXNnU2VyaWFsKys7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlUHJvdG9jb2wuc2VuZChwZW5kaW5nTWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX0VSUk9SLCAnQ29ubmVjdGlvbk1hbmFnZXIuc2VuZEltcGwoKScsICdVbmV4cGVjdGVkIGV4Y2VwdGlvbiBpbiB0cmFuc3BvcnQuc2VuZCgpOiAnICsgZS5zdGFjayk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENvbm5lY3Rpb25NYW5hZ2VyLnByb3RvdHlwZS5xdWV1ZSA9IGZ1bmN0aW9uIChtc2csIGNhbGxiYWNrKSB7XG4gICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01JQ1JPLCAnQ29ubmVjdGlvbk1hbmFnZXIucXVldWUoKScsICdxdWV1ZWluZyBldmVudCcpO1xuICAgICAgICB2YXIgbGFzdFF1ZXVlZCA9IHRoaXMucXVldWVkTWVzc2FnZXMubGFzdCgpO1xuICAgICAgICB2YXIgbWF4U2l6ZSA9IHRoaXMub3B0aW9ucy5tYXhNZXNzYWdlU2l6ZTtcbiAgICAgICAgLyogSWYgaGF2ZSBhbHJlYWR5IGF0dGVtcHRlZCB0byBzZW5kIGEgbWVzc2FnZSwgZG9uJ3QgbWVyZ2UgbW9yZSBtZXNzYWdlc1xuICAgICAgICAgKiBpbnRvIGl0LCBhcyBpZiB0aGUgcHJldmlvdXMgc2VuZCBhY3R1YWxseSBzdWNjZWVkZWQgYW5kIHJlYWx0aW1lIGlnbm9yZXNcbiAgICAgICAgICogdGhlIGR1cCwgdGhleSdsbCBiZSBsb3N0ICovXG4gICAgICAgIGlmIChsYXN0UXVldWVkICYmICFsYXN0UXVldWVkLnNlbmRBdHRlbXB0ZWQgJiYgYnVuZGxlV2l0aChsYXN0UXVldWVkLm1lc3NhZ2UsIG1zZywgbWF4U2l6ZSkpIHtcbiAgICAgICAgICAgIGlmICghbGFzdFF1ZXVlZC5tZXJnZWQpIHtcbiAgICAgICAgICAgICAgICBsYXN0UXVldWVkLmNhbGxiYWNrID0gbXVsdGljYXN0ZXJfMS5kZWZhdWx0LmNyZWF0ZShbbGFzdFF1ZXVlZC5jYWxsYmFja10pO1xuICAgICAgICAgICAgICAgIGxhc3RRdWV1ZWQubWVyZ2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxhc3RRdWV1ZWQuY2FsbGJhY2sucHVzaChjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnF1ZXVlZE1lc3NhZ2VzLnB1c2gobmV3IHByb3RvY29sXzEuUGVuZGluZ01lc3NhZ2UobXNnLCBjYWxsYmFjaykpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDb25uZWN0aW9uTWFuYWdlci5wcm90b3R5cGUuc2VuZFF1ZXVlZE1lc3NhZ2VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19NSUNSTywgJ0Nvbm5lY3Rpb25NYW5hZ2VyLnNlbmRRdWV1ZWRNZXNzYWdlcygpJywgJ3NlbmRpbmcgJyArIHRoaXMucXVldWVkTWVzc2FnZXMuY291bnQoKSArICcgcXVldWVkIG1lc3NhZ2VzJyk7XG4gICAgICAgIHZhciBwZW5kaW5nTWVzc2FnZTtcbiAgICAgICAgd2hpbGUgKChwZW5kaW5nTWVzc2FnZSA9IHRoaXMucXVldWVkTWVzc2FnZXMuc2hpZnQoKSkpXG4gICAgICAgICAgICB0aGlzLnNlbmRJbXBsKHBlbmRpbmdNZXNzYWdlKTtcbiAgICB9O1xuICAgIENvbm5lY3Rpb25NYW5hZ2VyLnByb3RvdHlwZS5xdWV1ZVBlbmRpbmdNZXNzYWdlcyA9IGZ1bmN0aW9uIChwZW5kaW5nTWVzc2FnZXMpIHtcbiAgICAgICAgaWYgKHBlbmRpbmdNZXNzYWdlcyAmJiBwZW5kaW5nTWVzc2FnZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19NSUNSTywgJ0Nvbm5lY3Rpb25NYW5hZ2VyLnF1ZXVlUGVuZGluZ01lc3NhZ2VzKCknLCAncXVldWVpbmcgJyArIHBlbmRpbmdNZXNzYWdlcy5sZW5ndGggKyAnIHBlbmRpbmcgbWVzc2FnZXMnKTtcbiAgICAgICAgICAgIHRoaXMucXVldWVkTWVzc2FnZXMucHJlcGVuZChwZW5kaW5nTWVzc2FnZXMpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDb25uZWN0aW9uTWFuYWdlci5wcm90b3R5cGUuZmFpbFF1ZXVlZE1lc3NhZ2VzID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB2YXIgbnVtUXVldWVkID0gdGhpcy5xdWV1ZWRNZXNzYWdlcy5jb3VudCgpO1xuICAgICAgICBpZiAobnVtUXVldWVkID4gMCkge1xuICAgICAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfRVJST1IsICdDb25uZWN0aW9uTWFuYWdlci5mYWlsUXVldWVkTWVzc2FnZXMoKScsICdmYWlsaW5nICcgKyBudW1RdWV1ZWQgKyAnIHF1ZXVlZCBtZXNzYWdlcywgZXJyID0gJyArIFV0aWxzLmluc3BlY3RFcnJvcihlcnIpKTtcbiAgICAgICAgICAgIHRoaXMucXVldWVkTWVzc2FnZXMuY29tcGxldGVBbGxNZXNzYWdlcyhlcnIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDb25uZWN0aW9uTWFuYWdlci5wcm90b3R5cGUub25DaGFubmVsTWVzc2FnZSA9IGZ1bmN0aW9uIChtZXNzYWdlLCB0cmFuc3BvcnQpIHtcbiAgICAgICAgdmFyIG9uQWN0aXZlVHJhbnNwb3J0ID0gdGhpcy5hY3RpdmVQcm90b2NvbCAmJiB0cmFuc3BvcnQgPT09IHRoaXMuYWN0aXZlUHJvdG9jb2wuZ2V0VHJhbnNwb3J0KCksIG9uVXBncmFkZVRyYW5zcG9ydCA9IFV0aWxzLmFyckluKHRoaXMucGVuZGluZ1RyYW5zcG9ydHMsIHRyYW5zcG9ydCkgJiYgdGhpcy5zdGF0ZSA9PSB0aGlzLnN0YXRlcy5zeW5jaHJvbml6aW5nO1xuICAgICAgICAvKiBBcyB0aGUgbGliIG5vdyBoYXMgYSBwZXJpb2Qgd2hlcmUgdGhlIHVwZ3JhZGUgdHJhbnNwb3J0IGlzIHN5bmNlZCBidXRcbiAgICAgICAgICogYmVmb3JlIGl0J3MgYmVjb21lIGFjdGl2ZSAod2hpbGUgd2FpdGluZyBmb3IgdGhlIG9sZCBvbmUgdG8gYmVjb21lXG4gICAgICAgICAqIGlkbGUpLCBtZXNzYWdlIGNhbiB2YWxpZGx5IGFycml2ZSBvbiBpdCBldmVuIHRob3VnaCBpdCBpc24ndCBhY3RpdmUgKi9cbiAgICAgICAgaWYgKG9uQWN0aXZlVHJhbnNwb3J0IHx8IG9uVXBncmFkZVRyYW5zcG9ydCkge1xuICAgICAgICAgICAgdGhpcy5yZWFsdGltZS5jaGFubmVscy5vbkNoYW5uZWxNZXNzYWdlKG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gTWVzc2FnZSBjYW1lIGluIG9uIGEgZGVmdW5jdCB0cmFuc3BvcnQuIEFsbG93IG9ubHkgYWNrcywgbmFja3MsICYgZXJyb3JzIGZvciBvdXRzdGFuZGluZ1xuICAgICAgICAgICAgLy8gbWVzc2FnZXMsICBubyBuZXcgbWVzc2FnZXMgKGFzIHN5bmMgaGFzIGJlZW4gc2VudCBvbiBuZXcgdHJhbnNwb3J0IHNvIG5ldyBtZXNzYWdlcyB3aWxsXG4gICAgICAgICAgICAvLyBiZSByZXNlbnQgdGhlcmUsIG9yIGNvbm5lY3Rpb24gaGFzIGJlZW4gY2xvc2VkIHNvIGRvbid0IHdhbnQgbmV3IG1lc3NhZ2VzKVxuICAgICAgICAgICAgaWYgKFV0aWxzLmFyckluZGV4T2YoW2FjdGlvbnMuQUNLLCBhY3Rpb25zLk5BQ0ssIGFjdGlvbnMuRVJST1JdLCBtZXNzYWdlLmFjdGlvbikgPiAtMSkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVhbHRpbWUuY2hhbm5lbHMub25DaGFubmVsTWVzc2FnZShtZXNzYWdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01JQ1JPLCAnQ29ubmVjdGlvbk1hbmFnZXIub25DaGFubmVsTWVzc2FnZSgpJywgJ3JlY2VpdmVkIG1lc3NhZ2UgJyArIEpTT04uc3RyaW5naWZ5KG1lc3NhZ2UpICsgJ29uIGRlZnVuY3QgdHJhbnNwb3J0OyBkaXNjYXJkaW5nJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENvbm5lY3Rpb25NYW5hZ2VyLnByb3RvdHlwZS5waW5nID0gZnVuY3Rpb24gKHRyYW5zcG9ydCwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgLyogaWYgdHJhbnNwb3J0IGlzIHNwZWNpZmllZCwgdHJ5IHRoYXQgKi9cbiAgICAgICAgaWYgKHRyYW5zcG9ydCkge1xuICAgICAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlOT1IsICdDb25uZWN0aW9uTWFuYWdlci5waW5nKCknLCAndHJhbnNwb3J0ID0gJyArIHRyYW5zcG9ydCk7XG4gICAgICAgICAgICB2YXIgb25UaW1lb3V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHRyYW5zcG9ydC5vZmYoJ2hlYXJ0YmVhdCcsIG9uSGVhcnRiZWF0XzEpO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKG5ldyBlcnJvcmluZm9fMS5kZWZhdWx0KCdUaW1lb3V0IHdhaXRpbmcgZm9yIGhlYXJ0YmVhdCByZXNwb25zZScsIDUwMDAwLCA1MDApKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgcGluZ1N0YXJ0XzEgPSBVdGlscy5ub3coKSwgaWRfMSA9IFV0aWxzLmNoZWFwUmFuZFN0cigpO1xuICAgICAgICAgICAgdmFyIG9uSGVhcnRiZWF0XzEgPSBmdW5jdGlvbiAocmVzcG9uc2VJZCkge1xuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZUlkID09PSBpZF8xKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zcG9ydC5vZmYoJ2hlYXJ0YmVhdCcsIG9uSGVhcnRiZWF0XzEpO1xuICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJfMSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXNwb25zZVRpbWUgPSBVdGlscy5ub3coKSAtIHBpbmdTdGFydF8xO1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCByZXNwb25zZVRpbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgdGltZXJfMSA9IHNldFRpbWVvdXQob25UaW1lb3V0LCB0aGlzLm9wdGlvbnMudGltZW91dHMucmVhbHRpbWVSZXF1ZXN0VGltZW91dCk7XG4gICAgICAgICAgICB0cmFuc3BvcnQub24oJ2hlYXJ0YmVhdCcsIG9uSGVhcnRiZWF0XzEpO1xuICAgICAgICAgICAgdHJhbnNwb3J0LnBpbmcoaWRfMSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLyogaWYgd2UncmUgbm90IGNvbm5lY3RlZCwgZG9uJ3QgYXR0ZW1wdCAqL1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5zdGF0ZSAhPT0gJ2Nvbm5lY3RlZCcpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKG5ldyBlcnJvcmluZm9fMS5kZWZhdWx0KCdVbmFibGUgdG8gcGluZyBzZXJ2aWNlOyBub3QgY29ubmVjdGVkJywgNDAwMDAsIDQwMCkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8qIG5vIHRyYW5zcG9ydCB3YXMgc3BlY2lmaWVkLCBzbyB1c2UgdGhlIGN1cnJlbnQgKGNvbm5lY3RlZCkgb25lXG4gICAgICAgICAqIGJ1dCBlbnN1cmUgdGhhdCB3ZSByZXRyeSBpZiB0aGUgdHJhbnNwb3J0IGlzIHN1cGVyc2VkZWQgYmVmb3JlIHdlIGNvbXBsZXRlICovXG4gICAgICAgIHZhciBjb21wbGV0ZWQgPSBmYWxzZTtcbiAgICAgICAgdmFyIG9uUGluZ0NvbXBsZXRlID0gZnVuY3Rpb24gKGVyciwgcmVzcG9uc2VUaW1lKSB7XG4gICAgICAgICAgICBfdGhpcy5vZmYoJ3RyYW5zcG9ydC5hY3RpdmUnLCBvblRyYW5zcG9ydEFjdGl2ZSk7XG4gICAgICAgICAgICBpZiAoIWNvbXBsZXRlZCkge1xuICAgICAgICAgICAgICAgIGNvbXBsZXRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyLCByZXNwb25zZVRpbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB2YXIgb25UcmFuc3BvcnRBY3RpdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIWNvbXBsZXRlZCkge1xuICAgICAgICAgICAgICAgIC8qIGVuc3VyZSB0aGF0IG5vIGNhbGxiYWNrIGhhcHBlbnMgZm9yIHRoZSBjdXJyZW50bHkgb3V0c3RhbmRpbmcgb3BlcmF0aW9uICovXG4gICAgICAgICAgICAgICAgY29tcGxldGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAvKiByZXBlYXQgYnV0IHBpY2tpbmcgdXAgdGhlIG5ldyB0cmFuc3BvcnQgKi9cbiAgICAgICAgICAgICAgICBwbGF0Zm9ybV8xLmRlZmF1bHQuQ29uZmlnLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMucGluZyhudWxsLCBjYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMub24oJ3RyYW5zcG9ydC5hY3RpdmUnLCBvblRyYW5zcG9ydEFjdGl2ZSk7XG4gICAgICAgIHRoaXMucGluZyh0aGlzLmFjdGl2ZVByb3RvY29sLmdldFRyYW5zcG9ydCgpLCBvblBpbmdDb21wbGV0ZSk7XG4gICAgfTtcbiAgICBDb25uZWN0aW9uTWFuYWdlci5wcm90b3R5cGUuYWJvcnQgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgdGhpcy5hY3RpdmVQcm90b2NvbC5nZXRUcmFuc3BvcnQoKS5mYWlsKGVycm9yKTtcbiAgICB9O1xuICAgIENvbm5lY3Rpb25NYW5hZ2VyLnByb3RvdHlwZS5yZWdpc3RlclByb3Bvc2VkVHJhbnNwb3J0ID0gZnVuY3Rpb24gKHRyYW5zcG9ydCkge1xuICAgICAgICB0aGlzLnByb3Bvc2VkVHJhbnNwb3J0cy5wdXNoKHRyYW5zcG9ydCk7XG4gICAgfTtcbiAgICBDb25uZWN0aW9uTWFuYWdlci5wcm90b3R5cGUuZ2V0VHJhbnNwb3J0UHJlZmVyZW5jZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNwb3J0UHJlZmVyZW5jZSB8fCAoaGF2ZVdlYlN0b3JhZ2UoKSAmJiAoKF9iID0gKF9hID0gcGxhdGZvcm1fMS5kZWZhdWx0LldlYlN0b3JhZ2UpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5nZXQpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKF9hLCB0cmFuc3BvcnRQcmVmZXJlbmNlTmFtZSkpKTtcbiAgICB9O1xuICAgIENvbm5lY3Rpb25NYW5hZ2VyLnByb3RvdHlwZS5wZXJzaXN0VHJhbnNwb3J0UHJlZmVyZW5jZSA9IGZ1bmN0aW9uICh0cmFuc3BvcnQpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgaWYgKFV0aWxzLmFyckluKGRlZmF1bHRzXzEuZGVmYXVsdC51cGdyYWRlVHJhbnNwb3J0cywgdHJhbnNwb3J0LnNob3J0TmFtZSkpIHtcbiAgICAgICAgICAgIHRoaXMudHJhbnNwb3J0UHJlZmVyZW5jZSA9IHRyYW5zcG9ydC5zaG9ydE5hbWU7XG4gICAgICAgICAgICBpZiAoaGF2ZVdlYlN0b3JhZ2UoKSkge1xuICAgICAgICAgICAgICAgIChfYiA9IChfYSA9IHBsYXRmb3JtXzEuZGVmYXVsdC5XZWJTdG9yYWdlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc2V0KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSwgdHJhbnNwb3J0UHJlZmVyZW5jZU5hbWUsIHRyYW5zcG9ydC5zaG9ydE5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBDb25uZWN0aW9uTWFuYWdlci5wcm90b3R5cGUudW5wZXJzaXN0VHJhbnNwb3J0UHJlZmVyZW5jZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgdGhpcy50cmFuc3BvcnRQcmVmZXJlbmNlID0gbnVsbDtcbiAgICAgICAgaWYgKGhhdmVXZWJTdG9yYWdlKCkpIHtcbiAgICAgICAgICAgIChfYiA9IChfYSA9IHBsYXRmb3JtXzEuZGVmYXVsdC5XZWJTdG9yYWdlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucmVtb3ZlKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSwgdHJhbnNwb3J0UHJlZmVyZW5jZU5hbWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKiBUaGlzIG1ldGhvZCBpcyBvbmx5IHVzZWQgZHVyaW5nIGNvbm5lY3Rpb24gYXR0ZW1wdHMsIHNvIGltcGxlbWVudHMgUlNBNGMxLCBSU0E0YzIsXG4gICAgICogYW5kIFJTQTRkLiBJdCBpcyBnZW5lcmFsbHkgbm90IGludm9rZWQgZm9yIHNlcnZlcnNpZGUtdHJpZ2dlcmVkIHJlYXV0aHMgb3IgbWFudWFsXG4gICAgICogcmVhdXRocywgc28gUlNBNGMzIGRvZXMgbm90IGFwcGx5LCBleGNlcHQgKHBlciBwZXIgUlNBNGQxKSBpbiB0aGUgY2FzZSB0aGF0IHRoZSBhdXRoXG4gICAgICogc2VydmVyIHJldHVybnMgNDAzLiAqL1xuICAgIENvbm5lY3Rpb25NYW5hZ2VyLnByb3RvdHlwZS5hY3RPbkVycm9yRnJvbUF1dGhvcml6ZSA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgaWYgKGVyci5jb2RlID09PSA0MDE3MSkge1xuICAgICAgICAgICAgLyogTm8gd2F5IHRvIHJlYXV0aCAqL1xuICAgICAgICAgICAgdGhpcy5ub3RpZnlTdGF0ZSh7IHN0YXRlOiAnZmFpbGVkJywgZXJyb3I6IGVyciB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChlcnIuY29kZSA9PT0gNDAxMDIpIHtcbiAgICAgICAgICAgIHRoaXMubm90aWZ5U3RhdGUoeyBzdGF0ZTogJ2ZhaWxlZCcsIGVycm9yOiBlcnIgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZXJyLnN0YXR1c0NvZGUgPT09IEh0dHBTdGF0dXNDb2Rlc18xLmRlZmF1bHQuRm9yYmlkZGVuKSB7XG4gICAgICAgICAgICB2YXIgbXNnID0gJ0NsaWVudCBjb25maWd1cmVkIGF1dGhlbnRpY2F0aW9uIHByb3ZpZGVyIHJldHVybmVkIDQwMzsgZmFpbGluZyB0aGUgY29ubmVjdGlvbic7XG4gICAgICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19FUlJPUiwgJ0Nvbm5lY3Rpb25NYW5hZ2VyLmFjdE9uRXJyb3JGcm9tQXV0aG9yaXplKCknLCBtc2cpO1xuICAgICAgICAgICAgdGhpcy5ub3RpZnlTdGF0ZSh7IHN0YXRlOiAnZmFpbGVkJywgZXJyb3I6IG5ldyBlcnJvcmluZm9fMS5kZWZhdWx0KG1zZywgODAwMTksIDQwMywgZXJyKSB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBtc2cgPSAnQ2xpZW50IGNvbmZpZ3VyZWQgYXV0aGVudGljYXRpb24gcHJvdmlkZXIgcmVxdWVzdCBmYWlsZWQnO1xuICAgICAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlOT1IsICdDb25uZWN0aW9uTWFuYWdlci5hY3RPbkVycm9yRnJvbUF1dGhvcml6ZScsIG1zZyk7XG4gICAgICAgICAgICB0aGlzLm5vdGlmeVN0YXRlKHsgc3RhdGU6IHRoaXMuc3RhdGUuZmFpbFN0YXRlLCBlcnJvcjogbmV3IGVycm9yaW5mb18xLmRlZmF1bHQobXNnLCA4MDAxOSwgNDAxLCBlcnIpIH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDb25uZWN0aW9uTWFuYWdlci5wcm90b3R5cGUub25Db25uZWN0aW9uRGV0YWlsc1VwZGF0ZSA9IGZ1bmN0aW9uIChjb25uZWN0aW9uRGV0YWlscywgdHJhbnNwb3J0KSB7XG4gICAgICAgIGlmICghY29ubmVjdGlvbkRldGFpbHMpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNvbm5lY3Rpb25EZXRhaWxzID0gY29ubmVjdGlvbkRldGFpbHM7XG4gICAgICAgIGlmIChjb25uZWN0aW9uRGV0YWlscy5tYXhNZXNzYWdlU2l6ZSkge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zLm1heE1lc3NhZ2VTaXplID0gY29ubmVjdGlvbkRldGFpbHMubWF4TWVzc2FnZVNpemU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNsaWVudElkID0gY29ubmVjdGlvbkRldGFpbHMuY2xpZW50SWQ7XG4gICAgICAgIGlmIChjbGllbnRJZCkge1xuICAgICAgICAgICAgdmFyIGVyciA9IHRoaXMucmVhbHRpbWUuYXV0aC5fdW5jaGVja2VkU2V0Q2xpZW50SWQoY2xpZW50SWQpO1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX0VSUk9SLCAnQ29ubmVjdGlvbk1hbmFnZXIub25Db25uZWN0aW9uRGV0YWlsc1VwZGF0ZSgpJywgZXJyLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIC8qIEVycm9ycyBzZXR0aW5nIHRoZSBjbGllbnRJZCBhcmUgZmF0YWwgdG8gdGhlIGNvbm5lY3Rpb24gKi9cbiAgICAgICAgICAgICAgICB0cmFuc3BvcnQuZmFpbChlcnIpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgY29ubmVjdGlvblN0YXRlVHRsID0gY29ubmVjdGlvbkRldGFpbHMuY29ubmVjdGlvblN0YXRlVHRsO1xuICAgICAgICBpZiAoY29ubmVjdGlvblN0YXRlVHRsKSB7XG4gICAgICAgICAgICB0aGlzLmNvbm5lY3Rpb25TdGF0ZVR0bCA9IGNvbm5lY3Rpb25TdGF0ZVR0bDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1heElkbGVJbnRlcnZhbCA9IGNvbm5lY3Rpb25EZXRhaWxzLm1heElkbGVJbnRlcnZhbDtcbiAgICAgICAgdGhpcy5lbWl0KCdjb25uZWN0aW9uZGV0YWlscycsIGNvbm5lY3Rpb25EZXRhaWxzKTtcbiAgICB9O1xuICAgIC8qKioqKioqKioqKioqKioqKioqKipcbiAgICAgKiB0cmFuc3BvcnQgbWFuYWdlbWVudFxuICAgICAqKioqKioqKioqKioqKioqKioqKiovXG4gICAgQ29ubmVjdGlvbk1hbmFnZXIuc3VwcG9ydGVkVHJhbnNwb3J0cyA9IHt9O1xuICAgIHJldHVybiBDb25uZWN0aW9uTWFuYWdlcjtcbn0oZXZlbnRlbWl0dGVyXzEuZGVmYXVsdCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gQ29ubmVjdGlvbk1hbmFnZXI7XG5cbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbCh0aGlzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzKSkpXG5cbi8qKiovIH0pLFxuLyogMzYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciB0c2xpYl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciBldmVudGVtaXR0ZXJfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oNykpO1xudmFyIGxvZ2dlcl8xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygyKSk7XG52YXIgTWVzc2FnZVF1ZXVlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKE1lc3NhZ2VRdWV1ZSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBNZXNzYWdlUXVldWUoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLm1lc3NhZ2VzID0gW107XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgTWVzc2FnZVF1ZXVlLnByb3RvdHlwZS5jb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWVzc2FnZXMubGVuZ3RoO1xuICAgIH07XG4gICAgTWVzc2FnZVF1ZXVlLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICAgICAgdGhpcy5tZXNzYWdlcy5wdXNoKG1lc3NhZ2UpO1xuICAgIH07XG4gICAgTWVzc2FnZVF1ZXVlLnByb3RvdHlwZS5zaGlmdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWVzc2FnZXMuc2hpZnQoKTtcbiAgICB9O1xuICAgIE1lc3NhZ2VRdWV1ZS5wcm90b3R5cGUubGFzdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWVzc2FnZXNbdGhpcy5tZXNzYWdlcy5sZW5ndGggLSAxXTtcbiAgICB9O1xuICAgIE1lc3NhZ2VRdWV1ZS5wcm90b3R5cGUuY29weUFsbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWVzc2FnZXMuc2xpY2UoKTtcbiAgICB9O1xuICAgIE1lc3NhZ2VRdWV1ZS5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24gKG1lc3NhZ2VzKSB7XG4gICAgICAgIHRoaXMubWVzc2FnZXMucHVzaC5hcHBseSh0aGlzLm1lc3NhZ2VzLCBtZXNzYWdlcyk7XG4gICAgfTtcbiAgICBNZXNzYWdlUXVldWUucHJvdG90eXBlLnByZXBlbmQgPSBmdW5jdGlvbiAobWVzc2FnZXMpIHtcbiAgICAgICAgdGhpcy5tZXNzYWdlcy51bnNoaWZ0LmFwcGx5KHRoaXMubWVzc2FnZXMsIG1lc3NhZ2VzKTtcbiAgICB9O1xuICAgIE1lc3NhZ2VRdWV1ZS5wcm90b3R5cGUuY29tcGxldGVNZXNzYWdlcyA9IGZ1bmN0aW9uIChzZXJpYWwsIGNvdW50LCBlcnIpIHtcbiAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlDUk8sICdNZXNzYWdlUXVldWUuY29tcGxldGVNZXNzYWdlcygpJywgJ3NlcmlhbCA9ICcgKyBzZXJpYWwgKyAnOyBjb3VudCA9ICcgKyBjb3VudCk7XG4gICAgICAgIGVyciA9IGVyciB8fCBudWxsO1xuICAgICAgICB2YXIgbWVzc2FnZXMgPSB0aGlzLm1lc3NhZ2VzO1xuICAgICAgICBpZiAobWVzc2FnZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01lc3NhZ2VRdWV1ZS5jb21wbGV0ZU1lc3NhZ2VzKCk6IGNvbXBsZXRlTWVzc2FnZXMgY2FsbGVkIG9uIGFueSBlbXB0eSBNZXNzYWdlUXVldWUnKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZmlyc3QgPSBtZXNzYWdlc1swXTtcbiAgICAgICAgaWYgKGZpcnN0KSB7XG4gICAgICAgICAgICB2YXIgc3RhcnRTZXJpYWwgPSBmaXJzdC5tZXNzYWdlLm1zZ1NlcmlhbDtcbiAgICAgICAgICAgIHZhciBlbmRTZXJpYWwgPSBzZXJpYWwgKyBjb3VudDsgLyogdGhlIHNlcmlhbCBvZiB0aGUgZmlyc3QgbWVzc2FnZSB0aGF0IGlzICpub3QqIHRoZSBzdWJqZWN0IG9mIHRoaXMgY2FsbCAqL1xuICAgICAgICAgICAgaWYgKGVuZFNlcmlhbCA+IHN0YXJ0U2VyaWFsKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbXBsZXRlTWVzc2FnZXMgPSBtZXNzYWdlcy5zcGxpY2UoMCwgZW5kU2VyaWFsIC0gc3RhcnRTZXJpYWwpO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgY29tcGxldGVNZXNzYWdlc18xID0gY29tcGxldGVNZXNzYWdlczsgX2kgPCBjb21wbGV0ZU1lc3NhZ2VzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlID0gY29tcGxldGVNZXNzYWdlc18xW19pXTtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5jYWxsYmFjayhlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXNzYWdlcy5sZW5ndGggPT0gMClcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ2lkbGUnKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTWVzc2FnZVF1ZXVlLnByb3RvdHlwZS5jb21wbGV0ZUFsbE1lc3NhZ2VzID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB0aGlzLmNvbXBsZXRlTWVzc2FnZXMoMCwgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIgfHwgTnVtYmVyLk1BWF9WQUxVRSwgZXJyKTtcbiAgICB9O1xuICAgIE1lc3NhZ2VRdWV1ZS5wcm90b3R5cGUucmVzZXRTZW5kQXR0ZW1wdGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5tZXNzYWdlczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciBtc2cgPSBfYVtfaV07XG4gICAgICAgICAgICBtc2cuc2VuZEF0dGVtcHRlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBNZXNzYWdlUXVldWUucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19NSUNSTywgJ01lc3NhZ2VRdWV1ZS5jbGVhcigpJywgJ2NsZWFyaW5nICcgKyB0aGlzLm1lc3NhZ2VzLmxlbmd0aCArICcgbWVzc2FnZXMnKTtcbiAgICAgICAgdGhpcy5tZXNzYWdlcyA9IFtdO1xuICAgICAgICB0aGlzLmVtaXQoJ2lkbGUnKTtcbiAgICB9O1xuICAgIHJldHVybiBNZXNzYWdlUXVldWU7XG59KGV2ZW50ZW1pdHRlcl8xLmRlZmF1bHQpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IE1lc3NhZ2VRdWV1ZTtcblxuXG4vKioqLyB9KSxcbi8qIDM3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgQ29ubmVjdGlvblN0YXRlQ2hhbmdlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENvbm5lY3Rpb25TdGF0ZUNoYW5nZShwcmV2aW91cywgY3VycmVudCwgcmV0cnlJbiwgcmVhc29uKSB7XG4gICAgICAgIHRoaXMucHJldmlvdXMgPSBwcmV2aW91cztcbiAgICAgICAgdGhpcy5jdXJyZW50ID0gY3VycmVudDtcbiAgICAgICAgaWYgKHJldHJ5SW4pXG4gICAgICAgICAgICB0aGlzLnJldHJ5SW4gPSByZXRyeUluO1xuICAgICAgICBpZiAocmVhc29uKVxuICAgICAgICAgICAgdGhpcy5yZWFzb24gPSByZWFzb247XG4gICAgfVxuICAgIHJldHVybiBDb25uZWN0aW9uU3RhdGVDaGFuZ2U7XG59KCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gQ29ubmVjdGlvblN0YXRlQ2hhbmdlO1xuXG5cbi8qKiovIH0pLFxuLyogMzggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciB0c2xpYl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciBwcm90b2NvbG1lc3NhZ2VfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oMTApKTtcbnZhciBldmVudGVtaXR0ZXJfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oNykpO1xudmFyIFV0aWxzID0gdHNsaWJfMS5fX2ltcG9ydFN0YXIoX193ZWJwYWNrX3JlcXVpcmVfXygxKSk7XG52YXIgY2hhbm5lbF8xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygzMykpO1xudmFyIGxvZ2dlcl8xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygyKSk7XG52YXIgcmVhbHRpbWVwcmVzZW5jZV8xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXyg1NCkpO1xudmFyIG1lc3NhZ2VfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oOSkpO1xudmFyIGNoYW5uZWxzdGF0ZWNoYW5nZV8xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygzOSkpO1xudmFyIGVycm9yaW5mb18xID0gdHNsaWJfMS5fX2ltcG9ydFN0YXIoX193ZWJwYWNrX3JlcXVpcmVfXyg0KSk7XG52YXIgcHJlc2VuY2VtZXNzYWdlXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKDE1KSk7XG52YXIgY29ubmVjdGlvbmVycm9yc18xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygyMCkpO1xudmFyIGFjdGlvbnMgPSBwcm90b2NvbG1lc3NhZ2VfMS5kZWZhdWx0LkFjdGlvbjtcbnZhciBub29wID0gZnVuY3Rpb24gKCkgeyB9O1xuZnVuY3Rpb24gdmFsaWRhdGVDaGFubmVsT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgJiYgJ3BhcmFtcycgaW4gb3B0aW9ucyAmJiAhVXRpbHMuaXNPYmplY3Qob3B0aW9ucy5wYXJhbXMpKSB7XG4gICAgICAgIHJldHVybiBuZXcgZXJyb3JpbmZvXzEuZGVmYXVsdCgnb3B0aW9ucy5wYXJhbXMgbXVzdCBiZSBhbiBvYmplY3QnLCA0MDAwMCwgNDAwKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMgJiYgJ21vZGVzJyBpbiBvcHRpb25zKSB7XG4gICAgICAgIGlmICghVXRpbHMuaXNBcnJheShvcHRpb25zLm1vZGVzKSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBlcnJvcmluZm9fMS5kZWZhdWx0KCdvcHRpb25zLm1vZGVzIG11c3QgYmUgYW4gYXJyYXknLCA0MDAwMCwgNDAwKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9wdGlvbnMubW9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBjdXJyZW50TW9kZSA9IG9wdGlvbnMubW9kZXNbaV07XG4gICAgICAgICAgICBpZiAoIWN1cnJlbnRNb2RlIHx8XG4gICAgICAgICAgICAgICAgdHlwZW9mIGN1cnJlbnRNb2RlICE9PSAnc3RyaW5nJyB8fFxuICAgICAgICAgICAgICAgICFVdGlscy5hcnJJbihwcm90b2NvbG1lc3NhZ2VfMS5kZWZhdWx0LmNoYW5uZWxNb2RlcywgU3RyaW5nLnByb3RvdHlwZS50b1VwcGVyQ2FzZS5jYWxsKGN1cnJlbnRNb2RlKSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IGVycm9yaW5mb18xLmRlZmF1bHQoJ0ludmFsaWQgY2hhbm5lbCBtb2RlOiAnICsgY3VycmVudE1vZGUsIDQwMDAwLCA0MDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxudmFyIFJlYWx0aW1lQ2hhbm5lbCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhSZWFsdGltZUNoYW5uZWwsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUmVhbHRpbWVDaGFubmVsKHJlYWx0aW1lLCBuYW1lLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHJlYWx0aW1lLCBuYW1lLCBvcHRpb25zKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5yZXRyeUNvdW50ID0gMDtcbiAgICAgICAgX3RoaXMuaGlzdG9yeSA9IGZ1bmN0aW9uIChwYXJhbXMsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19NSUNSTywgJ1JlYWx0aW1lQ2hhbm5lbC5oaXN0b3J5KCknLCAnY2hhbm5lbCA9ICcgKyB0aGlzLm5hbWUpO1xuICAgICAgICAgICAgLyogcGFyYW1zIGFuZCBjYWxsYmFjayBhcmUgb3B0aW9uYWw7IHNlZSBpZiBwYXJhbXMgY29udGFpbnMgdGhlIGNhbGxiYWNrICovXG4gICAgICAgICAgICBpZiAoY2FsbGJhY2sgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcGFyYW1zID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sgPSBwYXJhbXM7XG4gICAgICAgICAgICAgICAgICAgIHBhcmFtcyA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5yZXN0Lm9wdGlvbnMucHJvbWlzZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBVdGlscy5wcm9taXNpZnkodGhpcywgJ2hpc3RvcnknLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrID0gbm9vcDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocGFyYW1zICYmIHBhcmFtcy51bnRpbEF0dGFjaCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnN0YXRlICE9PSAnYXR0YWNoZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKG5ldyBlcnJvcmluZm9fMS5kZWZhdWx0KCdvcHRpb24gdW50aWxBdHRhY2ggcmVxdWlyZXMgdGhlIGNoYW5uZWwgdG8gYmUgYXR0YWNoZWQnLCA0MDAwMCwgNDAwKSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLnByb3BlcnRpZXMuYXR0YWNoU2VyaWFsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKG5ldyBlcnJvcmluZm9fMS5kZWZhdWx0KCd1bnRpbEF0dGFjaCB3YXMgc3BlY2lmaWVkIGFuZCBjaGFubmVsIGlzIGF0dGFjaGVkLCBidXQgYXR0YWNoU2VyaWFsIGlzIG5vdCBkZWZpbmVkJywgNDAwMDAsIDQwMCkpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRlbGV0ZSBwYXJhbXMudW50aWxBdHRhY2g7XG4gICAgICAgICAgICAgICAgcGFyYW1zLmZyb21fc2VyaWFsID0gdGhpcy5wcm9wZXJ0aWVzLmF0dGFjaFNlcmlhbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNoYW5uZWxfMS5kZWZhdWx0LnByb3RvdHlwZS5faGlzdG9yeS5jYWxsKHRoaXMsIHBhcmFtcywgY2FsbGJhY2spO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy53aGVuU3RhdGUgPSAoZnVuY3Rpb24gKHN0YXRlLCBsaXN0ZW5lcikge1xuICAgICAgICAgICAgcmV0dXJuIGV2ZW50ZW1pdHRlcl8xLmRlZmF1bHQucHJvdG90eXBlLndoZW5TdGF0ZS5jYWxsKF90aGlzLCBzdGF0ZSwgX3RoaXMuc3RhdGUsIGxpc3RlbmVyKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01JTk9SLCAnUmVhbHRpbWVDaGFubmVsKCknLCAnc3RhcnRlZDsgbmFtZSA9ICcgKyBuYW1lKTtcbiAgICAgICAgX3RoaXMucmVhbHRpbWUgPSByZWFsdGltZTtcbiAgICAgICAgX3RoaXMucHJlc2VuY2UgPSBuZXcgcmVhbHRpbWVwcmVzZW5jZV8xLmRlZmF1bHQoX3RoaXMpO1xuICAgICAgICBfdGhpcy5jb25uZWN0aW9uTWFuYWdlciA9IHJlYWx0aW1lLmNvbm5lY3Rpb24uY29ubmVjdGlvbk1hbmFnZXI7XG4gICAgICAgIF90aGlzLnN0YXRlID0gJ2luaXRpYWxpemVkJztcbiAgICAgICAgX3RoaXMuc3Vic2NyaXB0aW9ucyA9IG5ldyBldmVudGVtaXR0ZXJfMS5kZWZhdWx0KCk7XG4gICAgICAgIF90aGlzLnN5bmNDaGFubmVsU2VyaWFsID0gdW5kZWZpbmVkO1xuICAgICAgICBfdGhpcy5wcm9wZXJ0aWVzID0ge1xuICAgICAgICAgICAgYXR0YWNoU2VyaWFsOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBjaGFubmVsU2VyaWFsOiB1bmRlZmluZWQsXG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLnNldE9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgIF90aGlzLmVycm9yUmVhc29uID0gbnVsbDtcbiAgICAgICAgX3RoaXMuX3JlcXVlc3RlZEZsYWdzID0gbnVsbDtcbiAgICAgICAgX3RoaXMuX21vZGUgPSBudWxsO1xuICAgICAgICBfdGhpcy5fYXR0YWNoUmVzdW1lID0gZmFsc2U7XG4gICAgICAgIF90aGlzLl9kZWNvZGluZ0NvbnRleHQgPSB7XG4gICAgICAgICAgICBjaGFubmVsT3B0aW9uczogX3RoaXMuY2hhbm5lbE9wdGlvbnMsXG4gICAgICAgICAgICBwbHVnaW5zOiByZWFsdGltZS5vcHRpb25zLnBsdWdpbnMgfHwge30sXG4gICAgICAgICAgICBiYXNlRW5jb2RlZFByZXZpb3VzUGF5bG9hZDogdW5kZWZpbmVkLFxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fbGFzdFBheWxvYWQgPSB7XG4gICAgICAgICAgICBtZXNzYWdlSWQ6IG51bGwsXG4gICAgICAgICAgICBwcm90b2NvbE1lc3NhZ2VDaGFubmVsU2VyaWFsOiBudWxsLFxuICAgICAgICAgICAgZGVjb2RlRmFpbHVyZVJlY292ZXJ5SW5Qcm9ncmVzczogbnVsbCxcbiAgICAgICAgfTtcbiAgICAgICAgLyogT25seSBkaWZmZXJlbmNlcyBiZXR3ZWVuIHRoaXMgYW5kIHRoZSBwdWJsaWMgZXZlbnQgZW1pdHRlciBpcyB0aGF0IHRoaXMgZW1pdHMgYW5cbiAgICAgICAgICogdXBkYXRlIGV2ZW50IGZvciBhbGwgQVRUQUNIRURzLCB3aGV0aGVyIHJlc3VtZWQgb3Igbm90ICovXG4gICAgICAgIF90aGlzLl9hbGxDaGFubmVsQ2hhbmdlcyA9IG5ldyBldmVudGVtaXR0ZXJfMS5kZWZhdWx0KCk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgUmVhbHRpbWVDaGFubmVsLnByb3RvdHlwZS5pbnZhbGlkU3RhdGVFcnJvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBlcnJvcmluZm9fMS5kZWZhdWx0KCdDaGFubmVsIG9wZXJhdGlvbiBmYWlsZWQgYXMgY2hhbm5lbCBzdGF0ZSBpcyAnICsgdGhpcy5zdGF0ZSwgOTAwMDEsIDQwMCwgdGhpcy5lcnJvclJlYXNvbiB8fCB1bmRlZmluZWQpO1xuICAgIH07XG4gICAgUmVhbHRpbWVDaGFubmVsLnByb2Nlc3NMaXN0ZW5lckFyZ3MgPSBmdW5jdGlvbiAoYXJncykge1xuICAgICAgICAvKiBbZXZlbnRdLCBsaXN0ZW5lciwgW2NhbGxiYWNrXSAqL1xuICAgICAgICBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJncyk7XG4gICAgICAgIGlmICh0eXBlb2YgYXJnc1swXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgYXJncy51bnNoaWZ0KG51bGwpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhcmdzW2FyZ3MubGVuZ3RoIC0gMV0gPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBhcmdzLnBvcCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcmdzO1xuICAgIH07XG4gICAgUmVhbHRpbWVDaGFubmVsLnByb3RvdHlwZS5zZXRPcHRpb25zID0gZnVuY3Rpb24gKG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICghY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnJlc3Qub3B0aW9ucy5wcm9taXNlcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBVdGlscy5wcm9taXNpZnkodGhpcywgJ3NldE9wdGlvbnMnLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBfY2FsbGJhY2sgPSBjYWxsYmFjayB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfRVJST1IsICdSZWFsdGltZUNoYW5uZWwuc2V0T3B0aW9ucygpJywgJ1NldCBvcHRpb25zIGZhaWxlZDogJyArIGVyci50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB2YXIgZXJyID0gdmFsaWRhdGVDaGFubmVsT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgX2NhbGxiYWNrKGVycik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY2hhbm5lbF8xLmRlZmF1bHQucHJvdG90eXBlLnNldE9wdGlvbnMuY2FsbCh0aGlzLCBvcHRpb25zKTtcbiAgICAgICAgaWYgKHRoaXMuX2RlY29kaW5nQ29udGV4dClcbiAgICAgICAgICAgIHRoaXMuX2RlY29kaW5nQ29udGV4dC5jaGFubmVsT3B0aW9ucyA9IHRoaXMuY2hhbm5lbE9wdGlvbnM7XG4gICAgICAgIGlmICh0aGlzLl9zaG91bGRSZWF0dGFjaFRvU2V0T3B0aW9ucyhvcHRpb25zKSkge1xuICAgICAgICAgICAgLyogVGhpcyBkb2VzIG5vdCBqdXN0IGRvIF9hdHRhY2godHJ1ZSwgbnVsbCwgY2FsbGJhY2spIGJlY2F1c2UgdGhhdCB3b3VsZCBwdXQgdXNcbiAgICAgICAgICAgICAqIGludG8gdGhlICdhdHRhY2hpbmcnIHN0YXRlIHVudGlsIHdlIHJlY2VpdmUgdGhlIG5ldyBhdHRhY2hlZCwgd2hpY2ggaXNcbiAgICAgICAgICAgICAqIGNvbmNlcHR1YWxseSBpbmNvcnJlY3Q6IHdlIGFyZSBzdGlsbCBhdHRhY2hlZCwgd2UganVzdCBoYXZlIGEgcGVuZGluZyByZXF1ZXN0IHRvXG4gICAgICAgICAgICAgKiBjaGFuZ2Ugc29tZSBjaGFubmVsIHBhcmFtcy4gUGVyIFJUTDE3IGdvaW5nIGludG8gdGhlIGF0dGFjaGluZyBzdGF0ZSB3b3VsZCBtZWFuXG4gICAgICAgICAgICAgKiByZWplY3RpbmcgbWVzc2FnZXMgdW50aWwgd2UgaGF2ZSBjb25maXJtYXRpb24gdGhhdCB0aGUgb3B0aW9ucyBoYXZlIGNoYW5nZWQsXG4gICAgICAgICAgICAgKiB3aGljaCB3b3VsZCB1bm5lY2Vzc2FyaWx5IGxvc2UgbWVzc2FnZSBjb250aW51aXR5LiAqL1xuICAgICAgICAgICAgdGhpcy5hdHRhY2hJbXBsKCk7XG4gICAgICAgICAgICAvLyBJZ25vcmUgJ2F0dGFjaGluZycgLS0gY291bGQgYmUganVzdCBkdWUgdG8gdG8gYSByZXN1bWUgJiByZWF0dGFjaCwgc2hvdWxkIG5vdFxuICAgICAgICAgICAgLy8gY2FsbCBiYWNrIHNldE9wdGlvbnMgdW50aWwgd2UncmUgZGVmaW5pdGVseSBhdHRhY2hlZCB3aXRoIHRoZSBuZXcgb3B0aW9ucyAob3JcbiAgICAgICAgICAgIC8vIGVsc2UgaW4gYSB0ZXJtaW5hbCBzdGF0ZSlcbiAgICAgICAgICAgIHRoaXMuX2FsbENoYW5uZWxDaGFuZ2VzLm9uY2UoWydhdHRhY2hlZCcsICd1cGRhdGUnLCAnZGV0YWNoZWQnLCAnZmFpbGVkJ10sIGZ1bmN0aW9uIChzdGF0ZUNoYW5nZSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5ldmVudCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICd1cGRhdGUnOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdhdHRhY2hlZCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBfY2FsbGJhY2sgPT09IG51bGwgfHwgX2NhbGxiYWNrID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfY2FsbGJhY2sobnVsbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBfY2FsbGJhY2sgPT09IG51bGwgfHwgX2NhbGxiYWNrID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfY2FsbGJhY2soc3RhdGVDaGFuZ2UucmVhc29uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIF9jYWxsYmFjaygpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBSZWFsdGltZUNoYW5uZWwucHJvdG90eXBlLl9zaG91bGRSZWF0dGFjaFRvU2V0T3B0aW9ucyA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5zdGF0ZSA9PT0gJ2F0dGFjaGVkJyB8fCB0aGlzLnN0YXRlID09PSAnYXR0YWNoaW5nJykgJiYgKChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMucGFyYW1zKSB8fCAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLm1vZGVzKSk7XG4gICAgfTtcbiAgICBSZWFsdGltZUNoYW5uZWwucHJvdG90eXBlLnB1Ymxpc2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG1lc3NhZ2VzID0gYXJnc1swXTtcbiAgICAgICAgdmFyIGFyZ0NvdW50ID0gYXJncy5sZW5ndGg7XG4gICAgICAgIHZhciBjYWxsYmFjayA9IGFyZ3NbYXJnQ291bnQgLSAxXTtcbiAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgaWYgKHRoaXMucmVhbHRpbWUub3B0aW9ucy5wcm9taXNlcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBVdGlscy5wcm9taXNpZnkodGhpcywgJ3B1Ymxpc2gnLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FsbGJhY2sgPSBub29wO1xuICAgICAgICAgICAgKythcmdDb3VudDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuY29ubmVjdGlvbk1hbmFnZXIuYWN0aXZlU3RhdGUoKSkge1xuICAgICAgICAgICAgY2FsbGJhY2sodGhpcy5jb25uZWN0aW9uTWFuYWdlci5nZXRFcnJvcigpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYXJnQ291bnQgPT0gMikge1xuICAgICAgICAgICAgaWYgKFV0aWxzLmlzT2JqZWN0KG1lc3NhZ2VzKSlcbiAgICAgICAgICAgICAgICBtZXNzYWdlcyA9IFttZXNzYWdlXzEuZGVmYXVsdC5mcm9tVmFsdWVzKG1lc3NhZ2VzKV07XG4gICAgICAgICAgICBlbHNlIGlmIChVdGlscy5pc0FycmF5KG1lc3NhZ2VzKSlcbiAgICAgICAgICAgICAgICBtZXNzYWdlcyA9IG1lc3NhZ2VfMS5kZWZhdWx0LmZyb21WYWx1ZXNBcnJheShtZXNzYWdlcyk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yaW5mb18xLmRlZmF1bHQoJ1RoZSBzaW5nbGUtYXJndW1lbnQgZm9ybSBvZiBwdWJsaXNoKCkgZXhwZWN0cyBhIG1lc3NhZ2Ugb2JqZWN0IG9yIGFuIGFycmF5IG9mIG1lc3NhZ2Ugb2JqZWN0cycsIDQwMDEzLCA0MDApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbWVzc2FnZXMgPSBbbWVzc2FnZV8xLmRlZmF1bHQuZnJvbVZhbHVlcyh7IG5hbWU6IGFyZ3NbMF0sIGRhdGE6IGFyZ3NbMV0gfSldO1xuICAgICAgICB9XG4gICAgICAgIHZhciBtYXhNZXNzYWdlU2l6ZSA9IHRoaXMucmVhbHRpbWUub3B0aW9ucy5tYXhNZXNzYWdlU2l6ZTtcbiAgICAgICAgbWVzc2FnZV8xLmRlZmF1bHQuZW5jb2RlQXJyYXkobWVzc2FnZXMsIHRoaXMuY2hhbm5lbE9wdGlvbnMsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnIpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qIFJTTDFpICovXG4gICAgICAgICAgICB2YXIgc2l6ZSA9IG1lc3NhZ2VfMS5kZWZhdWx0LmdldE1lc3NhZ2VzU2l6ZShtZXNzYWdlcyk7XG4gICAgICAgICAgICBpZiAoc2l6ZSA+IG1heE1lc3NhZ2VTaXplKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sobmV3IGVycm9yaW5mb18xLmRlZmF1bHQoJ01heGltdW0gc2l6ZSBvZiBtZXNzYWdlcyB0aGF0IGNhbiBiZSBwdWJsaXNoZWQgYXQgb25jZSBleGNlZWRlZCAoIHdhcyAnICtcbiAgICAgICAgICAgICAgICAgICAgc2l6ZSArXG4gICAgICAgICAgICAgICAgICAgICcgYnl0ZXM7IGxpbWl0IGlzICcgK1xuICAgICAgICAgICAgICAgICAgICBtYXhNZXNzYWdlU2l6ZSArXG4gICAgICAgICAgICAgICAgICAgICcgYnl0ZXMpJywgNDAwMDksIDQwMCkpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF90aGlzLl9fcHVibGlzaChtZXNzYWdlcywgY2FsbGJhY2spO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8vIERvdWJsZSB1bmRlcnNjb3JlIHVzZWQgdG8gcHJldmVudCB0eXBlIGNvbmZsaWN0IHdpdGggdW5kZXJseWluZyBDaGFubmVsLl9wdWJsaXNoIG1ldGhvZFxuICAgIFJlYWx0aW1lQ2hhbm5lbC5wcm90b3R5cGUuX19wdWJsaXNoID0gZnVuY3Rpb24gKG1lc3NhZ2VzLCBjYWxsYmFjaykge1xuICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19NSUNSTywgJ1JlYWx0aW1lQ2hhbm5lbC5wdWJsaXNoKCknLCAnbWVzc2FnZSBjb3VudCA9ICcgKyBtZXNzYWdlcy5sZW5ndGgpO1xuICAgICAgICB2YXIgc3RhdGUgPSB0aGlzLnN0YXRlO1xuICAgICAgICBzd2l0Y2ggKHN0YXRlKSB7XG4gICAgICAgICAgICBjYXNlICdmYWlsZWQnOlxuICAgICAgICAgICAgY2FzZSAnc3VzcGVuZGVkJzpcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnJvcmluZm9fMS5kZWZhdWx0LmZyb21WYWx1ZXModGhpcy5pbnZhbGlkU3RhdGVFcnJvcigpKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlDUk8sICdSZWFsdGltZUNoYW5uZWwucHVibGlzaCgpJywgJ3NlbmRpbmcgbWVzc2FnZTsgY2hhbm5lbCBzdGF0ZSBpcyAnICsgc3RhdGUpO1xuICAgICAgICAgICAgICAgIHZhciBtc2cgPSBuZXcgcHJvdG9jb2xtZXNzYWdlXzEuZGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIG1zZy5hY3Rpb24gPSBhY3Rpb25zLk1FU1NBR0U7XG4gICAgICAgICAgICAgICAgbXNnLmNoYW5uZWwgPSB0aGlzLm5hbWU7XG4gICAgICAgICAgICAgICAgbXNnLm1lc3NhZ2VzID0gbWVzc2FnZXM7XG4gICAgICAgICAgICAgICAgdGhpcy5zZW5kTWVzc2FnZShtc2csIGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgUmVhbHRpbWVDaGFubmVsLnByb3RvdHlwZS5vbkV2ZW50ID0gZnVuY3Rpb24gKG1lc3NhZ2VzKSB7XG4gICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01JQ1JPLCAnUmVhbHRpbWVDaGFubmVsLm9uRXZlbnQoKScsICdyZWNlaXZlZCBtZXNzYWdlJyk7XG4gICAgICAgIHZhciBzdWJzY3JpcHRpb25zID0gdGhpcy5zdWJzY3JpcHRpb25zO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1lc3NhZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgbWVzc2FnZSA9IG1lc3NhZ2VzW2ldO1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9ucy5lbWl0KG1lc3NhZ2UubmFtZSwgbWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFJlYWx0aW1lQ2hhbm5lbC5wcm90b3R5cGUuYXR0YWNoID0gZnVuY3Rpb24gKGZsYWdzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgX2ZsYWdzO1xuICAgICAgICBpZiAodHlwZW9mIGZsYWdzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWxsYmFjayA9IGZsYWdzO1xuICAgICAgICAgICAgX2ZsYWdzID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIF9mbGFncyA9IGZsYWdzO1xuICAgICAgICB9XG4gICAgICAgIGlmICghY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnJlYWx0aW1lLm9wdGlvbnMucHJvbWlzZXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gVXRpbHMucHJvbWlzaWZ5KHRoaXMsICdhdHRhY2gnLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FsbGJhY2sgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19NQUpPUiwgJ1JlYWx0aW1lQ2hhbm5lbC5hdHRhY2goKScsICdDaGFubmVsIGF0dGFjaCBmYWlsZWQ6ICcgKyBlcnIudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoX2ZsYWdzKSB7XG4gICAgICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmRlcHJlY2F0ZWQoJ2NoYW5uZWwuYXR0YWNoKCkgd2l0aCBmbGFncycsICdjaGFubmVsLnNldE9wdGlvbnMoKSB3aXRoIGNoYW5uZWxPcHRpb25zLnBhcmFtcycpO1xuICAgICAgICAgICAgLyogSWYgZmxhZ3MgcmVxdWVzdGVkLCBhbHdheXMgZG8gYSByZS1hdHRhY2guIFRPRE8gb25seSBkbyB0aGlzIGlmXG4gICAgICAgICAgICAgKiBjdXJyZW50IG1vZGUgZGlmZmVycyBmcm9tIHJlcXVlc3RlZCBtb2RlICovXG4gICAgICAgICAgICB0aGlzLl9yZXF1ZXN0ZWRGbGFncyA9IF9mbGFncztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLnN0YXRlID09PSAnYXR0YWNoZWQnKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCBudWxsKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9hdHRhY2goZmFsc2UsIG51bGwsIGNhbGxiYWNrKTtcbiAgICB9O1xuICAgIFJlYWx0aW1lQ2hhbm5lbC5wcm90b3R5cGUuX2F0dGFjaCA9IGZ1bmN0aW9uIChmb3JjZVJlYXR0YWNoLCBhdHRhY2hSZWFzb24sIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICghY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGNhbGxiYWNrID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfRVJST1IsICdSZWFsdGltZUNoYW5uZWwuX2F0dGFjaCgpJywgJ0NoYW5uZWwgYXR0YWNoIGZhaWxlZDogJyArIGVyci50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHZhciBjb25uZWN0aW9uTWFuYWdlciA9IHRoaXMuY29ubmVjdGlvbk1hbmFnZXI7XG4gICAgICAgIGlmICghY29ubmVjdGlvbk1hbmFnZXIuYWN0aXZlU3RhdGUoKSkge1xuICAgICAgICAgICAgY2FsbGJhY2soY29ubmVjdGlvbk1hbmFnZXIuZ2V0RXJyb3IoKSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuc3RhdGUgIT09ICdhdHRhY2hpbmcnIHx8IGZvcmNlUmVhdHRhY2gpIHtcbiAgICAgICAgICAgIHRoaXMucmVxdWVzdFN0YXRlKCdhdHRhY2hpbmcnLCBhdHRhY2hSZWFzb24pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub25jZShmdW5jdGlvbiAoc3RhdGVDaGFuZ2UpIHtcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5ldmVudCkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2F0dGFjaGVkJzpcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sgPT09IG51bGwgfHwgY2FsbGJhY2sgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNhbGxiYWNrKG51bGwsIHN0YXRlQ2hhbmdlKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnZGV0YWNoZWQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3N1c3BlbmRlZCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnZmFpbGVkJzpcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sgPT09IG51bGwgfHwgY2FsbGJhY2sgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNhbGxiYWNrKHN0YXRlQ2hhbmdlLnJlYXNvbiB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbk1hbmFnZXIuZ2V0RXJyb3IoKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IGVycm9yaW5mb18xLmRlZmF1bHQoJ1VuYWJsZSB0byBhdHRhY2g7IHJlYXNvbiB1bmtub3duOyBzdGF0ZSA9ICcgKyB0aGlzLmV2ZW50LCA5MDAwMCwgNTAwKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2RldGFjaGluZyc6XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrID09PSBudWxsIHx8IGNhbGxiYWNrID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjYWxsYmFjayhuZXcgZXJyb3JpbmZvXzEuZGVmYXVsdCgnQXR0YWNoIHJlcXVlc3Qgc3VwZXJzZWRlZCBieSBhIHN1YnNlcXVlbnQgZGV0YWNoIHJlcXVlc3QnLCA5MDAwMCwgNDA5KSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFJlYWx0aW1lQ2hhbm5lbC5wcm90b3R5cGUuYXR0YWNoSW1wbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlDUk8sICdSZWFsdGltZUNoYW5uZWwuYXR0YWNoSW1wbCgpJywgJ3NlbmRpbmcgQVRUQUNIIG1lc3NhZ2UnKTtcbiAgICAgICAgdmFyIGF0dGFjaE1zZyA9IHByb3RvY29sbWVzc2FnZV8xLmRlZmF1bHQuZnJvbVZhbHVlcyh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbnMuQVRUQUNILFxuICAgICAgICAgICAgY2hhbm5lbDogdGhpcy5uYW1lLFxuICAgICAgICAgICAgcGFyYW1zOiB0aGlzLmNoYW5uZWxPcHRpb25zLnBhcmFtcyxcbiAgICAgICAgICAgIC8vIFJUTDRjMTogSW5jbHVkZXMgdGhlIGNoYW5uZWwgc2VyaWFsIHRvIHJlc3VtZSBmcm9tIGEgcHJldmlvdXMgbWVzc2FnZVxuICAgICAgICAgICAgLy8gb3IgYXR0YWNobWVudC5cbiAgICAgICAgICAgIGNoYW5uZWxTZXJpYWw6IHRoaXMucHJvcGVydGllcy5jaGFubmVsU2VyaWFsLFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHRoaXMuX3JlcXVlc3RlZEZsYWdzKSB7XG4gICAgICAgICAgICBhdHRhY2hNc2cuZW5jb2RlTW9kZXNUb0ZsYWdzKHRoaXMuX3JlcXVlc3RlZEZsYWdzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmNoYW5uZWxPcHRpb25zLm1vZGVzKSB7XG4gICAgICAgICAgICBhdHRhY2hNc2cuZW5jb2RlTW9kZXNUb0ZsYWdzKFV0aWxzLmFsbFRvVXBwZXJDYXNlKHRoaXMuY2hhbm5lbE9wdGlvbnMubW9kZXMpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fYXR0YWNoUmVzdW1lKSB7XG4gICAgICAgICAgICBhdHRhY2hNc2cuc2V0RmxhZygnQVRUQUNIX1JFU1VNRScpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9sYXN0UGF5bG9hZC5kZWNvZGVGYWlsdXJlUmVjb3ZlcnlJblByb2dyZXNzKSB7XG4gICAgICAgICAgICBhdHRhY2hNc2cuY2hhbm5lbFNlcmlhbCA9IHRoaXMuX2xhc3RQYXlsb2FkLnByb3RvY29sTWVzc2FnZUNoYW5uZWxTZXJpYWw7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZW5kTWVzc2FnZShhdHRhY2hNc2csIG5vb3ApO1xuICAgIH07XG4gICAgUmVhbHRpbWVDaGFubmVsLnByb3RvdHlwZS5kZXRhY2ggPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgICAgICAgaWYgKHRoaXMucmVhbHRpbWUub3B0aW9ucy5wcm9taXNlcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBVdGlscy5wcm9taXNpZnkodGhpcywgJ2RldGFjaCcsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYWxsYmFjayA9IG5vb3A7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNvbm5lY3Rpb25NYW5hZ2VyID0gdGhpcy5jb25uZWN0aW9uTWFuYWdlcjtcbiAgICAgICAgaWYgKCFjb25uZWN0aW9uTWFuYWdlci5hY3RpdmVTdGF0ZSgpKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhjb25uZWN0aW9uTWFuYWdlci5nZXRFcnJvcigpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKHRoaXMuc3RhdGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ3N1c3BlbmRlZCc6XG4gICAgICAgICAgICAgICAgdGhpcy5ub3RpZnlTdGF0ZSgnZGV0YWNoZWQnKTtcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZGV0YWNoZWQnOlxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdmYWlsZWQnOlxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKG5ldyBlcnJvcmluZm9fMS5kZWZhdWx0KCdVbmFibGUgdG8gZGV0YWNoOyBjaGFubmVsIHN0YXRlID0gZmFpbGVkJywgOTAwMDEsIDQwMCkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aGlzLnJlcXVlc3RTdGF0ZSgnZGV0YWNoaW5nJyk7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZmFsbHRocm91Z2hcbiAgICAgICAgICAgIGNhc2UgJ2RldGFjaGluZyc6XG4gICAgICAgICAgICAgICAgdGhpcy5vbmNlKGZ1bmN0aW9uIChzdGF0ZUNoYW5nZSkge1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2RldGFjaGVkJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYXR0YWNoZWQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnc3VzcGVuZGVkJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2ZhaWxlZCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soc3RhdGVDaGFuZ2UucmVhc29uIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb25NYW5hZ2VyLmdldEVycm9yKCkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IGVycm9yaW5mb18xLmRlZmF1bHQoJ1VuYWJsZSB0byBkZXRhY2g7IHJlYXNvbiB1bmtub3duOyBzdGF0ZSA9ICcgKyB0aGlzLmV2ZW50LCA5MDAwMCwgNTAwKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdhdHRhY2hpbmcnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKG5ldyBlcnJvcmluZm9fMS5kZWZhdWx0KCdEZXRhY2ggcmVxdWVzdCBzdXBlcnNlZGVkIGJ5IGEgc3Vic2VxdWVudCBhdHRhY2ggcmVxdWVzdCcsIDkwMDAwLCA0MDkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBSZWFsdGltZUNoYW5uZWwucHJvdG90eXBlLmRldGFjaEltcGwgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlDUk8sICdSZWFsdGltZUNoYW5uZWwuZGV0YWNoKCknLCAnc2VuZGluZyBERVRBQ0ggbWVzc2FnZScpO1xuICAgICAgICB2YXIgbXNnID0gcHJvdG9jb2xtZXNzYWdlXzEuZGVmYXVsdC5mcm9tVmFsdWVzKHsgYWN0aW9uOiBhY3Rpb25zLkRFVEFDSCwgY2hhbm5lbDogdGhpcy5uYW1lIH0pO1xuICAgICAgICB0aGlzLnNlbmRNZXNzYWdlKG1zZywgY2FsbGJhY2sgfHwgbm9vcCk7XG4gICAgfTtcbiAgICBSZWFsdGltZUNoYW5uZWwucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTsgLyogW2V2ZW50XSwgbGlzdGVuZXIsIFtjYWxsYmFja10gKi9cbiAgICAgICAgZm9yICh2YXIgX2kgPSAwIC8qIFtldmVudF0sIGxpc3RlbmVyLCBbY2FsbGJhY2tdICovOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGggLyogW2V2ZW50XSwgbGlzdGVuZXIsIFtjYWxsYmFja10gKi87IF9pKysgLyogW2V2ZW50XSwgbGlzdGVuZXIsIFtjYWxsYmFja10gKi8pIHtcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTsgLyogW2V2ZW50XSwgbGlzdGVuZXIsIFtjYWxsYmFja10gKi9cbiAgICAgICAgfVxuICAgICAgICB2YXIgX2EgPSBSZWFsdGltZUNoYW5uZWwucHJvY2Vzc0xpc3RlbmVyQXJncyhhcmdzKSwgZXZlbnQgPSBfYVswXSwgbGlzdGVuZXIgPSBfYVsxXSwgY2FsbGJhY2sgPSBfYVsyXTtcbiAgICAgICAgaWYgKCFjYWxsYmFjayAmJiB0aGlzLnJlYWx0aW1lLm9wdGlvbnMucHJvbWlzZXMpIHtcbiAgICAgICAgICAgIHJldHVybiBVdGlscy5wcm9taXNpZnkodGhpcywgJ3N1YnNjcmliZScsIFtldmVudCwgbGlzdGVuZXJdKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5zdGF0ZSA9PT0gJ2ZhaWxlZCcpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrID09PSBudWxsIHx8IGNhbGxiYWNrID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjYWxsYmFjayhlcnJvcmluZm9fMS5kZWZhdWx0LmZyb21WYWx1ZXModGhpcy5pbnZhbGlkU3RhdGVFcnJvcigpKSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gRmlsdGVyZWRcbiAgICAgICAgaWYgKGV2ZW50ICYmIHR5cGVvZiBldmVudCA9PT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkoZXZlbnQpKSB7XG4gICAgICAgICAgICB0aGlzLl9zdWJzY3JpYmVGaWx0ZXIoZXZlbnQsIGxpc3RlbmVyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5vbihldmVudCwgbGlzdGVuZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmF0dGFjaChjYWxsYmFjayB8fCBub29wKTtcbiAgICB9O1xuICAgIFJlYWx0aW1lQ2hhbm5lbC5wcm90b3R5cGUuX3N1YnNjcmliZUZpbHRlciA9IGZ1bmN0aW9uIChmaWx0ZXIsIGxpc3RlbmVyKSB7XG4gICAgICAgIHZhciBmaWx0ZXJlZExpc3RlbmVyID0gZnVuY3Rpb24gKG0pIHtcbiAgICAgICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2UsIF9mO1xuICAgICAgICAgICAgdmFyIG1hcHBpbmcgPSB7XG4gICAgICAgICAgICAgICAgbmFtZTogbS5uYW1lLFxuICAgICAgICAgICAgICAgIHJlZlRpbWVzZXJpYWw6IChfYiA9IChfYSA9IG0uZXh0cmFzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucmVmKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IudGltZXNlcmlhbCxcbiAgICAgICAgICAgICAgICByZWZUeXBlOiAoX2QgPSAoX2MgPSBtLmV4dHJhcykgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLnJlZikgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLnR5cGUsXG4gICAgICAgICAgICAgICAgaXNSZWY6ICEhKChfZiA9IChfZSA9IG0uZXh0cmFzKSA9PT0gbnVsbCB8fCBfZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2UucmVmKSA9PT0gbnVsbCB8fCBfZiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2YudGltZXNlcmlhbCksXG4gICAgICAgICAgICAgICAgY2xpZW50SWQ6IG0uY2xpZW50SWQsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgYW55IHZhbHVlcyBhcmUgZGVmaW5lZCBpbiB0aGUgZmlsdGVyIGFuZCBpZiB0aGV5IG1hdGNoIHRoZSB2YWx1ZSBpbiB0aGUgbWVzc2FnZSBvYmplY3RcbiAgICAgICAgICAgIGlmIChPYmplY3QuZW50cmllcyhmaWx0ZXIpLmZpbmQoZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgdmFyIGtleSA9IF9hWzBdLCB2YWx1ZSA9IF9hWzFdO1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gbWFwcGluZ1trZXldICE9PSB2YWx1ZSA6IGZhbHNlO1xuICAgICAgICAgICAgfSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsaXN0ZW5lcihtKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fYWRkRmlsdGVyZWRTdWJzY3JpcHRpb24oZmlsdGVyLCBsaXN0ZW5lciwgZmlsdGVyZWRMaXN0ZW5lcik7XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5vbihmaWx0ZXJlZExpc3RlbmVyKTtcbiAgICB9O1xuICAgIC8vIEFkZHMgYSBuZXcgZmlsdGVyZWQgc3Vic2NyaXB0aW9uXG4gICAgUmVhbHRpbWVDaGFubmVsLnByb3RvdHlwZS5fYWRkRmlsdGVyZWRTdWJzY3JpcHRpb24gPSBmdW5jdGlvbiAoZmlsdGVyLCByZWFsTGlzdGVuZXIsIGZpbHRlcmVkTGlzdGVuZXIpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAoIXRoaXMuZmlsdGVyZWRTdWJzY3JpcHRpb25zKSB7XG4gICAgICAgICAgICB0aGlzLmZpbHRlcmVkU3Vic2NyaXB0aW9ucyA9IG5ldyBNYXAoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5maWx0ZXJlZFN1YnNjcmlwdGlvbnMuaGFzKHJlYWxMaXN0ZW5lcikpIHtcbiAgICAgICAgICAgIHZhciByZWFsTGlzdGVuZXJNYXAgPSB0aGlzLmZpbHRlcmVkU3Vic2NyaXB0aW9ucy5nZXQocmVhbExpc3RlbmVyKTtcbiAgICAgICAgICAgIC8vIEFkZCB0aGUgZmlsdGVyZWQgbGlzdGVuZXIgdG8gdGhlIG1hcCwgb3IgYXBwZW5kIHRvIHRoZSBhcnJheSBpZiB0aGlzIGZpbHRlciBoYXMgYWxyZWFkeSBiZWVuIHVzZWRcbiAgICAgICAgICAgIHJlYWxMaXN0ZW5lck1hcC5zZXQoZmlsdGVyLCAoKF9hID0gcmVhbExpc3RlbmVyTWFwID09PSBudWxsIHx8IHJlYWxMaXN0ZW5lck1hcCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVhbExpc3RlbmVyTWFwLmdldChmaWx0ZXIpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY29uY2F0KGZpbHRlcmVkTGlzdGVuZXIpKSB8fCBbZmlsdGVyZWRMaXN0ZW5lcl0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5maWx0ZXJlZFN1YnNjcmlwdGlvbnMuc2V0KHJlYWxMaXN0ZW5lciwgbmV3IE1hcChbW2ZpbHRlciwgW2ZpbHRlcmVkTGlzdGVuZXJdXV0pKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgUmVhbHRpbWVDaGFubmVsLnByb3RvdHlwZS5fZ2V0QW5kRGVsZXRlRmlsdGVyZWRTdWJzY3JpcHRpb25zID0gZnVuY3Rpb24gKGZpbHRlciwgcmVhbExpc3RlbmVyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIC8vIE5vIGZpbHRlcmVkIHN1YnNjcmlwdGlvbnMgbWFwIG1lYW5zIHRoZXJlIGhhcyBiZWVuIG5vIGZpbHRlcmVkIHN1YnNjcmlwdGlvbnMgeWV0LCBzbyByZXR1cm4gbm90aGluZ1xuICAgICAgICBpZiAoIXRoaXMuZmlsdGVyZWRTdWJzY3JpcHRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgLy8gT25seSBhIGZpbHRlciBpcyBwYXNzZWQgaW4gd2l0aCBubyBzcGVjaWZpYyBsaXN0ZW5lclxuICAgICAgICBpZiAoIXJlYWxMaXN0ZW5lciAmJiBmaWx0ZXIpIHtcbiAgICAgICAgICAgIC8vIFJldHVybiBlYWNoIGxpc3RlbmVyIHdoaWNoIGlzIGF0dGFjaGVkIHRvIHRoZSBzcGVjaWZpZWQgZmlsdGVyIG9iamVjdFxuICAgICAgICAgICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5maWx0ZXJlZFN1YnNjcmlwdGlvbnMuZW50cmllcygpKVxuICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9iO1xuICAgICAgICAgICAgICAgIHZhciBrZXkgPSBfYVswXSwgZmlsdGVyTWFwcyA9IF9hWzFdO1xuICAgICAgICAgICAgICAgIC8vIEdldCAodGhlbiBkZWxldGUpIHRoZSBtYXBzIG1hdGNoaW5nIHRoaXMgZmlsdGVyXG4gICAgICAgICAgICAgICAgdmFyIGxpc3RlbmVyTWFwcyA9IGZpbHRlck1hcHMuZ2V0KGZpbHRlcik7XG4gICAgICAgICAgICAgICAgZmlsdGVyTWFwcy5kZWxldGUoZmlsdGVyKTtcbiAgICAgICAgICAgICAgICAvLyBDbGVhciB0aGUgcGFyZW50IGlmIG5vdGhpbmcgaXMgbGVmdFxuICAgICAgICAgICAgICAgIGlmIChmaWx0ZXJNYXBzLnNpemUgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgKF9iID0gX3RoaXMuZmlsdGVyZWRTdWJzY3JpcHRpb25zKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuZGVsZXRlKGtleSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBsaXN0ZW5lck1hcHM7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIGN1cikge1xuICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKGN1ciA/IChfYSA9IHByZXYpLmNvbmNhdC5hcHBseShfYSwgY3VyKSA6IHByZXYpO1xuICAgICAgICAgICAgfSwgW10pO1xuICAgICAgICB9XG4gICAgICAgIC8vIE5vIHN1YnNjcmlwdGlvbnMgZm9yIHRoaXMgbGlzdGVuZXJcbiAgICAgICAgaWYgKCFyZWFsTGlzdGVuZXIgfHwgIXRoaXMuZmlsdGVyZWRTdWJzY3JpcHRpb25zLmhhcyhyZWFsTGlzdGVuZXIpKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlYWxMaXN0ZW5lck1hcCA9IHRoaXMuZmlsdGVyZWRTdWJzY3JpcHRpb25zLmdldChyZWFsTGlzdGVuZXIpO1xuICAgICAgICAvLyBJZiBubyBmaWx0ZXIgaXMgc3BlY2lmaWVkIHJldHVybiBhbGwgbGlzdGVuZXJzIHVzaW5nIHRoYXQgZnVuY3Rpb25cbiAgICAgICAgaWYgKCFmaWx0ZXIpIHtcbiAgICAgICAgICAgIC8vIGFycmF5LmZsYXQgaXMgbm90IGF2YWlsYWJsZSB1bmxlc3Mgd2Ugc3VwcG9ydCBlczIwMTkgb3IgaGlnaGVyXG4gICAgICAgICAgICB2YXIgbGlzdGVuZXJzXzEgPSBBcnJheS5mcm9tKHJlYWxMaXN0ZW5lck1hcC52YWx1ZXMoKSkucmVkdWNlKGZ1bmN0aW9uIChwcmV2LCBjdXIpIHsgcmV0dXJuIHByZXYuY29uY2F0LmFwcGx5KHByZXYsIGN1cik7IH0sIFtdKTtcbiAgICAgICAgICAgIC8vIHJlbW92ZSB0aGUgbGlzdGVuZXIgZnJvbSB0aGUgbWFwXG4gICAgICAgICAgICB0aGlzLmZpbHRlcmVkU3Vic2NyaXB0aW9ucy5kZWxldGUocmVhbExpc3RlbmVyKTtcbiAgICAgICAgICAgIHJldHVybiBsaXN0ZW5lcnNfMTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbGlzdGVuZXJzID0gcmVhbExpc3RlbmVyTWFwLmdldChmaWx0ZXIpO1xuICAgICAgICByZWFsTGlzdGVuZXJNYXAuZGVsZXRlKGZpbHRlcik7XG4gICAgICAgIHJldHVybiBsaXN0ZW5lcnMgfHwgW107XG4gICAgfTtcbiAgICBSZWFsdGltZUNoYW5uZWwucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHZhciBhcmdzID0gW107IC8qIFtldmVudF0sIGxpc3RlbmVyICovXG4gICAgICAgIGZvciAodmFyIF9pID0gMCAvKiBbZXZlbnRdLCBsaXN0ZW5lciAqLzsgX2kgPCBhcmd1bWVudHMubGVuZ3RoIC8qIFtldmVudF0sIGxpc3RlbmVyICovOyBfaSsrIC8qIFtldmVudF0sIGxpc3RlbmVyICovKSB7XG4gICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07IC8qIFtldmVudF0sIGxpc3RlbmVyICovXG4gICAgICAgIH1cbiAgICAgICAgdmFyIF9iID0gUmVhbHRpbWVDaGFubmVsLnByb2Nlc3NMaXN0ZW5lckFyZ3MoYXJncyksIGV2ZW50ID0gX2JbMF0sIGxpc3RlbmVyID0gX2JbMV07XG4gICAgICAgIC8vIElmIHdlIGVpdGhlciBoYXZlIGEgZmlsdGVyZWQgbGlzdGVuZXIsIGEgZmlsdGVyIG9yIGJvdGggd2UgbmVlZCB0byBkbyBhZGRpdGlvbmFsIHByb2Nlc3NpbmcgdG8gZmluZCB0aGUgb3JpZ2luYWwgZnVuY3Rpb24ocylcbiAgICAgICAgaWYgKCh0eXBlb2YgZXZlbnQgPT09ICdvYmplY3QnICYmICFsaXN0ZW5lcikgfHwgKChfYSA9IHRoaXMuZmlsdGVyZWRTdWJzY3JpcHRpb25zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaGFzKGxpc3RlbmVyKSkpIHtcbiAgICAgICAgICAgIHRoaXMuX2dldEFuZERlbGV0ZUZpbHRlcmVkU3Vic2NyaXB0aW9ucyhldmVudCwgbGlzdGVuZXIpLmZvckVhY2goZnVuY3Rpb24gKGwpIHsgcmV0dXJuIF90aGlzLnN1YnNjcmlwdGlvbnMub2ZmKGwpOyB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMub2ZmKGV2ZW50LCBsaXN0ZW5lcik7XG4gICAgfTtcbiAgICBSZWFsdGltZUNoYW5uZWwucHJvdG90eXBlLnN5bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8qIGNoZWNrIHByZWNvbmRpdGlvbnMgKi9cbiAgICAgICAgc3dpdGNoICh0aGlzLnN0YXRlKSB7XG4gICAgICAgICAgICBjYXNlICdpbml0aWFsaXplZCc6XG4gICAgICAgICAgICBjYXNlICdkZXRhY2hpbmcnOlxuICAgICAgICAgICAgY2FzZSAnZGV0YWNoZWQnOlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcmluZm9fMS5QYXJ0aWFsRXJyb3JJbmZvKCdVbmFibGUgdG8gc3luYyB0byBjaGFubmVsOyBub3QgYXR0YWNoZWQnLCA0MDAwMCk7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICB9XG4gICAgICAgIHZhciBjb25uZWN0aW9uTWFuYWdlciA9IHRoaXMuY29ubmVjdGlvbk1hbmFnZXI7XG4gICAgICAgIGlmICghY29ubmVjdGlvbk1hbmFnZXIuYWN0aXZlU3RhdGUoKSkge1xuICAgICAgICAgICAgdGhyb3cgY29ubmVjdGlvbk1hbmFnZXIuZ2V0RXJyb3IoKTtcbiAgICAgICAgfVxuICAgICAgICAvKiBzZW5kIHN5bmMgcmVxdWVzdCAqL1xuICAgICAgICB2YXIgc3luY01lc3NhZ2UgPSBwcm90b2NvbG1lc3NhZ2VfMS5kZWZhdWx0LmZyb21WYWx1ZXMoeyBhY3Rpb246IGFjdGlvbnMuU1lOQywgY2hhbm5lbDogdGhpcy5uYW1lIH0pO1xuICAgICAgICBpZiAodGhpcy5zeW5jQ2hhbm5lbFNlcmlhbCkge1xuICAgICAgICAgICAgc3luY01lc3NhZ2UuY2hhbm5lbFNlcmlhbCA9IHRoaXMuc3luY0NoYW5uZWxTZXJpYWw7XG4gICAgICAgIH1cbiAgICAgICAgY29ubmVjdGlvbk1hbmFnZXIuc2VuZChzeW5jTWVzc2FnZSk7XG4gICAgfTtcbiAgICBSZWFsdGltZUNoYW5uZWwucHJvdG90eXBlLnNlbmRNZXNzYWdlID0gZnVuY3Rpb24gKG1zZywgY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uTWFuYWdlci5zZW5kKG1zZywgdGhpcy5yZWFsdGltZS5vcHRpb25zLnF1ZXVlTWVzc2FnZXMsIGNhbGxiYWNrKTtcbiAgICB9O1xuICAgIFJlYWx0aW1lQ2hhbm5lbC5wcm90b3R5cGUuc2VuZFByZXNlbmNlID0gZnVuY3Rpb24gKHByZXNlbmNlLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgbXNnID0gcHJvdG9jb2xtZXNzYWdlXzEuZGVmYXVsdC5mcm9tVmFsdWVzKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9ucy5QUkVTRU5DRSxcbiAgICAgICAgICAgIGNoYW5uZWw6IHRoaXMubmFtZSxcbiAgICAgICAgICAgIHByZXNlbmNlOiBVdGlscy5pc0FycmF5KHByZXNlbmNlKVxuICAgICAgICAgICAgICAgID8gcHJlc2VuY2VtZXNzYWdlXzEuZGVmYXVsdC5mcm9tVmFsdWVzQXJyYXkocHJlc2VuY2UpXG4gICAgICAgICAgICAgICAgOiBbcHJlc2VuY2VtZXNzYWdlXzEuZGVmYXVsdC5mcm9tVmFsdWVzKHByZXNlbmNlKV0sXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnNlbmRNZXNzYWdlKG1zZywgY2FsbGJhY2spO1xuICAgIH07XG4gICAgUmVhbHRpbWVDaGFubmVsLnByb3RvdHlwZS5vbk1lc3NhZ2UgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgICBpZiAobWVzc2FnZS5hY3Rpb24gPT09IGFjdGlvbnMuQVRUQUNIRUQgfHxcbiAgICAgICAgICAgIG1lc3NhZ2UuYWN0aW9uID09PSBhY3Rpb25zLk1FU1NBR0UgfHxcbiAgICAgICAgICAgIG1lc3NhZ2UuYWN0aW9uID09PSBhY3Rpb25zLlBSRVNFTkNFKSB7XG4gICAgICAgICAgICAvLyBSVEwxNWJcbiAgICAgICAgICAgIHRoaXMuc2V0Q2hhbm5lbFNlcmlhbChtZXNzYWdlLmNoYW5uZWxTZXJpYWwpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzeW5jQ2hhbm5lbFNlcmlhbCwgaXNTeW5jID0gZmFsc2U7XG4gICAgICAgIHN3aXRjaCAobWVzc2FnZS5hY3Rpb24pIHtcbiAgICAgICAgICAgIGNhc2UgYWN0aW9ucy5BVFRBQ0hFRDoge1xuICAgICAgICAgICAgICAgIHRoaXMucHJvcGVydGllcy5hdHRhY2hTZXJpYWwgPSBtZXNzYWdlLmNoYW5uZWxTZXJpYWw7XG4gICAgICAgICAgICAgICAgdGhpcy5fbW9kZSA9IG1lc3NhZ2UuZ2V0TW9kZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMucGFyYW1zID0gbWVzc2FnZS5wYXJhbXMgfHwge307XG4gICAgICAgICAgICAgICAgdmFyIG1vZGVzRnJvbUZsYWdzID0gbWVzc2FnZS5kZWNvZGVNb2Rlc0Zyb21GbGFncygpO1xuICAgICAgICAgICAgICAgIHRoaXMubW9kZXMgPSAobW9kZXNGcm9tRmxhZ3MgJiYgVXRpbHMuYWxsVG9Mb3dlckNhc2UobW9kZXNGcm9tRmxhZ3MpKSB8fCB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VtZWQgPSBtZXNzYWdlLmhhc0ZsYWcoJ1JFU1VNRUQnKTtcbiAgICAgICAgICAgICAgICB2YXIgaGFzUHJlc2VuY2UgPSBtZXNzYWdlLmhhc0ZsYWcoJ0hBU19QUkVTRU5DRScpO1xuICAgICAgICAgICAgICAgIHZhciBoYXNCYWNrbG9nID0gbWVzc2FnZS5oYXNGbGFnKCdIQVNfQkFDS0xPRycpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnN0YXRlID09PSAnYXR0YWNoZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghcmVzdW1lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLyogT24gYSBsb3NzIG9mIGNvbnRpbnVpdHksIHRoZSBwcmVzZW5jZSBzZXQgbmVlZHMgdG8gYmUgcmUtc3luY2VkICovXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByZXNlbmNlLm9uQXR0YWNoZWQoaGFzUHJlc2VuY2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGFuZ2UgPSBuZXcgY2hhbm5lbHN0YXRlY2hhbmdlXzEuZGVmYXVsdCh0aGlzLnN0YXRlLCB0aGlzLnN0YXRlLCByZXN1bWVkLCBoYXNCYWNrbG9nLCBtZXNzYWdlLmVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWxsQ2hhbm5lbENoYW5nZXMuZW1pdCgndXBkYXRlJywgY2hhbmdlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXN1bWVkIHx8IHRoaXMuY2hhbm5lbE9wdGlvbnMudXBkYXRlT25BdHRhY2hlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KCd1cGRhdGUnLCBjaGFuZ2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuc3RhdGUgPT09ICdkZXRhY2hpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgIC8qIFJUTDVpOiByZS1zZW5kIERFVEFDSCBhbmQgcmVtYWluIGluIHRoZSAnZGV0YWNoaW5nJyBzdGF0ZSAqL1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoZWNrUGVuZGluZ1N0YXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGlmeVN0YXRlKCdhdHRhY2hlZCcsIG1lc3NhZ2UuZXJyb3IsIHJlc3VtZWQsIGhhc1ByZXNlbmNlLCBoYXNCYWNrbG9nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIGFjdGlvbnMuREVUQUNIRUQ6IHtcbiAgICAgICAgICAgICAgICB2YXIgZGV0YWNoRXJyID0gbWVzc2FnZS5lcnJvclxuICAgICAgICAgICAgICAgICAgICA/IGVycm9yaW5mb18xLmRlZmF1bHQuZnJvbVZhbHVlcyhtZXNzYWdlLmVycm9yKVxuICAgICAgICAgICAgICAgICAgICA6IG5ldyBlcnJvcmluZm9fMS5kZWZhdWx0KCdDaGFubmVsIGRldGFjaGVkJywgOTAwMDEsIDQwNCk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGUgPT09ICdkZXRhY2hpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubm90aWZ5U3RhdGUoJ2RldGFjaGVkJywgZGV0YWNoRXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5zdGF0ZSA9PT0gJ2F0dGFjaGluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgLyogT25seSByZXRyeSBpbW1lZGlhdGVseSBpZiB3ZSB3ZXJlIHByZXZpb3VzbHkgYXR0YWNoZWQuIElmIHdlIHdlcmVcbiAgICAgICAgICAgICAgICAgICAgICogYXR0YWNoaW5nLCBnbyBpbnRvIHN1c3BlbmRlZCwgZmFpbCBtZXNzYWdlcywgYW5kIHdhaXQgYSBmZXcgc2Vjb25kc1xuICAgICAgICAgICAgICAgICAgICAgKiBiZWZvcmUgcmV0cnlpbmcgKi9cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RpZnlTdGF0ZSgnc3VzcGVuZGVkJywgZGV0YWNoRXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVxdWVzdFN0YXRlKCdhdHRhY2hpbmcnLCBkZXRhY2hFcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgYWN0aW9ucy5TWU5DOlxuICAgICAgICAgICAgICAgIC8qIHN5bmNzIGNhbiBoYXZlIGNoYW5uZWxTZXJpYWxzLCBidXQgbWlnaHQgbm90IGlmIHRoZSBzeW5jIGlzIG9uZSBwYWdlIGxvbmcgKi9cbiAgICAgICAgICAgICAgICBpc1N5bmMgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHN5bmNDaGFubmVsU2VyaWFsID0gdGhpcy5zeW5jQ2hhbm5lbFNlcmlhbCA9IG1lc3NhZ2UuY2hhbm5lbFNlcmlhbDtcbiAgICAgICAgICAgICAgICAvKiBzeW5jcyBjYW4gaGFwcGVuIG9uIGNoYW5uZWxzIHdpdGggbm8gcHJlc2VuY2UgZGF0YSBhcyBwYXJ0IG9mIGNvbm5lY3Rpb25cbiAgICAgICAgICAgICAgICAgKiByZXN1bWluZywgaW4gd2hpY2ggY2FzZSBwcm90b2NvbCBtZXNzYWdlIGhhcyBubyBwcmVzZW5jZSBwcm9wZXJ0eSAqL1xuICAgICAgICAgICAgICAgIGlmICghbWVzc2FnZS5wcmVzZW5jZSlcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZmFsbHRocm91Z2hcbiAgICAgICAgICAgIGNhc2UgYWN0aW9ucy5QUkVTRU5DRToge1xuICAgICAgICAgICAgICAgIHZhciBwcmVzZW5jZSA9IG1lc3NhZ2UucHJlc2VuY2U7XG4gICAgICAgICAgICAgICAgdmFyIGlkID0gbWVzc2FnZS5pZCwgY29ubmVjdGlvbklkID0gbWVzc2FnZS5jb25uZWN0aW9uSWQsIHRpbWVzdGFtcCA9IG1lc3NhZ2UudGltZXN0YW1wO1xuICAgICAgICAgICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5jaGFubmVsT3B0aW9ucztcbiAgICAgICAgICAgICAgICB2YXIgcHJlc2VuY2VNc2cgPSB2b2lkIDA7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcmVzZW5jZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJlc2VuY2VNc2cgPSBwcmVzZW5jZVtpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXNlbmNlbWVzc2FnZV8xLmRlZmF1bHQuZGVjb2RlKHByZXNlbmNlTXNnLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcHJlc2VuY2VNc2cuY29ubmVjdGlvbklkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXNlbmNlTXNnLmNvbm5lY3Rpb25JZCA9IGNvbm5lY3Rpb25JZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcHJlc2VuY2VNc2cudGltZXN0YW1wKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXNlbmNlTXNnLnRpbWVzdGFtcCA9IHRpbWVzdGFtcDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcHJlc2VuY2VNc2cuaWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJlc2VuY2VNc2cuaWQgPSBpZCArICc6JyArIGk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX0VSUk9SLCAnUmVhbHRpbWVDaGFubmVsLm9uTWVzc2FnZSgpJywgZS50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnByZXNlbmNlLnNldFByZXNlbmNlKHByZXNlbmNlLCBpc1N5bmMsIHN5bmNDaGFubmVsU2VyaWFsKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgYWN0aW9ucy5NRVNTQUdFOiB7XG4gICAgICAgICAgICAgICAgLy9SVEwxN1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnN0YXRlICE9PSAnYXR0YWNoZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01BSk9SLCAnUmVhbHRpbWVDaGFubmVsLm9uTWVzc2FnZSgpJywgJ01lc3NhZ2UgXCInICtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuaWQgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ1wiIHNraXBwZWQgYXMgdGhpcyBjaGFubmVsIFwiJyArXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5hbWUgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ1wiIHN0YXRlIGlzIG5vdCBcImF0dGFjaGVkXCIgKHN0YXRlIGlzIFwiJyArXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdcIikuJyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIG1lc3NhZ2VzID0gbWVzc2FnZS5tZXNzYWdlcywgZmlyc3RNZXNzYWdlID0gbWVzc2FnZXNbMF0sIGxhc3RNZXNzYWdlID0gbWVzc2FnZXNbbWVzc2FnZXMubGVuZ3RoIC0gMV0sIGlkID0gbWVzc2FnZS5pZCwgY29ubmVjdGlvbklkID0gbWVzc2FnZS5jb25uZWN0aW9uSWQsIHRpbWVzdGFtcCA9IG1lc3NhZ2UudGltZXN0YW1wO1xuICAgICAgICAgICAgICAgIGlmIChmaXJzdE1lc3NhZ2UuZXh0cmFzICYmXG4gICAgICAgICAgICAgICAgICAgIGZpcnN0TWVzc2FnZS5leHRyYXMuZGVsdGEgJiZcbiAgICAgICAgICAgICAgICAgICAgZmlyc3RNZXNzYWdlLmV4dHJhcy5kZWx0YS5mcm9tICE9PSB0aGlzLl9sYXN0UGF5bG9hZC5tZXNzYWdlSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1zZyA9ICdEZWx0YSBtZXNzYWdlIGRlY29kZSBmYWlsdXJlIC0gcHJldmlvdXMgbWVzc2FnZSBub3QgYXZhaWxhYmxlIGZvciBtZXNzYWdlIFwiJyArXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmlkICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdcIiBvbiB0aGlzIGNoYW5uZWwgXCInICtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmFtZSArXG4gICAgICAgICAgICAgICAgICAgICAgICAnXCIuJztcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfRVJST1IsICdSZWFsdGltZUNoYW5uZWwub25NZXNzYWdlKCknLCBtc2cpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdGFydERlY29kZUZhaWx1cmVSZWNvdmVyeShuZXcgZXJyb3JpbmZvXzEuZGVmYXVsdChtc2csIDQwMDE4LCA0MDApKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWVzc2FnZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1zZyA9IG1lc3NhZ2VzW2ldO1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZV8xLmRlZmF1bHQuZGVjb2RlKG1zZywgdGhpcy5fZGVjb2RpbmdDb250ZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLyogZGVjcnlwdCBmYWlsZWQgLi4gdGhlIG1vc3QgbGlrZWx5IGNhdXNlIGlzIHRoYXQgd2UgaGF2ZSB0aGUgd3Jvbmcga2V5ICovXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19FUlJPUiwgJ1JlYWx0aW1lQ2hhbm5lbC5vbk1lc3NhZ2UoKScsIGUudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGUuY29kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDAwMTg6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIGRlY29kZSBmYWlsdXJlICovXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0YXJ0RGVjb2RlRmFpbHVyZVJlY292ZXJ5KGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0MDAxOTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBObyB2Y2RpZmYgcGx1Z2luIHBhc3NlZCBpbiAtIG5vIHBvaW50IHJlY292ZXJpbmcsIGdpdmUgdXAgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZmFsbHRocm91Z2hcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDQwMDIxOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBCcm93c2VyIGRvZXMgbm90IHN1cHBvcnQgZGVsdGFzLCBzaW1pbGFybHkgbm8gcG9pbnQgcmVjb3ZlcmluZyAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGlmeVN0YXRlKCdmYWlsZWQnLCBlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICghbXNnLmNvbm5lY3Rpb25JZClcbiAgICAgICAgICAgICAgICAgICAgICAgIG1zZy5jb25uZWN0aW9uSWQgPSBjb25uZWN0aW9uSWQ7XG4gICAgICAgICAgICAgICAgICAgIGlmICghbXNnLnRpbWVzdGFtcClcbiAgICAgICAgICAgICAgICAgICAgICAgIG1zZy50aW1lc3RhbXAgPSB0aW1lc3RhbXA7XG4gICAgICAgICAgICAgICAgICAgIGlmICghbXNnLmlkKVxuICAgICAgICAgICAgICAgICAgICAgICAgbXNnLmlkID0gaWQgKyAnOicgKyBpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl9sYXN0UGF5bG9hZC5tZXNzYWdlSWQgPSBsYXN0TWVzc2FnZS5pZDtcbiAgICAgICAgICAgICAgICB0aGlzLl9sYXN0UGF5bG9hZC5wcm90b2NvbE1lc3NhZ2VDaGFubmVsU2VyaWFsID0gbWVzc2FnZS5jaGFubmVsU2VyaWFsO1xuICAgICAgICAgICAgICAgIHRoaXMub25FdmVudChtZXNzYWdlcyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIGFjdGlvbnMuRVJST1I6IHtcbiAgICAgICAgICAgICAgICAvKiB0aGVyZSB3YXMgYSBjaGFubmVsLXNwZWNpZmljIGVycm9yICovXG4gICAgICAgICAgICAgICAgdmFyIGVyciA9IG1lc3NhZ2UuZXJyb3I7XG4gICAgICAgICAgICAgICAgaWYgKGVyciAmJiBlcnIuY29kZSA9PSA4MDAxNikge1xuICAgICAgICAgICAgICAgICAgICAvKiBhdHRhY2gvZGV0YWNoIG9wZXJhdGlvbiBhdHRlbXB0ZWQgb24gc3VwZXJzZWRlZCB0cmFuc3BvcnQgaGFuZGxlICovXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tQZW5kaW5nU3RhdGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubm90aWZ5U3RhdGUoJ2ZhaWxlZCcsIGVycm9yaW5mb18xLmRlZmF1bHQuZnJvbVZhbHVlcyhlcnIpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX0VSUk9SLCAnUmVhbHRpbWVDaGFubmVsLm9uTWVzc2FnZSgpJywgJ0ZhdGFsIHByb3RvY29sIGVycm9yOiB1bnJlY29nbmlzZWQgYWN0aW9uICgnICsgbWVzc2FnZS5hY3Rpb24gKyAnKScpO1xuICAgICAgICAgICAgICAgIHRoaXMuY29ubmVjdGlvbk1hbmFnZXIuYWJvcnQoY29ubmVjdGlvbmVycm9yc18xLmRlZmF1bHQudW5rbm93bkNoYW5uZWxFcnIoKSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFJlYWx0aW1lQ2hhbm5lbC5wcm90b3R5cGUuX3N0YXJ0RGVjb2RlRmFpbHVyZVJlY292ZXJ5ID0gZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAoIXRoaXMuX2xhc3RQYXlsb2FkLmRlY29kZUZhaWx1cmVSZWNvdmVyeUluUHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01BSk9SLCAnUmVhbHRpbWVDaGFubmVsLm9uTWVzc2FnZSgpJywgJ1N0YXJ0aW5nIGRlY29kZSBmYWlsdXJlIHJlY292ZXJ5IHByb2Nlc3MuJyk7XG4gICAgICAgICAgICB0aGlzLl9sYXN0UGF5bG9hZC5kZWNvZGVGYWlsdXJlUmVjb3ZlcnlJblByb2dyZXNzID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX2F0dGFjaCh0cnVlLCByZWFzb24sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5fbGFzdFBheWxvYWQuZGVjb2RlRmFpbHVyZVJlY292ZXJ5SW5Qcm9ncmVzcyA9IGZhbHNlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFJlYWx0aW1lQ2hhbm5lbC5wcm90b3R5cGUub25BdHRhY2hlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlOT1IsICdSZWFsdGltZUNoYW5uZWwub25BdHRhY2hlZCcsICdhY3RpdmF0aW5nIGNoYW5uZWw7IG5hbWUgPSAnICsgdGhpcy5uYW1lKTtcbiAgICB9O1xuICAgIFJlYWx0aW1lQ2hhbm5lbC5wcm90b3R5cGUubm90aWZ5U3RhdGUgPSBmdW5jdGlvbiAoc3RhdGUsIHJlYXNvbiwgcmVzdW1lZCwgaGFzUHJlc2VuY2UsIGhhc0JhY2tsb2cpIHtcbiAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlDUk8sICdSZWFsdGltZUNoYW5uZWwubm90aWZ5U3RhdGUnLCAnbmFtZSA9ICcgKyB0aGlzLm5hbWUgKyAnLCBjdXJyZW50IHN0YXRlID0gJyArIHRoaXMuc3RhdGUgKyAnLCBub3RpZnlpbmcgc3RhdGUgJyArIHN0YXRlKTtcbiAgICAgICAgdGhpcy5jbGVhclN0YXRlVGltZXIoKTtcbiAgICAgICAgLy8gUlRQNWExXG4gICAgICAgIGlmIChVdGlscy5hcnJJbihbJ2RldGFjaGVkJywgJ3N1c3BlbmRlZCcsICdmYWlsZWQnXSwgc3RhdGUpKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BlcnRpZXMuY2hhbm5lbFNlcmlhbCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXRlID09PSB0aGlzLnN0YXRlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wcmVzZW5jZS5hY3RPbkNoYW5uZWxTdGF0ZShzdGF0ZSwgaGFzUHJlc2VuY2UsIHJlYXNvbik7XG4gICAgICAgIGlmIChzdGF0ZSA9PT0gJ3N1c3BlbmRlZCcgJiYgdGhpcy5jb25uZWN0aW9uTWFuYWdlci5zdGF0ZS5zZW5kRXZlbnRzKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0UmV0cnlUaW1lcigpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jYW5jZWxSZXRyeVRpbWVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlYXNvbikge1xuICAgICAgICAgICAgdGhpcy5lcnJvclJlYXNvbiA9IHJlYXNvbjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2hhbmdlID0gbmV3IGNoYW5uZWxzdGF0ZWNoYW5nZV8xLmRlZmF1bHQodGhpcy5zdGF0ZSwgc3RhdGUsIHJlc3VtZWQsIGhhc0JhY2tsb2csIHJlYXNvbik7XG4gICAgICAgIHZhciBsb2dMZXZlbCA9IHN0YXRlID09PSAnZmFpbGVkJyA/IGxvZ2dlcl8xLmRlZmF1bHQuTE9HX0VSUk9SIDogbG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUFKT1I7XG4gICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ0xldmVsLCAnQ2hhbm5lbCBzdGF0ZSBmb3IgY2hhbm5lbCBcIicgKyB0aGlzLm5hbWUgKyAnXCInLCBzdGF0ZSArIChyZWFzb24gPyAnOyByZWFzb246ICcgKyByZWFzb24gOiAnJykpO1xuICAgICAgICBpZiAoc3RhdGUgIT09ICdhdHRhY2hpbmcnICYmIHN0YXRlICE9PSAnc3VzcGVuZGVkJykge1xuICAgICAgICAgICAgdGhpcy5yZXRyeUNvdW50ID0gMDtcbiAgICAgICAgfVxuICAgICAgICAvKiBOb3RlOiB3ZSBkb24ndCBzZXQgaW5Qcm9ncmVzcyBmb3IgcGVuZGluZyBzdGF0ZXMgdW50aWwgdGhlIHJlcXVlc3QgaXMgYWN0dWFsbHkgaW4gcHJvZ3Jlc3MgKi9cbiAgICAgICAgaWYgKHN0YXRlID09PSAnYXR0YWNoZWQnKSB7XG4gICAgICAgICAgICB0aGlzLm9uQXR0YWNoZWQoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhdGUgPT09ICdhdHRhY2hlZCcpIHtcbiAgICAgICAgICAgIHRoaXMuX2F0dGFjaFJlc3VtZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc3RhdGUgPT09ICdkZXRhY2hpbmcnIHx8IHN0YXRlID09PSAnZmFpbGVkJykge1xuICAgICAgICAgICAgdGhpcy5fYXR0YWNoUmVzdW1lID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xuICAgICAgICB0aGlzLl9hbGxDaGFubmVsQ2hhbmdlcy5lbWl0KHN0YXRlLCBjaGFuZ2UpO1xuICAgICAgICB0aGlzLmVtaXQoc3RhdGUsIGNoYW5nZSk7XG4gICAgfTtcbiAgICBSZWFsdGltZUNoYW5uZWwucHJvdG90eXBlLnJlcXVlc3RTdGF0ZSA9IGZ1bmN0aW9uIChzdGF0ZSwgcmVhc29uKSB7XG4gICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01JTk9SLCAnUmVhbHRpbWVDaGFubmVsLnJlcXVlc3RTdGF0ZScsICduYW1lID0gJyArIHRoaXMubmFtZSArICcsIHN0YXRlID0gJyArIHN0YXRlKTtcbiAgICAgICAgdGhpcy5ub3RpZnlTdGF0ZShzdGF0ZSwgcmVhc29uKTtcbiAgICAgICAgLyogc2VuZCB0aGUgZXZlbnQgYW5kIGF3YWl0IHJlc3BvbnNlICovXG4gICAgICAgIHRoaXMuY2hlY2tQZW5kaW5nU3RhdGUoKTtcbiAgICB9O1xuICAgIFJlYWx0aW1lQ2hhbm5lbC5wcm90b3R5cGUuY2hlY2tQZW5kaW5nU3RhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8qIGlmIGNhbid0IHNlbmQgZXZlbnRzLCBkbyBub3RoaW5nICovXG4gICAgICAgIHZhciBjbVN0YXRlID0gdGhpcy5jb25uZWN0aW9uTWFuYWdlci5zdGF0ZTtcbiAgICAgICAgLyogQWxsb3cgYXR0YWNoIG1lc3NhZ2VzIHRvIHF1ZXVlIHVwIHdoZW4gc3luY2hyb25pemluZywgc2luY2UgdGhpcyB3aWxsIGJlXG4gICAgICAgICAqIHRoZSBzdGF0ZSB3ZSdsbCBiZSBpbiB3aGVuIHVwZ3JhZGUgdHJhbnNwb3J0LmFjdGl2ZSB0cmlnZ2VycyBhIGNoZWNrcGVuZGluZ3N0YXRlICovXG4gICAgICAgIGlmICghKGNtU3RhdGUuc2VuZEV2ZW50cyB8fCBjbVN0YXRlLmZvcmNlUXVldWVFdmVudHMpKSB7XG4gICAgICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19NSU5PUiwgJ1JlYWx0aW1lQ2hhbm5lbC5jaGVja1BlbmRpbmdTdGF0ZScsICdzZW5kRXZlbnRzIGlzIGZhbHNlOyBzdGF0ZSBpcyAnICsgdGhpcy5jb25uZWN0aW9uTWFuYWdlci5zdGF0ZS5zdGF0ZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlOT1IsICdSZWFsdGltZUNoYW5uZWwuY2hlY2tQZW5kaW5nU3RhdGUnLCAnbmFtZSA9ICcgKyB0aGlzLm5hbWUgKyAnLCBzdGF0ZSA9ICcgKyB0aGlzLnN0YXRlKTtcbiAgICAgICAgLyogT25seSBzdGFydCB0aGUgc3RhdGUgdGltZXIgcnVubmluZyB3aGVuIGFjdHVhbGx5IHNlbmRpbmcgdGhlIGV2ZW50ICovXG4gICAgICAgIHN3aXRjaCAodGhpcy5zdGF0ZSkge1xuICAgICAgICAgICAgY2FzZSAnYXR0YWNoaW5nJzpcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0U3RhdGVUaW1lcklmTm90UnVubmluZygpO1xuICAgICAgICAgICAgICAgIHRoaXMuYXR0YWNoSW1wbCgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZGV0YWNoaW5nJzpcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0U3RhdGVUaW1lcklmTm90UnVubmluZygpO1xuICAgICAgICAgICAgICAgIHRoaXMuZGV0YWNoSW1wbCgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnYXR0YWNoZWQnOlxuICAgICAgICAgICAgICAgIC8qIHJlc3VtZSBhbnkgc3luYyBvcGVyYXRpb24gdGhhdCB3YXMgaW4gcHJvZ3Jlc3MgKi9cbiAgICAgICAgICAgICAgICB0aGlzLnN5bmMoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFJlYWx0aW1lQ2hhbm5lbC5wcm90b3R5cGUudGltZW91dFBlbmRpbmdTdGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLnN0YXRlKSB7XG4gICAgICAgICAgICBjYXNlICdhdHRhY2hpbmcnOiB7XG4gICAgICAgICAgICAgICAgdmFyIGVyciA9IG5ldyBlcnJvcmluZm9fMS5kZWZhdWx0KCdDaGFubmVsIGF0dGFjaCB0aW1lZCBvdXQnLCA5MDAwNywgNDA4KTtcbiAgICAgICAgICAgICAgICB0aGlzLm5vdGlmeVN0YXRlKCdzdXNwZW5kZWQnLCBlcnIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAnZGV0YWNoaW5nJzoge1xuICAgICAgICAgICAgICAgIHZhciBlcnIgPSBuZXcgZXJyb3JpbmZvXzEuZGVmYXVsdCgnQ2hhbm5lbCBkZXRhY2ggdGltZWQgb3V0JywgOTAwMDcsIDQwOCk7XG4gICAgICAgICAgICAgICAgdGhpcy5ub3RpZnlTdGF0ZSgnYXR0YWNoZWQnLCBlcnIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aGlzLmNoZWNrUGVuZGluZ1N0YXRlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFJlYWx0aW1lQ2hhbm5lbC5wcm90b3R5cGUuc3RhcnRTdGF0ZVRpbWVySWZOb3RSdW5uaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAoIXRoaXMuc3RhdGVUaW1lcikge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZVRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlOT1IsICdSZWFsdGltZUNoYW5uZWwuc3RhcnRTdGF0ZVRpbWVySWZOb3RSdW5uaW5nJywgJ3RpbWVyIGV4cGlyZWQnKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5zdGF0ZVRpbWVyID0gbnVsbDtcbiAgICAgICAgICAgICAgICBfdGhpcy50aW1lb3V0UGVuZGluZ1N0YXRlKCk7XG4gICAgICAgICAgICB9LCB0aGlzLnJlYWx0aW1lLm9wdGlvbnMudGltZW91dHMucmVhbHRpbWVSZXF1ZXN0VGltZW91dCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFJlYWx0aW1lQ2hhbm5lbC5wcm90b3R5cGUuY2xlYXJTdGF0ZVRpbWVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc3RhdGVUaW1lciA9IHRoaXMuc3RhdGVUaW1lcjtcbiAgICAgICAgaWYgKHN0YXRlVGltZXIpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dChzdGF0ZVRpbWVyKTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGVUaW1lciA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFJlYWx0aW1lQ2hhbm5lbC5wcm90b3R5cGUuc3RhcnRSZXRyeVRpbWVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAodGhpcy5yZXRyeVRpbWVyKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLnJldHJ5Q291bnQrKztcbiAgICAgICAgdmFyIHJldHJ5RGVsYXkgPSBVdGlscy5nZXRSZXRyeVRpbWUodGhpcy5yZWFsdGltZS5vcHRpb25zLnRpbWVvdXRzLmNoYW5uZWxSZXRyeVRpbWVvdXQsIHRoaXMucmV0cnlDb3VudCk7XG4gICAgICAgIHRoaXMucmV0cnlUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLyogSWYgY29ubmVjdGlvbiBpcyBub3QgY29ubmVjdGVkLCBqdXN0IGxlYXZlIGluIHN1c3BlbmRlZCwgYSByZWF0dGFjaFxuICAgICAgICAgICAgICogd2lsbCBiZSB0cmlnZ2VyZWQgb25jZSBpdCBjb25uZWN0cyBhZ2FpbiAqL1xuICAgICAgICAgICAgaWYgKF90aGlzLnN0YXRlID09PSAnc3VzcGVuZGVkJyAmJiBfdGhpcy5jb25uZWN0aW9uTWFuYWdlci5zdGF0ZS5zZW5kRXZlbnRzKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMucmV0cnlUaW1lciA9IG51bGw7XG4gICAgICAgICAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlOT1IsICdSZWFsdGltZUNoYW5uZWwgcmV0cnkgdGltZXIgZXhwaXJlZCcsICdhdHRlbXB0aW5nIGEgbmV3IGF0dGFjaCcpO1xuICAgICAgICAgICAgICAgIF90aGlzLnJlcXVlc3RTdGF0ZSgnYXR0YWNoaW5nJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHJldHJ5RGVsYXkpO1xuICAgIH07XG4gICAgUmVhbHRpbWVDaGFubmVsLnByb3RvdHlwZS5jYW5jZWxSZXRyeVRpbWVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5yZXRyeVRpbWVyKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5yZXRyeVRpbWVyKTtcbiAgICAgICAgICAgIHRoaXMucmV0cnlUaW1lciA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qIEByZXR1cm5zIG51bGwgKGlmIGNhbiBzYWZlbHkgYmUgcmVsZWFzZWQpIHwgRXJyb3JJbmZvIChpZiBjYW5ub3QpICovXG4gICAgUmVhbHRpbWVDaGFubmVsLnByb3RvdHlwZS5nZXRSZWxlYXNlRXJyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcyA9IHRoaXMuc3RhdGU7XG4gICAgICAgIGlmIChzID09PSAnaW5pdGlhbGl6ZWQnIHx8IHMgPT09ICdkZXRhY2hlZCcgfHwgcyA9PT0gJ2ZhaWxlZCcpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgZXJyb3JpbmZvXzEuZGVmYXVsdCgnQ2FuIG9ubHkgcmVsZWFzZSBhIGNoYW5uZWwgaW4gYSBzdGF0ZSB3aGVyZSB0aGVyZSBpcyBubyBwb3NzaWJpbGl0eSBvZiBmdXJ0aGVyIHVwZGF0ZXMgZnJvbSB0aGUgc2VydmVyIGJlaW5nIHJlY2VpdmVkIChpbml0aWFsaXplZCwgZGV0YWNoZWQsIG9yIGZhaWxlZCk7IHdhcyAnICtcbiAgICAgICAgICAgIHMsIDkwMDAxLCA0MDApO1xuICAgIH07XG4gICAgUmVhbHRpbWVDaGFubmVsLnByb3RvdHlwZS5zZXRDaGFubmVsU2VyaWFsID0gZnVuY3Rpb24gKGNoYW5uZWxTZXJpYWwpIHtcbiAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlDUk8sICdSZWFsdGltZUNoYW5uZWwuc2V0Q2hhbm5lbFNlcmlhbCgpJywgJ1VwZGF0aW5nIGNoYW5uZWwgc2VyaWFsOyBzZXJpYWwgPSAnICsgY2hhbm5lbFNlcmlhbCArICc7IHByZXZpb3VzID0gJyArIHRoaXMucHJvcGVydGllcy5jaGFubmVsU2VyaWFsKTtcbiAgICAgICAgLy8gUlRQMTdoOiBPbmx5IHVwZGF0ZSB0aGUgY2hhbm5lbCBzZXJpYWwgaWYgaXRzIHByZXNlbnQgKGl0IHdvbid0IGFsd2F5c1xuICAgICAgICAvLyBiZSBzZXQpLlxuICAgICAgICBpZiAoY2hhbm5lbFNlcmlhbCkge1xuICAgICAgICAgICAgdGhpcy5wcm9wZXJ0aWVzLmNoYW5uZWxTZXJpYWwgPSBjaGFubmVsU2VyaWFsO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gUmVhbHRpbWVDaGFubmVsO1xufShjaGFubmVsXzEuZGVmYXVsdCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gUmVhbHRpbWVDaGFubmVsO1xuXG5cbi8qKiovIH0pLFxuLyogMzkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBDaGFubmVsU3RhdGVDaGFuZ2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ2hhbm5lbFN0YXRlQ2hhbmdlKHByZXZpb3VzLCBjdXJyZW50LCByZXN1bWVkLCBoYXNCYWNrbG9nLCByZWFzb24pIHtcbiAgICAgICAgdGhpcy5wcmV2aW91cyA9IHByZXZpb3VzO1xuICAgICAgICB0aGlzLmN1cnJlbnQgPSBjdXJyZW50O1xuICAgICAgICBpZiAoY3VycmVudCA9PT0gJ2F0dGFjaGVkJykge1xuICAgICAgICAgICAgdGhpcy5yZXN1bWVkID0gcmVzdW1lZDtcbiAgICAgICAgICAgIHRoaXMuaGFzQmFja2xvZyA9IGhhc0JhY2tsb2c7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlYXNvbilcbiAgICAgICAgICAgIHRoaXMucmVhc29uID0gcmVhc29uO1xuICAgIH1cbiAgICByZXR1cm4gQ2hhbm5lbFN0YXRlQ2hhbmdlO1xufSgpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IENoYW5uZWxTdGF0ZUNoYW5nZTtcblxuXG4vKioqLyB9KSxcbi8qIDQwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbjsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYgKHRydWUpIHtcblx0XHQvLyBDb21tb25KU1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkoX193ZWJwYWNrX3JlcXVpcmVfXyg2KSk7XG5cdH1cblx0ZWxzZSB7fVxufSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHtcblxuXHQoZnVuY3Rpb24gKCkge1xuXHQgICAgLy8gU2hvcnRjdXRzXG5cdCAgICB2YXIgQyA9IENyeXB0b0pTO1xuXHQgICAgdmFyIENfbGliID0gQy5saWI7XG5cdCAgICB2YXIgV29yZEFycmF5ID0gQ19saWIuV29yZEFycmF5O1xuXHQgICAgdmFyIEhhc2hlciA9IENfbGliLkhhc2hlcjtcblx0ICAgIHZhciBDX2FsZ28gPSBDLmFsZ287XG5cblx0ICAgIC8vIFJldXNhYmxlIG9iamVjdFxuXHQgICAgdmFyIFcgPSBbXTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBTSEEtMSBoYXNoIGFsZ29yaXRobS5cblx0ICAgICAqL1xuXHQgICAgdmFyIFNIQTEgPSBDX2FsZ28uU0hBMSA9IEhhc2hlci5leHRlbmQoe1xuXHQgICAgICAgIF9kb1Jlc2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2hhc2ggPSBuZXcgV29yZEFycmF5LmluaXQoW1xuXHQgICAgICAgICAgICAgICAgMHg2NzQ1MjMwMSwgMHhlZmNkYWI4OSxcblx0ICAgICAgICAgICAgICAgIDB4OThiYWRjZmUsIDB4MTAzMjU0NzYsXG5cdCAgICAgICAgICAgICAgICAweGMzZDJlMWYwXG5cdCAgICAgICAgICAgIF0pO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBfZG9Qcm9jZXNzQmxvY2s6IGZ1bmN0aW9uIChNLCBvZmZzZXQpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICAgICAgdmFyIEggPSB0aGlzLl9oYXNoLndvcmRzO1xuXG5cdCAgICAgICAgICAgIC8vIFdvcmtpbmcgdmFyaWFibGVzXG5cdCAgICAgICAgICAgIHZhciBhID0gSFswXTtcblx0ICAgICAgICAgICAgdmFyIGIgPSBIWzFdO1xuXHQgICAgICAgICAgICB2YXIgYyA9IEhbMl07XG5cdCAgICAgICAgICAgIHZhciBkID0gSFszXTtcblx0ICAgICAgICAgICAgdmFyIGUgPSBIWzRdO1xuXG5cdCAgICAgICAgICAgIC8vIENvbXB1dGF0aW9uXG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgODA7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgaWYgKGkgPCAxNikge1xuXHQgICAgICAgICAgICAgICAgICAgIFdbaV0gPSBNW29mZnNldCArIGldIHwgMDtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBXW2kgLSAzXSBeIFdbaSAtIDhdIF4gV1tpIC0gMTRdIF4gV1tpIC0gMTZdO1xuXHQgICAgICAgICAgICAgICAgICAgIFdbaV0gPSAobiA8PCAxKSB8IChuID4+PiAzMSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIHZhciB0ID0gKChhIDw8IDUpIHwgKGEgPj4+IDI3KSkgKyBlICsgV1tpXTtcblx0ICAgICAgICAgICAgICAgIGlmIChpIDwgMjApIHtcblx0ICAgICAgICAgICAgICAgICAgICB0ICs9ICgoYiAmIGMpIHwgKH5iICYgZCkpICsgMHg1YTgyNzk5OTtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaSA8IDQwKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdCArPSAoYiBeIGMgXiBkKSArIDB4NmVkOWViYTE7XG5cdCAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGkgPCA2MCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHQgKz0gKChiICYgYykgfCAoYiAmIGQpIHwgKGMgJiBkKSkgLSAweDcwZTQ0MzI0O1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIC8qIGlmIChpIDwgODApICovIHtcblx0ICAgICAgICAgICAgICAgICAgICB0ICs9IChiIF4gYyBeIGQpIC0gMHgzNTlkM2UyYTtcblx0ICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgZSA9IGQ7XG5cdCAgICAgICAgICAgICAgICBkID0gYztcblx0ICAgICAgICAgICAgICAgIGMgPSAoYiA8PCAzMCkgfCAoYiA+Pj4gMik7XG5cdCAgICAgICAgICAgICAgICBiID0gYTtcblx0ICAgICAgICAgICAgICAgIGEgPSB0O1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gSW50ZXJtZWRpYXRlIGhhc2ggdmFsdWVcblx0ICAgICAgICAgICAgSFswXSA9IChIWzBdICsgYSkgfCAwO1xuXHQgICAgICAgICAgICBIWzFdID0gKEhbMV0gKyBiKSB8IDA7XG5cdCAgICAgICAgICAgIEhbMl0gPSAoSFsyXSArIGMpIHwgMDtcblx0ICAgICAgICAgICAgSFszXSA9IChIWzNdICsgZCkgfCAwO1xuXHQgICAgICAgICAgICBIWzRdID0gKEhbNF0gKyBlKSB8IDA7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIF9kb0ZpbmFsaXplOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgZGF0YSA9IHRoaXMuX2RhdGE7XG5cdCAgICAgICAgICAgIHZhciBkYXRhV29yZHMgPSBkYXRhLndvcmRzO1xuXG5cdCAgICAgICAgICAgIHZhciBuQml0c1RvdGFsID0gdGhpcy5fbkRhdGFCeXRlcyAqIDg7XG5cdCAgICAgICAgICAgIHZhciBuQml0c0xlZnQgPSBkYXRhLnNpZ0J5dGVzICogODtcblxuXHQgICAgICAgICAgICAvLyBBZGQgcGFkZGluZ1xuXHQgICAgICAgICAgICBkYXRhV29yZHNbbkJpdHNMZWZ0ID4+PiA1XSB8PSAweDgwIDw8ICgyNCAtIG5CaXRzTGVmdCAlIDMyKTtcblx0ICAgICAgICAgICAgZGF0YVdvcmRzWygoKG5CaXRzTGVmdCArIDY0KSA+Pj4gOSkgPDwgNCkgKyAxNF0gPSBNYXRoLmZsb29yKG5CaXRzVG90YWwgLyAweDEwMDAwMDAwMCk7XG5cdCAgICAgICAgICAgIGRhdGFXb3Jkc1soKChuQml0c0xlZnQgKyA2NCkgPj4+IDkpIDw8IDQpICsgMTVdID0gbkJpdHNUb3RhbDtcblx0ICAgICAgICAgICAgZGF0YS5zaWdCeXRlcyA9IGRhdGFXb3Jkcy5sZW5ndGggKiA0O1xuXG5cdCAgICAgICAgICAgIC8vIEhhc2ggZmluYWwgYmxvY2tzXG5cdCAgICAgICAgICAgIHRoaXMuX3Byb2Nlc3MoKTtcblxuXHQgICAgICAgICAgICAvLyBSZXR1cm4gZmluYWwgY29tcHV0ZWQgaGFzaFxuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5faGFzaDtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgY2xvbmU6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgdmFyIGNsb25lID0gSGFzaGVyLmNsb25lLmNhbGwodGhpcyk7XG5cdCAgICAgICAgICAgIGNsb25lLl9oYXNoID0gdGhpcy5faGFzaC5jbG9uZSgpO1xuXG5cdCAgICAgICAgICAgIHJldHVybiBjbG9uZTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgaGFzaGVyJ3Mgb2JqZWN0IGludGVyZmFjZS5cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC5cblx0ICAgICAqXG5cdCAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBoYXNoLlxuXHQgICAgICpcblx0ICAgICAqIEBzdGF0aWNcblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZVxuXHQgICAgICpcblx0ICAgICAqICAgICB2YXIgaGFzaCA9IENyeXB0b0pTLlNIQTEoJ21lc3NhZ2UnKTtcblx0ICAgICAqICAgICB2YXIgaGFzaCA9IENyeXB0b0pTLlNIQTEod29yZEFycmF5KTtcblx0ICAgICAqL1xuXHQgICAgQy5TSEExID0gSGFzaGVyLl9jcmVhdGVIZWxwZXIoU0hBMSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogU2hvcnRjdXQgZnVuY3Rpb24gdG8gdGhlIEhNQUMncyBvYmplY3QgaW50ZXJmYWNlLlxuXHQgICAgICpcblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBoYXNoLlxuXHQgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBrZXkgVGhlIHNlY3JldCBrZXkuXG5cdCAgICAgKlxuXHQgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgSE1BQy5cblx0ICAgICAqXG5cdCAgICAgKiBAc3RhdGljXG5cdCAgICAgKlxuXHQgICAgICogQGV4YW1wbGVcblx0ICAgICAqXG5cdCAgICAgKiAgICAgdmFyIGhtYWMgPSBDcnlwdG9KUy5IbWFjU0hBMShtZXNzYWdlLCBrZXkpO1xuXHQgICAgICovXG5cdCAgICBDLkhtYWNTSEExID0gSGFzaGVyLl9jcmVhdGVIbWFjSGVscGVyKFNIQTEpO1xuXHR9KCkpO1xuXG5cblx0cmV0dXJuIENyeXB0b0pTLlNIQTE7XG5cbn0pKTtcblxuLyoqKi8gfSksXG4vKiA0MSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZnVuY3Rpb24gaW5zcGVjdChidWZmZXIpIHtcbiAgICBpZiAoYnVmZmVyID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiAndW5kZWZpbmVkJztcbiAgICB2YXIgdmlldztcbiAgICB2YXIgdHlwZTtcbiAgICBpZiAoYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICAgICAgdHlwZSA9ICdBcnJheUJ1ZmZlcic7XG4gICAgICAgIHZpZXcgPSBuZXcgRGF0YVZpZXcoYnVmZmVyKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoYnVmZmVyIGluc3RhbmNlb2YgRGF0YVZpZXcpIHtcbiAgICAgICAgdHlwZSA9ICdEYXRhVmlldyc7XG4gICAgICAgIHZpZXcgPSBidWZmZXI7XG4gICAgfVxuICAgIGlmICghdmlldylcbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGJ1ZmZlcik7XG4gICAgdmFyIGJ5dGVzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBidWZmZXIuYnl0ZUxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChpID4gMjApIHtcbiAgICAgICAgICAgIGJ5dGVzLnB1c2goJy4uLicpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGJ5dGVfID0gdmlldy5nZXRVaW50OChpKS50b1N0cmluZygxNik7XG4gICAgICAgIGlmIChieXRlXy5sZW5ndGggPT09IDEpXG4gICAgICAgICAgICBieXRlXyA9ICcwJyArIGJ5dGVfO1xuICAgICAgICBieXRlcy5wdXNoKGJ5dGVfKTtcbiAgICB9XG4gICAgcmV0dXJuICc8JyArIHR5cGUgKyAnICcgKyBieXRlcy5qb2luKCcgJykgKyAnPic7XG59XG4vLyBFbmNvZGUgc3RyaW5nIGFzIHV0ZjggaW50byBkYXRhdmlldyBhdCBvZmZzZXRcbmZ1bmN0aW9uIHV0ZjhXcml0ZSh2aWV3LCBvZmZzZXQsIHN0cmluZykge1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gc3RyaW5nLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICB2YXIgY29kZVBvaW50ID0gc3RyaW5nLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIC8vIE9uZSBieXRlIG9mIFVURi04XG4gICAgICAgIGlmIChjb2RlUG9pbnQgPCAweDgwKSB7XG4gICAgICAgICAgICB2aWV3LnNldFVpbnQ4KG9mZnNldCsrLCAoKGNvZGVQb2ludCA+Pj4gMCkgJiAweDdmKSB8IDB4MDApO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVHdvIGJ5dGVzIG9mIFVURi04XG4gICAgICAgIGlmIChjb2RlUG9pbnQgPCAweDgwMCkge1xuICAgICAgICAgICAgdmlldy5zZXRVaW50OChvZmZzZXQrKywgKChjb2RlUG9pbnQgPj4+IDYpICYgMHgxZikgfCAweGMwKTtcbiAgICAgICAgICAgIHZpZXcuc2V0VWludDgob2Zmc2V0KyssICgoY29kZVBvaW50ID4+PiAwKSAmIDB4M2YpIHwgMHg4MCk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBUaHJlZSBieXRlcyBvZiBVVEYtOC5cbiAgICAgICAgaWYgKGNvZGVQb2ludCA8IDB4MTAwMDApIHtcbiAgICAgICAgICAgIHZpZXcuc2V0VWludDgob2Zmc2V0KyssICgoY29kZVBvaW50ID4+PiAxMikgJiAweDBmKSB8IDB4ZTApO1xuICAgICAgICAgICAgdmlldy5zZXRVaW50OChvZmZzZXQrKywgKChjb2RlUG9pbnQgPj4+IDYpICYgMHgzZikgfCAweDgwKTtcbiAgICAgICAgICAgIHZpZXcuc2V0VWludDgob2Zmc2V0KyssICgoY29kZVBvaW50ID4+PiAwKSAmIDB4M2YpIHwgMHg4MCk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBGb3VyIGJ5dGVzIG9mIFVURi04XG4gICAgICAgIGlmIChjb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgICAgICAgdmlldy5zZXRVaW50OChvZmZzZXQrKywgKChjb2RlUG9pbnQgPj4+IDE4KSAmIDB4MDcpIHwgMHhmMCk7XG4gICAgICAgICAgICB2aWV3LnNldFVpbnQ4KG9mZnNldCsrLCAoKGNvZGVQb2ludCA+Pj4gMTIpICYgMHgzZikgfCAweDgwKTtcbiAgICAgICAgICAgIHZpZXcuc2V0VWludDgob2Zmc2V0KyssICgoY29kZVBvaW50ID4+PiA2KSAmIDB4M2YpIHwgMHg4MCk7XG4gICAgICAgICAgICB2aWV3LnNldFVpbnQ4KG9mZnNldCsrLCAoKGNvZGVQb2ludCA+Pj4gMCkgJiAweDNmKSB8IDB4ODApO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdiYWQgY29kZXBvaW50ICcgKyBjb2RlUG9pbnQpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHV0ZjhSZWFkKHZpZXcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gICAgdmFyIHN0cmluZyA9ICcnO1xuICAgIGZvciAodmFyIGkgPSBvZmZzZXQsIGVuZCA9IG9mZnNldCArIGxlbmd0aDsgaSA8IGVuZDsgaSsrKSB7XG4gICAgICAgIHZhciBieXRlXyA9IHZpZXcuZ2V0VWludDgoaSk7XG4gICAgICAgIC8vIE9uZSBieXRlIGNoYXJhY3RlclxuICAgICAgICBpZiAoKGJ5dGVfICYgMHg4MCkgPT09IDB4MDApIHtcbiAgICAgICAgICAgIHN0cmluZyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGVfKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIFR3byBieXRlIGNoYXJhY3RlclxuICAgICAgICBpZiAoKGJ5dGVfICYgMHhlMCkgPT09IDB4YzApIHtcbiAgICAgICAgICAgIHN0cmluZyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKCgoYnl0ZV8gJiAweDBmKSA8PCA2KSB8ICh2aWV3LmdldFVpbnQ4KCsraSkgJiAweDNmKSk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBUaHJlZSBieXRlIGNoYXJhY3RlclxuICAgICAgICBpZiAoKGJ5dGVfICYgMHhmMCkgPT09IDB4ZTApIHtcbiAgICAgICAgICAgIHN0cmluZyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKCgoYnl0ZV8gJiAweDBmKSA8PCAxMikgfCAoKHZpZXcuZ2V0VWludDgoKytpKSAmIDB4M2YpIDw8IDYpIHwgKCh2aWV3LmdldFVpbnQ4KCsraSkgJiAweDNmKSA8PCAwKSk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBGb3VyIGJ5dGUgY2hhcmFjdGVyXG4gICAgICAgIGlmICgoYnl0ZV8gJiAweGY4KSA9PT0gMHhmMCkge1xuICAgICAgICAgICAgc3RyaW5nICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoKChieXRlXyAmIDB4MDcpIDw8IDE4KSB8XG4gICAgICAgICAgICAgICAgKCh2aWV3LmdldFVpbnQ4KCsraSkgJiAweDNmKSA8PCAxMikgfFxuICAgICAgICAgICAgICAgICgodmlldy5nZXRVaW50OCgrK2kpICYgMHgzZikgPDwgNikgfFxuICAgICAgICAgICAgICAgICgodmlldy5nZXRVaW50OCgrK2kpICYgMHgzZikgPDwgMCkpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGJ5dGUgJyArIGJ5dGVfLnRvU3RyaW5nKDE2KSk7XG4gICAgfVxuICAgIHJldHVybiBzdHJpbmc7XG59XG5mdW5jdGlvbiB1dGY4Qnl0ZUNvdW50KHN0cmluZykge1xuICAgIHZhciBjb3VudCA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBzdHJpbmcubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHZhciBjb2RlUG9pbnQgPSBzdHJpbmcuY2hhckNvZGVBdChpKTtcbiAgICAgICAgaWYgKGNvZGVQb2ludCA8IDB4ODApIHtcbiAgICAgICAgICAgIGNvdW50ICs9IDE7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29kZVBvaW50IDwgMHg4MDApIHtcbiAgICAgICAgICAgIGNvdW50ICs9IDI7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29kZVBvaW50IDwgMHgxMDAwMCkge1xuICAgICAgICAgICAgY291bnQgKz0gMztcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgICAgICAgY291bnQgKz0gNDtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignYmFkIGNvZGVwb2ludCAnICsgY29kZVBvaW50KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvdW50O1xufVxuZnVuY3Rpb24gZW5jb2RlKHZhbHVlLCBzcGFyc2UpIHtcbiAgICB2YXIgc2l6ZSA9IHNpemVvZih2YWx1ZSwgc3BhcnNlKTtcbiAgICBpZiAoc2l6ZSA9PT0gMClcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB2YXIgYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKHNpemUpO1xuICAgIHZhciB2aWV3ID0gbmV3IERhdGFWaWV3KGJ1ZmZlcik7XG4gICAgX2VuY29kZSh2YWx1ZSwgdmlldywgMCwgc3BhcnNlKTtcbiAgICByZXR1cm4gYnVmZmVyO1xufVxudmFyIFNIX0xfMzIgPSAoMSA8PCAxNikgKiAoMSA8PCAxNiksIFNIX1JfMzIgPSAxIC8gU0hfTF8zMjtcbmZ1bmN0aW9uIGdldEludDY0KHZpZXcsIG9mZnNldCkge1xuICAgIG9mZnNldCA9IG9mZnNldCB8fCAwO1xuICAgIHJldHVybiB2aWV3LmdldEludDMyKG9mZnNldCkgKiBTSF9MXzMyICsgdmlldy5nZXRVaW50MzIob2Zmc2V0ICsgNCk7XG59XG5mdW5jdGlvbiBnZXRVaW50NjQodmlldywgb2Zmc2V0KSB7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0IHx8IDA7XG4gICAgcmV0dXJuIHZpZXcuZ2V0VWludDMyKG9mZnNldCkgKiBTSF9MXzMyICsgdmlldy5nZXRVaW50MzIob2Zmc2V0ICsgNCk7XG59XG5mdW5jdGlvbiBzZXRJbnQ2NCh2aWV3LCBvZmZzZXQsIHZhbCkge1xuICAgIGlmICh2YWwgPCAweDgwMDAwMDAwMDAwMDAwMDApIHtcbiAgICAgICAgdmlldy5zZXRJbnQzMihvZmZzZXQsIE1hdGguZmxvb3IodmFsICogU0hfUl8zMikpO1xuICAgICAgICB2aWV3LnNldEludDMyKG9mZnNldCArIDQsIHZhbCAmIC0xKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZpZXcuc2V0VWludDMyKG9mZnNldCwgMHg3ZmZmZmZmZik7XG4gICAgICAgIHZpZXcuc2V0VWludDMyKG9mZnNldCArIDQsIDB4N2ZmZmZmZmYpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNldFVpbnQ2NCh2aWV3LCBvZmZzZXQsIHZhbCkge1xuICAgIGlmICh2YWwgPCAweDEwMDAwMDAwMDAwMDAwMDAwKSB7XG4gICAgICAgIHZpZXcuc2V0VWludDMyKG9mZnNldCwgTWF0aC5mbG9vcih2YWwgKiBTSF9SXzMyKSk7XG4gICAgICAgIHZpZXcuc2V0SW50MzIob2Zmc2V0ICsgNCwgdmFsICYgLTEpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdmlldy5zZXRVaW50MzIob2Zmc2V0LCAweGZmZmZmZmZmKTtcbiAgICAgICAgdmlldy5zZXRVaW50MzIob2Zmc2V0ICsgNCwgMHhmZmZmZmZmZik7XG4gICAgfVxufVxuLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vZnJzeXVraS81NDMyNTU5IC0gdjUgc3BlY1xuLy9cbi8vIEkndmUgdXNlZCBvbmUgZXh0ZW5zaW9uIHBvaW50IGZyb20gYGZpeGV4dCAxYCB0byBzdG9yZSBgdW5kZWZpbmVkYC4gT24gdGhlIHdpcmUgdGhpc1xuLy8gc2hvdWxkIHRyYW5zbGF0ZSB0byBleGFjdGx5IDB4ZDQwMDAwXG4vL1xuLy8gKy0tLS0tLS0tKy0tLS0tLS0tKy0tLS0tLS0tK1xuLy8gfCAgMHhkNCAgfCAgMHgwMCAgfCAgMHgwMCAgfFxuLy8gKy0tLS0tLS0tKy0tLS0tLS0tKy0tLS0tLS0tK1xuLy8gICAgXiBmaXhleHQgfCAgICAgICAgXiB2YWx1ZSBwYXJ0IHVudXNlZCAoZml4ZWQgdG8gYmUgMClcbi8vICAgICAgICAgICAgIF4gaW5kaWNhdGVzIHVuZGVmaW5lZCB2YWx1ZVxuLy9cbnZhciBEZWNvZGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERlY29kZXIodmlldywgb2Zmc2V0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMubWFwID0gZnVuY3Rpb24gKGxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIHZhbHVlID0ge307XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGtleSA9IF90aGlzLnBhcnNlKCk7XG4gICAgICAgICAgICAgICAgdmFsdWVba2V5XSA9IF90aGlzLnBhcnNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuYmluID0gZnVuY3Rpb24gKGxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gbmV3IEFycmF5QnVmZmVyKGxlbmd0aCk7XG4gICAgICAgICAgICBuZXcgVWludDhBcnJheSh2YWx1ZSkuc2V0KG5ldyBVaW50OEFycmF5KF90aGlzLnZpZXcuYnVmZmVyLCBfdGhpcy5vZmZzZXQsIGxlbmd0aCksIDApO1xuICAgICAgICAgICAgX3RoaXMub2Zmc2V0ICs9IGxlbmd0aDtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5idWYgPSB0aGlzLmJpbjtcbiAgICAgICAgdGhpcy5zdHIgPSBmdW5jdGlvbiAobGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSB1dGY4UmVhZChfdGhpcy52aWV3LCBfdGhpcy5vZmZzZXQsIGxlbmd0aCk7XG4gICAgICAgICAgICBfdGhpcy5vZmZzZXQgKz0gbGVuZ3RoO1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmFycmF5ID0gZnVuY3Rpb24gKGxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gbmV3IEFycmF5KGxlbmd0aCk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFsdWVbaV0gPSBfdGhpcy5wYXJzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmV4dCA9IGZ1bmN0aW9uIChsZW5ndGgpIHtcbiAgICAgICAgICAgIF90aGlzLm9mZnNldCArPSBsZW5ndGg7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6IF90aGlzLnZpZXcuZ2V0SW50OChfdGhpcy5vZmZzZXQpLFxuICAgICAgICAgICAgICAgIGRhdGE6IF90aGlzLmJ1ZihsZW5ndGgpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5wYXJzZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB0eXBlID0gX3RoaXMudmlldy5nZXRVaW50OChfdGhpcy5vZmZzZXQpO1xuICAgICAgICAgICAgdmFyIHZhbHVlLCBsZW5ndGg7XG4gICAgICAgICAgICAvLyBQb3NpdGl2ZSBGaXhJbnQgLSAweHh4eHh4eFxuICAgICAgICAgICAgaWYgKCh0eXBlICYgMHg4MCkgPT09IDB4MDApIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5vZmZzZXQrKztcbiAgICAgICAgICAgICAgICByZXR1cm4gdHlwZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEZpeE1hcCAtIDEwMDB4eHh4XG4gICAgICAgICAgICBpZiAoKHR5cGUgJiAweGYwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgICAgIGxlbmd0aCA9IHR5cGUgJiAweDBmO1xuICAgICAgICAgICAgICAgIF90aGlzLm9mZnNldCsrO1xuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5tYXAobGVuZ3RoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEZpeEFycmF5IC0gMTAwMXh4eHhcbiAgICAgICAgICAgIGlmICgodHlwZSAmIDB4ZjApID09PSAweDkwKSB7XG4gICAgICAgICAgICAgICAgbGVuZ3RoID0gdHlwZSAmIDB4MGY7XG4gICAgICAgICAgICAgICAgX3RoaXMub2Zmc2V0Kys7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmFycmF5KGxlbmd0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBGaXhTdHIgLSAxMDF4eHh4eFxuICAgICAgICAgICAgaWYgKCh0eXBlICYgMHhlMCkgPT09IDB4YTApIHtcbiAgICAgICAgICAgICAgICBsZW5ndGggPSB0eXBlICYgMHgxZjtcbiAgICAgICAgICAgICAgICBfdGhpcy5vZmZzZXQrKztcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuc3RyKGxlbmd0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBOZWdhdGl2ZSBGaXhJbnQgLSAxMTF4eHh4eFxuICAgICAgICAgICAgaWYgKCh0eXBlICYgMHhlMCkgPT09IDB4ZTApIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IF90aGlzLnZpZXcuZ2V0SW50OChfdGhpcy5vZmZzZXQpO1xuICAgICAgICAgICAgICAgIF90aGlzLm9mZnNldCsrO1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgICAgIC8vIG5pbFxuICAgICAgICAgICAgICAgIGNhc2UgMHhjMDpcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMub2Zmc2V0Kys7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIC8vIDB4YzEgbmV2ZXIgdXNlZCAtIHVzZSBmb3IgdW5kZWZpbmVkIChOT04tU1RBTkRBUkQpXG4gICAgICAgICAgICAgICAgY2FzZSAweGMxOlxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5vZmZzZXQrKztcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAvLyBmYWxzZVxuICAgICAgICAgICAgICAgIGNhc2UgMHhjMjpcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMub2Zmc2V0Kys7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAvLyB0cnVlXG4gICAgICAgICAgICAgICAgY2FzZSAweGMzOlxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5vZmZzZXQrKztcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgLy8gYmluIDhcbiAgICAgICAgICAgICAgICBjYXNlIDB4YzQ6XG4gICAgICAgICAgICAgICAgICAgIGxlbmd0aCA9IF90aGlzLnZpZXcuZ2V0VWludDgoX3RoaXMub2Zmc2V0ICsgMSk7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLm9mZnNldCArPSAyO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuYmluKGxlbmd0aCk7XG4gICAgICAgICAgICAgICAgLy8gYmluIDE2XG4gICAgICAgICAgICAgICAgY2FzZSAweGM1OlxuICAgICAgICAgICAgICAgICAgICBsZW5ndGggPSBfdGhpcy52aWV3LmdldFVpbnQxNihfdGhpcy5vZmZzZXQgKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMub2Zmc2V0ICs9IDM7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5iaW4obGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAvLyBiaW4gMzJcbiAgICAgICAgICAgICAgICBjYXNlIDB4YzY6XG4gICAgICAgICAgICAgICAgICAgIGxlbmd0aCA9IF90aGlzLnZpZXcuZ2V0VWludDMyKF90aGlzLm9mZnNldCArIDEpO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5vZmZzZXQgKz0gNTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmJpbihsZW5ndGgpO1xuICAgICAgICAgICAgICAgIC8vIGV4dCA4XG4gICAgICAgICAgICAgICAgY2FzZSAweGM3OlxuICAgICAgICAgICAgICAgICAgICBsZW5ndGggPSBfdGhpcy52aWV3LmdldFVpbnQ4KF90aGlzLm9mZnNldCArIDEpO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5vZmZzZXQgKz0gMjtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmV4dChsZW5ndGgpO1xuICAgICAgICAgICAgICAgIC8vIGV4dCAxNlxuICAgICAgICAgICAgICAgIGNhc2UgMHhjODpcbiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoID0gX3RoaXMudmlldy5nZXRVaW50MTYoX3RoaXMub2Zmc2V0ICsgMSk7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLm9mZnNldCArPSAzO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuZXh0KGxlbmd0aCk7XG4gICAgICAgICAgICAgICAgLy8gZXh0IDMyXG4gICAgICAgICAgICAgICAgY2FzZSAweGM5OlxuICAgICAgICAgICAgICAgICAgICBsZW5ndGggPSBfdGhpcy52aWV3LmdldFVpbnQzMihfdGhpcy5vZmZzZXQgKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMub2Zmc2V0ICs9IDU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5leHQobGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAvLyBmbG9hdCAzMlxuICAgICAgICAgICAgICAgIGNhc2UgMHhjYTpcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBfdGhpcy52aWV3LmdldEZsb2F0MzIoX3RoaXMub2Zmc2V0ICsgMSk7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLm9mZnNldCArPSA1O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICAgICAgLy8gZmxvYXQgNjRcbiAgICAgICAgICAgICAgICBjYXNlIDB4Y2I6XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gX3RoaXMudmlldy5nZXRGbG9hdDY0KF90aGlzLm9mZnNldCArIDEpO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5vZmZzZXQgKz0gOTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgICAgIC8vIHVpbnQ4XG4gICAgICAgICAgICAgICAgY2FzZSAweGNjOlxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IF90aGlzLnZpZXcuZ2V0VWludDgoX3RoaXMub2Zmc2V0ICsgMSk7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLm9mZnNldCArPSAyO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICAgICAgLy8gdWludCAxNlxuICAgICAgICAgICAgICAgIGNhc2UgMHhjZDpcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBfdGhpcy52aWV3LmdldFVpbnQxNihfdGhpcy5vZmZzZXQgKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMub2Zmc2V0ICs9IDM7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgICAgICAvLyB1aW50IDMyXG4gICAgICAgICAgICAgICAgY2FzZSAweGNlOlxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IF90aGlzLnZpZXcuZ2V0VWludDMyKF90aGlzLm9mZnNldCArIDEpO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5vZmZzZXQgKz0gNTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgICAgIC8vIHVpbnQgNjRcbiAgICAgICAgICAgICAgICBjYXNlIDB4Y2Y6XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gZ2V0VWludDY0KF90aGlzLnZpZXcsIF90aGlzLm9mZnNldCArIDEpO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5vZmZzZXQgKz0gOTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgICAgIC8vIGludCA4XG4gICAgICAgICAgICAgICAgY2FzZSAweGQwOlxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IF90aGlzLnZpZXcuZ2V0SW50OChfdGhpcy5vZmZzZXQgKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMub2Zmc2V0ICs9IDI7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgICAgICAvLyBpbnQgMTZcbiAgICAgICAgICAgICAgICBjYXNlIDB4ZDE6XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gX3RoaXMudmlldy5nZXRJbnQxNihfdGhpcy5vZmZzZXQgKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMub2Zmc2V0ICs9IDM7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgICAgICAvLyBpbnQgMzJcbiAgICAgICAgICAgICAgICBjYXNlIDB4ZDI6XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gX3RoaXMudmlldy5nZXRJbnQzMihfdGhpcy5vZmZzZXQgKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMub2Zmc2V0ICs9IDU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgICAgICAvLyBpbnQgNjRcbiAgICAgICAgICAgICAgICBjYXNlIDB4ZDM6XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gZ2V0SW50NjQoX3RoaXMudmlldywgX3RoaXMub2Zmc2V0ICsgMSk7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLm9mZnNldCArPSA5O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICAgICAgLy8gZml4ZXh0IDFcbiAgICAgICAgICAgICAgICBjYXNlIDB4ZDQ6XG4gICAgICAgICAgICAgICAgICAgIGxlbmd0aCA9IDE7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLm9mZnNldCsrO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuZXh0KGxlbmd0aCk7XG4gICAgICAgICAgICAgICAgLy8gZml4ZXh0IDJcbiAgICAgICAgICAgICAgICBjYXNlIDB4ZDU6XG4gICAgICAgICAgICAgICAgICAgIGxlbmd0aCA9IDI7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLm9mZnNldCsrO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuZXh0KGxlbmd0aCk7XG4gICAgICAgICAgICAgICAgLy8gZml4ZXh0IDRcbiAgICAgICAgICAgICAgICBjYXNlIDB4ZDY6XG4gICAgICAgICAgICAgICAgICAgIGxlbmd0aCA9IDQ7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLm9mZnNldCsrO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuZXh0KGxlbmd0aCk7XG4gICAgICAgICAgICAgICAgLy8gZml4ZXh0IDhcbiAgICAgICAgICAgICAgICBjYXNlIDB4ZDc6XG4gICAgICAgICAgICAgICAgICAgIGxlbmd0aCA9IDg7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLm9mZnNldCsrO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuZXh0KGxlbmd0aCk7XG4gICAgICAgICAgICAgICAgLy8gZml4ZXh0IDE2XG4gICAgICAgICAgICAgICAgY2FzZSAweGQ4OlxuICAgICAgICAgICAgICAgICAgICBsZW5ndGggPSAxNjtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMub2Zmc2V0Kys7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5leHQobGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAvLyBzdHI4XG4gICAgICAgICAgICAgICAgY2FzZSAweGQ5OlxuICAgICAgICAgICAgICAgICAgICBsZW5ndGggPSBfdGhpcy52aWV3LmdldFVpbnQ4KF90aGlzLm9mZnNldCArIDEpO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5vZmZzZXQgKz0gMjtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLnN0cihsZW5ndGgpO1xuICAgICAgICAgICAgICAgIC8vIHN0ciAxNlxuICAgICAgICAgICAgICAgIGNhc2UgMHhkYTpcbiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoID0gX3RoaXMudmlldy5nZXRVaW50MTYoX3RoaXMub2Zmc2V0ICsgMSk7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLm9mZnNldCArPSAzO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuc3RyKGxlbmd0aCk7XG4gICAgICAgICAgICAgICAgLy8gc3RyIDMyXG4gICAgICAgICAgICAgICAgY2FzZSAweGRiOlxuICAgICAgICAgICAgICAgICAgICBsZW5ndGggPSBfdGhpcy52aWV3LmdldFVpbnQzMihfdGhpcy5vZmZzZXQgKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMub2Zmc2V0ICs9IDU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5zdHIobGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAvLyBhcnJheSAxNlxuICAgICAgICAgICAgICAgIGNhc2UgMHhkYzpcbiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoID0gX3RoaXMudmlldy5nZXRVaW50MTYoX3RoaXMub2Zmc2V0ICsgMSk7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLm9mZnNldCArPSAzO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuYXJyYXkobGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAvLyBhcnJheSAzMlxuICAgICAgICAgICAgICAgIGNhc2UgMHhkZDpcbiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoID0gX3RoaXMudmlldy5nZXRVaW50MzIoX3RoaXMub2Zmc2V0ICsgMSk7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLm9mZnNldCArPSA1O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuYXJyYXkobGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAvLyBtYXAgMTZcbiAgICAgICAgICAgICAgICBjYXNlIDB4ZGU6XG4gICAgICAgICAgICAgICAgICAgIGxlbmd0aCA9IF90aGlzLnZpZXcuZ2V0VWludDE2KF90aGlzLm9mZnNldCArIDEpO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5vZmZzZXQgKz0gMztcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLm1hcChsZW5ndGgpO1xuICAgICAgICAgICAgICAgIC8vIG1hcCAzMlxuICAgICAgICAgICAgICAgIGNhc2UgMHhkZjpcbiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoID0gX3RoaXMudmlldy5nZXRVaW50MzIoX3RoaXMub2Zmc2V0ICsgMSk7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLm9mZnNldCArPSA1O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMubWFwKGxlbmd0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gdHlwZSAweCcgKyB0eXBlLnRvU3RyaW5nKDE2KSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMub2Zmc2V0ID0gb2Zmc2V0IHx8IDA7XG4gICAgICAgIHRoaXMudmlldyA9IHZpZXc7XG4gICAgfVxuICAgIHJldHVybiBEZWNvZGVyO1xufSgpKTtcbmZ1bmN0aW9uIGRlY29kZShidWZmZXIpIHtcbiAgICB2YXIgdmlldyA9IG5ldyBEYXRhVmlldyhidWZmZXIpO1xuICAgIHZhciBkZWNvZGVyID0gbmV3IERlY29kZXIodmlldyk7XG4gICAgdmFyIHZhbHVlID0gZGVjb2Rlci5wYXJzZSgpO1xuICAgIGlmIChkZWNvZGVyLm9mZnNldCAhPT0gYnVmZmVyLmJ5dGVMZW5ndGgpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihidWZmZXIuYnl0ZUxlbmd0aCAtIGRlY29kZXIub2Zmc2V0ICsgJyB0cmFpbGluZyBieXRlcycpO1xuICAgIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIGVuY29kZWFibGVLZXlzKHZhbHVlLCBzcGFyc2UpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXModmFsdWUpLmZpbHRlcihmdW5jdGlvbiAoZSkge1xuICAgICAgICB2YXIgdmFsID0gdmFsdWVbZV0sIHR5cGUgPSB0eXBlb2YgdmFsO1xuICAgICAgICByZXR1cm4gKCFzcGFyc2UgfHwgKHZhbCAhPT0gdW5kZWZpbmVkICYmIHZhbCAhPT0gbnVsbCkpICYmICgnZnVuY3Rpb24nICE9PSB0eXBlIHx8ICEhdmFsLnRvSlNPTik7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBfZW5jb2RlKHZhbHVlLCB2aWV3LCBvZmZzZXQsIHNwYXJzZSkge1xuICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgIC8vIFN0cmluZ3MgQnl0ZXNcbiAgICAvLyBUaGVyZSBhcmUgZm91ciBzdHJpbmcgdHlwZXM6IGZpeHN0ci9zdHI4L3N0cjE2L3N0cjMyXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdmFyIGxlbmd0aF8xID0gdXRmOEJ5dGVDb3VudCh2YWx1ZSk7XG4gICAgICAgIC8vIGZpeHN0clxuICAgICAgICBpZiAobGVuZ3RoXzEgPCAweDIwKSB7XG4gICAgICAgICAgICB2aWV3LnNldFVpbnQ4KG9mZnNldCwgbGVuZ3RoXzEgfCAweGEwKTtcbiAgICAgICAgICAgIHV0ZjhXcml0ZSh2aWV3LCBvZmZzZXQgKyAxLCB2YWx1ZSk7XG4gICAgICAgICAgICByZXR1cm4gMSArIGxlbmd0aF8xO1xuICAgICAgICB9XG4gICAgICAgIC8vIHN0cjhcbiAgICAgICAgaWYgKGxlbmd0aF8xIDwgMHgxMDApIHtcbiAgICAgICAgICAgIHZpZXcuc2V0VWludDgob2Zmc2V0LCAweGQ5KTtcbiAgICAgICAgICAgIHZpZXcuc2V0VWludDgob2Zmc2V0ICsgMSwgbGVuZ3RoXzEpO1xuICAgICAgICAgICAgdXRmOFdyaXRlKHZpZXcsIG9mZnNldCArIDIsIHZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiAyICsgbGVuZ3RoXzE7XG4gICAgICAgIH1cbiAgICAgICAgLy8gc3RyMTZcbiAgICAgICAgaWYgKGxlbmd0aF8xIDwgMHgxMDAwMCkge1xuICAgICAgICAgICAgdmlldy5zZXRVaW50OChvZmZzZXQsIDB4ZGEpO1xuICAgICAgICAgICAgdmlldy5zZXRVaW50MTYob2Zmc2V0ICsgMSwgbGVuZ3RoXzEpO1xuICAgICAgICAgICAgdXRmOFdyaXRlKHZpZXcsIG9mZnNldCArIDMsIHZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiAzICsgbGVuZ3RoXzE7XG4gICAgICAgIH1cbiAgICAgICAgLy8gc3RyMzJcbiAgICAgICAgaWYgKGxlbmd0aF8xIDwgMHgxMDAwMDAwMDApIHtcbiAgICAgICAgICAgIHZpZXcuc2V0VWludDgob2Zmc2V0LCAweGRiKTtcbiAgICAgICAgICAgIHZpZXcuc2V0VWludDMyKG9mZnNldCArIDEsIGxlbmd0aF8xKTtcbiAgICAgICAgICAgIHV0ZjhXcml0ZSh2aWV3LCBvZmZzZXQgKyA1LCB2YWx1ZSk7XG4gICAgICAgICAgICByZXR1cm4gNSArIGxlbmd0aF8xO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcgJiYgQXJyYXlCdWZmZXIuaXNWaWV3KHZhbHVlKSkge1xuICAgICAgICAvLyBleHRyYWN0IHRoZSBhcnJheWJ1ZmZlciBhbmQgZmFsbHRocm91Z2hcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5idWZmZXI7XG4gICAgfVxuICAgIC8vIFRoZXJlIGFyZSB0aHJlZSBiaW4gdHlwZXM6IGJpbjgvYmluMTYvYmluMzJcbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgICAgICB2YXIgbGVuZ3RoXzIgPSB2YWx1ZS5ieXRlTGVuZ3RoO1xuICAgICAgICAvLyBiaW44XG4gICAgICAgIGlmIChsZW5ndGhfMiA8IDB4MTAwKSB7XG4gICAgICAgICAgICB2aWV3LnNldFVpbnQ4KG9mZnNldCwgMHhjNCk7XG4gICAgICAgICAgICB2aWV3LnNldFVpbnQ4KG9mZnNldCArIDEsIGxlbmd0aF8yKTtcbiAgICAgICAgICAgIG5ldyBVaW50OEFycmF5KHZpZXcuYnVmZmVyKS5zZXQobmV3IFVpbnQ4QXJyYXkodmFsdWUpLCBvZmZzZXQgKyAyKTtcbiAgICAgICAgICAgIHJldHVybiAyICsgbGVuZ3RoXzI7XG4gICAgICAgIH1cbiAgICAgICAgLy8gYmluMTZcbiAgICAgICAgaWYgKGxlbmd0aF8yIDwgMHgxMDAwMCkge1xuICAgICAgICAgICAgdmlldy5zZXRVaW50OChvZmZzZXQsIDB4YzUpO1xuICAgICAgICAgICAgdmlldy5zZXRVaW50MTYob2Zmc2V0ICsgMSwgbGVuZ3RoXzIpO1xuICAgICAgICAgICAgbmV3IFVpbnQ4QXJyYXkodmlldy5idWZmZXIpLnNldChuZXcgVWludDhBcnJheSh2YWx1ZSksIG9mZnNldCArIDMpO1xuICAgICAgICAgICAgcmV0dXJuIDMgKyBsZW5ndGhfMjtcbiAgICAgICAgfVxuICAgICAgICAvLyBiaW4gMzJcbiAgICAgICAgaWYgKGxlbmd0aF8yIDwgMHgxMDAwMDAwMDApIHtcbiAgICAgICAgICAgIHZpZXcuc2V0VWludDgob2Zmc2V0LCAweGM2KTtcbiAgICAgICAgICAgIHZpZXcuc2V0VWludDMyKG9mZnNldCArIDEsIGxlbmd0aF8yKTtcbiAgICAgICAgICAgIG5ldyBVaW50OEFycmF5KHZpZXcuYnVmZmVyKS5zZXQobmV3IFVpbnQ4QXJyYXkodmFsdWUpLCBvZmZzZXQgKyA1KTtcbiAgICAgICAgICAgIHJldHVybiA1ICsgbGVuZ3RoXzI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgLy8gRmxvYXRpbmcgUG9pbnRcbiAgICAgICAgLy8gTk9URTogV2UncmUgYWx3YXlzIHVzaW5nIGZsb2F0NjRcbiAgICAgICAgaWYgKE1hdGguZmxvb3IodmFsdWUpICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgdmlldy5zZXRVaW50OChvZmZzZXQsIDB4Y2IpO1xuICAgICAgICAgICAgdmlldy5zZXRGbG9hdDY0KG9mZnNldCArIDEsIHZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiA5O1xuICAgICAgICB9XG4gICAgICAgIC8vIEludGVnZXJzXG4gICAgICAgIGlmICh2YWx1ZSA+PSAwKSB7XG4gICAgICAgICAgICAvLyBwb3NpdGl2ZSBmaXhudW1cbiAgICAgICAgICAgIGlmICh2YWx1ZSA8IDB4ODApIHtcbiAgICAgICAgICAgICAgICB2aWV3LnNldFVpbnQ4KG9mZnNldCwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdWludCA4XG4gICAgICAgICAgICBpZiAodmFsdWUgPCAweDEwMCkge1xuICAgICAgICAgICAgICAgIHZpZXcuc2V0VWludDgob2Zmc2V0LCAweGNjKTtcbiAgICAgICAgICAgICAgICB2aWV3LnNldFVpbnQ4KG9mZnNldCArIDEsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHVpbnQgMTZcbiAgICAgICAgICAgIGlmICh2YWx1ZSA8IDB4MTAwMDApIHtcbiAgICAgICAgICAgICAgICB2aWV3LnNldFVpbnQ4KG9mZnNldCwgMHhjZCk7XG4gICAgICAgICAgICAgICAgdmlldy5zZXRVaW50MTYob2Zmc2V0ICsgMSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiAzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdWludCAzMlxuICAgICAgICAgICAgaWYgKHZhbHVlIDwgMHgxMDAwMDAwMDApIHtcbiAgICAgICAgICAgICAgICB2aWV3LnNldFVpbnQ4KG9mZnNldCwgMHhjZSk7XG4gICAgICAgICAgICAgICAgdmlldy5zZXRVaW50MzIob2Zmc2V0ICsgMSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiA1O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdWludCA2NFxuICAgICAgICAgICAgaWYgKHZhbHVlIDwgMHgxMDAwMDAwMDAwMDAwMDAwMCkge1xuICAgICAgICAgICAgICAgIHZpZXcuc2V0VWludDgob2Zmc2V0LCAweGNmKTtcbiAgICAgICAgICAgICAgICBzZXRVaW50NjQodmlldywgb2Zmc2V0ICsgMSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiA5O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdOdW1iZXIgdG9vIGJpZyAweCcgKyB2YWx1ZS50b1N0cmluZygxNikpO1xuICAgICAgICB9XG4gICAgICAgIC8vIG5lZ2F0aXZlIGZpeG51bVxuICAgICAgICBpZiAodmFsdWUgPj0gLTB4MjApIHtcbiAgICAgICAgICAgIHZpZXcuc2V0SW50OChvZmZzZXQsIHZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgICAgIC8vIGludCA4XG4gICAgICAgIGlmICh2YWx1ZSA+PSAtMHg4MCkge1xuICAgICAgICAgICAgdmlldy5zZXRVaW50OChvZmZzZXQsIDB4ZDApO1xuICAgICAgICAgICAgdmlldy5zZXRJbnQ4KG9mZnNldCArIDEsIHZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiAyO1xuICAgICAgICB9XG4gICAgICAgIC8vIGludCAxNlxuICAgICAgICBpZiAodmFsdWUgPj0gLTB4ODAwMCkge1xuICAgICAgICAgICAgdmlldy5zZXRVaW50OChvZmZzZXQsIDB4ZDEpO1xuICAgICAgICAgICAgdmlldy5zZXRJbnQxNihvZmZzZXQgKyAxLCB2YWx1ZSk7XG4gICAgICAgICAgICByZXR1cm4gMztcbiAgICAgICAgfVxuICAgICAgICAvLyBpbnQgMzJcbiAgICAgICAgaWYgKHZhbHVlID49IC0weDgwMDAwMDAwKSB7XG4gICAgICAgICAgICB2aWV3LnNldFVpbnQ4KG9mZnNldCwgMHhkMik7XG4gICAgICAgICAgICB2aWV3LnNldEludDMyKG9mZnNldCArIDEsIHZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiA1O1xuICAgICAgICB9XG4gICAgICAgIC8vIGludCA2NFxuICAgICAgICBpZiAodmFsdWUgPj0gLTB4ODAwMDAwMDAwMDAwMDAwMCkge1xuICAgICAgICAgICAgdmlldy5zZXRVaW50OChvZmZzZXQsIDB4ZDMpO1xuICAgICAgICAgICAgc2V0SW50NjQodmlldywgb2Zmc2V0ICsgMSwgdmFsdWUpO1xuICAgICAgICAgICAgcmV0dXJuIDk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdOdW1iZXIgdG9vIHNtYWxsIC0weCcgKyAoLXZhbHVlKS50b1N0cmluZygxNikuc3Vic3RyKDEpKTtcbiAgICB9XG4gICAgLy8gdW5kZWZpbmVkIC0gdXNlIGQ0IChOT04tU1RBTkRBUkQpXG4gICAgaWYgKHR5cGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGlmIChzcGFyc2UpXG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgdmlldy5zZXRVaW50OChvZmZzZXQsIDB4ZDQpO1xuICAgICAgICB2aWV3LnNldFVpbnQ4KG9mZnNldCArIDEsIDB4MDApO1xuICAgICAgICB2aWV3LnNldFVpbnQ4KG9mZnNldCArIDIsIDB4MDApO1xuICAgICAgICByZXR1cm4gMztcbiAgICB9XG4gICAgLy8gbnVsbFxuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICBpZiAoc3BhcnNlKVxuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIHZpZXcuc2V0VWludDgob2Zmc2V0LCAweGMwKTtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICAgIC8vIEJvb2xlYW5cbiAgICBpZiAodHlwZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHZpZXcuc2V0VWludDgob2Zmc2V0LCB2YWx1ZSA/IDB4YzMgOiAweGMyKTtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICAgIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgdmFsdWUudG9KU09OKVxuICAgICAgICByZXR1cm4gX2VuY29kZSh2YWx1ZS50b0pTT04oKSwgdmlldywgb2Zmc2V0LCBzcGFyc2UpO1xuICAgIC8vIENvbnRhaW5lciBUeXBlc1xuICAgIGlmICh0eXBlID09PSAnb2JqZWN0Jykge1xuICAgICAgICB2YXIgbGVuZ3RoXzMsIHNpemUgPSAwO1xuICAgICAgICB2YXIga2V5cyA9IHZvaWQgMDtcbiAgICAgICAgdmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5KHZhbHVlKTtcbiAgICAgICAgaWYgKGlzQXJyYXkpIHtcbiAgICAgICAgICAgIGxlbmd0aF8zID0gdmFsdWUubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAga2V5cyA9IGVuY29kZWFibGVLZXlzKHZhbHVlLCBzcGFyc2UpO1xuICAgICAgICAgICAgbGVuZ3RoXzMgPSBrZXlzLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGVuZ3RoXzMgPCAweDEwKSB7XG4gICAgICAgICAgICB2aWV3LnNldFVpbnQ4KG9mZnNldCwgbGVuZ3RoXzMgfCAoaXNBcnJheSA/IDB4OTAgOiAweDgwKSk7XG4gICAgICAgICAgICBzaXplID0gMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChsZW5ndGhfMyA8IDB4MTAwMDApIHtcbiAgICAgICAgICAgIHZpZXcuc2V0VWludDgob2Zmc2V0LCBpc0FycmF5ID8gMHhkYyA6IDB4ZGUpO1xuICAgICAgICAgICAgdmlldy5zZXRVaW50MTYob2Zmc2V0ICsgMSwgbGVuZ3RoXzMpO1xuICAgICAgICAgICAgc2l6ZSA9IDM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobGVuZ3RoXzMgPCAweDEwMDAwMDAwMCkge1xuICAgICAgICAgICAgdmlldy5zZXRVaW50OChvZmZzZXQsIGlzQXJyYXkgPyAweGRkIDogMHhkZik7XG4gICAgICAgICAgICB2aWV3LnNldFVpbnQzMihvZmZzZXQgKyAxLCBsZW5ndGhfMyk7XG4gICAgICAgICAgICBzaXplID0gNTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNBcnJheSkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGhfMzsgaSsrKSB7XG4gICAgICAgICAgICAgICAgc2l6ZSArPSBfZW5jb2RlKHZhbHVlW2ldLCB2aWV3LCBvZmZzZXQgKyBzaXplLCBzcGFyc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGtleXMpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoXzM7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgICAgICAgIHNpemUgKz0gX2VuY29kZShrZXksIHZpZXcsIG9mZnNldCArIHNpemUpO1xuICAgICAgICAgICAgICAgIHNpemUgKz0gX2VuY29kZSh2YWx1ZVtrZXldLCB2aWV3LCBvZmZzZXQgKyBzaXplLCBzcGFyc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzaXplO1xuICAgIH1cbiAgICBpZiAodHlwZSA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHR5cGUgJyArIHR5cGUpO1xufVxuZnVuY3Rpb24gc2l6ZW9mKHZhbHVlLCBzcGFyc2UpIHtcbiAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICAvLyBmaXhzdHIgb3Igc3RyOCBvciBzdHIxNiBvciBzdHIzMlxuICAgIGlmICh0eXBlID09PSAnc3RyaW5nJykge1xuICAgICAgICB2YXIgbGVuZ3RoXzQgPSB1dGY4Qnl0ZUNvdW50KHZhbHVlKTtcbiAgICAgICAgaWYgKGxlbmd0aF80IDwgMHgyMCkge1xuICAgICAgICAgICAgcmV0dXJuIDEgKyBsZW5ndGhfNDtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGVuZ3RoXzQgPCAweDEwMCkge1xuICAgICAgICAgICAgcmV0dXJuIDIgKyBsZW5ndGhfNDtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGVuZ3RoXzQgPCAweDEwMDAwKSB7XG4gICAgICAgICAgICByZXR1cm4gMyArIGxlbmd0aF80O1xuICAgICAgICB9XG4gICAgICAgIGlmIChsZW5ndGhfNCA8IDB4MTAwMDAwMDAwKSB7XG4gICAgICAgICAgICByZXR1cm4gNSArIGxlbmd0aF80O1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcgJiYgQXJyYXlCdWZmZXIuaXNWaWV3KHZhbHVlKSkge1xuICAgICAgICAvLyBleHRyYWN0IHRoZSBhcnJheWJ1ZmZlciBhbmQgZmFsbHRocm91Z2hcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5idWZmZXI7XG4gICAgfVxuICAgIC8vIGJpbjggb3IgYmluMTYgb3IgYmluMzJcbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgICAgICB2YXIgbGVuZ3RoXzUgPSB2YWx1ZS5ieXRlTGVuZ3RoO1xuICAgICAgICBpZiAobGVuZ3RoXzUgPCAweDEwMCkge1xuICAgICAgICAgICAgcmV0dXJuIDIgKyBsZW5ndGhfNTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGVuZ3RoXzUgPCAweDEwMDAwKSB7XG4gICAgICAgICAgICByZXR1cm4gMyArIGxlbmd0aF81O1xuICAgICAgICB9XG4gICAgICAgIGlmIChsZW5ndGhfNSA8IDB4MTAwMDAwMDAwKSB7XG4gICAgICAgICAgICByZXR1cm4gNSArIGxlbmd0aF81O1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgICAgIC8vIEZsb2F0aW5nIFBvaW50ICgzMiBiaXRzKVxuICAgICAgICAvLyBkb3VibGVcbiAgICAgICAgaWYgKE1hdGguZmxvb3IodmFsdWUpICE9PSB2YWx1ZSlcbiAgICAgICAgICAgIHJldHVybiA5O1xuICAgICAgICAvLyBJbnRlZ2Vyc1xuICAgICAgICBpZiAodmFsdWUgPj0gMCkge1xuICAgICAgICAgICAgLy8gcG9zaXRpdmUgZml4aW50XG4gICAgICAgICAgICBpZiAodmFsdWUgPCAweDgwKVxuICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgLy8gdWludCA4XG4gICAgICAgICAgICBpZiAodmFsdWUgPCAweDEwMClcbiAgICAgICAgICAgICAgICByZXR1cm4gMjtcbiAgICAgICAgICAgIC8vIHVpbnQgMTZcbiAgICAgICAgICAgIGlmICh2YWx1ZSA8IDB4MTAwMDApXG4gICAgICAgICAgICAgICAgcmV0dXJuIDM7XG4gICAgICAgICAgICAvLyB1aW50IDMyXG4gICAgICAgICAgICBpZiAodmFsdWUgPCAweDEwMDAwMDAwMClcbiAgICAgICAgICAgICAgICByZXR1cm4gNTtcbiAgICAgICAgICAgIC8vIHVpbnQgNjRcbiAgICAgICAgICAgIGlmICh2YWx1ZSA8IDB4MTAwMDAwMDAwMDAwMDAwMDApXG4gICAgICAgICAgICAgICAgcmV0dXJuIDk7XG4gICAgICAgICAgICAvLyBUb28gYmlnXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ051bWJlciB0b28gYmlnIDB4JyArIHZhbHVlLnRvU3RyaW5nKDE2KSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gbmVnYXRpdmUgZml4aW50XG4gICAgICAgIGlmICh2YWx1ZSA+PSAtMHgyMClcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAvLyBpbnQgOFxuICAgICAgICBpZiAodmFsdWUgPj0gLTB4ODApXG4gICAgICAgICAgICByZXR1cm4gMjtcbiAgICAgICAgLy8gaW50IDE2XG4gICAgICAgIGlmICh2YWx1ZSA+PSAtMHg4MDAwKVxuICAgICAgICAgICAgcmV0dXJuIDM7XG4gICAgICAgIC8vIGludCAzMlxuICAgICAgICBpZiAodmFsdWUgPj0gLTB4ODAwMDAwMDApXG4gICAgICAgICAgICByZXR1cm4gNTtcbiAgICAgICAgLy8gaW50IDY0XG4gICAgICAgIGlmICh2YWx1ZSA+PSAtMHg4MDAwMDAwMDAwMDAwMDAwKVxuICAgICAgICAgICAgcmV0dXJuIDk7XG4gICAgICAgIC8vIFRvbyBzbWFsbFxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ051bWJlciB0b28gc21hbGwgLTB4JyArIHZhbHVlLnRvU3RyaW5nKDE2KS5zdWJzdHIoMSkpO1xuICAgIH1cbiAgICAvLyBCb29sZWFuXG4gICAgaWYgKHR5cGUgPT09ICdib29sZWFuJylcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgLy8gdW5kZWZpbmVkLCBudWxsXG4gICAgaWYgKHZhbHVlID09PSBudWxsKVxuICAgICAgICByZXR1cm4gc3BhcnNlID8gMCA6IDE7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiBzcGFyc2UgPyAwIDogMztcbiAgICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIHZhbHVlLnRvSlNPTilcbiAgICAgICAgcmV0dXJuIHNpemVvZih2YWx1ZS50b0pTT04oKSwgc3BhcnNlKTtcbiAgICAvLyBDb250YWluZXIgVHlwZXNcbiAgICBpZiAodHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgdmFyIGxlbmd0aF82LCBzaXplID0gMDtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICBsZW5ndGhfNiA9IHZhbHVlLmxlbmd0aDtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoXzY7IGkrKykge1xuICAgICAgICAgICAgICAgIHNpemUgKz0gc2l6ZW9mKHZhbHVlW2ldLCBzcGFyc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIGtleXMgPSBlbmNvZGVhYmxlS2V5cyh2YWx1ZSwgc3BhcnNlKTtcbiAgICAgICAgICAgIGxlbmd0aF82ID0ga2V5cy5sZW5ndGg7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aF82OyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICAgICAgICBzaXplICs9IHNpemVvZihrZXkpICsgc2l6ZW9mKHZhbHVlW2tleV0sIHNwYXJzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxlbmd0aF82IDwgMHgxMCkge1xuICAgICAgICAgICAgcmV0dXJuIDEgKyBzaXplO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsZW5ndGhfNiA8IDB4MTAwMDApIHtcbiAgICAgICAgICAgIHJldHVybiAzICsgc2l6ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGVuZ3RoXzYgPCAweDEwMDAwMDAwMCkge1xuICAgICAgICAgICAgcmV0dXJuIDUgKyBzaXplO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQXJyYXkgb3Igb2JqZWN0IHRvbyBsb25nIDB4JyArIGxlbmd0aF82LnRvU3RyaW5nKDE2KSk7XG4gICAgfVxuICAgIGlmICh0eXBlID09PSAnZnVuY3Rpb24nKVxuICAgICAgICByZXR1cm4gMDtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gdHlwZSAnICsgdHlwZSk7XG59XG5leHBvcnRzLmRlZmF1bHQgPSB7XG4gICAgZW5jb2RlOiBlbmNvZGUsXG4gICAgZGVjb2RlOiBkZWNvZGUsXG4gICAgaW5zcGVjdDogaW5zcGVjdCxcbiAgICB1dGY4V3JpdGU6IHV0ZjhXcml0ZSxcbiAgICB1dGY4UmVhZDogdXRmOFJlYWQsXG4gICAgdXRmOEJ5dGVDb3VudDogdXRmOEJ5dGVDb3VudCxcbn07XG5cblxuLyoqKi8gfSksXG4vKiA0MiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHRzbGliXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLy8gQ29tbW9uXG52YXIgcmVzdF8xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygzMCkpO1xudmFyIHJlYWx0aW1lXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKDUwKSk7XG52YXIgcGxhdGZvcm1fMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oMykpO1xuLy8gUGxhdGZvcm0gU3BlY2lmaWNcbnZhciBidWZmZXJ1dGlsc18xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXyg1NSkpO1xuLy8gQHRzLWlnbm9yZVxudmFyIGNyeXB0b18xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXyg1NykpO1xudmFyIGh0dHBfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oNjIpKTtcbnZhciBjb25maWdfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oNjQpKTtcbi8vIEB0cy1pZ25vcmVcbnZhciB0cmFuc3BvcnRfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oNjgpKTtcbnZhciBsb2dnZXJfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oMikpO1xudmFyIGRlZmF1bHRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xudmFyIHdlYnN0b3JhZ2VfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oNjUpKTtcbnZhciBkZWZhdWx0c18yID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXyg2NikpO1xudmFyIG1zZ3BhY2tfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oNDEpKTtcbnZhciBDcnlwdG8gPSAoMCwgY3J5cHRvXzEuZGVmYXVsdCkoY29uZmlnXzEuZGVmYXVsdCwgYnVmZmVydXRpbHNfMS5kZWZhdWx0KTtcbnBsYXRmb3JtXzEuZGVmYXVsdC5DcnlwdG8gPSBDcnlwdG87XG5wbGF0Zm9ybV8xLmRlZmF1bHQuQnVmZmVyVXRpbHMgPSBidWZmZXJ1dGlsc18xLmRlZmF1bHQ7XG5wbGF0Zm9ybV8xLmRlZmF1bHQuSHR0cCA9IGh0dHBfMS5kZWZhdWx0O1xucGxhdGZvcm1fMS5kZWZhdWx0LkNvbmZpZyA9IGNvbmZpZ18xLmRlZmF1bHQ7XG5wbGF0Zm9ybV8xLmRlZmF1bHQuVHJhbnNwb3J0cyA9IHRyYW5zcG9ydF8xLmRlZmF1bHQ7XG5wbGF0Zm9ybV8xLmRlZmF1bHQuV2ViU3RvcmFnZSA9IHdlYnN0b3JhZ2VfMS5kZWZhdWx0O1xucmVzdF8xLmRlZmF1bHQuQ3J5cHRvID0gQ3J5cHRvO1xucmVhbHRpbWVfMS5kZWZhdWx0LkNyeXB0byA9IENyeXB0bztcbmxvZ2dlcl8xLmRlZmF1bHQuaW5pdExvZ0hhbmRsZXJzKCk7XG5wbGF0Zm9ybV8xLmRlZmF1bHQuRGVmYXVsdHMgPSAoMCwgZGVmYXVsdHNfMS5nZXREZWZhdWx0cykoZGVmYXVsdHNfMi5kZWZhdWx0KTtcbmlmIChwbGF0Zm9ybV8xLmRlZmF1bHQuQ29uZmlnLmFnZW50KSB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHBsYXRmb3JtXzEuZGVmYXVsdC5EZWZhdWx0cy5hZ2VudCArPSAnICcgKyBwbGF0Zm9ybV8xLmRlZmF1bHQuQ29uZmlnLmFnZW50O1xufVxuLyogSWYgdXNpbmcgSUU4LCBkb24ndCBhdHRlbXB0IHRvIHVwZ3JhZGUgZnJvbSB4aHJfcG9sbGluZyB0byB4aHJfc3RyZWFtaW5nIC1cbiAqIHdoaWxlIGl0IGNhbiBkbyBzdHJlYW1pbmcsIHRoZSBsb3cgbWF4IGh0dHAtY29ubmVjdGlvbnMtcGVyLWhvc3QgbGltaXQgbWVhbnNcbiAqIHRoYXQgdGhlIHBvbGxpbmcgdHJhbnNwb3J0IGlzIGNyaXBwbGVkIGR1cmluZyB0aGUgdXBncmFkZSBwcm9jZXNzLiBTbyBqdXN0XG4gKiBsZWF2ZSBpdCBhdCB0aGUgYmFzZSB0cmFuc3BvcnQgKi9cbmlmIChwbGF0Zm9ybV8xLmRlZmF1bHQuQ29uZmlnLm5vVXBncmFkZSkge1xuICAgIHBsYXRmb3JtXzEuZGVmYXVsdC5EZWZhdWx0cy51cGdyYWRlVHJhbnNwb3J0cyA9IFtdO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0ge1xuICAgIFJlc3Q6IHJlc3RfMS5kZWZhdWx0LFxuICAgIFJlYWx0aW1lOiByZWFsdGltZV8xLmRlZmF1bHQsXG4gICAgbXNncGFjazogbXNncGFja18xLmRlZmF1bHQsXG59O1xuXG5cbi8qKiovIH0pLFxuLyogNDMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBKU09OLnBhcnNlKFwie1xcXCJuYW1lXFxcIjpcXFwiYWJseVxcXCIsXFxcImRlc2NyaXB0aW9uXFxcIjpcXFwiUmVhbHRpbWUgY2xpZW50IGxpYnJhcnkgZm9yIEFibHksIHRoZSByZWFsdGltZSBtZXNzYWdpbmcgc2VydmljZVxcXCIsXFxcInZlcnNpb25cXFwiOlxcXCIxLjIuNDNcXFwiLFxcXCJsaWNlbnNlXFxcIjpcXFwiQXBhY2hlLTIuMFxcXCIsXFxcImJ1Z3NcXFwiOntcXFwidXJsXFxcIjpcXFwiaHR0cHM6Ly9naXRodWIuY29tL2FibHkvYWJseS1qcy9pc3N1ZXNcXFwiLFxcXCJlbWFpbFxcXCI6XFxcInN1cHBvcnRAYWJseS5jb21cXFwifSxcXFwibWFpblxcXCI6XFxcIi4vYnVpbGQvYWJseS1ub2RlLmpzXFxcIixcXFwidHlwaW5nc1xcXCI6XFxcIi4vYWJseS5kLnRzXFxcIixcXFwicmVhY3QtbmF0aXZlXFxcIjp7XFxcIi4vYnVpbGQvYWJseS1ub2RlLmpzXFxcIjpcXFwiLi9idWlsZC9hYmx5LXJlYWN0bmF0aXZlLmpzXFxcIn0sXFxcImJyb3dzZXJcXFwiOntcXFwiLi9idWlsZC9hYmx5LW5vZGUuanNcXFwiOlxcXCIuL2J1aWxkL2FibHktY29tbW9uanMuanNcXFwifSxcXFwiZmlsZXNcXFwiOltcXFwiYnVpbGQvKipcXFwiLFxcXCJhYmx5LmQudHNcXFwiLFxcXCJjYWxsYmFja3MuZC50c1xcXCIsXFxcImNhbGxiYWNrcy5qc1xcXCIsXFxcInByb21pc2VzLmQudHNcXFwiLFxcXCJwcm9taXNlcy5qc1xcXCIsXFxcInJlc291cmNlcy8qKlxcXCJdLFxcXCJkZXBlbmRlbmNpZXNcXFwiOntcXFwiQGFibHkvbXNncGFjay1qc1xcXCI6XFxcIl4wLjQuMFxcXCIsXFxcImdvdFxcXCI6XFxcIl4xMS44LjVcXFwiLFxcXCJ3c1xcXCI6XFxcIl41LjFcXFwifSxcXFwiZGV2RGVwZW5kZW5jaWVzXFxcIjp7XFxcIkBhYmx5L3ZjZGlmZi1kZWNvZGVyXFxcIjpcXFwiMS4wLjRcXFwiLFxcXCJAdHlwZXMvY3J5cHRvLWpzXFxcIjpcXFwiXjQuMC4xXFxcIixcXFwiQHR5cGVzL25vZGVcXFwiOlxcXCJeMTUuMC4wXFxcIixcXFwiQHR5cGVzL3JlcXVlc3RcXFwiOlxcXCJeMi40OC43XFxcIixcXFwiQHR5cGVzL3dzXFxcIjpcXFwiXjguMi4wXFxcIixcXFwiQHR5cGVzY3JpcHQtZXNsaW50L2VzbGludC1wbHVnaW5cXFwiOlxcXCJeNS4xNC4wXFxcIixcXFwiQHR5cGVzY3JpcHQtZXNsaW50L3BhcnNlclxcXCI6XFxcIl41LjE0LjBcXFwiLFxcXCJhc3luY1xcXCI6XFxcImFibHktZm9ya3MvYXN5bmMjcmVxdWlyZWpzXFxcIixcXFwiYXdzLXNka1xcXCI6XFxcIl4yLjE0MTMuMFxcXCIsXFxcImNoYWlcXFwiOlxcXCJeNC4yLjBcXFwiLFxcXCJjb3B5LXdlYnBhY2stcGx1Z2luXFxcIjpcXFwiXjYuNC4xXFxcIixcXFwiY29yc1xcXCI6XFxcIl4yLjguNVxcXCIsXFxcImNyeXB0by1qc1xcXCI6XFxcImFibHktZm9ya3MvY3J5cHRvLWpzI2NyeXB0by1saXRlXFxcIixcXFwiZXNsaW50XFxcIjpcXFwiXjcuMTMuMFxcXCIsXFxcImVzbGludC1wbHVnaW4tanNkb2NcXFwiOlxcXCJeNDAuMC4wXFxcIixcXFwiZXNsaW50LXBsdWdpbi1zZWN1cml0eVxcXCI6XFxcIl4xLjQuMFxcXCIsXFxcImV4cHJlc3NcXFwiOlxcXCJeNC4xNy4xXFxcIixcXFwiZ2xvYlxcXCI6XFxcIn40LjRcXFwiLFxcXCJnb29nbGUtY2xvc3VyZS1jb21waWxlclxcXCI6XFxcIl4yMDE4MDYxMC4wLjFcXFwiLFxcXCJncnVudFxcXCI6XFxcIl4xLjYuMVxcXCIsXFxcImdydW50LWJ1bXBcXFwiOlxcXCJeMC4zLjFcXFwiLFxcXCJncnVudC1jbGlcXFwiOlxcXCJ+MS4yLjBcXFwiLFxcXCJncnVudC1jbG9zdXJlLXRvb2xzXFxcIjpcXFwiXjEuMC4wXFxcIixcXFwiZ3J1bnQtY29udHJpYi1jb25jYXRcXFwiOlxcXCJ+MC41XFxcIixcXFwiZ3J1bnQtc2hlbGxcXFwiOlxcXCJ+MS4xXFxcIixcXFwiZ3J1bnQtd2VicGFja1xcXCI6XFxcIl40LjAuMlxcXCIsXFxcImhleHlcXFwiOlxcXCJ+MC4yXFxcIixcXFwia2V4ZWNcXFwiOlxcXCJhYmx5LWZvcmtzL25vZGUta2V4ZWMjdXBkYXRlLWZvci1ub2RlLTEyXFxcIixcXFwibWluaW1pc3RcXFwiOlxcXCJeMS4yLjVcXFwiLFxcXCJtb2NoYVxcXCI6XFxcIl44LjEuM1xcXCIsXFxcIm51bGwtbG9hZGVyXFxcIjpcXFwiXjQuMC4xXFxcIixcXFwicGxheXdyaWdodFxcXCI6XFxcIl4xLjEwLjBcXFwiLFxcXCJwcmV0dGllclxcXCI6XFxcIl4yLjUuMVxcXCIsXFxcInJlcXVpcmVqc1xcXCI6XFxcIn4yLjFcXFwiLFxcXCJzaGVsbGpzXFxcIjpcXFwifjAuOFxcXCIsXFxcInNvdXJjZS1tYXAtZXhwbG9yZXJcXFwiOlxcXCJeMi41LjJcXFwiLFxcXCJ0cy1sb2FkZXJcXFwiOlxcXCJeOC4yLjBcXFwiLFxcXCJ0c2NvbmZpZy1wYXRocy13ZWJwYWNrLXBsdWdpblxcXCI6XFxcIl40LjAuMVxcXCIsXFxcInRzbGliXFxcIjpcXFwiXjIuMy4xXFxcIixcXFwidHlwZWRvY1xcXCI6XFxcIl4wLjIzLjhcXFwiLFxcXCJ0eXBlc2NyaXB0XFxcIjpcXFwiXjQuNi40XFxcIixcXFwid2VicGFja1xcXCI6XFxcIl40LjQ0LjJcXFwiLFxcXCJ3ZWJwYWNrLWNsaVxcXCI6XFxcIl40LjIuMFxcXCJ9LFxcXCJlbmdpbmVzXFxcIjp7XFxcIm5vZGVcXFwiOlxcXCI+PTUuMTAueFxcXCJ9LFxcXCJyZXBvc2l0b3J5XFxcIjpcXFwiYWJseS9hYmx5LWpzXFxcIixcXFwianNwbVxcXCI6e1xcXCJyZWdpc3RyeVxcXCI6XFxcIm5wbVxcXCIsXFxcImRpcmVjdG9yaWVzXFxcIjp7XFxcImxpYlxcXCI6XFxcImJ1aWxkXFxcIn0sXFxcIm1haW5cXFwiOlxcXCJhYmx5XFxcIn0sXFxcInNjcmlwdHNcXFwiOntcXFwiZ3J1bnRcXFwiOlxcXCJncnVudFxcXCIsXFxcInRlc3RcXFwiOlxcXCJncnVudCB0ZXN0XFxcIixcXFwidGVzdDpub2RlXFxcIjpcXFwiZ3J1bnQgdGVzdDpub2RlXFxcIixcXFwidGVzdDpub2RlOnNraXAtYnVpbGRcXFwiOlxcXCJncnVudCBtb2NoYVxcXCIsXFxcInRlc3Q6d2Vic2VydmVyXFxcIjpcXFwiZ3J1bnQgdGVzdDp3ZWJzZXJ2ZXJcXFwiLFxcXCJ0ZXN0OnBsYXl3cmlnaHRcXFwiOlxcXCJub2RlIHRlc3Qvc3VwcG9ydC9ydW5QbGF5d3JpZ2h0VGVzdHMuanNcXFwiLFxcXCJjb25jYXRcXFwiOlxcXCJncnVudCBjb25jYXRcXFwiLFxcXCJidWlsZFxcXCI6XFxcImdydW50IGJ1aWxkOmFsbFxcXCIsXFxcImJ1aWxkOm5vZGVcXFwiOlxcXCJncnVudCBidWlsZDpub2RlXFxcIixcXFwiYnVpbGQ6YnJvd3NlclxcXCI6XFxcImdydW50IGJ1aWxkOmJyb3dzZXJcXFwiLFxcXCJyZXF1aXJlanNcXFwiOlxcXCJncnVudCByZXF1aXJlanNcXFwiLFxcXCJsaW50XFxcIjpcXFwiZXNsaW50IC5cXFwiLFxcXCJsaW50OmZpeFxcXCI6XFxcImVzbGludCAtLWZpeCAuXFxcIixcXFwiY2hlY2stY2xvc3VyZS1jb21waWxlclxcXCI6XFxcImdydW50IGNoZWNrLWNsb3N1cmUtY29tcGlsZXJcXFwiLFxcXCJwcmVwYXJlXFxcIjpcXFwibnBtIHJ1biBidWlsZFxcXCIsXFxcImZvcm1hdFxcXCI6XFxcInByZXR0aWVyIC0td3JpdGUgLS1pZ25vcmUtcGF0aCAuZ2l0aWdub3JlIC0taWdub3JlLXBhdGggLnByZXR0aWVyaWdub3JlIHNyYyB0ZXN0IGFibHkuZC50cyB3ZWJwYWNrLmNvbmZpZy5qcyBHcnVudGZpbGUuanMgc2NyaXB0cy9jZG5fZGVwbG95LmpzIGRvY3MvY2hyb21lLW12My5tZFxcXCIsXFxcImZvcm1hdDpjaGVja1xcXCI6XFxcInByZXR0aWVyIC0tY2hlY2sgLS1pZ25vcmUtcGF0aCAuZ2l0aWdub3JlIC0taWdub3JlLXBhdGggLnByZXR0aWVyaWdub3JlIHNyYyB0ZXN0IGFibHkuZC50cyB3ZWJwYWNrLmNvbmZpZy5qcyBHcnVudGZpbGUuanMgc2NyaXB0cy9jZG5fZGVwbG95LmpzXFxcIixcXFwic291cmNlbWFwXFxcIjpcXFwic291cmNlLW1hcC1leHBsb3JlciBidWlsZC9hYmx5Lm1pbi5qc1xcXCIsXFxcInNvdXJjZW1hcDpub2VuY3J5cHRpb25cXFwiOlxcXCJzb3VyY2UtbWFwLWV4cGxvcmVyIGJ1aWxkL2FibHkubm9lbmNyeXB0aW9uLm1pbi5qc1xcXCIsXFxcImRvY3NcXFwiOlxcXCJ0eXBlZG9jIC0tZW50cnlQb2ludHMgYWJseS5kLnRzIC0tb3V0IGRvY3MvZ2VuZXJhdGVkL2RlZmF1bHQgLS1yZWFkbWUgZG9jcy9sYW5kaW5nLXBhZ2VzL2RlZmF1bHQubWQgJiYgdHlwZWRvYyAtLWVudHJ5UG9pbnRzIHByb21pc2VzLmQudHMgLS1vdXQgZG9jcy9nZW5lcmF0ZWQvcHJvbWlzZXMgLS1uYW1lIFxcXFxcXFwiYWJseSAoUHJvbWlzZS1iYXNlZClcXFxcXFxcIiAtLXJlYWRtZSBkb2NzL2xhbmRpbmctcGFnZXMvcHJvbWlzZXMubWQgJiYgY3AgZG9jcy9sYW5kaW5nLXBhZ2VzL2Nob29zZS1saWJyYXJ5Lmh0bWwgZG9jcy9nZW5lcmF0ZWQvaW5kZXguaHRtbFxcXCJ9fVwiKTtcblxuLyoqKi8gfSksXG4vKiA0NCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cblxuLyoqKi8gfSksXG4vKiA0NSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG47KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7XG5cdGlmICh0cnVlKSB7XG5cdFx0Ly8gQ29tbW9uSlNcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KF9fd2VicGFja19yZXF1aXJlX18oNiksIF9fd2VicGFja19yZXF1aXJlX18oMzIpLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDI0KSk7XG5cdH1cblx0ZWxzZSB7fVxufSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHtcblxuXHRyZXR1cm4gQ3J5cHRvSlMuSG1hY1NIQTI1NjtcblxufSkpO1xuXG4vKioqLyB9KSxcbi8qIDQ2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgdHNsaWJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG52YXIgVXRpbHMgPSB0c2xpYl8xLl9faW1wb3J0U3RhcihfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKTtcbnZhciBkZXZpY2VkZXRhaWxzXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKDQ3KSk7XG52YXIgcmVzb3VyY2VfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oMTQpKTtcbnZhciBwYWdpbmF0ZWRyZXNvdXJjZV8xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygxOSkpO1xudmFyIGVycm9yaW5mb18xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXyg0KSk7XG52YXIgcHVzaGNoYW5uZWxzdWJzY3JpcHRpb25fMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oNDgpKTtcbnZhciBub29wID0gZnVuY3Rpb24gKCkgeyB9O1xudmFyIFB1c2ggPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUHVzaChyZXN0KSB7XG4gICAgICAgIHRoaXMucmVzdCA9IHJlc3Q7XG4gICAgICAgIHRoaXMuYWRtaW4gPSBuZXcgQWRtaW4ocmVzdCk7XG4gICAgfVxuICAgIHJldHVybiBQdXNoO1xufSgpKTtcbnZhciBBZG1pbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBBZG1pbihyZXN0KSB7XG4gICAgICAgIHRoaXMucmVzdCA9IHJlc3Q7XG4gICAgICAgIHRoaXMuZGV2aWNlUmVnaXN0cmF0aW9ucyA9IG5ldyBEZXZpY2VSZWdpc3RyYXRpb25zKHJlc3QpO1xuICAgICAgICB0aGlzLmNoYW5uZWxTdWJzY3JpcHRpb25zID0gbmV3IENoYW5uZWxTdWJzY3JpcHRpb25zKHJlc3QpO1xuICAgIH1cbiAgICBBZG1pbi5wcm90b3R5cGUucHVibGlzaCA9IGZ1bmN0aW9uIChyZWNpcGllbnQsIHBheWxvYWQsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciByZXN0ID0gdGhpcy5yZXN0O1xuICAgICAgICB2YXIgZm9ybWF0ID0gcmVzdC5vcHRpb25zLnVzZUJpbmFyeVByb3RvY29sID8gVXRpbHMuRm9ybWF0Lm1zZ3BhY2sgOiBVdGlscy5Gb3JtYXQuanNvbiwgaGVhZGVycyA9IFV0aWxzLmRlZmF1bHRQb3N0SGVhZGVycyhyZXN0Lm9wdGlvbnMsIGZvcm1hdCksIHBhcmFtcyA9IHt9O1xuICAgICAgICB2YXIgYm9keSA9IFV0aWxzLm1peGluKHsgcmVjaXBpZW50OiByZWNpcGllbnQgfSwgcGF5bG9hZCk7XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnJlc3Qub3B0aW9ucy5wcm9taXNlcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBVdGlscy5wcm9taXNpZnkodGhpcywgJ3B1Ymxpc2gnLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FsbGJhY2sgPSBub29wO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXN0Lm9wdGlvbnMuaGVhZGVycylcbiAgICAgICAgICAgIFV0aWxzLm1peGluKGhlYWRlcnMsIHJlc3Qub3B0aW9ucy5oZWFkZXJzKTtcbiAgICAgICAgaWYgKHJlc3Qub3B0aW9ucy5wdXNoRnVsbFdhaXQpXG4gICAgICAgICAgICBVdGlscy5taXhpbihwYXJhbXMsIHsgZnVsbFdhaXQ6ICd0cnVlJyB9KTtcbiAgICAgICAgdmFyIHJlcXVlc3RCb2R5ID0gVXRpbHMuZW5jb2RlQm9keShib2R5LCBmb3JtYXQpO1xuICAgICAgICByZXNvdXJjZV8xLmRlZmF1bHQucG9zdChyZXN0LCAnL3B1c2gvcHVibGlzaCcsIHJlcXVlc3RCb2R5LCBoZWFkZXJzLCBwYXJhbXMsIG51bGwsIGZ1bmN0aW9uIChlcnIpIHsgcmV0dXJuIGNhbGxiYWNrKGVycik7IH0pO1xuICAgIH07XG4gICAgcmV0dXJuIEFkbWluO1xufSgpKTtcbnZhciBEZXZpY2VSZWdpc3RyYXRpb25zID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERldmljZVJlZ2lzdHJhdGlvbnMocmVzdCkge1xuICAgICAgICB0aGlzLnJlc3QgPSByZXN0O1xuICAgIH1cbiAgICBEZXZpY2VSZWdpc3RyYXRpb25zLnByb3RvdHlwZS5zYXZlID0gZnVuY3Rpb24gKGRldmljZSwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIHJlc3QgPSB0aGlzLnJlc3Q7XG4gICAgICAgIHZhciBib2R5ID0gZGV2aWNlZGV0YWlsc18xLmRlZmF1bHQuZnJvbVZhbHVlcyhkZXZpY2UpO1xuICAgICAgICB2YXIgZm9ybWF0ID0gcmVzdC5vcHRpb25zLnVzZUJpbmFyeVByb3RvY29sID8gVXRpbHMuRm9ybWF0Lm1zZ3BhY2sgOiBVdGlscy5Gb3JtYXQuanNvbiwgaGVhZGVycyA9IFV0aWxzLmRlZmF1bHRQb3N0SGVhZGVycyhyZXN0Lm9wdGlvbnMsIGZvcm1hdCksIHBhcmFtcyA9IHt9O1xuICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5yZXN0Lm9wdGlvbnMucHJvbWlzZXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gVXRpbHMucHJvbWlzaWZ5KHRoaXMsICdzYXZlJywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhbGxiYWNrID0gbm9vcDtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzdC5vcHRpb25zLmhlYWRlcnMpXG4gICAgICAgICAgICBVdGlscy5taXhpbihoZWFkZXJzLCByZXN0Lm9wdGlvbnMuaGVhZGVycyk7XG4gICAgICAgIGlmIChyZXN0Lm9wdGlvbnMucHVzaEZ1bGxXYWl0KVxuICAgICAgICAgICAgVXRpbHMubWl4aW4ocGFyYW1zLCB7IGZ1bGxXYWl0OiAndHJ1ZScgfSk7XG4gICAgICAgIHZhciByZXF1ZXN0Qm9keSA9IFV0aWxzLmVuY29kZUJvZHkoYm9keSwgZm9ybWF0KTtcbiAgICAgICAgcmVzb3VyY2VfMS5kZWZhdWx0LnB1dChyZXN0LCAnL3B1c2gvZGV2aWNlUmVnaXN0cmF0aW9ucy8nICsgZW5jb2RlVVJJQ29tcG9uZW50KGRldmljZS5pZCksIHJlcXVlc3RCb2R5LCBoZWFkZXJzLCBwYXJhbXMsIG51bGwsIGZ1bmN0aW9uIChlcnIsIGJvZHksIGhlYWRlcnMsIHVucGFja2VkKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhlcnIsICFlcnJcbiAgICAgICAgICAgICAgICA/IGRldmljZWRldGFpbHNfMS5kZWZhdWx0LmZyb21SZXNwb25zZUJvZHkoYm9keSwgdW5wYWNrZWQgPyB1bmRlZmluZWQgOiBmb3JtYXQpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIERldmljZVJlZ2lzdHJhdGlvbnMucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChkZXZpY2VJZE9yRGV0YWlscywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIHJlc3QgPSB0aGlzLnJlc3QsIGZvcm1hdCA9IHJlc3Qub3B0aW9ucy51c2VCaW5hcnlQcm90b2NvbCA/IFV0aWxzLkZvcm1hdC5tc2dwYWNrIDogVXRpbHMuRm9ybWF0Lmpzb24sIGhlYWRlcnMgPSBVdGlscy5kZWZhdWx0R2V0SGVhZGVycyhyZXN0Lm9wdGlvbnMsIGZvcm1hdCksIGRldmljZUlkID0gZGV2aWNlSWRPckRldGFpbHMuaWQgfHwgZGV2aWNlSWRPckRldGFpbHM7XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnJlc3Qub3B0aW9ucy5wcm9taXNlcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBVdGlscy5wcm9taXNpZnkodGhpcywgJ2dldCcsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYWxsYmFjayA9IG5vb3A7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBkZXZpY2VJZCAhPT0gJ3N0cmluZycgfHwgIWRldmljZUlkLmxlbmd0aCkge1xuICAgICAgICAgICAgY2FsbGJhY2sobmV3IGVycm9yaW5mb18xLmRlZmF1bHQoJ0ZpcnN0IGFyZ3VtZW50IHRvIERldmljZVJlZ2lzdHJhdGlvbnMjZ2V0IG11c3QgYmUgYSBkZXZpY2VJZCBzdHJpbmcgb3IgRGV2aWNlRGV0YWlscycsIDQwMDAwLCA0MDApKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzdC5vcHRpb25zLmhlYWRlcnMpXG4gICAgICAgICAgICBVdGlscy5taXhpbihoZWFkZXJzLCByZXN0Lm9wdGlvbnMuaGVhZGVycyk7XG4gICAgICAgIHJlc291cmNlXzEuZGVmYXVsdC5nZXQocmVzdCwgJy9wdXNoL2RldmljZVJlZ2lzdHJhdGlvbnMvJyArIGVuY29kZVVSSUNvbXBvbmVudChkZXZpY2VJZCksIGhlYWRlcnMsIHt9LCBudWxsLCBmdW5jdGlvbiAoZXJyLCBib2R5LCBoZWFkZXJzLCB1bnBhY2tlZCkge1xuICAgICAgICAgICAgY2FsbGJhY2soZXJyLCAhZXJyXG4gICAgICAgICAgICAgICAgPyBkZXZpY2VkZXRhaWxzXzEuZGVmYXVsdC5mcm9tUmVzcG9uc2VCb2R5KGJvZHksIHVucGFja2VkID8gdW5kZWZpbmVkIDogZm9ybWF0KVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBEZXZpY2VSZWdpc3RyYXRpb25zLnByb3RvdHlwZS5saXN0ID0gZnVuY3Rpb24gKHBhcmFtcywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIHJlc3QgPSB0aGlzLnJlc3QsIGZvcm1hdCA9IHJlc3Qub3B0aW9ucy51c2VCaW5hcnlQcm90b2NvbCA/IFV0aWxzLkZvcm1hdC5tc2dwYWNrIDogVXRpbHMuRm9ybWF0Lmpzb24sIGVudmVsb3BlID0gdGhpcy5yZXN0Lmh0dHAuc3VwcG9ydHNMaW5rSGVhZGVycyA/IHVuZGVmaW5lZCA6IGZvcm1hdCwgaGVhZGVycyA9IFV0aWxzLmRlZmF1bHRHZXRIZWFkZXJzKHJlc3Qub3B0aW9ucywgZm9ybWF0KTtcbiAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgaWYgKHRoaXMucmVzdC5vcHRpb25zLnByb21pc2VzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFV0aWxzLnByb21pc2lmeSh0aGlzLCAnbGlzdCcsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYWxsYmFjayA9IG5vb3A7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlc3Qub3B0aW9ucy5oZWFkZXJzKVxuICAgICAgICAgICAgVXRpbHMubWl4aW4oaGVhZGVycywgcmVzdC5vcHRpb25zLmhlYWRlcnMpO1xuICAgICAgICBuZXcgcGFnaW5hdGVkcmVzb3VyY2VfMS5kZWZhdWx0KHJlc3QsICcvcHVzaC9kZXZpY2VSZWdpc3RyYXRpb25zJywgaGVhZGVycywgZW52ZWxvcGUsIGZ1bmN0aW9uIChib2R5LCBoZWFkZXJzLCB1bnBhY2tlZCkge1xuICAgICAgICAgICAgcmV0dXJuIGRldmljZWRldGFpbHNfMS5kZWZhdWx0LmZyb21SZXNwb25zZUJvZHkoYm9keSwgdW5wYWNrZWQgPyB1bmRlZmluZWQgOiBmb3JtYXQpO1xuICAgICAgICB9KS5nZXQocGFyYW1zLCBjYWxsYmFjayk7XG4gICAgfTtcbiAgICBEZXZpY2VSZWdpc3RyYXRpb25zLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAoZGV2aWNlSWRPckRldGFpbHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciByZXN0ID0gdGhpcy5yZXN0LCBmb3JtYXQgPSByZXN0Lm9wdGlvbnMudXNlQmluYXJ5UHJvdG9jb2wgPyBVdGlscy5Gb3JtYXQubXNncGFjayA6IFV0aWxzLkZvcm1hdC5qc29uLCBoZWFkZXJzID0gVXRpbHMuZGVmYXVsdEdldEhlYWRlcnMocmVzdC5vcHRpb25zLCBmb3JtYXQpLCBwYXJhbXMgPSB7fSwgZGV2aWNlSWQgPSBkZXZpY2VJZE9yRGV0YWlscy5pZCB8fCBkZXZpY2VJZE9yRGV0YWlscztcbiAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgaWYgKHRoaXMucmVzdC5vcHRpb25zLnByb21pc2VzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFV0aWxzLnByb21pc2lmeSh0aGlzLCAncmVtb3ZlJywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhbGxiYWNrID0gbm9vcDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGRldmljZUlkICE9PSAnc3RyaW5nJyB8fCAhZGV2aWNlSWQubGVuZ3RoKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhuZXcgZXJyb3JpbmZvXzEuZGVmYXVsdCgnRmlyc3QgYXJndW1lbnQgdG8gRGV2aWNlUmVnaXN0cmF0aW9ucyNyZW1vdmUgbXVzdCBiZSBhIGRldmljZUlkIHN0cmluZyBvciBEZXZpY2VEZXRhaWxzJywgNDAwMDAsIDQwMCkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXN0Lm9wdGlvbnMuaGVhZGVycylcbiAgICAgICAgICAgIFV0aWxzLm1peGluKGhlYWRlcnMsIHJlc3Qub3B0aW9ucy5oZWFkZXJzKTtcbiAgICAgICAgaWYgKHJlc3Qub3B0aW9ucy5wdXNoRnVsbFdhaXQpXG4gICAgICAgICAgICBVdGlscy5taXhpbihwYXJhbXMsIHsgZnVsbFdhaXQ6ICd0cnVlJyB9KTtcbiAgICAgICAgcmVzb3VyY2VfMS5kZWZhdWx0WydkZWxldGUnXShyZXN0LCAnL3B1c2gvZGV2aWNlUmVnaXN0cmF0aW9ucy8nICsgZW5jb2RlVVJJQ29tcG9uZW50KGRldmljZUlkKSwgaGVhZGVycywgcGFyYW1zLCBudWxsLCBmdW5jdGlvbiAoZXJyKSB7IHJldHVybiBjYWxsYmFjayhlcnIpOyB9KTtcbiAgICB9O1xuICAgIERldmljZVJlZ2lzdHJhdGlvbnMucHJvdG90eXBlLnJlbW92ZVdoZXJlID0gZnVuY3Rpb24gKHBhcmFtcywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIHJlc3QgPSB0aGlzLnJlc3QsIGZvcm1hdCA9IHJlc3Qub3B0aW9ucy51c2VCaW5hcnlQcm90b2NvbCA/IFV0aWxzLkZvcm1hdC5tc2dwYWNrIDogVXRpbHMuRm9ybWF0Lmpzb24sIGhlYWRlcnMgPSBVdGlscy5kZWZhdWx0R2V0SGVhZGVycyhyZXN0Lm9wdGlvbnMsIGZvcm1hdCk7XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnJlc3Qub3B0aW9ucy5wcm9taXNlcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBVdGlscy5wcm9taXNpZnkodGhpcywgJ3JlbW92ZVdoZXJlJywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhbGxiYWNrID0gbm9vcDtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzdC5vcHRpb25zLmhlYWRlcnMpXG4gICAgICAgICAgICBVdGlscy5taXhpbihoZWFkZXJzLCByZXN0Lm9wdGlvbnMuaGVhZGVycyk7XG4gICAgICAgIGlmIChyZXN0Lm9wdGlvbnMucHVzaEZ1bGxXYWl0KVxuICAgICAgICAgICAgVXRpbHMubWl4aW4ocGFyYW1zLCB7IGZ1bGxXYWl0OiAndHJ1ZScgfSk7XG4gICAgICAgIHJlc291cmNlXzEuZGVmYXVsdFsnZGVsZXRlJ10ocmVzdCwgJy9wdXNoL2RldmljZVJlZ2lzdHJhdGlvbnMnLCBoZWFkZXJzLCBwYXJhbXMsIG51bGwsIGZ1bmN0aW9uIChlcnIpIHsgcmV0dXJuIGNhbGxiYWNrKGVycik7IH0pO1xuICAgIH07XG4gICAgcmV0dXJuIERldmljZVJlZ2lzdHJhdGlvbnM7XG59KCkpO1xudmFyIENoYW5uZWxTdWJzY3JpcHRpb25zID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENoYW5uZWxTdWJzY3JpcHRpb25zKHJlc3QpIHtcbiAgICAgICAgLyogQ2hhbm5lbFN1YnNjcmlwdGlvbnMgaGF2ZSBubyB1bmlxdWUgaWQ7IHJlbW92aW5nIG9uZSBpcyBlcXVpdmFsZW50IHRvIHJlbW92ZVdoZXJlIGJ5IGl0cyBwcm9wZXJ0aWVzICovXG4gICAgICAgIHRoaXMucmVtb3ZlID0gQ2hhbm5lbFN1YnNjcmlwdGlvbnMucHJvdG90eXBlLnJlbW92ZVdoZXJlO1xuICAgICAgICB0aGlzLnJlc3QgPSByZXN0O1xuICAgIH1cbiAgICBDaGFubmVsU3Vic2NyaXB0aW9ucy5wcm90b3R5cGUuc2F2ZSA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24sIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciByZXN0ID0gdGhpcy5yZXN0O1xuICAgICAgICB2YXIgYm9keSA9IHB1c2hjaGFubmVsc3Vic2NyaXB0aW9uXzEuZGVmYXVsdC5mcm9tVmFsdWVzKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIHZhciBmb3JtYXQgPSByZXN0Lm9wdGlvbnMudXNlQmluYXJ5UHJvdG9jb2wgPyBVdGlscy5Gb3JtYXQubXNncGFjayA6IFV0aWxzLkZvcm1hdC5qc29uLCBoZWFkZXJzID0gVXRpbHMuZGVmYXVsdFBvc3RIZWFkZXJzKHJlc3Qub3B0aW9ucywgZm9ybWF0KSwgcGFyYW1zID0ge307XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnJlc3Qub3B0aW9ucy5wcm9taXNlcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBVdGlscy5wcm9taXNpZnkodGhpcywgJ3NhdmUnLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FsbGJhY2sgPSBub29wO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXN0Lm9wdGlvbnMuaGVhZGVycylcbiAgICAgICAgICAgIFV0aWxzLm1peGluKGhlYWRlcnMsIHJlc3Qub3B0aW9ucy5oZWFkZXJzKTtcbiAgICAgICAgaWYgKHJlc3Qub3B0aW9ucy5wdXNoRnVsbFdhaXQpXG4gICAgICAgICAgICBVdGlscy5taXhpbihwYXJhbXMsIHsgZnVsbFdhaXQ6ICd0cnVlJyB9KTtcbiAgICAgICAgdmFyIHJlcXVlc3RCb2R5ID0gVXRpbHMuZW5jb2RlQm9keShib2R5LCBmb3JtYXQpO1xuICAgICAgICByZXNvdXJjZV8xLmRlZmF1bHQucG9zdChyZXN0LCAnL3B1c2gvY2hhbm5lbFN1YnNjcmlwdGlvbnMnLCByZXF1ZXN0Qm9keSwgaGVhZGVycywgcGFyYW1zLCBudWxsLCBmdW5jdGlvbiAoZXJyLCBib2R5LCBoZWFkZXJzLCB1bnBhY2tlZCkge1xuICAgICAgICAgICAgY2FsbGJhY2soZXJyLCAhZXJyICYmIHB1c2hjaGFubmVsc3Vic2NyaXB0aW9uXzEuZGVmYXVsdC5mcm9tUmVzcG9uc2VCb2R5KGJvZHksIHVucGFja2VkID8gdW5kZWZpbmVkIDogZm9ybWF0KSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQ2hhbm5lbFN1YnNjcmlwdGlvbnMucHJvdG90eXBlLmxpc3QgPSBmdW5jdGlvbiAocGFyYW1zLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgcmVzdCA9IHRoaXMucmVzdCwgZm9ybWF0ID0gcmVzdC5vcHRpb25zLnVzZUJpbmFyeVByb3RvY29sID8gVXRpbHMuRm9ybWF0Lm1zZ3BhY2sgOiBVdGlscy5Gb3JtYXQuanNvbiwgZW52ZWxvcGUgPSB0aGlzLnJlc3QuaHR0cC5zdXBwb3J0c0xpbmtIZWFkZXJzID8gdW5kZWZpbmVkIDogZm9ybWF0LCBoZWFkZXJzID0gVXRpbHMuZGVmYXVsdEdldEhlYWRlcnMocmVzdC5vcHRpb25zLCBmb3JtYXQpO1xuICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5yZXN0Lm9wdGlvbnMucHJvbWlzZXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gVXRpbHMucHJvbWlzaWZ5KHRoaXMsICdsaXN0JywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhbGxiYWNrID0gbm9vcDtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzdC5vcHRpb25zLmhlYWRlcnMpXG4gICAgICAgICAgICBVdGlscy5taXhpbihoZWFkZXJzLCByZXN0Lm9wdGlvbnMuaGVhZGVycyk7XG4gICAgICAgIG5ldyBwYWdpbmF0ZWRyZXNvdXJjZV8xLmRlZmF1bHQocmVzdCwgJy9wdXNoL2NoYW5uZWxTdWJzY3JpcHRpb25zJywgaGVhZGVycywgZW52ZWxvcGUsIGZ1bmN0aW9uIChib2R5LCBoZWFkZXJzLCB1bnBhY2tlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHB1c2hjaGFubmVsc3Vic2NyaXB0aW9uXzEuZGVmYXVsdC5mcm9tUmVzcG9uc2VCb2R5KGJvZHksIHVucGFja2VkID8gdW5kZWZpbmVkIDogZm9ybWF0KTtcbiAgICAgICAgfSkuZ2V0KHBhcmFtcywgY2FsbGJhY2spO1xuICAgIH07XG4gICAgQ2hhbm5lbFN1YnNjcmlwdGlvbnMucHJvdG90eXBlLnJlbW92ZVdoZXJlID0gZnVuY3Rpb24gKHBhcmFtcywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIHJlc3QgPSB0aGlzLnJlc3QsIGZvcm1hdCA9IHJlc3Qub3B0aW9ucy51c2VCaW5hcnlQcm90b2NvbCA/IFV0aWxzLkZvcm1hdC5tc2dwYWNrIDogVXRpbHMuRm9ybWF0Lmpzb24sIGhlYWRlcnMgPSBVdGlscy5kZWZhdWx0R2V0SGVhZGVycyhyZXN0Lm9wdGlvbnMsIGZvcm1hdCk7XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnJlc3Qub3B0aW9ucy5wcm9taXNlcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBVdGlscy5wcm9taXNpZnkodGhpcywgJ3JlbW92ZVdoZXJlJywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhbGxiYWNrID0gbm9vcDtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzdC5vcHRpb25zLmhlYWRlcnMpXG4gICAgICAgICAgICBVdGlscy5taXhpbihoZWFkZXJzLCByZXN0Lm9wdGlvbnMuaGVhZGVycyk7XG4gICAgICAgIGlmIChyZXN0Lm9wdGlvbnMucHVzaEZ1bGxXYWl0KVxuICAgICAgICAgICAgVXRpbHMubWl4aW4ocGFyYW1zLCB7IGZ1bGxXYWl0OiAndHJ1ZScgfSk7XG4gICAgICAgIHJlc291cmNlXzEuZGVmYXVsdFsnZGVsZXRlJ10ocmVzdCwgJy9wdXNoL2NoYW5uZWxTdWJzY3JpcHRpb25zJywgaGVhZGVycywgcGFyYW1zLCBudWxsLCBmdW5jdGlvbiAoZXJyKSB7IHJldHVybiBjYWxsYmFjayhlcnIpOyB9KTtcbiAgICB9O1xuICAgIENoYW5uZWxTdWJzY3JpcHRpb25zLnByb3RvdHlwZS5saXN0Q2hhbm5lbHMgPSBmdW5jdGlvbiAocGFyYW1zLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgcmVzdCA9IHRoaXMucmVzdCwgZm9ybWF0ID0gcmVzdC5vcHRpb25zLnVzZUJpbmFyeVByb3RvY29sID8gVXRpbHMuRm9ybWF0Lm1zZ3BhY2sgOiBVdGlscy5Gb3JtYXQuanNvbiwgZW52ZWxvcGUgPSB0aGlzLnJlc3QuaHR0cC5zdXBwb3J0c0xpbmtIZWFkZXJzID8gdW5kZWZpbmVkIDogZm9ybWF0LCBoZWFkZXJzID0gVXRpbHMuZGVmYXVsdEdldEhlYWRlcnMocmVzdC5vcHRpb25zLCBmb3JtYXQpO1xuICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5yZXN0Lm9wdGlvbnMucHJvbWlzZXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gVXRpbHMucHJvbWlzaWZ5KHRoaXMsICdsaXN0Q2hhbm5lbHMnLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FsbGJhY2sgPSBub29wO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXN0Lm9wdGlvbnMuaGVhZGVycylcbiAgICAgICAgICAgIFV0aWxzLm1peGluKGhlYWRlcnMsIHJlc3Qub3B0aW9ucy5oZWFkZXJzKTtcbiAgICAgICAgaWYgKHJlc3Qub3B0aW9ucy5wdXNoRnVsbFdhaXQpXG4gICAgICAgICAgICBVdGlscy5taXhpbihwYXJhbXMsIHsgZnVsbFdhaXQ6ICd0cnVlJyB9KTtcbiAgICAgICAgbmV3IHBhZ2luYXRlZHJlc291cmNlXzEuZGVmYXVsdChyZXN0LCAnL3B1c2gvY2hhbm5lbHMnLCBoZWFkZXJzLCBlbnZlbG9wZSwgZnVuY3Rpb24gKGJvZHksIGhlYWRlcnMsIHVucGFja2VkKSB7XG4gICAgICAgICAgICB2YXIgcGFyc2VkQm9keSA9ICghdW5wYWNrZWQgJiYgZm9ybWF0ID8gVXRpbHMuZGVjb2RlQm9keShib2R5LCBmb3JtYXQpIDogYm9keSk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcnNlZEJvZHkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBwYXJzZWRCb2R5W2ldID0gU3RyaW5nKHBhcnNlZEJvZHlbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlZEJvZHk7XG4gICAgICAgIH0pLmdldChwYXJhbXMsIGNhbGxiYWNrKTtcbiAgICB9O1xuICAgIHJldHVybiBDaGFubmVsU3Vic2NyaXB0aW9ucztcbn0oKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBQdXNoO1xuXG5cbi8qKiovIH0pLFxuLyogNDcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciB0c2xpYl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciBVdGlscyA9IHRzbGliXzEuX19pbXBvcnRTdGFyKF9fd2VicGFja19yZXF1aXJlX18oMSkpO1xudmFyIGVycm9yaW5mb18xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXyg0KSk7XG52YXIgRGV2aWNlRm9ybUZhY3RvcjtcbihmdW5jdGlvbiAoRGV2aWNlRm9ybUZhY3Rvcikge1xuICAgIERldmljZUZvcm1GYWN0b3JbXCJQaG9uZVwiXSA9IFwicGhvbmVcIjtcbiAgICBEZXZpY2VGb3JtRmFjdG9yW1wiVGFibGV0XCJdID0gXCJ0YWJsZXRcIjtcbiAgICBEZXZpY2VGb3JtRmFjdG9yW1wiRGVza3RvcFwiXSA9IFwiZGVza3RvcFwiO1xuICAgIERldmljZUZvcm1GYWN0b3JbXCJUVlwiXSA9IFwidHZcIjtcbiAgICBEZXZpY2VGb3JtRmFjdG9yW1wiV2F0Y2hcIl0gPSBcIndhdGNoXCI7XG4gICAgRGV2aWNlRm9ybUZhY3RvcltcIkNhclwiXSA9IFwiY2FyXCI7XG4gICAgRGV2aWNlRm9ybUZhY3RvcltcIkVtYmVkZGVkXCJdID0gXCJlbWJlZGRlZFwiO1xuICAgIERldmljZUZvcm1GYWN0b3JbXCJPdGhlclwiXSA9IFwib3RoZXJcIjtcbn0pKERldmljZUZvcm1GYWN0b3IgfHwgKERldmljZUZvcm1GYWN0b3IgPSB7fSkpO1xudmFyIERldmljZVBsYXRmb3JtO1xuKGZ1bmN0aW9uIChEZXZpY2VQbGF0Zm9ybSkge1xuICAgIERldmljZVBsYXRmb3JtW1wiQW5kcm9pZFwiXSA9IFwiYW5kcm9pZFwiO1xuICAgIERldmljZVBsYXRmb3JtW1wiSU9TXCJdID0gXCJpb3NcIjtcbiAgICBEZXZpY2VQbGF0Zm9ybVtcIkJyb3dzZXJcIl0gPSBcImJyb3dzZXJcIjtcbn0pKERldmljZVBsYXRmb3JtIHx8IChEZXZpY2VQbGF0Zm9ybSA9IHt9KSk7XG52YXIgRGV2aWNlRGV0YWlscyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEZXZpY2VEZXRhaWxzKCkge1xuICAgIH1cbiAgICBEZXZpY2VEZXRhaWxzLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaWQ6IHRoaXMuaWQsXG4gICAgICAgICAgICBkZXZpY2VTZWNyZXQ6IHRoaXMuZGV2aWNlU2VjcmV0LFxuICAgICAgICAgICAgcGxhdGZvcm06IHRoaXMucGxhdGZvcm0sXG4gICAgICAgICAgICBmb3JtRmFjdG9yOiB0aGlzLmZvcm1GYWN0b3IsXG4gICAgICAgICAgICBjbGllbnRJZDogdGhpcy5jbGllbnRJZCxcbiAgICAgICAgICAgIG1ldGFkYXRhOiB0aGlzLm1ldGFkYXRhLFxuICAgICAgICAgICAgZGV2aWNlSWRlbnRpdHlUb2tlbjogdGhpcy5kZXZpY2VJZGVudGl0eVRva2VuLFxuICAgICAgICAgICAgcHVzaDoge1xuICAgICAgICAgICAgICAgIHJlY2lwaWVudDogKF9hID0gdGhpcy5wdXNoKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucmVjaXBpZW50LFxuICAgICAgICAgICAgICAgIHN0YXRlOiAoX2IgPSB0aGlzLnB1c2gpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5zdGF0ZSxcbiAgICAgICAgICAgICAgICBlcnJvcjogKF9jID0gdGhpcy5wdXNoKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MuZXJyb3IsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH07XG4gICAgRGV2aWNlRGV0YWlscy5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgICAgICAgdmFyIHJlc3VsdCA9ICdbRGV2aWNlRGV0YWlscyc7XG4gICAgICAgIGlmICh0aGlzLmlkKVxuICAgICAgICAgICAgcmVzdWx0ICs9ICc7IGlkPScgKyB0aGlzLmlkO1xuICAgICAgICBpZiAodGhpcy5wbGF0Zm9ybSlcbiAgICAgICAgICAgIHJlc3VsdCArPSAnOyBwbGF0Zm9ybT0nICsgdGhpcy5wbGF0Zm9ybTtcbiAgICAgICAgaWYgKHRoaXMuZm9ybUZhY3RvcilcbiAgICAgICAgICAgIHJlc3VsdCArPSAnOyBmb3JtRmFjdG9yPScgKyB0aGlzLmZvcm1GYWN0b3I7XG4gICAgICAgIGlmICh0aGlzLmNsaWVudElkKVxuICAgICAgICAgICAgcmVzdWx0ICs9ICc7IGNsaWVudElkPScgKyB0aGlzLmNsaWVudElkO1xuICAgICAgICBpZiAodGhpcy5tZXRhZGF0YSlcbiAgICAgICAgICAgIHJlc3VsdCArPSAnOyBtZXRhZGF0YT0nICsgdGhpcy5tZXRhZGF0YTtcbiAgICAgICAgaWYgKHRoaXMuZGV2aWNlSWRlbnRpdHlUb2tlbilcbiAgICAgICAgICAgIHJlc3VsdCArPSAnOyBkZXZpY2VJZGVudGl0eVRva2VuPScgKyBKU09OLnN0cmluZ2lmeSh0aGlzLmRldmljZUlkZW50aXR5VG9rZW4pO1xuICAgICAgICBpZiAoKF9hID0gdGhpcy5wdXNoKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucmVjaXBpZW50KVxuICAgICAgICAgICAgcmVzdWx0ICs9ICc7IHB1c2gucmVjaXBpZW50PScgKyBKU09OLnN0cmluZ2lmeSh0aGlzLnB1c2gucmVjaXBpZW50KTtcbiAgICAgICAgaWYgKChfYiA9IHRoaXMucHVzaCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnN0YXRlKVxuICAgICAgICAgICAgcmVzdWx0ICs9ICc7IHB1c2guc3RhdGU9JyArIHRoaXMucHVzaC5zdGF0ZTtcbiAgICAgICAgaWYgKChfYyA9IHRoaXMucHVzaCkgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLmVycm9yKVxuICAgICAgICAgICAgcmVzdWx0ICs9ICc7IHB1c2guZXJyb3I9JyArIEpTT04uc3RyaW5naWZ5KHRoaXMucHVzaC5lcnJvcik7XG4gICAgICAgIGlmICgoX2QgPSB0aGlzLnB1c2gpID09PSBudWxsIHx8IF9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZC5tZXRhZGF0YSlcbiAgICAgICAgICAgIHJlc3VsdCArPSAnOyBwdXNoLm1ldGFkYXRhPScgKyB0aGlzLnB1c2gubWV0YWRhdGE7XG4gICAgICAgIHJlc3VsdCArPSAnXSc7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgICBEZXZpY2VEZXRhaWxzLmZyb21SZXNwb25zZUJvZHkgPSBmdW5jdGlvbiAoYm9keSwgZm9ybWF0KSB7XG4gICAgICAgIGlmIChmb3JtYXQpIHtcbiAgICAgICAgICAgIGJvZHkgPSBVdGlscy5kZWNvZGVCb2R5KGJvZHksIGZvcm1hdCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFV0aWxzLmlzQXJyYXkoYm9keSkpIHtcbiAgICAgICAgICAgIHJldHVybiBEZXZpY2VEZXRhaWxzLmZyb21WYWx1ZXNBcnJheShib2R5KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBEZXZpY2VEZXRhaWxzLmZyb21WYWx1ZXMoYm9keSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIERldmljZURldGFpbHMuZnJvbVZhbHVlcyA9IGZ1bmN0aW9uICh2YWx1ZXMpIHtcbiAgICAgICAgdmFsdWVzLmVycm9yID0gdmFsdWVzLmVycm9yICYmIGVycm9yaW5mb18xLmRlZmF1bHQuZnJvbVZhbHVlcyh2YWx1ZXMuZXJyb3IpO1xuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihuZXcgRGV2aWNlRGV0YWlscygpLCB2YWx1ZXMpO1xuICAgIH07XG4gICAgRGV2aWNlRGV0YWlscy5mcm9tVmFsdWVzQXJyYXkgPSBmdW5jdGlvbiAodmFsdWVzKSB7XG4gICAgICAgIHZhciBjb3VudCA9IHZhbHVlcy5sZW5ndGgsIHJlc3VsdCA9IG5ldyBBcnJheShjb3VudCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY291bnQ7IGkrKylcbiAgICAgICAgICAgIHJlc3VsdFtpXSA9IERldmljZURldGFpbHMuZnJvbVZhbHVlcyh2YWx1ZXNbaV0pO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gICAgRGV2aWNlRGV0YWlscy50b1JlcXVlc3RCb2R5ID0gVXRpbHMuZW5jb2RlQm9keTtcbiAgICByZXR1cm4gRGV2aWNlRGV0YWlscztcbn0oKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBEZXZpY2VEZXRhaWxzO1xuXG5cbi8qKiovIH0pLFxuLyogNDggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciB0c2xpYl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciBVdGlscyA9IHRzbGliXzEuX19pbXBvcnRTdGFyKF9fd2VicGFja19yZXF1aXJlX18oMSkpO1xudmFyIFB1c2hDaGFubmVsU3Vic2NyaXB0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFB1c2hDaGFubmVsU3Vic2NyaXB0aW9uKCkge1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBPdmVybG9hZCB0b0pTT04oKSB0byBpbnRlcmNlcHQgSlNPTi5zdHJpbmdpZnkoKVxuICAgICAqIEByZXR1cm4geyp9XG4gICAgICovXG4gICAgUHVzaENoYW5uZWxTdWJzY3JpcHRpb24ucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNoYW5uZWw6IHRoaXMuY2hhbm5lbCxcbiAgICAgICAgICAgIGRldmljZUlkOiB0aGlzLmRldmljZUlkLFxuICAgICAgICAgICAgY2xpZW50SWQ6IHRoaXMuY2xpZW50SWQsXG4gICAgICAgIH07XG4gICAgfTtcbiAgICBQdXNoQ2hhbm5lbFN1YnNjcmlwdGlvbi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSAnW1B1c2hDaGFubmVsU3Vic2NyaXB0aW9uJztcbiAgICAgICAgaWYgKHRoaXMuY2hhbm5lbClcbiAgICAgICAgICAgIHJlc3VsdCArPSAnOyBjaGFubmVsPScgKyB0aGlzLmNoYW5uZWw7XG4gICAgICAgIGlmICh0aGlzLmRldmljZUlkKVxuICAgICAgICAgICAgcmVzdWx0ICs9ICc7IGRldmljZUlkPScgKyB0aGlzLmRldmljZUlkO1xuICAgICAgICBpZiAodGhpcy5jbGllbnRJZClcbiAgICAgICAgICAgIHJlc3VsdCArPSAnOyBjbGllbnRJZD0nICsgdGhpcy5jbGllbnRJZDtcbiAgICAgICAgcmVzdWx0ICs9ICddJztcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICAgIFB1c2hDaGFubmVsU3Vic2NyaXB0aW9uLmZyb21SZXNwb25zZUJvZHkgPSBmdW5jdGlvbiAoYm9keSwgZm9ybWF0KSB7XG4gICAgICAgIGlmIChmb3JtYXQpIHtcbiAgICAgICAgICAgIGJvZHkgPSBVdGlscy5kZWNvZGVCb2R5KGJvZHksIGZvcm1hdCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFV0aWxzLmlzQXJyYXkoYm9keSkpIHtcbiAgICAgICAgICAgIHJldHVybiBQdXNoQ2hhbm5lbFN1YnNjcmlwdGlvbi5mcm9tVmFsdWVzQXJyYXkoYm9keSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gUHVzaENoYW5uZWxTdWJzY3JpcHRpb24uZnJvbVZhbHVlcyhib2R5KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgUHVzaENoYW5uZWxTdWJzY3JpcHRpb24uZnJvbVZhbHVlcyA9IGZ1bmN0aW9uICh2YWx1ZXMpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24obmV3IFB1c2hDaGFubmVsU3Vic2NyaXB0aW9uKCksIHZhbHVlcyk7XG4gICAgfTtcbiAgICBQdXNoQ2hhbm5lbFN1YnNjcmlwdGlvbi5mcm9tVmFsdWVzQXJyYXkgPSBmdW5jdGlvbiAodmFsdWVzKSB7XG4gICAgICAgIHZhciBjb3VudCA9IHZhbHVlcy5sZW5ndGgsIHJlc3VsdCA9IG5ldyBBcnJheShjb3VudCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY291bnQ7IGkrKylcbiAgICAgICAgICAgIHJlc3VsdFtpXSA9IFB1c2hDaGFubmVsU3Vic2NyaXB0aW9uLmZyb21WYWx1ZXModmFsdWVzW2ldKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICAgIFB1c2hDaGFubmVsU3Vic2NyaXB0aW9uLnRvUmVxdWVzdEJvZHkgPSBVdGlscy5lbmNvZGVCb2R5O1xuICAgIHJldHVybiBQdXNoQ2hhbm5lbFN1YnNjcmlwdGlvbjtcbn0oKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBQdXNoQ2hhbm5lbFN1YnNjcmlwdGlvbjtcblxuXG4vKioqLyB9KSxcbi8qIDQ5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgdHNsaWJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG52YXIgVXRpbHMgPSB0c2xpYl8xLl9faW1wb3J0U3RhcihfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKTtcbnZhciBNZXNzYWdlQ291bnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTWVzc2FnZUNvdW50KHZhbHVlcykge1xuICAgICAgICB0aGlzLmNvdW50ID0gKHZhbHVlcyAmJiB2YWx1ZXMuY291bnQpIHx8IDA7XG4gICAgICAgIHRoaXMuZGF0YSA9ICh2YWx1ZXMgJiYgdmFsdWVzLmRhdGEpIHx8IDA7XG4gICAgICAgIHRoaXMudW5jb21wcmVzc2VkRGF0YSA9ICh2YWx1ZXMgJiYgdmFsdWVzLnVuY29tcHJlc3NlZERhdGEpIHx8IDA7XG4gICAgICAgIHRoaXMuZmFpbGVkID0gKHZhbHVlcyAmJiB2YWx1ZXMuZmFpbGVkKSB8fCAwO1xuICAgICAgICB0aGlzLnJlZnVzZWQgPSAodmFsdWVzICYmIHZhbHVlcy5yZWZ1c2VkKSB8fCAwO1xuICAgIH1cbiAgICByZXR1cm4gTWVzc2FnZUNvdW50O1xufSgpKTtcbnZhciBNZXNzYWdlQ2F0ZWdvcnkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoTWVzc2FnZUNhdGVnb3J5LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE1lc3NhZ2VDYXRlZ29yeSh2YWx1ZXMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgdmFsdWVzKSB8fCB0aGlzO1xuICAgICAgICBpZiAodmFsdWVzICYmIHZhbHVlcy5jYXRlZ29yeSkge1xuICAgICAgICAgICAgX3RoaXMuY2F0ZWdvcnkgPSB7fTtcbiAgICAgICAgICAgIFV0aWxzLmZvckluT3duTm9uTnVsbFByb3BlcnRpZXModmFsdWVzLmNhdGVnb3J5LCBmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICAgICAgICAgIF90aGlzLmNhdGVnb3J5W3Byb3BdID0gbmV3IE1lc3NhZ2VDb3VudCh2YWx1ZXMuY2F0ZWdvcnlbcHJvcF0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICByZXR1cm4gTWVzc2FnZUNhdGVnb3J5O1xufShNZXNzYWdlQ291bnQpKTtcbnZhciBSZXNvdXJjZUNvdW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJlc291cmNlQ291bnQodmFsdWVzKSB7XG4gICAgICAgIHRoaXMucGVhayA9ICh2YWx1ZXMgJiYgdmFsdWVzLnBlYWspIHx8IDA7XG4gICAgICAgIHRoaXMubWluID0gKHZhbHVlcyAmJiB2YWx1ZXMubWluKSB8fCAwO1xuICAgICAgICB0aGlzLm1lYW4gPSAodmFsdWVzICYmIHZhbHVlcy5tZWFuKSB8fCAwO1xuICAgICAgICB0aGlzLm9wZW5lZCA9ICh2YWx1ZXMgJiYgdmFsdWVzLm9wZW5lZCkgfHwgMDtcbiAgICAgICAgdGhpcy5yZWZ1c2VkID0gKHZhbHVlcyAmJiB2YWx1ZXMucmVmdXNlZCkgfHwgMDtcbiAgICB9XG4gICAgcmV0dXJuIFJlc291cmNlQ291bnQ7XG59KCkpO1xudmFyIFJlcXVlc3RDb3VudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBSZXF1ZXN0Q291bnQodmFsdWVzKSB7XG4gICAgICAgIHRoaXMuc3VjY2VlZGVkID0gKHZhbHVlcyAmJiB2YWx1ZXMuc3VjY2VlZGVkKSB8fCAwO1xuICAgICAgICB0aGlzLmZhaWxlZCA9ICh2YWx1ZXMgJiYgdmFsdWVzLmZhaWxlZCkgfHwgMDtcbiAgICAgICAgdGhpcy5yZWZ1c2VkID0gKHZhbHVlcyAmJiB2YWx1ZXMucmVmdXNlZCkgfHwgMDtcbiAgICB9XG4gICAgcmV0dXJuIFJlcXVlc3RDb3VudDtcbn0oKSk7XG52YXIgQ29ubmVjdGlvblR5cGVzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENvbm5lY3Rpb25UeXBlcyh2YWx1ZXMpIHtcbiAgICAgICAgdGhpcy5wbGFpbiA9IG5ldyBSZXNvdXJjZUNvdW50KHZhbHVlcyAmJiB2YWx1ZXMucGxhaW4pO1xuICAgICAgICB0aGlzLnRscyA9IG5ldyBSZXNvdXJjZUNvdW50KHZhbHVlcyAmJiB2YWx1ZXMudGxzKTtcbiAgICAgICAgdGhpcy5hbGwgPSBuZXcgUmVzb3VyY2VDb3VudCh2YWx1ZXMgJiYgdmFsdWVzLmFsbCk7XG4gICAgfVxuICAgIHJldHVybiBDb25uZWN0aW9uVHlwZXM7XG59KCkpO1xudmFyIE1lc3NhZ2VUeXBlcyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNZXNzYWdlVHlwZXModmFsdWVzKSB7XG4gICAgICAgIHRoaXMubWVzc2FnZXMgPSBuZXcgTWVzc2FnZUNhdGVnb3J5KHZhbHVlcyAmJiB2YWx1ZXMubWVzc2FnZXMpO1xuICAgICAgICB0aGlzLnByZXNlbmNlID0gbmV3IE1lc3NhZ2VDYXRlZ29yeSh2YWx1ZXMgJiYgdmFsdWVzLnByZXNlbmNlKTtcbiAgICAgICAgdGhpcy5hbGwgPSBuZXcgTWVzc2FnZUNhdGVnb3J5KHZhbHVlcyAmJiB2YWx1ZXMuYWxsKTtcbiAgICB9XG4gICAgcmV0dXJuIE1lc3NhZ2VUeXBlcztcbn0oKSk7XG52YXIgTWVzc2FnZVRyYWZmaWMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTWVzc2FnZVRyYWZmaWModmFsdWVzKSB7XG4gICAgICAgIHRoaXMucmVhbHRpbWUgPSBuZXcgTWVzc2FnZVR5cGVzKHZhbHVlcyAmJiB2YWx1ZXMucmVhbHRpbWUpO1xuICAgICAgICB0aGlzLnJlc3QgPSBuZXcgTWVzc2FnZVR5cGVzKHZhbHVlcyAmJiB2YWx1ZXMucmVzdCk7XG4gICAgICAgIHRoaXMud2ViaG9vayA9IG5ldyBNZXNzYWdlVHlwZXModmFsdWVzICYmIHZhbHVlcy53ZWJob29rKTtcbiAgICAgICAgdGhpcy5zaGFyZWRRdWV1ZSA9IG5ldyBNZXNzYWdlVHlwZXModmFsdWVzICYmIHZhbHVlcy5zaGFyZWRRdWV1ZSk7XG4gICAgICAgIHRoaXMuZXh0ZXJuYWxRdWV1ZSA9IG5ldyBNZXNzYWdlVHlwZXModmFsdWVzICYmIHZhbHVlcy5leHRlcm5hbFF1ZXVlKTtcbiAgICAgICAgdGhpcy5odHRwRXZlbnQgPSBuZXcgTWVzc2FnZVR5cGVzKHZhbHVlcyAmJiB2YWx1ZXMuaHR0cEV2ZW50KTtcbiAgICAgICAgdGhpcy5wdXNoID0gbmV3IE1lc3NhZ2VUeXBlcyh2YWx1ZXMgJiYgdmFsdWVzLnB1c2gpO1xuICAgICAgICB0aGlzLmFsbCA9IG5ldyBNZXNzYWdlVHlwZXModmFsdWVzICYmIHZhbHVlcy5hbGwpO1xuICAgIH1cbiAgICByZXR1cm4gTWVzc2FnZVRyYWZmaWM7XG59KCkpO1xudmFyIE1lc3NhZ2VEaXJlY3Rpb25zID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE1lc3NhZ2VEaXJlY3Rpb25zKHZhbHVlcykge1xuICAgICAgICB0aGlzLmFsbCA9IG5ldyBNZXNzYWdlVHlwZXModmFsdWVzICYmIHZhbHVlcy5hbGwpO1xuICAgICAgICB0aGlzLmluYm91bmQgPSBuZXcgTWVzc2FnZVRyYWZmaWModmFsdWVzICYmIHZhbHVlcy5pbmJvdW5kKTtcbiAgICAgICAgdGhpcy5vdXRib3VuZCA9IG5ldyBNZXNzYWdlVHJhZmZpYyh2YWx1ZXMgJiYgdmFsdWVzLm91dGJvdW5kKTtcbiAgICB9XG4gICAgcmV0dXJuIE1lc3NhZ2VEaXJlY3Rpb25zO1xufSgpKTtcbnZhciBYY2hnTWVzc2FnZXMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gWGNoZ01lc3NhZ2VzKHZhbHVlcykge1xuICAgICAgICB0aGlzLmFsbCA9IG5ldyBNZXNzYWdlVHlwZXModmFsdWVzICYmIHZhbHVlcy5hbGwpO1xuICAgICAgICB0aGlzLnByb2R1Y2VyUGFpZCA9IG5ldyBNZXNzYWdlRGlyZWN0aW9ucyh2YWx1ZXMgJiYgdmFsdWVzLnByb2R1Y2VyUGFpZCk7XG4gICAgICAgIHRoaXMuY29uc3VtZXJQYWlkID0gbmV3IE1lc3NhZ2VEaXJlY3Rpb25zKHZhbHVlcyAmJiB2YWx1ZXMuY29uc3VtZXJQYWlkKTtcbiAgICB9XG4gICAgcmV0dXJuIFhjaGdNZXNzYWdlcztcbn0oKSk7XG52YXIgUHVzaFN0YXRzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFB1c2hTdGF0cyh2YWx1ZXMpIHtcbiAgICAgICAgdGhpcy5tZXNzYWdlcyA9ICh2YWx1ZXMgJiYgdmFsdWVzLm1lc3NhZ2VzKSB8fCAwO1xuICAgICAgICB2YXIgbm90aWZpY2F0aW9ucyA9IHZhbHVlcyAmJiB2YWx1ZXMubm90aWZpY2F0aW9ucztcbiAgICAgICAgdGhpcy5ub3RpZmljYXRpb25zID0ge1xuICAgICAgICAgICAgaW52YWxpZDogKG5vdGlmaWNhdGlvbnMgJiYgbm90aWZpY2F0aW9ucy5pbnZhbGlkKSB8fCAwLFxuICAgICAgICAgICAgYXR0ZW1wdGVkOiAobm90aWZpY2F0aW9ucyAmJiBub3RpZmljYXRpb25zLmF0dGVtcHRlZCkgfHwgMCxcbiAgICAgICAgICAgIHN1Y2Nlc3NmdWw6IChub3RpZmljYXRpb25zICYmIG5vdGlmaWNhdGlvbnMuc3VjY2Vzc2Z1bCkgfHwgMCxcbiAgICAgICAgICAgIGZhaWxlZDogKG5vdGlmaWNhdGlvbnMgJiYgbm90aWZpY2F0aW9ucy5mYWlsZWQpIHx8IDAsXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZGlyZWN0UHVibGlzaGVzID0gKHZhbHVlcyAmJiB2YWx1ZXMuZGlyZWN0UHVibGlzaGVzKSB8fCAwO1xuICAgIH1cbiAgICByZXR1cm4gUHVzaFN0YXRzO1xufSgpKTtcbnZhciBQcm9jZXNzZWRDb3VudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBQcm9jZXNzZWRDb3VudCh2YWx1ZXMpIHtcbiAgICAgICAgdGhpcy5zdWNjZWVkZWQgPSAodmFsdWVzICYmIHZhbHVlcy5zdWNjZWVkZWQpIHx8IDA7XG4gICAgICAgIHRoaXMuc2tpcHBlZCA9ICh2YWx1ZXMgJiYgdmFsdWVzLnNraXBwZWQpIHx8IDA7XG4gICAgICAgIHRoaXMuZmFpbGVkID0gKHZhbHVlcyAmJiB2YWx1ZXMuZmFpbGVkKSB8fCAwO1xuICAgIH1cbiAgICByZXR1cm4gUHJvY2Vzc2VkQ291bnQ7XG59KCkpO1xudmFyIFByb2Nlc3NlZE1lc3NhZ2VzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFByb2Nlc3NlZE1lc3NhZ2VzKHZhbHVlcykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLmRlbHRhID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAodmFsdWVzICYmIHZhbHVlcy5kZWx0YSkge1xuICAgICAgICAgICAgdGhpcy5kZWx0YSA9IHt9O1xuICAgICAgICAgICAgVXRpbHMuZm9ySW5Pd25Ob25OdWxsUHJvcGVydGllcyh2YWx1ZXMuZGVsdGEsIGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuZGVsdGFbcHJvcF0gPSBuZXcgUHJvY2Vzc2VkQ291bnQodmFsdWVzLmRlbHRhW3Byb3BdKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBQcm9jZXNzZWRNZXNzYWdlcztcbn0oKSk7XG52YXIgU3RhdHMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoU3RhdHMsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU3RhdHModmFsdWVzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHZhbHVlcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMucGVyc2lzdGVkID0gbmV3IE1lc3NhZ2VUeXBlcyh2YWx1ZXMgJiYgdmFsdWVzLnBlcnNpc3RlZCk7XG4gICAgICAgIF90aGlzLmNvbm5lY3Rpb25zID0gbmV3IENvbm5lY3Rpb25UeXBlcyh2YWx1ZXMgJiYgdmFsdWVzLmNvbm5lY3Rpb25zKTtcbiAgICAgICAgX3RoaXMuY2hhbm5lbHMgPSBuZXcgUmVzb3VyY2VDb3VudCh2YWx1ZXMgJiYgdmFsdWVzLmNoYW5uZWxzKTtcbiAgICAgICAgX3RoaXMuYXBpUmVxdWVzdHMgPSBuZXcgUmVxdWVzdENvdW50KHZhbHVlcyAmJiB2YWx1ZXMuYXBpUmVxdWVzdHMpO1xuICAgICAgICBfdGhpcy50b2tlblJlcXVlc3RzID0gbmV3IFJlcXVlc3RDb3VudCh2YWx1ZXMgJiYgdmFsdWVzLnRva2VuUmVxdWVzdHMpO1xuICAgICAgICBfdGhpcy54Y2hnUHJvZHVjZXIgPSBuZXcgWGNoZ01lc3NhZ2VzKHZhbHVlcyAmJiB2YWx1ZXMueGNoZ1Byb2R1Y2VyKTtcbiAgICAgICAgX3RoaXMueGNoZ0NvbnN1bWVyID0gbmV3IFhjaGdNZXNzYWdlcyh2YWx1ZXMgJiYgdmFsdWVzLnhjaGdDb25zdW1lcik7XG4gICAgICAgIF90aGlzLnB1c2ggPSBuZXcgUHVzaFN0YXRzKHZhbHVlcyAmJiB2YWx1ZXMucHVzaFN0YXRzKTtcbiAgICAgICAgX3RoaXMucHJvY2Vzc2VkID0gbmV3IFByb2Nlc3NlZE1lc3NhZ2VzKHZhbHVlcyAmJiB2YWx1ZXMucHJvY2Vzc2VkKTtcbiAgICAgICAgX3RoaXMuaW5Qcm9ncmVzcyA9ICh2YWx1ZXMgJiYgdmFsdWVzLmluUHJvZ3Jlc3MpIHx8IHVuZGVmaW5lZDtcbiAgICAgICAgX3RoaXMudW5pdCA9ICh2YWx1ZXMgJiYgdmFsdWVzLnVuaXQpIHx8IHVuZGVmaW5lZDtcbiAgICAgICAgX3RoaXMuaW50ZXJ2YWxJZCA9ICh2YWx1ZXMgJiYgdmFsdWVzLmludGVydmFsSWQpIHx8IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBTdGF0cy5mcm9tVmFsdWVzID0gZnVuY3Rpb24gKHZhbHVlcykge1xuICAgICAgICByZXR1cm4gbmV3IFN0YXRzKHZhbHVlcyk7XG4gICAgfTtcbiAgICByZXR1cm4gU3RhdHM7XG59KE1lc3NhZ2VEaXJlY3Rpb25zKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBTdGF0cztcblxuXG4vKioqLyB9KSxcbi8qIDUwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgdHNsaWJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG52YXIgVXRpbHMgPSB0c2xpYl8xLl9faW1wb3J0U3RhcihfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKTtcbnZhciByZXN0XzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKDMwKSk7XG52YXIgZXZlbnRlbWl0dGVyXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKDcpKTtcbnZhciBsb2dnZXJfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oMikpO1xudmFyIGNvbm5lY3Rpb25fMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oNTEpKTtcbnZhciByZWFsdGltZWNoYW5uZWxfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oMzgpKTtcbnZhciBkZWZhdWx0c18xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXyg4KSk7XG52YXIgZXJyb3JpbmZvXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKDQpKTtcbnZhciBwcm90b2NvbG1lc3NhZ2VfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oMTApKTtcbnZhciBjb25uZWN0aW9ubWFuYWdlcl8xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygzNSkpO1xudmFyIHBsYXRmb3JtXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKDMpKTtcbnZhciBtZXNzYWdlXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKDkpKTtcbnZhciBSZWFsdGltZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhSZWFsdGltZSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBSZWFsdGltZShvcHRpb25zKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIG9wdGlvbnMpIHx8IHRoaXM7XG4gICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01JTk9SLCAnUmVhbHRpbWUoKScsICcnKTtcbiAgICAgICAgX3RoaXMuY29ubmVjdGlvbiA9IG5ldyBjb25uZWN0aW9uXzEuZGVmYXVsdChfdGhpcywgX3RoaXMub3B0aW9ucyk7XG4gICAgICAgIF90aGlzLmNoYW5uZWxzID0gbmV3IENoYW5uZWxzKF90aGlzKTtcbiAgICAgICAgaWYgKG9wdGlvbnMuYXV0b0Nvbm5lY3QgIT09IGZhbHNlKVxuICAgICAgICAgICAgX3RoaXMuY29ubmVjdCgpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFJlYWx0aW1lLnByb3RvdHlwZS5jb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19NSU5PUiwgJ1JlYWx0aW1lLmNvbm5lY3QoKScsICcnKTtcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uLmNvbm5lY3QoKTtcbiAgICB9O1xuICAgIFJlYWx0aW1lLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlOT1IsICdSZWFsdGltZS5jbG9zZSgpJywgJycpO1xuICAgICAgICB0aGlzLmNvbm5lY3Rpb24uY2xvc2UoKTtcbiAgICB9O1xuICAgIFJlYWx0aW1lLlByb21pc2UgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICBvcHRpb25zID0gZGVmYXVsdHNfMS5kZWZhdWx0Lm9iamVjdGlmeU9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgIG9wdGlvbnMucHJvbWlzZXMgPSB0cnVlO1xuICAgICAgICByZXR1cm4gbmV3IFJlYWx0aW1lKG9wdGlvbnMpO1xuICAgIH07XG4gICAgUmVhbHRpbWUuQ2FsbGJhY2tzID0gUmVhbHRpbWU7XG4gICAgUmVhbHRpbWUuVXRpbHMgPSBVdGlscztcbiAgICBSZWFsdGltZS5Db25uZWN0aW9uTWFuYWdlciA9IGNvbm5lY3Rpb25tYW5hZ2VyXzEuZGVmYXVsdDtcbiAgICBSZWFsdGltZS5QbGF0Zm9ybSA9IHBsYXRmb3JtXzEuZGVmYXVsdDtcbiAgICBSZWFsdGltZS5Qcm90b2NvbE1lc3NhZ2UgPSBwcm90b2NvbG1lc3NhZ2VfMS5kZWZhdWx0O1xuICAgIFJlYWx0aW1lLk1lc3NhZ2UgPSBtZXNzYWdlXzEuZGVmYXVsdDtcbiAgICByZXR1cm4gUmVhbHRpbWU7XG59KHJlc3RfMS5kZWZhdWx0KSk7XG52YXIgQ2hhbm5lbHMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoQ2hhbm5lbHMsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQ2hhbm5lbHMocmVhbHRpbWUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMucmVhbHRpbWUgPSByZWFsdGltZTtcbiAgICAgICAgX3RoaXMuYWxsID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgcmVhbHRpbWUuY29ubmVjdGlvbi5jb25uZWN0aW9uTWFuYWdlci5vbigndHJhbnNwb3J0LmFjdGl2ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLm9uVHJhbnNwb3J0QWN0aXZlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIENoYW5uZWxzLnByb3RvdHlwZS5jaGFubmVsU2VyaWFscyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHNlcmlhbHMgPSB7fTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IFV0aWxzLmtleXNBcnJheSh0aGlzLmFsbCwgdHJ1ZSk7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgbmFtZV8xID0gX2FbX2ldO1xuICAgICAgICAgICAgdmFyIGNoYW5uZWwgPSB0aGlzLmFsbFtuYW1lXzFdO1xuICAgICAgICAgICAgaWYgKGNoYW5uZWwucHJvcGVydGllcy5jaGFubmVsU2VyaWFsKSB7XG4gICAgICAgICAgICAgICAgc2VyaWFsc1tuYW1lXzFdID0gY2hhbm5lbC5wcm9wZXJ0aWVzLmNoYW5uZWxTZXJpYWw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNlcmlhbHM7XG4gICAgfTtcbiAgICAvLyByZWNvdmVyQ2hhbm5lbHMgZ2V0cyB0aGUgZ2l2ZW4gY2hhbm5lbHMgYW5kIHNldHMgdGhlaXIgY2hhbm5lbCBzZXJpYWxzLlxuICAgIENoYW5uZWxzLnByb3RvdHlwZS5yZWNvdmVyQ2hhbm5lbHMgPSBmdW5jdGlvbiAoY2hhbm5lbFNlcmlhbHMpIHtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IFV0aWxzLmtleXNBcnJheShjaGFubmVsU2VyaWFscywgdHJ1ZSk7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgbmFtZV8yID0gX2FbX2ldO1xuICAgICAgICAgICAgdmFyIGNoYW5uZWwgPSB0aGlzLmdldChuYW1lXzIpO1xuICAgICAgICAgICAgY2hhbm5lbC5wcm9wZXJ0aWVzLmNoYW5uZWxTZXJpYWwgPSBjaGFubmVsU2VyaWFsc1tuYW1lXzJdO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDaGFubmVscy5wcm90b3R5cGUub25DaGFubmVsTWVzc2FnZSA9IGZ1bmN0aW9uIChtc2cpIHtcbiAgICAgICAgdmFyIGNoYW5uZWxOYW1lID0gbXNnLmNoYW5uZWw7XG4gICAgICAgIGlmIChjaGFubmVsTmFtZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19FUlJPUiwgJ0NoYW5uZWxzLm9uQ2hhbm5lbE1lc3NhZ2UoKScsICdyZWNlaXZlZCBldmVudCB1bnNwZWNpZmllZCBjaGFubmVsLCBhY3Rpb24gPSAnICsgbXNnLmFjdGlvbik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNoYW5uZWwgPSB0aGlzLmFsbFtjaGFubmVsTmFtZV07XG4gICAgICAgIGlmICghY2hhbm5lbCkge1xuICAgICAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfRVJST1IsICdDaGFubmVscy5vbkNoYW5uZWxNZXNzYWdlKCknLCAncmVjZWl2ZWQgZXZlbnQgZm9yIG5vbi1leGlzdGVudCBjaGFubmVsOiAnICsgY2hhbm5lbE5hbWUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNoYW5uZWwub25NZXNzYWdlKG1zZyk7XG4gICAgfTtcbiAgICAvKiBjYWxsZWQgd2hlbiBhIHRyYW5zcG9ydCBiZWNvbWVzIGNvbm5lY3RlZDsgcmVhdHRlbXB0IGF0dGFjaC9kZXRhY2hcbiAgICAgKiBmb3IgY2hhbm5lbHMgdGhhdCBhcmUgYXR0YWNoaW5nIG9yIGRldGFjaGluZy4gKi9cbiAgICBDaGFubmVscy5wcm90b3R5cGUub25UcmFuc3BvcnRBY3RpdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAodmFyIGNoYW5uZWxOYW1lIGluIHRoaXMuYWxsKSB7XG4gICAgICAgICAgICB2YXIgY2hhbm5lbCA9IHRoaXMuYWxsW2NoYW5uZWxOYW1lXTtcbiAgICAgICAgICAgIGlmIChjaGFubmVsLnN0YXRlID09PSAnYXR0YWNoaW5nJyB8fCBjaGFubmVsLnN0YXRlID09PSAnZGV0YWNoaW5nJykge1xuICAgICAgICAgICAgICAgIGNoYW5uZWwuY2hlY2tQZW5kaW5nU3RhdGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoYW5uZWwuc3RhdGUgPT09ICdzdXNwZW5kZWQnKSB7XG4gICAgICAgICAgICAgICAgY2hhbm5lbC5fYXR0YWNoKGZhbHNlLCBudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoYW5uZWwuc3RhdGUgPT09ICdhdHRhY2hlZCcpIHtcbiAgICAgICAgICAgICAgICAvLyBOb3RlIGV4cGxpY2l0eSByZXF1ZXN0IHRoZSBzdGF0ZSwgY2hhbm5lbC5hdHRhY2goKSB3b3VsZCBkbyBub3RoaW5nXG4gICAgICAgICAgICAgICAgLy8gYXMgaXRzIGFscmVhZHkgYXR0YWNoZWQuXG4gICAgICAgICAgICAgICAgY2hhbm5lbC5yZXF1ZXN0U3RhdGUoJ2F0dGFjaGluZycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICAvKiBDb25uZWN0aW9uIGludGVycnVwdGlvbnMgKGllIHdoZW4gdGhlIGNvbm5lY3Rpb24gd2lsbCBubyBsb25nZXIgcXVldWVcbiAgICAgKiBldmVudHMpIGltcGx5IGNvbm5lY3Rpb24gc3RhdGUgY2hhbmdlcyBmb3IgYW55IGNoYW5uZWwgd2hpY2ggaXMgZWl0aGVyXG4gICAgICogYXR0YWNoZWQsIHBlbmRpbmcsIG9yIHdpbGwgYXR0ZW1wdCB0byBiZWNvbWUgYXR0YWNoZWQgaW4gdGhlIGZ1dHVyZSAqL1xuICAgIENoYW5uZWxzLnByb3RvdHlwZS5wcm9wb2dhdGVDb25uZWN0aW9uSW50ZXJydXB0aW9uID0gZnVuY3Rpb24gKGNvbm5lY3Rpb25TdGF0ZSwgcmVhc29uKSB7XG4gICAgICAgIHZhciBjb25uZWN0aW9uU3RhdGVUb0NoYW5uZWxTdGF0ZSA9IHtcbiAgICAgICAgICAgIGNsb3Npbmc6ICdkZXRhY2hlZCcsXG4gICAgICAgICAgICBjbG9zZWQ6ICdkZXRhY2hlZCcsXG4gICAgICAgICAgICBmYWlsZWQ6ICdmYWlsZWQnLFxuICAgICAgICAgICAgc3VzcGVuZGVkOiAnc3VzcGVuZGVkJyxcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGZyb21DaGFubmVsU3RhdGVzID0gWydhdHRhY2hpbmcnLCAnYXR0YWNoZWQnLCAnZGV0YWNoaW5nJywgJ3N1c3BlbmRlZCddO1xuICAgICAgICB2YXIgdG9DaGFubmVsU3RhdGUgPSBjb25uZWN0aW9uU3RhdGVUb0NoYW5uZWxTdGF0ZVtjb25uZWN0aW9uU3RhdGVdO1xuICAgICAgICBmb3IgKHZhciBjaGFubmVsSWQgaW4gdGhpcy5hbGwpIHtcbiAgICAgICAgICAgIHZhciBjaGFubmVsID0gdGhpcy5hbGxbY2hhbm5lbElkXTtcbiAgICAgICAgICAgIGlmIChVdGlscy5hcnJJbihmcm9tQ2hhbm5lbFN0YXRlcywgY2hhbm5lbC5zdGF0ZSkpIHtcbiAgICAgICAgICAgICAgICBjaGFubmVsLm5vdGlmeVN0YXRlKHRvQ2hhbm5lbFN0YXRlLCByZWFzb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBDaGFubmVscy5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKG5hbWUsIGNoYW5uZWxPcHRpb25zKSB7XG4gICAgICAgIG5hbWUgPSBTdHJpbmcobmFtZSk7XG4gICAgICAgIHZhciBjaGFubmVsID0gdGhpcy5hbGxbbmFtZV07XG4gICAgICAgIGlmICghY2hhbm5lbCkge1xuICAgICAgICAgICAgY2hhbm5lbCA9IHRoaXMuYWxsW25hbWVdID0gbmV3IHJlYWx0aW1lY2hhbm5lbF8xLmRlZmF1bHQodGhpcy5yZWFsdGltZSwgbmFtZSwgY2hhbm5lbE9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNoYW5uZWxPcHRpb25zKSB7XG4gICAgICAgICAgICBpZiAoY2hhbm5lbC5fc2hvdWxkUmVhdHRhY2hUb1NldE9wdGlvbnMoY2hhbm5lbE9wdGlvbnMpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yaW5mb18xLmRlZmF1bHQoJ0NoYW5uZWxzLmdldCgpIGNhbm5vdCBiZSB1c2VkIHRvIHNldCBjaGFubmVsIG9wdGlvbnMgdGhhdCB3b3VsZCBjYXVzZSB0aGUgY2hhbm5lbCB0byByZWF0dGFjaC4gUGxlYXNlLCB1c2UgUmVhbHRpbWVDaGFubmVsLnNldE9wdGlvbnMoKSBpbnN0ZWFkLicsIDQwMDAwLCA0MDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2hhbm5lbC5zZXRPcHRpb25zKGNoYW5uZWxPcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2hhbm5lbDtcbiAgICB9O1xuICAgIENoYW5uZWxzLnByb3RvdHlwZS5nZXREZXJpdmVkID0gZnVuY3Rpb24gKG5hbWUsIGRlcml2ZU9wdGlvbnMsIGNoYW5uZWxPcHRpb25zKSB7XG4gICAgICAgIGlmIChkZXJpdmVPcHRpb25zLmZpbHRlcikge1xuICAgICAgICAgICAgdmFyIGZpbHRlciA9IFV0aWxzLnRvQmFzZTY0KGRlcml2ZU9wdGlvbnMuZmlsdGVyKTtcbiAgICAgICAgICAgIHZhciBtYXRjaCA9IFV0aWxzLm1hdGNoRGVyaXZlZENoYW5uZWwobmFtZSk7XG4gICAgICAgICAgICBuYW1lID0gXCJbZmlsdGVyPVwiLmNvbmNhdChmaWx0ZXIpLmNvbmNhdChtYXRjaC5xdWFsaWZpZXJQYXJhbSwgXCJdXCIpLmNvbmNhdChtYXRjaC5jaGFubmVsTmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KG5hbWUsIGNoYW5uZWxPcHRpb25zKTtcbiAgICB9O1xuICAgIC8qIEluY2x1ZGVkIHRvIHN1cHBvcnQgY2VydGFpbiBuaWNoZSB1c2UtY2FzZXM7IG1vc3QgdXNlcnMgc2hvdWxkIGlnbm9yZSB0aGlzLlxuICAgICAqIFBsZWFzZSBkbyBub3QgdXNlIHRoaXMgdW5sZXNzIHlvdSBrbm93IHdoYXQgeW91J3JlIGRvaW5nICovXG4gICAgQ2hhbm5lbHMucHJvdG90eXBlLnJlbGVhc2UgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICBuYW1lID0gU3RyaW5nKG5hbWUpO1xuICAgICAgICB2YXIgY2hhbm5lbCA9IHRoaXMuYWxsW25hbWVdO1xuICAgICAgICBpZiAoIWNoYW5uZWwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVsZWFzZUVyciA9IGNoYW5uZWwuZ2V0UmVsZWFzZUVycigpO1xuICAgICAgICBpZiAocmVsZWFzZUVycikge1xuICAgICAgICAgICAgdGhyb3cgcmVsZWFzZUVycjtcbiAgICAgICAgfVxuICAgICAgICBkZWxldGUgdGhpcy5hbGxbbmFtZV07XG4gICAgfTtcbiAgICByZXR1cm4gQ2hhbm5lbHM7XG59KGV2ZW50ZW1pdHRlcl8xLmRlZmF1bHQpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IFJlYWx0aW1lO1xuXG5cbi8qKiovIH0pLFxuLyogNTEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciB0c2xpYl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciBVdGlscyA9IHRzbGliXzEuX19pbXBvcnRTdGFyKF9fd2VicGFja19yZXF1aXJlX18oMSkpO1xudmFyIGV2ZW50ZW1pdHRlcl8xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXyg3KSk7XG52YXIgY29ubmVjdGlvbm1hbmFnZXJfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oMzUpKTtcbnZhciBsb2dnZXJfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oMikpO1xudmFyIGNvbm5lY3Rpb25zdGF0ZWNoYW5nZV8xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygzNykpO1xudmFyIHBsYXRmb3JtXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKDMpKTtcbmZ1bmN0aW9uIG5vb3AoKSB7IH1cbnZhciBDb25uZWN0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKENvbm5lY3Rpb24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQ29ubmVjdGlvbihhYmx5LCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLndoZW5TdGF0ZSA9IChmdW5jdGlvbiAoc3RhdGUsIGxpc3RlbmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gZXZlbnRlbWl0dGVyXzEuZGVmYXVsdC5wcm90b3R5cGUud2hlblN0YXRlLmNhbGwoX3RoaXMsIHN0YXRlLCBfdGhpcy5zdGF0ZSwgbGlzdGVuZXIsIG5ldyBjb25uZWN0aW9uc3RhdGVjaGFuZ2VfMS5kZWZhdWx0KHVuZGVmaW5lZCwgc3RhdGUpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIF90aGlzLmFibHkgPSBhYmx5O1xuICAgICAgICBfdGhpcy5jb25uZWN0aW9uTWFuYWdlciA9IG5ldyBjb25uZWN0aW9ubWFuYWdlcl8xLmRlZmF1bHQoYWJseSwgb3B0aW9ucyk7XG4gICAgICAgIF90aGlzLnN0YXRlID0gX3RoaXMuY29ubmVjdGlvbk1hbmFnZXIuc3RhdGUuc3RhdGU7XG4gICAgICAgIF90aGlzLmtleSA9IHVuZGVmaW5lZDtcbiAgICAgICAgX3RoaXMuaWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIF90aGlzLmVycm9yUmVhc29uID0gbnVsbDtcbiAgICAgICAgX3RoaXMuY29ubmVjdGlvbk1hbmFnZXIub24oJ2Nvbm5lY3Rpb25zdGF0ZScsIGZ1bmN0aW9uIChzdGF0ZUNoYW5nZSkge1xuICAgICAgICAgICAgdmFyIHN0YXRlID0gKF90aGlzLnN0YXRlID0gc3RhdGVDaGFuZ2UuY3VycmVudCk7XG4gICAgICAgICAgICBwbGF0Zm9ybV8xLmRlZmF1bHQuQ29uZmlnLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5lbWl0KHN0YXRlLCBzdGF0ZUNoYW5nZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIF90aGlzLmNvbm5lY3Rpb25NYW5hZ2VyLm9uKCd1cGRhdGUnLCBmdW5jdGlvbiAoc3RhdGVDaGFuZ2UpIHtcbiAgICAgICAgICAgIHBsYXRmb3JtXzEuZGVmYXVsdC5Db25maWcubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF90aGlzLmVtaXQoJ3VwZGF0ZScsIHN0YXRlQ2hhbmdlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBDb25uZWN0aW9uLnByb3RvdHlwZS5jb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19NSU5PUiwgJ0Nvbm5lY3Rpb24uY29ubmVjdCgpJywgJycpO1xuICAgICAgICB0aGlzLmNvbm5lY3Rpb25NYW5hZ2VyLnJlcXVlc3RTdGF0ZSh7IHN0YXRlOiAnY29ubmVjdGluZycgfSk7XG4gICAgfTtcbiAgICBDb25uZWN0aW9uLnByb3RvdHlwZS5waW5nID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01JTk9SLCAnQ29ubmVjdGlvbi5waW5nKCknLCAnJyk7XG4gICAgICAgIGlmICghY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmFibHkub3B0aW9ucy5wcm9taXNlcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBVdGlscy5wcm9taXNpZnkodGhpcywgJ3BpbmcnLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FsbGJhY2sgPSBub29wO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY29ubmVjdGlvbk1hbmFnZXIucGluZyhudWxsLCBjYWxsYmFjayk7XG4gICAgfTtcbiAgICBDb25uZWN0aW9uLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlOT1IsICdDb25uZWN0aW9uLmNsb3NlKCknLCAnY29ubmVjdGlvbktleSA9ICcgKyB0aGlzLmtleSk7XG4gICAgICAgIHRoaXMuY29ubmVjdGlvbk1hbmFnZXIucmVxdWVzdFN0YXRlKHsgc3RhdGU6ICdjbG9zaW5nJyB9KTtcbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb25uZWN0aW9uLnByb3RvdHlwZSwgXCJyZWNvdmVyeUtleVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlUmVjb3ZlcnlLZXkoKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIENvbm5lY3Rpb24ucHJvdG90eXBlLmNyZWF0ZVJlY292ZXJ5S2V5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb25uZWN0aW9uTWFuYWdlci5jcmVhdGVSZWNvdmVyeUtleSgpO1xuICAgIH07XG4gICAgcmV0dXJuIENvbm5lY3Rpb247XG59KGV2ZW50ZW1pdHRlcl8xLmRlZmF1bHQpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IENvbm5lY3Rpb247XG5cblxuLyoqKi8gfSksXG4vKiA1MiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5QZW5kaW5nTWVzc2FnZSA9IHZvaWQgMDtcbnZhciB0c2xpYl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciBwcm90b2NvbG1lc3NhZ2VfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oMTApKTtcbnZhciBVdGlscyA9IHRzbGliXzEuX19pbXBvcnRTdGFyKF9fd2VicGFja19yZXF1aXJlX18oMSkpO1xudmFyIGV2ZW50ZW1pdHRlcl8xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXyg3KSk7XG52YXIgbG9nZ2VyXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKTtcbnZhciBtZXNzYWdlcXVldWVfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oMzYpKTtcbnZhciBlcnJvcmluZm9fMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oNCkpO1xudmFyIGFjdGlvbnMgPSBwcm90b2NvbG1lc3NhZ2VfMS5kZWZhdWx0LkFjdGlvbjtcbnZhciBQZW5kaW5nTWVzc2FnZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBQZW5kaW5nTWVzc2FnZShtZXNzYWdlLCBjYWxsYmFjaykge1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgICAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgICAgIHRoaXMubWVyZ2VkID0gZmFsc2U7XG4gICAgICAgIHZhciBhY3Rpb24gPSBtZXNzYWdlLmFjdGlvbjtcbiAgICAgICAgdGhpcy5zZW5kQXR0ZW1wdGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuYWNrUmVxdWlyZWQgPSBhY3Rpb24gPT0gYWN0aW9ucy5NRVNTQUdFIHx8IGFjdGlvbiA9PSBhY3Rpb25zLlBSRVNFTkNFO1xuICAgIH1cbiAgICByZXR1cm4gUGVuZGluZ01lc3NhZ2U7XG59KCkpO1xuZXhwb3J0cy5QZW5kaW5nTWVzc2FnZSA9IFBlbmRpbmdNZXNzYWdlO1xudmFyIFByb3RvY29sID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFByb3RvY29sLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFByb3RvY29sKHRyYW5zcG9ydCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy50cmFuc3BvcnQgPSB0cmFuc3BvcnQ7XG4gICAgICAgIF90aGlzLm1lc3NhZ2VRdWV1ZSA9IG5ldyBtZXNzYWdlcXVldWVfMS5kZWZhdWx0KCk7XG4gICAgICAgIHRyYW5zcG9ydC5vbignYWNrJywgZnVuY3Rpb24gKHNlcmlhbCwgY291bnQpIHtcbiAgICAgICAgICAgIF90aGlzLm9uQWNrKHNlcmlhbCwgY291bnQpO1xuICAgICAgICB9KTtcbiAgICAgICAgdHJhbnNwb3J0Lm9uKCduYWNrJywgZnVuY3Rpb24gKHNlcmlhbCwgY291bnQsIGVycikge1xuICAgICAgICAgICAgX3RoaXMub25OYWNrKHNlcmlhbCwgY291bnQsIGVycik7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFByb3RvY29sLnByb3RvdHlwZS5vbkFjayA9IGZ1bmN0aW9uIChzZXJpYWwsIGNvdW50KSB7XG4gICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01JQ1JPLCAnUHJvdG9jb2wub25BY2soKScsICdzZXJpYWwgPSAnICsgc2VyaWFsICsgJzsgY291bnQgPSAnICsgY291bnQpO1xuICAgICAgICB0aGlzLm1lc3NhZ2VRdWV1ZS5jb21wbGV0ZU1lc3NhZ2VzKHNlcmlhbCwgY291bnQpO1xuICAgIH07XG4gICAgUHJvdG9jb2wucHJvdG90eXBlLm9uTmFjayA9IGZ1bmN0aW9uIChzZXJpYWwsIGNvdW50LCBlcnIpIHtcbiAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfRVJST1IsICdQcm90b2NvbC5vbk5hY2soKScsICdzZXJpYWwgPSAnICsgc2VyaWFsICsgJzsgY291bnQgPSAnICsgY291bnQgKyAnOyBlcnIgPSAnICsgVXRpbHMuaW5zcGVjdEVycm9yKGVycikpO1xuICAgICAgICBpZiAoIWVycikge1xuICAgICAgICAgICAgZXJyID0gbmV3IGVycm9yaW5mb18xLmRlZmF1bHQoJ1VuYWJsZSB0byBzZW5kIG1lc3NhZ2U7IGNoYW5uZWwgbm90IHJlc3BvbmRpbmcnLCA1MDAwMSwgNTAwKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1lc3NhZ2VRdWV1ZS5jb21wbGV0ZU1lc3NhZ2VzKHNlcmlhbCwgY291bnQsIGVycik7XG4gICAgfTtcbiAgICBQcm90b2NvbC5wcm90b3R5cGUub25jZUlkbGUgPSBmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgICAgdmFyIG1lc3NhZ2VRdWV1ZSA9IHRoaXMubWVzc2FnZVF1ZXVlO1xuICAgICAgICBpZiAobWVzc2FnZVF1ZXVlLmNvdW50KCkgPT09IDApIHtcbiAgICAgICAgICAgIGxpc3RlbmVyKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbWVzc2FnZVF1ZXVlLm9uY2UoJ2lkbGUnLCBsaXN0ZW5lcik7XG4gICAgfTtcbiAgICBQcm90b2NvbC5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uIChwZW5kaW5nTWVzc2FnZSkge1xuICAgICAgICBpZiAocGVuZGluZ01lc3NhZ2UuYWNrUmVxdWlyZWQpIHtcbiAgICAgICAgICAgIHRoaXMubWVzc2FnZVF1ZXVlLnB1c2gocGVuZGluZ01lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsb2dnZXJfMS5kZWZhdWx0LnNob3VsZExvZyhsb2dnZXJfMS5kZWZhdWx0LkxPR19NSUNSTykpIHtcbiAgICAgICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01JQ1JPLCAnUHJvdG9jb2wuc2VuZCgpJywgJ3NlbmRpbmcgbXNnOyAnICsgcHJvdG9jb2xtZXNzYWdlXzEuZGVmYXVsdC5zdHJpbmdpZnkocGVuZGluZ01lc3NhZ2UubWVzc2FnZSkpO1xuICAgICAgICB9XG4gICAgICAgIHBlbmRpbmdNZXNzYWdlLnNlbmRBdHRlbXB0ZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLnRyYW5zcG9ydC5zZW5kKHBlbmRpbmdNZXNzYWdlLm1lc3NhZ2UpO1xuICAgIH07XG4gICAgUHJvdG9jb2wucHJvdG90eXBlLmdldFRyYW5zcG9ydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNwb3J0O1xuICAgIH07XG4gICAgUHJvdG9jb2wucHJvdG90eXBlLmdldFBlbmRpbmdNZXNzYWdlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWVzc2FnZVF1ZXVlLmNvcHlBbGwoKTtcbiAgICB9O1xuICAgIFByb3RvY29sLnByb3RvdHlwZS5jbGVhclBlbmRpbmdNZXNzYWdlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWVzc2FnZVF1ZXVlLmNsZWFyKCk7XG4gICAgfTtcbiAgICBQcm90b2NvbC5wcm90b3R5cGUuZmluaXNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdHJhbnNwb3J0ID0gdGhpcy50cmFuc3BvcnQ7XG4gICAgICAgIHRoaXMub25jZUlkbGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdHJhbnNwb3J0LmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gUHJvdG9jb2w7XG59KGV2ZW50ZW1pdHRlcl8xLmRlZmF1bHQpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IFByb3RvY29sO1xuXG5cbi8qKiovIH0pLFxuLyogNTMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciB0c2xpYl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciBwbGF0Zm9ybV8xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygzKSk7XG52YXIgVXRpbHMgPSB0c2xpYl8xLl9faW1wb3J0U3RhcihfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKTtcbnZhciB0cmFuc3BvcnRfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oMjYpKTtcbnZhciBkZWZhdWx0c18xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXyg4KSk7XG52YXIgbG9nZ2VyXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKTtcbnZhciBwcm90b2NvbG1lc3NhZ2VfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oMTApKTtcbnZhciBlcnJvcmluZm9fMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oNCkpO1xudmFyIHNob3J0TmFtZSA9ICd3ZWJfc29ja2V0JztcbmZ1bmN0aW9uIGlzTm9kZVdlYlNvY2tldCh3cykge1xuICAgIHJldHVybiAhIXdzLm9uO1xufVxudmFyIFdlYlNvY2tldFRyYW5zcG9ydCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhXZWJTb2NrZXRUcmFuc3BvcnQsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gV2ViU29ja2V0VHJhbnNwb3J0KGNvbm5lY3Rpb25NYW5hZ2VyLCBhdXRoLCBwYXJhbXMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgY29ubmVjdGlvbk1hbmFnZXIsIGF1dGgsIHBhcmFtcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuc2hvcnROYW1lID0gc2hvcnROYW1lO1xuICAgICAgICAvKiBJZiBpcyBhIGJyb3dzZXIsIGNhbid0IGRldGVjdCBwaW5ncywgc28gcmVxdWVzdCBwcm90b2NvbCBoZWFydGJlYXRzICovXG4gICAgICAgIHBhcmFtcy5oZWFydGJlYXRzID0gcGxhdGZvcm1fMS5kZWZhdWx0LkNvbmZpZy51c2VQcm90b2NvbEhlYXJ0YmVhdHM7XG4gICAgICAgIF90aGlzLndzSG9zdCA9IGRlZmF1bHRzXzEuZGVmYXVsdC5nZXRIb3N0KHBhcmFtcy5vcHRpb25zLCBwYXJhbXMuaG9zdCwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgV2ViU29ja2V0VHJhbnNwb3J0LmlzQXZhaWxhYmxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gISFwbGF0Zm9ybV8xLmRlZmF1bHQuQ29uZmlnLldlYlNvY2tldDtcbiAgICB9O1xuICAgIFdlYlNvY2tldFRyYW5zcG9ydC5wcm90b3R5cGUuY3JlYXRlV2ViU29ja2V0ID0gZnVuY3Rpb24gKHVyaSwgY29ubmVjdFBhcmFtcykge1xuICAgICAgICB0aGlzLnVyaSA9IHVyaSArIFV0aWxzLnRvUXVlcnlTdHJpbmcoY29ubmVjdFBhcmFtcyk7XG4gICAgICAgIHJldHVybiBuZXcgcGxhdGZvcm1fMS5kZWZhdWx0LkNvbmZpZy5XZWJTb2NrZXQodGhpcy51cmkpO1xuICAgIH07XG4gICAgV2ViU29ja2V0VHJhbnNwb3J0LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICdXZWJTb2NrZXRUcmFuc3BvcnQ7IHVyaT0nICsgdGhpcy51cmk7XG4gICAgfTtcbiAgICBXZWJTb2NrZXRUcmFuc3BvcnQucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01JTk9SLCAnV2ViU29ja2V0VHJhbnNwb3J0LmNvbm5lY3QoKScsICdzdGFydGluZycpO1xuICAgICAgICB0cmFuc3BvcnRfMS5kZWZhdWx0LnByb3RvdHlwZS5jb25uZWN0LmNhbGwodGhpcyk7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcywgcGFyYW1zID0gdGhpcy5wYXJhbXMsIG9wdGlvbnMgPSBwYXJhbXMub3B0aW9ucztcbiAgICAgICAgdmFyIHdzU2NoZW1lID0gb3B0aW9ucy50bHMgPyAnd3NzOi8vJyA6ICd3czovLyc7XG4gICAgICAgIHZhciB3c1VyaSA9IHdzU2NoZW1lICsgdGhpcy53c0hvc3QgKyAnOicgKyBkZWZhdWx0c18xLmRlZmF1bHQuZ2V0UG9ydChvcHRpb25zKSArICcvJztcbiAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlOT1IsICdXZWJTb2NrZXRUcmFuc3BvcnQuY29ubmVjdCgpJywgJ3VyaTogJyArIHdzVXJpKTtcbiAgICAgICAgdGhpcy5hdXRoLmdldEF1dGhQYXJhbXMoZnVuY3Rpb24gKGVyciwgYXV0aFBhcmFtcykge1xuICAgICAgICAgICAgaWYgKHNlbGYuaXNEaXNwb3NlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBwYXJhbVN0ciA9ICcnO1xuICAgICAgICAgICAgZm9yICh2YXIgcGFyYW0gaW4gYXV0aFBhcmFtcylcbiAgICAgICAgICAgICAgICBwYXJhbVN0ciArPSAnICcgKyBwYXJhbSArICc6ICcgKyBhdXRoUGFyYW1zW3BhcmFtXSArICc7JztcbiAgICAgICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01JTk9SLCAnV2ViU29ja2V0VHJhbnNwb3J0LmNvbm5lY3QoKScsICdhdXRoUGFyYW1zOicgKyBwYXJhbVN0ciArICcgZXJyOiAnICsgZXJyKTtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICBzZWxmLmRpc2Nvbm5lY3QoZXJyKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgY29ubmVjdFBhcmFtcyA9IHBhcmFtcy5nZXRDb25uZWN0UGFyYW1zKGF1dGhQYXJhbXMpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB2YXIgd3NDb25uZWN0aW9uID0gKHNlbGYud3NDb25uZWN0aW9uID0gc2VsZi5jcmVhdGVXZWJTb2NrZXQod3NVcmksIGNvbm5lY3RQYXJhbXMpKTtcbiAgICAgICAgICAgICAgICB3c0Nvbm5lY3Rpb24uYmluYXJ5VHlwZSA9IHBsYXRmb3JtXzEuZGVmYXVsdC5Db25maWcuYmluYXJ5VHlwZTtcbiAgICAgICAgICAgICAgICB3c0Nvbm5lY3Rpb24ub25vcGVuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLm9uV3NPcGVuKCk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB3c0Nvbm5lY3Rpb24ub25jbG9zZSA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLm9uV3NDbG9zZShldik7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB3c0Nvbm5lY3Rpb24ub25tZXNzYWdlID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYub25Xc0RhdGEoZXYuZGF0YSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB3c0Nvbm5lY3Rpb24ub25lcnJvciA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLm9uV3NFcnJvcihldik7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBpZiAoaXNOb2RlV2ViU29ja2V0KHdzQ29ubmVjdGlvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgLyogbm9kZTsgYnJvd3NlcnMgY3VycmVudGx5IGRvbid0IGhhdmUgYSBnZW5lcmFsIGV2ZW50ZW1pdHRlciBhbmQgY2FuJ3QgZGV0ZWN0XG4gICAgICAgICAgICAgICAgICAgICAqIHBpbmdzLiBBbHNvLCBubyBuZWVkIHRvIHJlcGx5IHdpdGggYSBwb25nIGV4cGxpY2l0bHksIHdzIGxpYiBoYW5kbGVzIHRoYXQgKi9cbiAgICAgICAgICAgICAgICAgICAgd3NDb25uZWN0aW9uLm9uKCdwaW5nJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5vbkFjdGl2aXR5KCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfRVJST1IsICdXZWJTb2NrZXRUcmFuc3BvcnQuY29ubmVjdCgpJywgJ1VuZXhwZWN0ZWQgZXhjZXB0aW9uIGNyZWF0aW5nIHdlYnNvY2tldDogZXJyID0gJyArIChlLnN0YWNrIHx8IGUubWVzc2FnZSkpO1xuICAgICAgICAgICAgICAgIHNlbGYuZGlzY29ubmVjdChlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBXZWJTb2NrZXRUcmFuc3BvcnQucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgICB2YXIgd3NDb25uZWN0aW9uID0gdGhpcy53c0Nvbm5lY3Rpb247XG4gICAgICAgIGlmICghd3NDb25uZWN0aW9uKSB7XG4gICAgICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19FUlJPUiwgJ1dlYlNvY2tldFRyYW5zcG9ydC5zZW5kKCknLCAnTm8gc29ja2V0IGNvbm5lY3Rpb24nKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgd3NDb25uZWN0aW9uLnNlbmQocHJvdG9jb2xtZXNzYWdlXzEuZGVmYXVsdC5zZXJpYWxpemUobWVzc2FnZSwgdGhpcy5wYXJhbXMuZm9ybWF0KSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHZhciBtc2cgPSAnRXhjZXB0aW9uIGZyb20gd3MgY29ubmVjdGlvbiB3aGVuIHRyeWluZyB0byBzZW5kOiAnICsgVXRpbHMuaW5zcGVjdEVycm9yKGUpO1xuICAgICAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfRVJST1IsICdXZWJTb2NrZXRUcmFuc3BvcnQuc2VuZCgpJywgbXNnKTtcbiAgICAgICAgICAgIC8qIERvbid0IHRyeSB0byByZXF1ZXN0IGEgZGlzY29ubmVjdCwgdGhhdCdsbCBqdXN0IGludm9sdmUgc2VuZGluZyBkYXRhXG4gICAgICAgICAgICAgKiBkb3duIHRoZSB3ZWJzb2NrZXQgYWdhaW4uIEp1c3QgZmluaXNoIHRoZSB0cmFuc3BvcnQuICovXG4gICAgICAgICAgICB0aGlzLmZpbmlzaCgnZGlzY29ubmVjdGVkJywgbmV3IGVycm9yaW5mb18xLmRlZmF1bHQobXNnLCA1MDAwMCwgNTAwKSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFdlYlNvY2tldFRyYW5zcG9ydC5wcm90b3R5cGUub25Xc0RhdGEgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19NSUNSTywgJ1dlYlNvY2tldFRyYW5zcG9ydC5vbldzRGF0YSgpJywgJ2RhdGEgcmVjZWl2ZWQ7IGxlbmd0aCA9ICcgKyBkYXRhLmxlbmd0aCArICc7IHR5cGUgPSAnICsgdHlwZW9mIGRhdGEpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5vblByb3RvY29sTWVzc2FnZShwcm90b2NvbG1lc3NhZ2VfMS5kZWZhdWx0LmRlc2VyaWFsaXplKGRhdGEsIHRoaXMuZm9ybWF0KSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX0VSUk9SLCAnV2ViU29ja2V0VHJhbnNwb3J0Lm9uV3NEYXRhKCknLCAnVW5leHBlY3RlZCBleGNlcHRpb24gaGFuZGluZyBjaGFubmVsIG1lc3NhZ2U6ICcgKyBlLnN0YWNrKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgV2ViU29ja2V0VHJhbnNwb3J0LnByb3RvdHlwZS5vbldzT3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlOT1IsICdXZWJTb2NrZXRUcmFuc3BvcnQub25Xc09wZW4oKScsICdvcGVuZWQgV2ViU29ja2V0Jyk7XG4gICAgICAgIHRoaXMuZW1pdCgncHJlY29ubmVjdCcpO1xuICAgIH07XG4gICAgV2ViU29ja2V0VHJhbnNwb3J0LnByb3RvdHlwZS5vbldzQ2xvc2UgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgdmFyIHdhc0NsZWFuLCBjb2RlO1xuICAgICAgICBpZiAodHlwZW9mIGV2ID09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAvKiBXM0Mgc3BlYy1jb21wYXRpYmxlICovXG4gICAgICAgICAgICBjb2RlID0gZXYuY29kZTtcbiAgICAgICAgICAgIC8vIGV2Lndhc0NsZWFuIGlzIHVuZGVmaW5lZCBpbiByZWFjdG5hdGl2ZVxuICAgICAgICAgICAgd2FzQ2xlYW4gPSBldi53YXNDbGVhbiB8fCBjb2RlID09PSAxMDAwO1xuICAgICAgICB9IC8qaWYodHlwZW9mKGV2KSA9PSAnbnVtYmVyJykqL1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8qIHdzIGluIG5vZGUgKi9cbiAgICAgICAgICAgIGNvZGUgPSBldjtcbiAgICAgICAgICAgIHdhc0NsZWFuID0gY29kZSA9PSAxMDAwO1xuICAgICAgICB9XG4gICAgICAgIGRlbGV0ZSB0aGlzLndzQ29ubmVjdGlvbjtcbiAgICAgICAgaWYgKHdhc0NsZWFuKSB7XG4gICAgICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19NSU5PUiwgJ1dlYlNvY2tldFRyYW5zcG9ydC5vbldzQ2xvc2UoKScsICdDbGVhbmx5IGNsb3NlZCBXZWJTb2NrZXQnKTtcbiAgICAgICAgICAgIHZhciBlcnIgPSBuZXcgZXJyb3JpbmZvXzEuZGVmYXVsdCgnV2Vic29ja2V0IGNsb3NlZCcsIDgwMDAzLCA0MDApO1xuICAgICAgICAgICAgdGhpcy5maW5pc2goJ2Rpc2Nvbm5lY3RlZCcsIGVycik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgbXNnID0gJ1VuY2xlYW4gZGlzY29ubmVjdGlvbiBvZiBXZWJTb2NrZXQgOyBjb2RlID0gJyArIGNvZGUsIGVyciA9IG5ldyBlcnJvcmluZm9fMS5kZWZhdWx0KG1zZywgODAwMDMsIDQwMCk7XG4gICAgICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19NSU5PUiwgJ1dlYlNvY2tldFRyYW5zcG9ydC5vbldzQ2xvc2UoKScsIG1zZyk7XG4gICAgICAgICAgICB0aGlzLmZpbmlzaCgnZGlzY29ubmVjdGVkJywgZXJyKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVtaXQoJ2Rpc3Bvc2VkJyk7XG4gICAgfTtcbiAgICBXZWJTb2NrZXRUcmFuc3BvcnQucHJvdG90eXBlLm9uV3NFcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlOT1IsICdXZWJTb2NrZXRUcmFuc3BvcnQub25FcnJvcigpJywgJ0Vycm9yIGZyb20gV2ViU29ja2V0OiAnICsgZXJyLm1lc3NhZ2UpO1xuICAgICAgICAvKiBXYWl0IGEgdGljayBiZWZvcmUgYWJvcnRpbmc6IGlmIHRoZSB3ZWJzb2NrZXQgd2FzIGNvbm5lY3RlZCwgdGhpcyBldmVudFxuICAgICAgICAgKiB3aWxsIGJlIGltbWVkaWF0ZWx5IGZvbGxvd2VkIGJ5IGFuIG9uY2xvc2UgZXZlbnQgd2l0aCBhIGNsb3NlIGNvZGUuIEFsbG93XG4gICAgICAgICAqIHRoYXQgdG8gY2xvc2UgaXQgKHNvIHdlIHNlZSB0aGUgY2xvc2UgY29kZSkgcmF0aGVyIHRoYW4gYW50aWNpcGF0aW5nIGl0ICovXG4gICAgICAgIHBsYXRmb3JtXzEuZGVmYXVsdC5Db25maWcubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuZGlzY29ubmVjdChFcnJvcihlcnIubWVzc2FnZSkpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFdlYlNvY2tldFRyYW5zcG9ydC5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlOT1IsICdXZWJTb2NrZXRUcmFuc3BvcnQuZGlzcG9zZSgpJywgJycpO1xuICAgICAgICB0aGlzLmlzRGlzcG9zZWQgPSB0cnVlO1xuICAgICAgICB2YXIgd3NDb25uZWN0aW9uID0gdGhpcy53c0Nvbm5lY3Rpb247XG4gICAgICAgIGlmICh3c0Nvbm5lY3Rpb24pIHtcbiAgICAgICAgICAgIC8qIElnbm9yZSBhbnkgbWVzc2FnZXMgdGhhdCBjb21lIHRocm91Z2ggYWZ0ZXIgZGlzcG9zZSgpIGlzIGNhbGxlZCBidXQgYmVmb3JlXG4gICAgICAgICAgICAgKiB3ZWJzb2NrZXQgaXMgYWN0dWFsbHkgY2xvc2VkLiAobW9zdGx5IHdvdWxkIGJlIGhhcm1sZXNzLCBidXQgaWYgaXQncyBhXG4gICAgICAgICAgICAgKiBDT05ORUNURUQsIGl0J2xsIHJlLXRpY2sgaXNDb25uZWN0ZWQgYW5kIGNhdXNlIGFsbCBzb3J0cyBvZiBoYXZvYykgKi9cbiAgICAgICAgICAgIHdzQ29ubmVjdGlvbi5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoKSB7IH07XG4gICAgICAgICAgICBkZWxldGUgdGhpcy53c0Nvbm5lY3Rpb247XG4gICAgICAgICAgICAvKiBkZWZlciB1bnRpbCB0aGUgbmV4dCBldmVudCBsb29wIGN5Y2xlIGJlZm9yZSBjbG9zaW5nIHRoZSBzb2NrZXQsXG4gICAgICAgICAgICAgKiBnaXZpbmcgc29tZSBpbXBsZW1lbnRhdGlvbnMgdGhlIG9wcG9ydHVuaXR5IHRvIHNlbmQgYW55IG91dHN0YW5kaW5nIGNsb3NlIG1lc3NhZ2UgKi9cbiAgICAgICAgICAgIHBsYXRmb3JtXzEuZGVmYXVsdC5Db25maWcubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01JQ1JPLCAnV2ViU29ja2V0VHJhbnNwb3J0LmRpc3Bvc2UoKScsICdjbG9zaW5nIHdlYnNvY2tldCcpO1xuICAgICAgICAgICAgICAgIGlmICghd3NDb25uZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignV2ViU29ja2V0VHJhbnNwb3J0LmRpc3Bvc2UoKTogd3NDb25uZWN0aW9uIGlzIG5vdCBkZWZpbmVkJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHdzQ29ubmVjdGlvbi5jbG9zZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBXZWJTb2NrZXRUcmFuc3BvcnQ7XG59KHRyYW5zcG9ydF8xLmRlZmF1bHQpKTtcbmZ1bmN0aW9uIGluaXRpYWxpc2VUcmFuc3BvcnQoY29ubmVjdGlvbk1hbmFnZXIpIHtcbiAgICBpZiAoV2ViU29ja2V0VHJhbnNwb3J0LmlzQXZhaWxhYmxlKCkpXG4gICAgICAgIGNvbm5lY3Rpb25NYW5hZ2VyLnN1cHBvcnRlZFRyYW5zcG9ydHNbc2hvcnROYW1lXSA9IFdlYlNvY2tldFRyYW5zcG9ydDtcbiAgICByZXR1cm4gV2ViU29ja2V0VHJhbnNwb3J0O1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gaW5pdGlhbGlzZVRyYW5zcG9ydDtcblxuXG4vKioqLyB9KSxcbi8qIDU0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgdHNsaWJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG52YXIgVXRpbHMgPSB0c2xpYl8xLl9faW1wb3J0U3RhcihfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKTtcbnZhciBwcmVzZW5jZV8xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygzNCkpO1xudmFyIGV2ZW50ZW1pdHRlcl8xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXyg3KSk7XG52YXIgbG9nZ2VyXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKTtcbnZhciBwcmVzZW5jZW1lc3NhZ2VfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oMTUpKTtcbnZhciBlcnJvcmluZm9fMSA9IHRzbGliXzEuX19pbXBvcnRTdGFyKF9fd2VicGFja19yZXF1aXJlX18oNCkpO1xudmFyIHJlYWx0aW1lY2hhbm5lbF8xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygzOCkpO1xudmFyIG11bHRpY2FzdGVyXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKDIzKSk7XG52YXIgY2hhbm5lbHN0YXRlY2hhbmdlXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKDM5KSk7XG52YXIgbm9vcCA9IGZ1bmN0aW9uICgpIHsgfTtcbmZ1bmN0aW9uIGdldENsaWVudElkKHJlYWx0aW1lUHJlc2VuY2UpIHtcbiAgICByZXR1cm4gcmVhbHRpbWVQcmVzZW5jZS5jaGFubmVsLnJlYWx0aW1lLmF1dGguY2xpZW50SWQ7XG59XG5mdW5jdGlvbiBpc0Fub255bW91c09yV2lsZGNhcmQocmVhbHRpbWVQcmVzZW5jZSkge1xuICAgIHZhciByZWFsdGltZSA9IHJlYWx0aW1lUHJlc2VuY2UuY2hhbm5lbC5yZWFsdGltZTtcbiAgICAvKiBJZiBub3QgY3VycmVudGx5IGNvbm5lY3RlZCwgd2UgY2FuJ3QgYXNzdW1lIHRoYXQgd2UncmUgYW4gYW5vbnltb3VzXG4gICAgICogY2xpZW50LCBhcyByZWFsdGltZSBtYXkgaW5mb3JtIHVzIG9mIG91ciBjbGllbnRJZCBpbiB0aGUgQ09OTkVDVEVEXG4gICAgICogbWVzc2FnZS4gU28gYXNzdW1lIHdlJ3JlIG5vdCBhbm9ueW1vdXMgYW5kIGxlYXZlIGl0IHRvIHJlYWx0aW1lIHRvXG4gICAgICogcmV0dXJuIGFuIGVycm9yIGlmIHdlIGFyZSAqL1xuICAgIHZhciBjbGllbnRJZCA9IHJlYWx0aW1lLmF1dGguY2xpZW50SWQ7XG4gICAgcmV0dXJuICghY2xpZW50SWQgfHwgY2xpZW50SWQgPT09ICcqJykgJiYgcmVhbHRpbWUuY29ubmVjdGlvbi5zdGF0ZSA9PT0gJ2Nvbm5lY3RlZCc7XG59XG4vKiBDYWxsYmFjayBpcyBjYWxsZWQgb25seSBpbiB0aGUgZXZlbnQgb2YgYW4gZXJyb3IgKi9cbmZ1bmN0aW9uIHdhaXRBdHRhY2hlZChjaGFubmVsLCBjYWxsYmFjaywgYWN0aW9uKSB7XG4gICAgc3dpdGNoIChjaGFubmVsLnN0YXRlKSB7XG4gICAgICAgIGNhc2UgJ2F0dGFjaGVkJzpcbiAgICAgICAgY2FzZSAnc3VzcGVuZGVkJzpcbiAgICAgICAgICAgIGFjdGlvbigpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2luaXRpYWxpemVkJzpcbiAgICAgICAgY2FzZSAnZGV0YWNoZWQnOlxuICAgICAgICBjYXNlICdkZXRhY2hpbmcnOlxuICAgICAgICBjYXNlICdhdHRhY2hpbmcnOlxuICAgICAgICAgICAgY2hhbm5lbC5hdHRhY2goZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgIGlmIChlcnIpXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24oKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBjYWxsYmFjayhlcnJvcmluZm9fMS5kZWZhdWx0LmZyb21WYWx1ZXMoY2hhbm5lbC5pbnZhbGlkU3RhdGVFcnJvcigpKSk7XG4gICAgfVxufVxuZnVuY3Rpb24gbmV3ZXJUaGFuKGl0ZW0sIGV4aXN0aW5nKSB7XG4gICAgLyogUlRQMmIxOiBpZiBlaXRoZXIgaXMgc3ludGhlc2lzZWQsIGNvbXBhcmUgYnkgdGltZXN0YW1wICovXG4gICAgaWYgKGl0ZW0uaXNTeW50aGVzaXplZCgpIHx8IGV4aXN0aW5nLmlzU3ludGhlc2l6ZWQoKSkge1xuICAgICAgICAvLyBSVFAyYjFhOiBpZiBlcXVhbCwgcHJlZmVyIHRoZSBuZXdseS1hcnJpdmVkIG9uZVxuICAgICAgICByZXR1cm4gaXRlbS50aW1lc3RhbXAgPj0gZXhpc3RpbmcudGltZXN0YW1wO1xuICAgIH1cbiAgICAvKiBSVFAyYjIgKi9cbiAgICB2YXIgaXRlbU9yZGVyaW5ncyA9IGl0ZW0ucGFyc2VJZCgpLCBleGlzdGluZ09yZGVyaW5ncyA9IGV4aXN0aW5nLnBhcnNlSWQoKTtcbiAgICBpZiAoaXRlbU9yZGVyaW5ncy5tc2dTZXJpYWwgPT09IGV4aXN0aW5nT3JkZXJpbmdzLm1zZ1NlcmlhbCkge1xuICAgICAgICByZXR1cm4gaXRlbU9yZGVyaW5ncy5pbmRleCA+IGV4aXN0aW5nT3JkZXJpbmdzLmluZGV4O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGl0ZW1PcmRlcmluZ3MubXNnU2VyaWFsID4gZXhpc3RpbmdPcmRlcmluZ3MubXNnU2VyaWFsO1xuICAgIH1cbn1cbnZhciBSZWFsdGltZVByZXNlbmNlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFJlYWx0aW1lUHJlc2VuY2UsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUmVhbHRpbWVQcmVzZW5jZShjaGFubmVsKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGNoYW5uZWwpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmNoYW5uZWwgPSBjaGFubmVsO1xuICAgICAgICBfdGhpcy5zeW5jQ29tcGxldGUgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMubWVtYmVycyA9IG5ldyBQcmVzZW5jZU1hcChfdGhpcywgZnVuY3Rpb24gKGl0ZW0pIHsgcmV0dXJuIGl0ZW0uY2xpZW50SWQgKyAnOicgKyBpdGVtLmNvbm5lY3Rpb25JZDsgfSk7XG4gICAgICAgIC8vIFJUUDE3aDogU3RvcmUgb3duIG1lbWJlcnMgYnkgY2xpZW50SWQgb25seS5cbiAgICAgICAgX3RoaXMuX215TWVtYmVycyA9IG5ldyBQcmVzZW5jZU1hcChfdGhpcywgZnVuY3Rpb24gKGl0ZW0pIHsgcmV0dXJuIGl0ZW0uY2xpZW50SWQ7IH0pO1xuICAgICAgICBfdGhpcy5zdWJzY3JpcHRpb25zID0gbmV3IGV2ZW50ZW1pdHRlcl8xLmRlZmF1bHQoKTtcbiAgICAgICAgX3RoaXMucGVuZGluZ1ByZXNlbmNlID0gW107XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgUmVhbHRpbWVQcmVzZW5jZS5wcm90b3R5cGUuZW50ZXIgPSBmdW5jdGlvbiAoZGF0YSwgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKGlzQW5vbnltb3VzT3JXaWxkY2FyZCh0aGlzKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yaW5mb18xLmRlZmF1bHQoJ2NsaWVudElkIG11c3QgYmUgc3BlY2lmaWVkIHRvIGVudGVyIGEgcHJlc2VuY2UgY2hhbm5lbCcsIDQwMDEyLCA0MDApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9lbnRlck9yVXBkYXRlQ2xpZW50KHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBkYXRhLCAnZW50ZXInLCBjYWxsYmFjayk7XG4gICAgfTtcbiAgICBSZWFsdGltZVByZXNlbmNlLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSwgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKGlzQW5vbnltb3VzT3JXaWxkY2FyZCh0aGlzKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yaW5mb18xLmRlZmF1bHQoJ2NsaWVudElkIG11c3QgYmUgc3BlY2lmaWVkIHRvIHVwZGF0ZSBwcmVzZW5jZSBkYXRhJywgNDAwMTIsIDQwMCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2VudGVyT3JVcGRhdGVDbGllbnQodW5kZWZpbmVkLCB1bmRlZmluZWQsIGRhdGEsICd1cGRhdGUnLCBjYWxsYmFjayk7XG4gICAgfTtcbiAgICBSZWFsdGltZVByZXNlbmNlLnByb3RvdHlwZS5lbnRlckNsaWVudCA9IGZ1bmN0aW9uIChjbGllbnRJZCwgZGF0YSwgY2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VudGVyT3JVcGRhdGVDbGllbnQodW5kZWZpbmVkLCBjbGllbnRJZCwgZGF0YSwgJ2VudGVyJywgY2FsbGJhY2spO1xuICAgIH07XG4gICAgUmVhbHRpbWVQcmVzZW5jZS5wcm90b3R5cGUudXBkYXRlQ2xpZW50ID0gZnVuY3Rpb24gKGNsaWVudElkLCBkYXRhLCBjYWxsYmFjaykge1xuICAgICAgICByZXR1cm4gdGhpcy5fZW50ZXJPclVwZGF0ZUNsaWVudCh1bmRlZmluZWQsIGNsaWVudElkLCBkYXRhLCAndXBkYXRlJywgY2FsbGJhY2spO1xuICAgIH07XG4gICAgUmVhbHRpbWVQcmVzZW5jZS5wcm90b3R5cGUuX2VudGVyT3JVcGRhdGVDbGllbnQgPSBmdW5jdGlvbiAoaWQsIGNsaWVudElkLCBkYXRhLCBhY3Rpb24sIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICghY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrID0gZGF0YTtcbiAgICAgICAgICAgICAgICBkYXRhID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNoYW5uZWwucmVhbHRpbWUub3B0aW9ucy5wcm9taXNlcykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gVXRpbHMucHJvbWlzaWZ5KHRoaXMsICdfZW50ZXJPclVwZGF0ZUNsaWVudCcsIFtpZCwgY2xpZW50SWQsIGRhdGEsIGFjdGlvbl0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYWxsYmFjayA9IG5vb3A7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNoYW5uZWwgPSB0aGlzLmNoYW5uZWw7XG4gICAgICAgIGlmICghY2hhbm5lbC5jb25uZWN0aW9uTWFuYWdlci5hY3RpdmVTdGF0ZSgpKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhjaGFubmVsLmNvbm5lY3Rpb25NYW5hZ2VyLmdldEVycm9yKCkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01JQ1JPLCAnUmVhbHRpbWVQcmVzZW5jZS4nICsgYWN0aW9uICsgJ0NsaWVudCgpJywgJ2NoYW5uZWwgPSAnICsgY2hhbm5lbC5uYW1lICsgJywgaWQgPSAnICsgaWQgKyAnLCBjbGllbnQgPSAnICsgKGNsaWVudElkIHx8ICcoaW1wbGljaXQpICcgKyBnZXRDbGllbnRJZCh0aGlzKSkpO1xuICAgICAgICB2YXIgcHJlc2VuY2UgPSBwcmVzZW5jZW1lc3NhZ2VfMS5kZWZhdWx0LmZyb21EYXRhKGRhdGEpO1xuICAgICAgICBwcmVzZW5jZS5hY3Rpb24gPSBhY3Rpb247XG4gICAgICAgIGlmIChpZCkge1xuICAgICAgICAgICAgcHJlc2VuY2UuaWQgPSBpZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2xpZW50SWQpIHtcbiAgICAgICAgICAgIHByZXNlbmNlLmNsaWVudElkID0gY2xpZW50SWQ7XG4gICAgICAgIH1cbiAgICAgICAgcHJlc2VuY2VtZXNzYWdlXzEuZGVmYXVsdC5lbmNvZGUocHJlc2VuY2UsIGNoYW5uZWwuY2hhbm5lbE9wdGlvbnMsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnIpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN3aXRjaCAoY2hhbm5lbC5zdGF0ZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2F0dGFjaGVkJzpcbiAgICAgICAgICAgICAgICAgICAgY2hhbm5lbC5zZW5kUHJlc2VuY2UocHJlc2VuY2UsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnaW5pdGlhbGl6ZWQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2RldGFjaGVkJzpcbiAgICAgICAgICAgICAgICAgICAgY2hhbm5lbC5hdHRhY2goKTtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZmFsbHRocm91Z2hcbiAgICAgICAgICAgICAgICBjYXNlICdhdHRhY2hpbmcnOlxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5wZW5kaW5nUHJlc2VuY2UucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcmVzZW5jZTogcHJlc2VuY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogY2FsbGJhY2ssXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBlcnIgPSBuZXcgZXJyb3JpbmZvXzEuUGFydGlhbEVycm9ySW5mbygnVW5hYmxlIHRvICcgKyBhY3Rpb24gKyAnIHByZXNlbmNlIGNoYW5uZWwgd2hpbGUgaW4gJyArIGNoYW5uZWwuc3RhdGUgKyAnIHN0YXRlJywgOTAwMDEpO1xuICAgICAgICAgICAgICAgICAgICBlcnIuY29kZSA9IDkwMDAxO1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFJlYWx0aW1lUHJlc2VuY2UucHJvdG90eXBlLmxlYXZlID0gZnVuY3Rpb24gKGRhdGEsIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmIChpc0Fub255bW91c09yV2lsZGNhcmQodGhpcykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcmluZm9fMS5kZWZhdWx0KCdjbGllbnRJZCBtdXN0IGhhdmUgYmVlbiBzcGVjaWZpZWQgdG8gZW50ZXIgb3IgbGVhdmUgYSBwcmVzZW5jZSBjaGFubmVsJywgNDAwMTIsIDQwMCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMubGVhdmVDbGllbnQodW5kZWZpbmVkLCBkYXRhLCBjYWxsYmFjayk7XG4gICAgfTtcbiAgICBSZWFsdGltZVByZXNlbmNlLnByb3RvdHlwZS5sZWF2ZUNsaWVudCA9IGZ1bmN0aW9uIChjbGllbnRJZCwgZGF0YSwgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBkYXRhID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sgPSBkYXRhO1xuICAgICAgICAgICAgICAgIGRhdGEgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY2hhbm5lbC5yZWFsdGltZS5vcHRpb25zLnByb21pc2VzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBVdGlscy5wcm9taXNpZnkodGhpcywgJ2xlYXZlQ2xpZW50JywgW2NsaWVudElkLCBkYXRhXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhbGxiYWNrID0gbm9vcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgY2hhbm5lbCA9IHRoaXMuY2hhbm5lbDtcbiAgICAgICAgaWYgKCFjaGFubmVsLmNvbm5lY3Rpb25NYW5hZ2VyLmFjdGl2ZVN0YXRlKCkpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrID09PSBudWxsIHx8IGNhbGxiYWNrID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjYWxsYmFjayhjaGFubmVsLmNvbm5lY3Rpb25NYW5hZ2VyLmdldEVycm9yKCkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01JQ1JPLCAnUmVhbHRpbWVQcmVzZW5jZS5sZWF2ZUNsaWVudCgpJywgJ2xlYXZpbmc7IGNoYW5uZWwgPSAnICsgdGhpcy5jaGFubmVsLm5hbWUgKyAnLCBjbGllbnQgPSAnICsgY2xpZW50SWQpO1xuICAgICAgICB2YXIgcHJlc2VuY2UgPSBwcmVzZW5jZW1lc3NhZ2VfMS5kZWZhdWx0LmZyb21WYWx1ZXMoe1xuICAgICAgICAgICAgYWN0aW9uOiAnbGVhdmUnLFxuICAgICAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChjbGllbnRJZCkge1xuICAgICAgICAgICAgcHJlc2VuY2UuY2xpZW50SWQgPSBjbGllbnRJZDtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKGNoYW5uZWwuc3RhdGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ2F0dGFjaGVkJzpcbiAgICAgICAgICAgICAgICBjaGFubmVsLnNlbmRQcmVzZW5jZShwcmVzZW5jZSwgY2FsbGJhY2spO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnYXR0YWNoaW5nJzpcbiAgICAgICAgICAgICAgICB0aGlzLnBlbmRpbmdQcmVzZW5jZS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgcHJlc2VuY2U6IHByZXNlbmNlLFxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogY2FsbGJhY2ssXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdpbml0aWFsaXplZCc6XG4gICAgICAgICAgICBjYXNlICdmYWlsZWQnOiB7XG4gICAgICAgICAgICAgICAgLyogd2UncmUgbm90IGF0dGFjaGVkOyB0aGVyZWZvcmUgd2UgbGV0IGFueSBlbnRlcmVkIHN0YXR1c1xuICAgICAgICAgICAgICAgICAqIHRpbWVvdXQgYnkgaXRzZWxmIGluc3RlYWQgb2YgYXR0YWNoaW5nIGp1c3QgaW4gb3JkZXIgdG8gbGVhdmUgKi9cbiAgICAgICAgICAgICAgICB2YXIgZXJyID0gbmV3IGVycm9yaW5mb18xLlBhcnRpYWxFcnJvckluZm8oJ1VuYWJsZSB0byBsZWF2ZSBwcmVzZW5jZSBjaGFubmVsIChpbmNvbXBhdGlibGUgc3RhdGUpJywgOTAwMDEpO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrID09PSBudWxsIHx8IGNhbGxiYWNrID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjYWxsYmFjayhlcnIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBjYWxsYmFjayA9PT0gbnVsbCB8fCBjYWxsYmFjayA9PT0gdm9pZCAwID8gdm9pZCAwIDogY2FsbGJhY2soY2hhbm5lbC5pbnZhbGlkU3RhdGVFcnJvcigpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gUmV0dXJuIHR5cGUgaXMgYW55IHRvIGF2b2lkIGNvbmZsaWN0IHdpdGggYmFzZSBQcmVzZW5jZSBjbGFzc1xuICAgIFJlYWx0aW1lUHJlc2VuY2UucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChwYXJhbXMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID09IDEgJiYgdHlwZW9mIGFyZ3NbMF0gPT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICAgIGFyZ3MudW5zaGlmdChudWxsKTtcbiAgICAgICAgcGFyYW1zID0gYXJnc1swXTtcbiAgICAgICAgY2FsbGJhY2sgPSBhcmdzWzFdO1xuICAgICAgICB2YXIgd2FpdEZvclN5bmMgPSAhcGFyYW1zIHx8ICgnd2FpdEZvclN5bmMnIGluIHBhcmFtcyA/IHBhcmFtcy53YWl0Rm9yU3luYyA6IHRydWUpO1xuICAgICAgICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jaGFubmVsLnJlYWx0aW1lLm9wdGlvbnMucHJvbWlzZXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gVXRpbHMucHJvbWlzaWZ5KHRoaXMsICdnZXQnLCBhcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhbGxiYWNrID0gbm9vcDtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiByZXR1cm5NZW1iZXJzKG1lbWJlcnMpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHBhcmFtcyA/IG1lbWJlcnMubGlzdChwYXJhbXMpIDogbWVtYmVycy52YWx1ZXMoKSk7XG4gICAgICAgIH1cbiAgICAgICAgLyogU3BlY2lhbC1jYXNlIHRoZSBzdXNwZW5kZWQgc3RhdGU6IGNhbiBzdGlsbCBnZXQgKHN0YWxlKSBwcmVzZW5jZSBzZXQgaWYgd2FpdEZvclN5bmMgaXMgZmFsc2UgKi9cbiAgICAgICAgaWYgKHRoaXMuY2hhbm5lbC5zdGF0ZSA9PT0gJ3N1c3BlbmRlZCcpIHtcbiAgICAgICAgICAgIGlmICh3YWl0Rm9yU3luYykge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVycm9yaW5mb18xLmRlZmF1bHQuZnJvbVZhbHVlcyh7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1c0NvZGU6IDQwMCxcbiAgICAgICAgICAgICAgICAgICAgY29kZTogOTEwMDUsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdQcmVzZW5jZSBzdGF0ZSBpcyBvdXQgb2Ygc3luYyBkdWUgdG8gY2hhbm5lbCBiZWluZyBpbiB0aGUgU1VTUEVOREVEIHN0YXRlJyxcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm5NZW1iZXJzKHRoaXMubWVtYmVycyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgd2FpdEF0dGFjaGVkKHRoaXMuY2hhbm5lbCwgY2FsbGJhY2ssIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBtZW1iZXJzID0gX3RoaXMubWVtYmVycztcbiAgICAgICAgICAgIGlmICh3YWl0Rm9yU3luYykge1xuICAgICAgICAgICAgICAgIG1lbWJlcnMud2FpdFN5bmMoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm5NZW1iZXJzKG1lbWJlcnMpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuTWVtYmVycyhtZW1iZXJzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBSZWFsdGltZVByZXNlbmNlLnByb3RvdHlwZS5oaXN0b3J5ID0gZnVuY3Rpb24gKHBhcmFtcywgY2FsbGJhY2spIHtcbiAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlDUk8sICdSZWFsdGltZVByZXNlbmNlLmhpc3RvcnkoKScsICdjaGFubmVsID0gJyArIHRoaXMubmFtZSk7XG4gICAgICAgIC8qIHBhcmFtcyBhbmQgY2FsbGJhY2sgYXJlIG9wdGlvbmFsOyBzZWUgaWYgcGFyYW1zIGNvbnRhaW5zIHRoZSBjYWxsYmFjayAqL1xuICAgICAgICBpZiAoY2FsbGJhY2sgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBwYXJhbXMgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrID0gcGFyYW1zO1xuICAgICAgICAgICAgICAgIHBhcmFtcyA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jaGFubmVsLnJlYWx0aW1lLm9wdGlvbnMucHJvbWlzZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFV0aWxzLnByb21pc2lmeSh0aGlzLCAnaGlzdG9yeScsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhbGxiYWNrID0gbm9vcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocGFyYW1zICYmIHBhcmFtcy51bnRpbEF0dGFjaCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuY2hhbm5lbC5zdGF0ZSA9PT0gJ2F0dGFjaGVkJykge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBwYXJhbXMudW50aWxBdHRhY2g7XG4gICAgICAgICAgICAgICAgcGFyYW1zLmZyb21fc2VyaWFsID0gdGhpcy5jaGFubmVsLnByb3BlcnRpZXMuYXR0YWNoU2VyaWFsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sobmV3IGVycm9yaW5mb18xLmRlZmF1bHQoJ29wdGlvbiB1bnRpbEF0dGFjaCByZXF1aXJlcyB0aGUgY2hhbm5lbCB0byBiZSBhdHRhY2hlZCwgd2FzOiAnICsgdGhpcy5jaGFubmVsLnN0YXRlLCA0MDAwMCwgNDAwKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcHJlc2VuY2VfMS5kZWZhdWx0LnByb3RvdHlwZS5faGlzdG9yeS5jYWxsKHRoaXMsIHBhcmFtcywgY2FsbGJhY2spO1xuICAgIH07XG4gICAgUmVhbHRpbWVQcmVzZW5jZS5wcm90b3R5cGUuc2V0UHJlc2VuY2UgPSBmdW5jdGlvbiAocHJlc2VuY2VTZXQsIGlzU3luYywgc3luY0NoYW5uZWxTZXJpYWwpIHtcbiAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlDUk8sICdSZWFsdGltZVByZXNlbmNlLnNldFByZXNlbmNlKCknLCAncmVjZWl2ZWQgcHJlc2VuY2UgZm9yICcgKyBwcmVzZW5jZVNldC5sZW5ndGggKyAnIHBhcnRpY2lwYW50czsgc3luY0NoYW5uZWxTZXJpYWwgPSAnICsgc3luY0NoYW5uZWxTZXJpYWwpO1xuICAgICAgICB2YXIgc3luY0N1cnNvciwgbWF0Y2g7XG4gICAgICAgIHZhciBtZW1iZXJzID0gdGhpcy5tZW1iZXJzLCBteU1lbWJlcnMgPSB0aGlzLl9teU1lbWJlcnMsIGJyb2FkY2FzdE1lc3NhZ2VzID0gW10sIGNvbm5JZCA9IHRoaXMuY2hhbm5lbC5jb25uZWN0aW9uTWFuYWdlci5jb25uZWN0aW9uSWQ7XG4gICAgICAgIGlmIChpc1N5bmMpIHtcbiAgICAgICAgICAgIHRoaXMubWVtYmVycy5zdGFydFN5bmMoKTtcbiAgICAgICAgICAgIGlmIChzeW5jQ2hhbm5lbFNlcmlhbCAmJiAobWF0Y2ggPSBzeW5jQ2hhbm5lbFNlcmlhbC5tYXRjaCgvXltcXHctXSs6KC4qKSQvKSkpIHtcbiAgICAgICAgICAgICAgICBzeW5jQ3Vyc29yID0gbWF0Y2hbMV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcmVzZW5jZVNldC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHByZXNlbmNlID0gcHJlc2VuY2VtZXNzYWdlXzEuZGVmYXVsdC5mcm9tVmFsdWVzKHByZXNlbmNlU2V0W2ldKTtcbiAgICAgICAgICAgIHN3aXRjaCAocHJlc2VuY2UuYWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnbGVhdmUnOlxuICAgICAgICAgICAgICAgICAgICBpZiAobWVtYmVycy5yZW1vdmUocHJlc2VuY2UpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicm9hZGNhc3RNZXNzYWdlcy5wdXNoKHByZXNlbmNlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAocHJlc2VuY2UuY29ubmVjdGlvbklkID09PSBjb25uSWQgJiYgIXByZXNlbmNlLmlzU3ludGhlc2l6ZWQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbXlNZW1iZXJzLnJlbW92ZShwcmVzZW5jZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnZW50ZXInOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3ByZXNlbnQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3VwZGF0ZSc6XG4gICAgICAgICAgICAgICAgICAgIGlmIChtZW1iZXJzLnB1dChwcmVzZW5jZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyb2FkY2FzdE1lc3NhZ2VzLnB1c2gocHJlc2VuY2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChwcmVzZW5jZS5jb25uZWN0aW9uSWQgPT09IGNvbm5JZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbXlNZW1iZXJzLnB1dChwcmVzZW5jZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLyogaWYgdGhpcyBpcyB0aGUgbGFzdCAob3Igb25seSkgbWVzc2FnZSBpbiBhIHNlcXVlbmNlIG9mIHN5bmMgdXBkYXRlcywgZW5kIHRoZSBzeW5jICovXG4gICAgICAgIGlmIChpc1N5bmMgJiYgIXN5bmNDdXJzb3IpIHtcbiAgICAgICAgICAgIG1lbWJlcnMuZW5kU3luYygpO1xuICAgICAgICAgICAgdGhpcy5jaGFubmVsLnN5bmNDaGFubmVsU2VyaWFsID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICAvKiBicm9hZGNhc3QgdG8gbGlzdGVuZXJzICovXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYnJvYWRjYXN0TWVzc2FnZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBwcmVzZW5jZSA9IGJyb2FkY2FzdE1lc3NhZ2VzW2ldO1xuICAgICAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLmVtaXQocHJlc2VuY2UuYWN0aW9uLCBwcmVzZW5jZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFJlYWx0aW1lUHJlc2VuY2UucHJvdG90eXBlLm9uQXR0YWNoZWQgPSBmdW5jdGlvbiAoaGFzUHJlc2VuY2UpIHtcbiAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlOT1IsICdSZWFsdGltZVByZXNlbmNlLm9uQXR0YWNoZWQoKScsICdjaGFubmVsID0gJyArIHRoaXMuY2hhbm5lbC5uYW1lICsgJywgaGFzUHJlc2VuY2UgPSAnICsgaGFzUHJlc2VuY2UpO1xuICAgICAgICBpZiAoaGFzUHJlc2VuY2UpIHtcbiAgICAgICAgICAgIHRoaXMubWVtYmVycy5zdGFydFN5bmMoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3N5bnRoZXNpemVMZWF2ZXModGhpcy5tZW1iZXJzLnZhbHVlcygpKTtcbiAgICAgICAgICAgIHRoaXMubWVtYmVycy5jbGVhcigpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJUUDE3ZjogUmUtZW50ZXIgb3duIG1lbWJlcnMgd2hlbiBtb3ZpbmcgaW50byB0aGUgYXR0YWNoZWQgc3RhdGUuXG4gICAgICAgIHRoaXMuX2Vuc3VyZU15TWVtYmVyc1ByZXNlbnQoKTtcbiAgICAgICAgLyogTkIgdGhpcyBtdXN0IGJlIGFmdGVyIHRoZSBfZW5zdXJlTXlNZW1iZXJzUHJlc2VudCBjYWxsLCB3aGljaCBtYXkgYWRkIGl0ZW1zIHRvIHBlbmRpbmdQcmVzZW5jZSAqL1xuICAgICAgICB2YXIgcGVuZGluZ1ByZXNlbmNlID0gdGhpcy5wZW5kaW5nUHJlc2VuY2UsIHBlbmRpbmdQcmVzQ291bnQgPSBwZW5kaW5nUHJlc2VuY2UubGVuZ3RoO1xuICAgICAgICBpZiAocGVuZGluZ1ByZXNDb3VudCkge1xuICAgICAgICAgICAgdGhpcy5wZW5kaW5nUHJlc2VuY2UgPSBbXTtcbiAgICAgICAgICAgIHZhciBwcmVzZW5jZUFycmF5ID0gW107XG4gICAgICAgICAgICB2YXIgbXVsdGljYXN0ZXIgPSBtdWx0aWNhc3Rlcl8xLmRlZmF1bHQuY3JlYXRlKCk7XG4gICAgICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19NSUNSTywgJ1JlYWx0aW1lUHJlc2VuY2Uub25BdHRhY2hlZCcsICdzZW5kaW5nICcgKyBwZW5kaW5nUHJlc0NvdW50ICsgJyBxdWV1ZWQgcHJlc2VuY2UgbWVzc2FnZXMnKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGVuZGluZ1ByZXNDb3VudDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGV2ZW50XzEgPSBwZW5kaW5nUHJlc2VuY2VbaV07XG4gICAgICAgICAgICAgICAgcHJlc2VuY2VBcnJheS5wdXNoKGV2ZW50XzEucHJlc2VuY2UpO1xuICAgICAgICAgICAgICAgIG11bHRpY2FzdGVyLnB1c2goZXZlbnRfMS5jYWxsYmFjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmNoYW5uZWwuc2VuZFByZXNlbmNlKHByZXNlbmNlQXJyYXksIG11bHRpY2FzdGVyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgUmVhbHRpbWVQcmVzZW5jZS5wcm90b3R5cGUuYWN0T25DaGFubmVsU3RhdGUgPSBmdW5jdGlvbiAoc3RhdGUsIGhhc1ByZXNlbmNlLCBlcnIpIHtcbiAgICAgICAgc3dpdGNoIChzdGF0ZSkge1xuICAgICAgICAgICAgY2FzZSAnYXR0YWNoZWQnOlxuICAgICAgICAgICAgICAgIHRoaXMub25BdHRhY2hlZChoYXNQcmVzZW5jZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdkZXRhY2hlZCc6XG4gICAgICAgICAgICBjYXNlICdmYWlsZWQnOlxuICAgICAgICAgICAgICAgIHRoaXMuX2NsZWFyTXlNZW1iZXJzKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5tZW1iZXJzLmNsZWFyKCk7XG4gICAgICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICAgICAgICBjYXNlICdzdXNwZW5kZWQnOlxuICAgICAgICAgICAgICAgIHRoaXMuZmFpbFBlbmRpbmdQcmVzZW5jZShlcnIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBSZWFsdGltZVByZXNlbmNlLnByb3RvdHlwZS5mYWlsUGVuZGluZ1ByZXNlbmNlID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICBpZiAodGhpcy5wZW5kaW5nUHJlc2VuY2UubGVuZ3RoKSB7XG4gICAgICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19NSU5PUiwgJ1JlYWx0aW1lQ2hhbm5lbC5mYWlsUGVuZGluZ1ByZXNlbmNlJywgJ2NoYW5uZWw7IG5hbWUgPSAnICsgdGhpcy5jaGFubmVsLm5hbWUgKyAnLCBlcnIgPSAnICsgVXRpbHMuaW5zcGVjdEVycm9yKGVycikpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnBlbmRpbmdQcmVzZW5jZS5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBlbmRpbmdQcmVzZW5jZVtpXS5jYWxsYmFjayhlcnIpO1xuICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZW1wdHlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHsgfVxuICAgICAgICAgICAgdGhpcy5wZW5kaW5nUHJlc2VuY2UgPSBbXTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgUmVhbHRpbWVQcmVzZW5jZS5wcm90b3R5cGUuX2NsZWFyTXlNZW1iZXJzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9teU1lbWJlcnMuY2xlYXIoKTtcbiAgICB9O1xuICAgIFJlYWx0aW1lUHJlc2VuY2UucHJvdG90eXBlLl9lbnN1cmVNeU1lbWJlcnNQcmVzZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgbXlNZW1iZXJzID0gdGhpcy5fbXlNZW1iZXJzLCByZWVudGVyQ2IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1zZyA9ICdQcmVzZW5jZSBhdXRvLXJlLWVudGVyIGZhaWxlZDogJyArIGVyci50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgIHZhciB3cmFwcGVkRXJyID0gbmV3IGVycm9yaW5mb18xLmRlZmF1bHQobXNnLCA5MTAwNCwgNDAwKTtcbiAgICAgICAgICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19FUlJPUiwgJ1JlYWx0aW1lUHJlc2VuY2UuX2Vuc3VyZU15TWVtYmVyc1ByZXNlbnQoKScsIG1zZyk7XG4gICAgICAgICAgICAgICAgdmFyIGNoYW5nZSA9IG5ldyBjaGFubmVsc3RhdGVjaGFuZ2VfMS5kZWZhdWx0KF90aGlzLmNoYW5uZWwuc3RhdGUsIF90aGlzLmNoYW5uZWwuc3RhdGUsIHRydWUsIGZhbHNlLCB3cmFwcGVkRXJyKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5jaGFubmVsLmVtaXQoJ3VwZGF0ZScsIGNoYW5nZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGZvciAodmFyIG1lbWJlcktleSBpbiBteU1lbWJlcnMubWFwKSB7XG4gICAgICAgICAgICB2YXIgZW50cnkgPSBteU1lbWJlcnMubWFwW21lbWJlcktleV07XG4gICAgICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19NSUNSTywgJ1JlYWx0aW1lUHJlc2VuY2UuX2Vuc3VyZU15TWVtYmVyc1ByZXNlbnQoKScsICdBdXRvLXJlZW50ZXJpbmcgY2xpZW50SWQgXCInICsgZW50cnkuY2xpZW50SWQgKyAnXCIgaW50byB0aGUgcHJlc2VuY2Ugc2V0Jyk7XG4gICAgICAgICAgICAvLyBSVFAxN2c6IFNlbmQgRU5URVIgY29udGFpbmluZyB0aGUgbWVtYmVyIGlkLCBjbGllbnRJZCBhbmQgZGF0YVxuICAgICAgICAgICAgLy8gYXR0cmlidXRlcy5cbiAgICAgICAgICAgIHRoaXMuX2VudGVyT3JVcGRhdGVDbGllbnQoZW50cnkuaWQsIGVudHJ5LmNsaWVudElkLCBlbnRyeS5kYXRhLCAnZW50ZXInLCByZWVudGVyQ2IpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBSZWFsdGltZVByZXNlbmNlLnByb3RvdHlwZS5fc3ludGhlc2l6ZUxlYXZlcyA9IGZ1bmN0aW9uIChpdGVtcykge1xuICAgICAgICB2YXIgc3Vic2NyaXB0aW9ucyA9IHRoaXMuc3Vic2NyaXB0aW9ucztcbiAgICAgICAgVXRpbHMuYXJyRm9yRWFjaChpdGVtcywgZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgIHZhciBwcmVzZW5jZSA9IHByZXNlbmNlbWVzc2FnZV8xLmRlZmF1bHQuZnJvbVZhbHVlcyh7XG4gICAgICAgICAgICAgICAgYWN0aW9uOiAnbGVhdmUnLFxuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb25JZDogaXRlbS5jb25uZWN0aW9uSWQsXG4gICAgICAgICAgICAgICAgY2xpZW50SWQ6IGl0ZW0uY2xpZW50SWQsXG4gICAgICAgICAgICAgICAgZGF0YTogaXRlbS5kYXRhLFxuICAgICAgICAgICAgICAgIGVuY29kaW5nOiBpdGVtLmVuY29kaW5nLFxuICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogVXRpbHMubm93KCksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbnMuZW1pdCgnbGVhdmUnLCBwcmVzZW5jZSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyogRGVwcmVjYXRlZCAqL1xuICAgIFJlYWx0aW1lUHJlc2VuY2UucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQuZGVwcmVjYXRlZCgncHJlc2VuY2Uub24nLCAncHJlc2VuY2Uuc3Vic2NyaWJlJyk7XG4gICAgICAgIHRoaXMuc3Vic2NyaWJlLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH07XG4gICAgLyogRGVwcmVjYXRlZCAqL1xuICAgIFJlYWx0aW1lUHJlc2VuY2UucHJvdG90eXBlLm9mZiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmRlcHJlY2F0ZWQoJ3ByZXNlbmNlLm9mZicsICdwcmVzZW5jZS51bnN1YnNjcmliZScpO1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH07XG4gICAgUmVhbHRpbWVQcmVzZW5jZS5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2FyZ3MgPSBbXTsgLyogW2V2ZW50XSwgbGlzdGVuZXIsIFtjYWxsYmFja10gKi9cbiAgICAgICAgZm9yICh2YXIgX2kgPSAwIC8qIFtldmVudF0sIGxpc3RlbmVyLCBbY2FsbGJhY2tdICovOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGggLyogW2V2ZW50XSwgbGlzdGVuZXIsIFtjYWxsYmFja10gKi87IF9pKysgLyogW2V2ZW50XSwgbGlzdGVuZXIsIFtjYWxsYmFja10gKi8pIHtcbiAgICAgICAgICAgIF9hcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07IC8qIFtldmVudF0sIGxpc3RlbmVyLCBbY2FsbGJhY2tdICovXG4gICAgICAgIH1cbiAgICAgICAgdmFyIGFyZ3MgPSByZWFsdGltZWNoYW5uZWxfMS5kZWZhdWx0LnByb2Nlc3NMaXN0ZW5lckFyZ3MoX2FyZ3MpO1xuICAgICAgICB2YXIgZXZlbnQgPSBhcmdzWzBdO1xuICAgICAgICB2YXIgbGlzdGVuZXIgPSBhcmdzWzFdO1xuICAgICAgICB2YXIgY2FsbGJhY2sgPSBhcmdzWzJdO1xuICAgICAgICB2YXIgY2hhbm5lbCA9IHRoaXMuY2hhbm5lbDtcbiAgICAgICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgICAgICAgaWYgKHRoaXMuY2hhbm5lbC5yZWFsdGltZS5vcHRpb25zLnByb21pc2VzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFV0aWxzLnByb21pc2lmeSh0aGlzLCAnc3Vic2NyaWJlJywgW2V2ZW50LCBsaXN0ZW5lcl0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FsbGJhY2sgPSBub29wO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaGFubmVsLnN0YXRlID09PSAnZmFpbGVkJykge1xuICAgICAgICAgICAgY2FsbGJhY2soZXJyb3JpbmZvXzEuZGVmYXVsdC5mcm9tVmFsdWVzKGNoYW5uZWwuaW52YWxpZFN0YXRlRXJyb3IoKSkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5vbihldmVudCwgbGlzdGVuZXIpO1xuICAgICAgICBjaGFubmVsLmF0dGFjaChjYWxsYmFjayk7XG4gICAgfTtcbiAgICBSZWFsdGltZVByZXNlbmNlLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hcmdzID0gW107IC8qIFtldmVudF0sIGxpc3RlbmVyICovXG4gICAgICAgIGZvciAodmFyIF9pID0gMCAvKiBbZXZlbnRdLCBsaXN0ZW5lciAqLzsgX2kgPCBhcmd1bWVudHMubGVuZ3RoIC8qIFtldmVudF0sIGxpc3RlbmVyICovOyBfaSsrIC8qIFtldmVudF0sIGxpc3RlbmVyICovKSB7XG4gICAgICAgICAgICBfYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldOyAvKiBbZXZlbnRdLCBsaXN0ZW5lciAqL1xuICAgICAgICB9XG4gICAgICAgIHZhciBhcmdzID0gcmVhbHRpbWVjaGFubmVsXzEuZGVmYXVsdC5wcm9jZXNzTGlzdGVuZXJBcmdzKF9hcmdzKTtcbiAgICAgICAgdmFyIGV2ZW50ID0gYXJnc1swXTtcbiAgICAgICAgdmFyIGxpc3RlbmVyID0gYXJnc1sxXTtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLm9mZihldmVudCwgbGlzdGVuZXIpO1xuICAgIH07XG4gICAgcmV0dXJuIFJlYWx0aW1lUHJlc2VuY2U7XG59KHByZXNlbmNlXzEuZGVmYXVsdCkpO1xudmFyIFByZXNlbmNlTWFwID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFByZXNlbmNlTWFwLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFByZXNlbmNlTWFwKHByZXNlbmNlLCBtZW1iZXJLZXkpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMucHJlc2VuY2UgPSBwcmVzZW5jZTtcbiAgICAgICAgX3RoaXMubWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgX3RoaXMuc3luY0luUHJvZ3Jlc3MgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMucmVzaWR1YWxNZW1iZXJzID0gbnVsbDtcbiAgICAgICAgX3RoaXMubWVtYmVyS2V5ID0gbWVtYmVyS2V5O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFByZXNlbmNlTWFwLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1hcFtrZXldO1xuICAgIH07XG4gICAgUHJlc2VuY2VNYXAucHJvdG90eXBlLmdldENsaWVudCA9IGZ1bmN0aW9uIChjbGllbnRJZCkge1xuICAgICAgICB2YXIgbWFwID0gdGhpcy5tYXAsIHJlc3VsdCA9IFtdO1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gbWFwKSB7XG4gICAgICAgICAgICB2YXIgaXRlbSA9IG1hcFtrZXldO1xuICAgICAgICAgICAgaWYgKGl0ZW0uY2xpZW50SWQgPT0gY2xpZW50SWQgJiYgaXRlbS5hY3Rpb24gIT0gJ2Fic2VudCcpXG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goaXRlbSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICAgIFByZXNlbmNlTWFwLnByb3RvdHlwZS5saXN0ID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgICB2YXIgbWFwID0gdGhpcy5tYXAsIGNsaWVudElkID0gcGFyYW1zICYmIHBhcmFtcy5jbGllbnRJZCwgY29ubmVjdGlvbklkID0gcGFyYW1zICYmIHBhcmFtcy5jb25uZWN0aW9uSWQsIHJlc3VsdCA9IFtdO1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gbWFwKSB7XG4gICAgICAgICAgICB2YXIgaXRlbSA9IG1hcFtrZXldO1xuICAgICAgICAgICAgaWYgKGl0ZW0uYWN0aW9uID09PSAnYWJzZW50JylcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIGlmIChjbGllbnRJZCAmJiBjbGllbnRJZCAhPSBpdGVtLmNsaWVudElkKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgaWYgKGNvbm5lY3Rpb25JZCAmJiBjb25uZWN0aW9uSWQgIT0gaXRlbS5jb25uZWN0aW9uSWQpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICByZXN1bHQucHVzaChpdGVtKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gICAgUHJlc2VuY2VNYXAucHJvdG90eXBlLnB1dCA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIGlmIChpdGVtLmFjdGlvbiA9PT0gJ2VudGVyJyB8fCBpdGVtLmFjdGlvbiA9PT0gJ3VwZGF0ZScpIHtcbiAgICAgICAgICAgIGl0ZW0gPSBwcmVzZW5jZW1lc3NhZ2VfMS5kZWZhdWx0LmZyb21WYWx1ZXMoaXRlbSk7XG4gICAgICAgICAgICBpdGVtLmFjdGlvbiA9ICdwcmVzZW50JztcbiAgICAgICAgfVxuICAgICAgICB2YXIgbWFwID0gdGhpcy5tYXAsIGtleSA9IHRoaXMubWVtYmVyS2V5KGl0ZW0pO1xuICAgICAgICAvKiB3ZSd2ZSBzZWVuIHRoaXMgbWVtYmVyLCBzbyBkbyBub3QgcmVtb3ZlIGl0IGF0IHRoZSBlbmQgb2Ygc3luYyAqL1xuICAgICAgICBpZiAodGhpcy5yZXNpZHVhbE1lbWJlcnMpXG4gICAgICAgICAgICBkZWxldGUgdGhpcy5yZXNpZHVhbE1lbWJlcnNba2V5XTtcbiAgICAgICAgLyogY29tcGFyZSB0aGUgdGltZXN0YW1wIG9mIHRoZSBuZXcgaXRlbSB3aXRoIGFueSBleGlzdGluZyBtZW1iZXIgKG9yIEFCU0VOVCB3aXRuZXNzKSAqL1xuICAgICAgICB2YXIgZXhpc3RpbmdJdGVtID0gbWFwW2tleV07XG4gICAgICAgIGlmIChleGlzdGluZ0l0ZW0gJiYgIW5ld2VyVGhhbihpdGVtLCBleGlzdGluZ0l0ZW0pKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgbWFwW2tleV0gPSBpdGVtO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICAgIFByZXNlbmNlTWFwLnByb3RvdHlwZS52YWx1ZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBtYXAgPSB0aGlzLm1hcCwgcmVzdWx0ID0gW107XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBtYXApIHtcbiAgICAgICAgICAgIHZhciBpdGVtID0gbWFwW2tleV07XG4gICAgICAgICAgICBpZiAoaXRlbS5hY3Rpb24gIT0gJ2Fic2VudCcpXG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goaXRlbSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICAgIFByZXNlbmNlTWFwLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICB2YXIgbWFwID0gdGhpcy5tYXAsIGtleSA9IHRoaXMubWVtYmVyS2V5KGl0ZW0pO1xuICAgICAgICB2YXIgZXhpc3RpbmdJdGVtID0gbWFwW2tleV07XG4gICAgICAgIGlmIChleGlzdGluZ0l0ZW0gJiYgIW5ld2VyVGhhbihpdGVtLCBleGlzdGluZ0l0ZW0pKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgLyogUlRQMmYgKi9cbiAgICAgICAgaWYgKHRoaXMuc3luY0luUHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgIGl0ZW0gPSBwcmVzZW5jZW1lc3NhZ2VfMS5kZWZhdWx0LmZyb21WYWx1ZXMoaXRlbSk7XG4gICAgICAgICAgICBpdGVtLmFjdGlvbiA9ICdhYnNlbnQnO1xuICAgICAgICAgICAgbWFwW2tleV0gPSBpdGVtO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZGVsZXRlIG1hcFtrZXldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gICAgUHJlc2VuY2VNYXAucHJvdG90eXBlLnN0YXJ0U3luYyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG1hcCA9IHRoaXMubWFwLCBzeW5jSW5Qcm9ncmVzcyA9IHRoaXMuc3luY0luUHJvZ3Jlc3M7XG4gICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01JTk9SLCAnUHJlc2VuY2VNYXAuc3RhcnRTeW5jKCknLCAnY2hhbm5lbCA9ICcgKyB0aGlzLnByZXNlbmNlLmNoYW5uZWwubmFtZSArICc7IHN5bmNJblByb2dyZXNzID0gJyArIHN5bmNJblByb2dyZXNzKTtcbiAgICAgICAgLyogd2UgbWlnaHQgYmUgY2FsbGVkIG11bHRpcGxlIHRpbWVzIHdoaWxlIGEgc3luYyBpcyBpbiBwcm9ncmVzcyAqL1xuICAgICAgICBpZiAoIXRoaXMuc3luY0luUHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgIHRoaXMucmVzaWR1YWxNZW1iZXJzID0gVXRpbHMuY29weShtYXApO1xuICAgICAgICAgICAgdGhpcy5zZXRJblByb2dyZXNzKHRydWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBQcmVzZW5jZU1hcC5wcm90b3R5cGUuZW5kU3luYyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG1hcCA9IHRoaXMubWFwLCBzeW5jSW5Qcm9ncmVzcyA9IHRoaXMuc3luY0luUHJvZ3Jlc3M7XG4gICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01JTk9SLCAnUHJlc2VuY2VNYXAuZW5kU3luYygpJywgJ2NoYW5uZWwgPSAnICsgdGhpcy5wcmVzZW5jZS5jaGFubmVsLm5hbWUgKyAnOyBzeW5jSW5Qcm9ncmVzcyA9ICcgKyBzeW5jSW5Qcm9ncmVzcyk7XG4gICAgICAgIGlmIChzeW5jSW5Qcm9ncmVzcykge1xuICAgICAgICAgICAgLyogd2UgY2FuIG5vdyBzdHJpcCBvdXQgdGhlIEFCU0VOVCBtZW1iZXJzLCBhcyB3ZSBoYXZlXG4gICAgICAgICAgICAgKiByZWNlaXZlZCBhbGwgb2YgdGhlIG91dC1vZi1vcmRlciBzeW5jIG1lc3NhZ2VzICovXG4gICAgICAgICAgICBmb3IgKHZhciBtZW1iZXJLZXkgaW4gbWFwKSB7XG4gICAgICAgICAgICAgICAgdmFyIGVudHJ5ID0gbWFwW21lbWJlcktleV07XG4gICAgICAgICAgICAgICAgaWYgKGVudHJ5LmFjdGlvbiA9PT0gJ2Fic2VudCcpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG1hcFttZW1iZXJLZXldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qIGFueSBtZW1iZXJzIHRoYXQgd2VyZSBwcmVzZW50IGF0IHRoZSBzdGFydCBvZiB0aGUgc3luYyxcbiAgICAgICAgICAgICAqIGFuZCBoYXZlIG5vdCBiZWVuIHNlZW4gaW4gc3luYywgY2FuIGJlIHJlbW92ZWQsIGFuZCBsZWF2ZSBldmVudHMgZW1pdHRlZCAqL1xuICAgICAgICAgICAgdGhpcy5wcmVzZW5jZS5fc3ludGhlc2l6ZUxlYXZlcyhVdGlscy52YWx1ZXNBcnJheSh0aGlzLnJlc2lkdWFsTWVtYmVycykpO1xuICAgICAgICAgICAgZm9yICh2YXIgbWVtYmVyS2V5IGluIHRoaXMucmVzaWR1YWxNZW1iZXJzKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIG1hcFttZW1iZXJLZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5yZXNpZHVhbE1lbWJlcnMgPSBudWxsO1xuICAgICAgICAgICAgLyogZmluaXNoLCBub3RpZnlpbmcgYW55IHdhaXRlcnMgKi9cbiAgICAgICAgICAgIHRoaXMuc2V0SW5Qcm9ncmVzcyhmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lbWl0KCdzeW5jJyk7XG4gICAgfTtcbiAgICBQcmVzZW5jZU1hcC5wcm90b3R5cGUud2FpdFN5bmMgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIHN5bmNJblByb2dyZXNzID0gdGhpcy5zeW5jSW5Qcm9ncmVzcztcbiAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlOT1IsICdQcmVzZW5jZU1hcC53YWl0U3luYygpJywgJ2NoYW5uZWwgPSAnICsgdGhpcy5wcmVzZW5jZS5jaGFubmVsLm5hbWUgKyAnOyBzeW5jSW5Qcm9ncmVzcyA9ICcgKyBzeW5jSW5Qcm9ncmVzcyk7XG4gICAgICAgIGlmICghc3luY0luUHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vbmNlKCdzeW5jJywgY2FsbGJhY2spO1xuICAgIH07XG4gICAgUHJlc2VuY2VNYXAucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLm1hcCA9IHt9O1xuICAgICAgICB0aGlzLnNldEluUHJvZ3Jlc3MoZmFsc2UpO1xuICAgICAgICB0aGlzLnJlc2lkdWFsTWVtYmVycyA9IG51bGw7XG4gICAgfTtcbiAgICBQcmVzZW5jZU1hcC5wcm90b3R5cGUuc2V0SW5Qcm9ncmVzcyA9IGZ1bmN0aW9uIChpblByb2dyZXNzKSB7XG4gICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01JQ1JPLCAnUHJlc2VuY2VNYXAuc2V0SW5Qcm9ncmVzcygpJywgJ2luUHJvZ3Jlc3MgPSAnICsgaW5Qcm9ncmVzcyk7XG4gICAgICAgIHRoaXMuc3luY0luUHJvZ3Jlc3MgPSBpblByb2dyZXNzO1xuICAgICAgICB0aGlzLnByZXNlbmNlLnN5bmNDb21wbGV0ZSA9ICFpblByb2dyZXNzO1xuICAgIH07XG4gICAgcmV0dXJuIFByZXNlbmNlTWFwO1xufShldmVudGVtaXR0ZXJfMS5kZWZhdWx0KSk7XG5leHBvcnRzLmRlZmF1bHQgPSBSZWFsdGltZVByZXNlbmNlO1xuXG5cbi8qKiovIH0pLFxuLyogNTUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciB0c2xpYl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciBlbmNfaGV4XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU2KTtcbnZhciBlbmNfdXRmOF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMSk7XG52YXIgZW5jX2Jhc2U2NF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMSk7XG52YXIgbGliX3R5cGVkYXJyYXlzXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKDUpKTtcbnZhciBwbGF0Zm9ybV8xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygzKSk7XG52YXIgQnVmZmVyVXRpbHMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQnVmZmVyVXRpbHMoKSB7XG4gICAgICAgIHRoaXMuYmFzZTY0Q2hhclNldCA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJztcbiAgICAgICAgdGhpcy5oZXhDaGFyU2V0ID0gJzAxMjM0NTY3ODlhYmNkZWYnO1xuICAgIH1cbiAgICBCdWZmZXJVdGlscy5wcm90b3R5cGUuaXNXb3JkQXJyYXkgPSBmdW5jdGlvbiAob2IpIHtcbiAgICAgICAgcmV0dXJuIG9iICE9PSBudWxsICYmIG9iICE9PSB1bmRlZmluZWQgJiYgb2Iuc2lnQnl0ZXMgIT09IHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIEJ1ZmZlclV0aWxzLnByb3RvdHlwZS5pc0FycmF5QnVmZmVyID0gZnVuY3Rpb24gKG9iKSB7XG4gICAgICAgIHJldHVybiBvYiAhPT0gbnVsbCAmJiBvYiAhPT0gdW5kZWZpbmVkICYmIG9iLmNvbnN0cnVjdG9yID09PSBBcnJheUJ1ZmZlcjtcbiAgICB9O1xuICAgIEJ1ZmZlclV0aWxzLnByb3RvdHlwZS5pc1R5cGVkQXJyYXkgPSBmdW5jdGlvbiAob2IpIHtcbiAgICAgICAgcmV0dXJuICEhQXJyYXlCdWZmZXIgJiYgQXJyYXlCdWZmZXIuaXNWaWV3ICYmIEFycmF5QnVmZmVyLmlzVmlldyhvYik7XG4gICAgfTtcbiAgICAvLyAvLyBodHRwczovL2dpc3QuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2pvbmxlaWdodG9uLzk1ODg0MS9yYXcvZjIwMGUzMGRmZTk1MjEyYzAxNjVjY2YxYWUwMDBjYTUxZTlkZTgwMy9naXN0ZmlsZTEuanNcbiAgICBCdWZmZXJVdGlscy5wcm90b3R5cGUudWludDhWaWV3VG9CYXNlNjQgPSBmdW5jdGlvbiAoYnl0ZXMpIHtcbiAgICAgICAgdmFyIGJhc2U2NCA9ICcnO1xuICAgICAgICB2YXIgZW5jb2RpbmdzID0gdGhpcy5iYXNlNjRDaGFyU2V0O1xuICAgICAgICB2YXIgYnl0ZUxlbmd0aCA9IGJ5dGVzLmJ5dGVMZW5ndGg7XG4gICAgICAgIHZhciBieXRlUmVtYWluZGVyID0gYnl0ZUxlbmd0aCAlIDM7XG4gICAgICAgIHZhciBtYWluTGVuZ3RoID0gYnl0ZUxlbmd0aCAtIGJ5dGVSZW1haW5kZXI7XG4gICAgICAgIHZhciBhLCBiLCBjLCBkO1xuICAgICAgICB2YXIgY2h1bms7XG4gICAgICAgIC8vIE1haW4gbG9vcCBkZWFscyB3aXRoIGJ5dGVzIGluIGNodW5rcyBvZiAzXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWFpbkxlbmd0aDsgaSA9IGkgKyAzKSB7XG4gICAgICAgICAgICAvLyBDb21iaW5lIHRoZSB0aHJlZSBieXRlcyBpbnRvIGEgc2luZ2xlIGludGVnZXJcbiAgICAgICAgICAgIGNodW5rID0gKGJ5dGVzW2ldIDw8IDE2KSB8IChieXRlc1tpICsgMV0gPDwgOCkgfCBieXRlc1tpICsgMl07XG4gICAgICAgICAgICAvLyBVc2UgYml0bWFza3MgdG8gZXh0cmFjdCA2LWJpdCBzZWdtZW50cyBmcm9tIHRoZSB0cmlwbGV0XG4gICAgICAgICAgICBhID0gKGNodW5rICYgMTY1MTUwNzIpID4+IDE4OyAvLyAxNjUxNTA3MiA9ICgyXjYgLSAxKSA8PCAxOFxuICAgICAgICAgICAgYiA9IChjaHVuayAmIDI1ODA0OCkgPj4gMTI7IC8vIDI1ODA0OCAgID0gKDJeNiAtIDEpIDw8IDEyXG4gICAgICAgICAgICBjID0gKGNodW5rICYgNDAzMikgPj4gNjsgLy8gNDAzMiAgICAgPSAoMl42IC0gMSkgPDwgNlxuICAgICAgICAgICAgZCA9IGNodW5rICYgNjM7IC8vIDYzICAgICAgID0gMl42IC0gMVxuICAgICAgICAgICAgLy8gQ29udmVydCB0aGUgcmF3IGJpbmFyeSBzZWdtZW50cyB0byB0aGUgYXBwcm9wcmlhdGUgQVNDSUkgZW5jb2RpbmdcbiAgICAgICAgICAgIGJhc2U2NCArPSBlbmNvZGluZ3NbYV0gKyBlbmNvZGluZ3NbYl0gKyBlbmNvZGluZ3NbY10gKyBlbmNvZGluZ3NbZF07XG4gICAgICAgIH1cbiAgICAgICAgLy8gRGVhbCB3aXRoIHRoZSByZW1haW5pbmcgYnl0ZXMgYW5kIHBhZGRpbmdcbiAgICAgICAgaWYgKGJ5dGVSZW1haW5kZXIgPT0gMSkge1xuICAgICAgICAgICAgY2h1bmsgPSBieXRlc1ttYWluTGVuZ3RoXTtcbiAgICAgICAgICAgIGEgPSAoY2h1bmsgJiAyNTIpID4+IDI7IC8vIDI1MiA9ICgyXjYgLSAxKSA8PCAyXG4gICAgICAgICAgICAvLyBTZXQgdGhlIDQgbGVhc3Qgc2lnbmlmaWNhbnQgYml0cyB0byB6ZXJvXG4gICAgICAgICAgICBiID0gKGNodW5rICYgMykgPDwgNDsgLy8gMyAgID0gMl4yIC0gMVxuICAgICAgICAgICAgYmFzZTY0ICs9IGVuY29kaW5nc1thXSArIGVuY29kaW5nc1tiXSArICc9PSc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYnl0ZVJlbWFpbmRlciA9PSAyKSB7XG4gICAgICAgICAgICBjaHVuayA9IChieXRlc1ttYWluTGVuZ3RoXSA8PCA4KSB8IGJ5dGVzW21haW5MZW5ndGggKyAxXTtcbiAgICAgICAgICAgIGEgPSAoY2h1bmsgJiA2NDUxMikgPj4gMTA7IC8vIDY0NTEyID0gKDJeNiAtIDEpIDw8IDEwXG4gICAgICAgICAgICBiID0gKGNodW5rICYgMTAwOCkgPj4gNDsgLy8gMTAwOCAgPSAoMl42IC0gMSkgPDwgNFxuICAgICAgICAgICAgLy8gU2V0IHRoZSAyIGxlYXN0IHNpZ25pZmljYW50IGJpdHMgdG8gemVyb1xuICAgICAgICAgICAgYyA9IChjaHVuayAmIDE1KSA8PCAyOyAvLyAxNSAgICA9IDJeNCAtIDFcbiAgICAgICAgICAgIGJhc2U2NCArPSBlbmNvZGluZ3NbYV0gKyBlbmNvZGluZ3NbYl0gKyBlbmNvZGluZ3NbY10gKyAnPSc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJhc2U2NDtcbiAgICB9O1xuICAgIEJ1ZmZlclV0aWxzLnByb3RvdHlwZS5iYXNlNjRUb0FycmF5QnVmZmVyID0gZnVuY3Rpb24gKGJhc2U2NCkge1xuICAgICAgICB2YXIgYmluYXJ5X3N0cmluZyA9IGF0b2IgPT09IG51bGwgfHwgYXRvYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogYXRvYihiYXNlNjQpOyAvLyB0aGlzIHdpbGwgYWx3YXlzIGJlIGRlZmluZWQgaW4gYnJvd3NlciBzbyBpdCdzIHNhZmUgdG8gY2FzdFxuICAgICAgICB2YXIgbGVuID0gYmluYXJ5X3N0cmluZy5sZW5ndGg7XG4gICAgICAgIHZhciBieXRlcyA9IG5ldyBVaW50OEFycmF5KGxlbik7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBhc2NpaSA9IGJpbmFyeV9zdHJpbmcuY2hhckNvZGVBdChpKTtcbiAgICAgICAgICAgIGJ5dGVzW2ldID0gYXNjaWk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJ5dGVzLmJ1ZmZlcjtcbiAgICB9O1xuICAgIEJ1ZmZlclV0aWxzLnByb3RvdHlwZS5pc0J1ZmZlciA9IGZ1bmN0aW9uIChidWZmZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNBcnJheUJ1ZmZlcihidWZmZXIpIHx8IHRoaXMuaXNXb3JkQXJyYXkoYnVmZmVyKSB8fCB0aGlzLmlzVHlwZWRBcnJheShidWZmZXIpO1xuICAgIH07XG4gICAgLyogSW4gYnJvd3NlcnMsIHJldHVybnMgYSBVaW50OEFycmF5ICovXG4gICAgQnVmZmVyVXRpbHMucHJvdG90eXBlLnRvQnVmZmVyID0gZnVuY3Rpb24gKGJ1ZmZlcikge1xuICAgICAgICBpZiAoIUFycmF5QnVmZmVyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW4ndCBjb252ZXJ0IHRvIEJ1ZmZlcjogYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IHRoZSBuZWNlc3NhcnkgdHlwZXNcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaXNBcnJheUJ1ZmZlcihidWZmZXIpKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5pc1R5cGVkQXJyYXkoYnVmZmVyKSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGJ1ZmZlci5idWZmZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmlzV29yZEFycmF5KGJ1ZmZlcikpIHtcbiAgICAgICAgICAgIC8qIEJhY2twb3J0ZWQgZnJvbSB1bnJlbGVhc2VkIENyeXB0b0pTXG4gICAgICAgICAgICAgKiBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qcy9zb3VyY2UvYnJvd3NlL2JyYW5jaGVzLzMueC9zcmMvbGliLXR5cGVkYXJyYXlzLmpzP3I9NjYxICovXG4gICAgICAgICAgICB2YXIgYXJyYXlCdWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoYnVmZmVyLnNpZ0J5dGVzKTtcbiAgICAgICAgICAgIHZhciB1aW50OFZpZXcgPSBuZXcgVWludDhBcnJheShhcnJheUJ1ZmZlcik7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJ1ZmZlci5zaWdCeXRlczsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdWludDhWaWV3W2ldID0gKGJ1ZmZlci53b3Jkc1tpID4+PiAyXSA+Pj4gKDI0IC0gKGkgJSA0KSAqIDgpKSAmIDB4ZmY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdWludDhWaWV3O1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQnVmZmVyVXRpbHMudG9CdWZmZXIgZXhwZWN0ZWQgYW4gYXJyYXlidWZmZXIsIHR5cGVkIGFycmF5LCBvciBDcnlwdG9KUyB3b3JkYXJyYXknKTtcbiAgICB9O1xuICAgIEJ1ZmZlclV0aWxzLnByb3RvdHlwZS50b0FycmF5QnVmZmVyID0gZnVuY3Rpb24gKGJ1ZmZlcikge1xuICAgICAgICBpZiAodGhpcy5pc0FycmF5QnVmZmVyKGJ1ZmZlcikpIHtcbiAgICAgICAgICAgIHJldHVybiBidWZmZXI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMudG9CdWZmZXIoYnVmZmVyKS5idWZmZXI7XG4gICAgfTtcbiAgICBCdWZmZXJVdGlscy5wcm90b3R5cGUudG9Xb3JkQXJyYXkgPSBmdW5jdGlvbiAoYnVmZmVyKSB7XG4gICAgICAgIGlmICh0aGlzLmlzVHlwZWRBcnJheShidWZmZXIpKSB7XG4gICAgICAgICAgICBidWZmZXIgPSBidWZmZXIuYnVmZmVyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmlzV29yZEFycmF5KGJ1ZmZlcikgPyBidWZmZXIgOiBsaWJfdHlwZWRhcnJheXNfMS5kZWZhdWx0LmNyZWF0ZShidWZmZXIpO1xuICAgIH07XG4gICAgQnVmZmVyVXRpbHMucHJvdG90eXBlLmJhc2U2NEVuY29kZSA9IGZ1bmN0aW9uIChidWZmZXIpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNXb3JkQXJyYXkoYnVmZmVyKSkge1xuICAgICAgICAgICAgcmV0dXJuICgwLCBlbmNfYmFzZTY0XzEuc3RyaW5naWZ5KShidWZmZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnVpbnQ4Vmlld1RvQmFzZTY0KHRoaXMudG9CdWZmZXIoYnVmZmVyKSk7XG4gICAgfTtcbiAgICBCdWZmZXJVdGlscy5wcm90b3R5cGUuYmFzZTY0RGVjb2RlID0gZnVuY3Rpb24gKHN0cikge1xuICAgICAgICBpZiAoQXJyYXlCdWZmZXIgJiYgcGxhdGZvcm1fMS5kZWZhdWx0LkNvbmZpZy5hdG9iKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5iYXNlNjRUb0FycmF5QnVmZmVyKHN0cik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICgwLCBlbmNfYmFzZTY0XzEucGFyc2UpKHN0cik7XG4gICAgfTtcbiAgICBCdWZmZXJVdGlscy5wcm90b3R5cGUuaGV4RW5jb2RlID0gZnVuY3Rpb24gKGJ1ZmZlcikge1xuICAgICAgICByZXR1cm4gKDAsIGVuY19oZXhfMS5zdHJpbmdpZnkpKHRoaXMudG9Xb3JkQXJyYXkoYnVmZmVyKSk7XG4gICAgfTtcbiAgICBCdWZmZXJVdGlscy5wcm90b3R5cGUuaGV4RGVjb2RlID0gZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICB2YXIgd29yZEFycmF5ID0gKDAsIGVuY19oZXhfMS5wYXJzZSkoc3RyaW5nKTtcbiAgICAgICAgcmV0dXJuIEFycmF5QnVmZmVyID8gdGhpcy50b0FycmF5QnVmZmVyKHdvcmRBcnJheSkgOiB3b3JkQXJyYXk7XG4gICAgfTtcbiAgICBCdWZmZXJVdGlscy5wcm90b3R5cGUudXRmOEVuY29kZSA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgaWYgKHBsYXRmb3JtXzEuZGVmYXVsdC5Db25maWcuVGV4dEVuY29kZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgcGxhdGZvcm1fMS5kZWZhdWx0LkNvbmZpZy5UZXh0RW5jb2RlcigpLmVuY29kZShzdHJpbmcpLmJ1ZmZlcjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKDAsIGVuY191dGY4XzEucGFyc2UpKHN0cmluZyk7XG4gICAgfTtcbiAgICAvKiBGb3IgdXRmOCBkZWNvZGluZyB3ZSBhcHBseSBzbGlnaHRseSBzdHJpY3RlciBpbnB1dCB2YWxpZGF0aW9uIHRoYW4gdG9cbiAgICAgKiBoZXhFbmNvZGUvYmFzZTY0RW5jb2RlL2V0YzogaW4gdGhvc2Ugd2UgYWNjZXB0IGFueXRoaW5nIHRoYXQgQnVmZmVyLmZyb21cbiAgICAgKiBjYW4gdGFrZSAoaW4gcGFydGljdWxhciBhbGxvd2luZyBzdHJpbmdzLCB3aGljaCBhcmUganVzdCBpbnRlcnByZXRlZCBhc1xuICAgICAqIGJpbmFyeSk7IGhlcmUgd2UgZW5zdXJlIHRoYXQgdGhlIGlucHV0IGlzIGFjdHVhbGx5IGEgYnVmZmVyIHNpbmNlIHRyeWluZ1xuICAgICAqIHRvIHV0ZjgtZGVjb2RlIGEgc3RyaW5nIHRvIGFub3RoZXIgc3RyaW5nIGlzIGFsbW9zdCBjZXJ0YWlubHkgYSBtaXN0YWtlICovXG4gICAgQnVmZmVyVXRpbHMucHJvdG90eXBlLnV0ZjhEZWNvZGUgPSBmdW5jdGlvbiAoYnVmZmVyKSB7XG4gICAgICAgIGlmICghdGhpcy5pc0J1ZmZlcihidWZmZXIpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIGlucHV0IG9mIHV0ZjhkZWNvZGUgdG8gYmUgYW4gYXJyYXlidWZmZXIsIHR5cGVkIGFycmF5LCBvciBDcnlwdG9KUyB3b3JkYXJyYXknKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoVGV4dERlY29kZXIgJiYgIXRoaXMuaXNXb3JkQXJyYXkoYnVmZmVyKSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBUZXh0RGVjb2RlcigpLmRlY29kZShidWZmZXIpO1xuICAgICAgICB9XG4gICAgICAgIGJ1ZmZlciA9IHRoaXMudG9Xb3JkQXJyYXkoYnVmZmVyKTtcbiAgICAgICAgcmV0dXJuICgwLCBlbmNfdXRmOF8xLnN0cmluZ2lmeSkoYnVmZmVyKTtcbiAgICB9O1xuICAgIEJ1ZmZlclV0aWxzLnByb3RvdHlwZS5idWZmZXJDb21wYXJlID0gZnVuY3Rpb24gKGJ1ZmZlcjEsIGJ1ZmZlcjIpIHtcbiAgICAgICAgaWYgKCFidWZmZXIxKVxuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICBpZiAoIWJ1ZmZlcjIpXG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgdmFyIHdvcmRBcnJheTEgPSB0aGlzLnRvV29yZEFycmF5KGJ1ZmZlcjEpO1xuICAgICAgICB2YXIgd29yZEFycmF5MiA9IHRoaXMudG9Xb3JkQXJyYXkoYnVmZmVyMik7XG4gICAgICAgIHdvcmRBcnJheTEuY2xhbXAoKTtcbiAgICAgICAgd29yZEFycmF5Mi5jbGFtcCgpO1xuICAgICAgICB2YXIgY21wID0gd29yZEFycmF5MS5zaWdCeXRlcyAtIHdvcmRBcnJheTIuc2lnQnl0ZXM7XG4gICAgICAgIGlmIChjbXAgIT0gMClcbiAgICAgICAgICAgIHJldHVybiBjbXA7XG4gICAgICAgIHZhciB3b3JkczEgPSB3b3JkQXJyYXkxLndvcmRzO1xuICAgICAgICB2YXIgd29yZHMyID0gd29yZEFycmF5Mi53b3JkcztcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB3b3JkczEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNtcCA9IHdvcmRzMVtpXSAtIHdvcmRzMltpXTtcbiAgICAgICAgICAgIGlmIChjbXAgIT0gMClcbiAgICAgICAgICAgICAgICByZXR1cm4gY21wO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwO1xuICAgIH07XG4gICAgQnVmZmVyVXRpbHMucHJvdG90eXBlLmJ5dGVMZW5ndGggPSBmdW5jdGlvbiAoYnVmZmVyKSB7XG4gICAgICAgIGlmICh0aGlzLmlzQXJyYXlCdWZmZXIoYnVmZmVyKSB8fCB0aGlzLmlzVHlwZWRBcnJheShidWZmZXIpKSB7XG4gICAgICAgICAgICByZXR1cm4gYnVmZmVyLmJ5dGVMZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5pc1dvcmRBcnJheShidWZmZXIpKSB7XG4gICAgICAgICAgICByZXR1cm4gYnVmZmVyLnNpZ0J5dGVzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9O1xuICAgIC8qIFJldHVybnMgQXJyYXlCdWZmZXIgb24gYnJvd3NlciBhbmQgQnVmZmVyIG9uIE5vZGUuanMgKi9cbiAgICBCdWZmZXJVdGlscy5wcm90b3R5cGUudHlwZWRBcnJheVRvQnVmZmVyID0gZnVuY3Rpb24gKHR5cGVkQXJyYXkpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVkQXJyYXkuYnVmZmVyO1xuICAgIH07XG4gICAgcmV0dXJuIEJ1ZmZlclV0aWxzO1xufSgpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IG5ldyBCdWZmZXJVdGlscygpO1xuXG5cbi8qKiovIH0pLFxuLyogNTYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkge1xuXHRpZiAodHJ1ZSkge1xuXHRcdC8vIENvbW1vbkpTXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShfX3dlYnBhY2tfcmVxdWlyZV9fKDYpKTtcblx0fVxuXHRlbHNlIHt9XG59KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykge1xuXG5cdHJldHVybiBDcnlwdG9KUy5lbmMuSGV4O1xuXG59KSk7XG5cbi8qKiovIH0pLFxuLyogNTcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgY3J5cHRvX2pzX2J1aWxkX2xpYl90eXBlZGFycmF5c19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBjcnlwdG9fanNfYnVpbGRfbGliX3R5cGVkYXJyYXlzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oY3J5cHRvX2pzX2J1aWxkX2xpYl90eXBlZGFycmF5c19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBjcnlwdG9fanNfYnVpbGRfZW5jX2Jhc2U2NF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgY3J5cHRvX2pzX2J1aWxkX2VuY19iYXNlNjRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihjcnlwdG9fanNfYnVpbGRfZW5jX2Jhc2U2NF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBjcnlwdG9fanNfYnVpbGRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMjIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIGNyeXB0b19qc19idWlsZF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKGNyeXB0b19qc19idWlsZF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfY29tbW9uX2xpYl91dGlsX2xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfY29tbW9uX2xpYl91dGlsX2xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9jb21tb25fbGliX3V0aWxfbG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIGNvbW1vbl9saWJfdHlwZXNfZXJyb3JpbmZvX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIGNvbW1vbl9saWJfdHlwZXNfZXJyb3JpbmZvX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oY29tbW9uX2xpYl90eXBlc19lcnJvcmluZm9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXyk7XG5cblxuXG5cblxuXG52YXIgQ3J5cHRvRmFjdG9yeSA9IGZ1bmN0aW9uIChjb25maWcsIGJ1ZmZlclV0aWxzKSB7XG4gIHZhciBERUZBVUxUX0FMR09SSVRITSA9ICdhZXMnO1xuICB2YXIgREVGQVVMVF9LRVlMRU5HVEggPSAyNTY7IC8vIGJpdHNcbiAgdmFyIERFRkFVTFRfTU9ERSA9ICdjYmMnO1xuICB2YXIgREVGQVVMVF9CTE9DS0xFTkdUSCA9IDE2OyAvLyBieXRlc1xuICB2YXIgREVGQVVMVF9CTE9DS0xFTkdUSF9XT1JEUyA9IDQ7IC8vIDMyLWJpdCB3b3Jkc1xuICB2YXIgVUlOVDMyX1NVUCA9IDB4MTAwMDAwMDAwO1xuICB2YXIgSU5UMzJfU1VQID0gMHg4MDAwMDAwMDtcblxuICAvKipcbiAgICogSW50ZXJuYWw6IGdlbmVyYXRlIGFuIGFycmF5IG9mIHNlY3VyZSByYW5kb20gd29yZHMgY29ycmVzcG9uZGluZyB0byB0aGUgZ2l2ZW4gbGVuZ3RoIG9mIGJ5dGVzXG4gICAqIEBwYXJhbSBieXRlc1xuICAgKiBAcGFyYW0gY2FsbGJhY2tcbiAgICovXG4gIHZhciBnZW5lcmF0ZVJhbmRvbTtcbiAgaWYgKGNvbmZpZy5nZXRSYW5kb21Xb3JkQXJyYXkpIHtcbiAgICBnZW5lcmF0ZVJhbmRvbSA9IGNvbmZpZy5nZXRSYW5kb21Xb3JkQXJyYXk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIFVpbnQzMkFycmF5ICE9PSAndW5kZWZpbmVkJyAmJiBjb25maWcuZ2V0UmFuZG9tVmFsdWVzKSB7XG4gICAgdmFyIGJsb2NrUmFuZG9tQXJyYXkgPSBuZXcgVWludDMyQXJyYXkoREVGQVVMVF9CTE9DS0xFTkdUSF9XT1JEUyk7XG4gICAgZ2VuZXJhdGVSYW5kb20gPSBmdW5jdGlvbiAoYnl0ZXMsIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgd29yZHMgPSBieXRlcyAvIDQsXG4gICAgICAgIG5hdGl2ZUFycmF5ID0gd29yZHMgPT0gREVGQVVMVF9CTE9DS0xFTkdUSF9XT1JEUyA/IGJsb2NrUmFuZG9tQXJyYXkgOiBuZXcgVWludDMyQXJyYXkod29yZHMpO1xuICAgICAgY29uZmlnLmdldFJhbmRvbVZhbHVlcyhuYXRpdmVBcnJheSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIGNhbGxiYWNrKGVyciwgYnVmZmVyVXRpbHMudG9Xb3JkQXJyYXkobmF0aXZlQXJyYXkpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBnZW5lcmF0ZVJhbmRvbSA9IGZ1bmN0aW9uIChieXRlcywgY2FsbGJhY2spIHtcbiAgICAgIF9jb21tb25fbGliX3V0aWxfbG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19fZGVmYXVsdC5hLmxvZ0FjdGlvbihcbiAgICAgICAgX2NvbW1vbl9saWJfdXRpbF9sb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX19kZWZhdWx0LmEuTE9HX01BSk9SLFxuICAgICAgICAnQWJseS5DcnlwdG8uZ2VuZXJhdGVSYW5kb20oKScsXG4gICAgICAgICdXYXJuaW5nOiB0aGUgYnJvd3NlciB5b3UgYXJlIHVzaW5nIGRvZXMgbm90IHN1cHBvcnQgc2VjdXJlIGNyeXB0b2dyYXBoaWNhbGx5IHNlY3VyZSByYW5kb21uZXNzIGdlbmVyYXRpb247IGZhbGxpbmcgYmFjayB0byBpbnNlY3VyZSBNYXRoLnJhbmRvbSgpJ1xuICAgICAgKTtcbiAgICAgIHZhciB3b3JkcyA9IGJ5dGVzIC8gNCxcbiAgICAgICAgYXJyYXkgPSBuZXcgQXJyYXkod29yZHMpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB3b3JkczsgaSsrKSB7XG4gICAgICAgIC8qIGNyeXB0b2pzIHdvcmRhcnJheXMgdXNlIHNpZ25lZCBpbnRzLiBXaGVuIFdvcmRBcnJheS5jcmVhdGUgaXMgZmVkIGFcbiAgICAgICAgICogVWludDMyQXJyYXkgdW5zaWduZWQgYXJlIGNvbnZlcnRlZCB0byBzaWduZWQgYXV0b21hdGljYWxseSwgYnV0IHdoZW5cbiAgICAgICAgICogZmVkIGEgbm9ybWFsIGFycmF5IHRoZXkgYXJlbid0LCBzbyBuZWVkIHRvIGRvIHNvIG91cnNlbHZlcyBieVxuICAgICAgICAgKiBzdWJ0cmFjdGluZyBJTlQzMl9TVVAgKi9cbiAgICAgICAgYXJyYXlbaV0gPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBVSU5UMzJfU1VQKSAtIElOVDMyX1NVUDtcbiAgICAgIH1cblxuICAgICAgY2FsbGJhY2sobnVsbCwgY3J5cHRvX2pzX2J1aWxkX2xpYl90eXBlZGFycmF5c19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQuYS5jcmVhdGUoYXJyYXkpKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEludGVybmFsOiBjYWxjdWxhdGUgdGhlIHBhZGRlZCBsZW5ndGggb2YgYSBnaXZlbiBwbGFpbnRleHRcbiAgICogdXNpbmcgUEtDUzUuXG4gICAqIEBwYXJhbSBwbGFpbnRleHRMZW5ndGhcbiAgICogQHJldHVyblxuICAgKi9cbiAgZnVuY3Rpb24gZ2V0UGFkZGVkTGVuZ3RoKHBsYWludGV4dExlbmd0aCkge1xuICAgIHJldHVybiAocGxhaW50ZXh0TGVuZ3RoICsgREVGQVVMVF9CTE9DS0xFTkdUSCkgJiAtREVGQVVMVF9CTE9DS0xFTkdUSDtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnRlcm5hbDogY2hlY2tzIHRoYXQgdGhlIGNpcGhlclBhcmFtcyBhcmUgYSB2YWxpZCBjb21iaW5hdGlvbi4gQ3VycmVudGx5XG4gICAqIGp1c3QgY2hlY2tzIHRoYXQgdGhlIGNhbGN1bGF0ZWQga2V5TGVuZ3RoIGlzIGEgdmFsaWQgb25lIGZvciBhZXMtY2JjXG4gICAqL1xuICBmdW5jdGlvbiB2YWxpZGF0ZUNpcGhlclBhcmFtcyhwYXJhbXMpIHtcbiAgICBpZiAocGFyYW1zLmFsZ29yaXRobSA9PT0gJ2FlcycgJiYgcGFyYW1zLm1vZGUgPT09ICdjYmMnKSB7XG4gICAgICBpZiAocGFyYW1zLmtleUxlbmd0aCA9PT0gMTI4IHx8IHBhcmFtcy5rZXlMZW5ndGggPT09IDI1Nikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdVbnN1cHBvcnRlZCBrZXkgbGVuZ3RoICcgK1xuICAgICAgICAgIHBhcmFtcy5rZXlMZW5ndGggK1xuICAgICAgICAgICcgZm9yIGFlcy1jYmMgZW5jcnlwdGlvbi4gRW5jcnlwdGlvbiBrZXkgbXVzdCBiZSAxMjggb3IgMjU2IGJpdHMgKDE2IG9yIDMyIEFTQ0lJIGNoYXJhY3RlcnMpJ1xuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBub3JtYWxpc2VCYXNlNjQoc3RyaW5nKSB7XG4gICAgLyogdXJsLXNhZmUgYmFzZTY0IHN0cmluZ3MgdXNlIF8gYW5kIC0gaW5zdHJlYWQgb2YgLyBhbmQgKyAqL1xuICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgnXycsICcvJykucmVwbGFjZSgnLScsICcrJyk7XG4gIH1cblxuICAvKipcbiAgICogSW50ZXJuYWw6IG9idGFpbiB0aGUgcGtjczUgcGFkZGluZyBzdHJpbmcgZm9yIGEgZ2l2ZW4gcGFkZGVkIGxlbmd0aDtcbiAgICovXG4gIHZhciBwa2NzNVBhZGRpbmcgPSBbXG4gICAgY3J5cHRvX2pzX2J1aWxkX2xpYl90eXBlZGFycmF5c19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQuYS5jcmVhdGUoWzB4MTAxMDEwMTAsIDB4MTAxMDEwMTAsIDB4MTAxMDEwMTAsIDB4MTAxMDEwMTBdLCAxNiksXG4gICAgY3J5cHRvX2pzX2J1aWxkX2xpYl90eXBlZGFycmF5c19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQuYS5jcmVhdGUoWzB4MDEwMDAwMDBdLCAxKSxcbiAgICBjcnlwdG9fanNfYnVpbGRfbGliX3R5cGVkYXJyYXlzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdC5hLmNyZWF0ZShbMHgwMjAyMDAwMF0sIDIpLFxuICAgIGNyeXB0b19qc19idWlsZF9saWJfdHlwZWRhcnJheXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0LmEuY3JlYXRlKFsweDAzMDMwMzAwXSwgMyksXG4gICAgY3J5cHRvX2pzX2J1aWxkX2xpYl90eXBlZGFycmF5c19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQuYS5jcmVhdGUoWzB4MDQwNDA0MDRdLCA0KSxcbiAgICBjcnlwdG9fanNfYnVpbGRfbGliX3R5cGVkYXJyYXlzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdC5hLmNyZWF0ZShbMHgwNTA1MDUwNSwgMHgwNTAwMDAwMF0sIDUpLFxuICAgIGNyeXB0b19qc19idWlsZF9saWJfdHlwZWRhcnJheXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0LmEuY3JlYXRlKFsweDA2MDYwNjA2LCAweDA2MDYwMDAwXSwgNiksXG4gICAgY3J5cHRvX2pzX2J1aWxkX2xpYl90eXBlZGFycmF5c19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQuYS5jcmVhdGUoWzB4MDcwNzA3MDcsIDB4MDcwNzA3MDBdLCA3KSxcbiAgICBjcnlwdG9fanNfYnVpbGRfbGliX3R5cGVkYXJyYXlzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdC5hLmNyZWF0ZShbMHgwODA4MDgwOCwgMHgwODA4MDgwOF0sIDgpLFxuICAgIGNyeXB0b19qc19idWlsZF9saWJfdHlwZWRhcnJheXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0LmEuY3JlYXRlKFsweDA5MDkwOTA5LCAweDA5MDkwOTA5LCAweDA5MDAwMDAwXSwgOSksXG4gICAgY3J5cHRvX2pzX2J1aWxkX2xpYl90eXBlZGFycmF5c19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQuYS5jcmVhdGUoWzB4MGEwYTBhMGEsIDB4MGEwYTBhMGEsIDB4MGEwYTAwMDBdLCAxMCksXG4gICAgY3J5cHRvX2pzX2J1aWxkX2xpYl90eXBlZGFycmF5c19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQuYS5jcmVhdGUoWzB4MGIwYjBiMGIsIDB4MGIwYjBiMGIsIDB4MGIwYjBiMDBdLCAxMSksXG4gICAgY3J5cHRvX2pzX2J1aWxkX2xpYl90eXBlZGFycmF5c19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQuYS5jcmVhdGUoWzB4MGMwYzBjMGMsIDB4MGMwYzBjMGMsIDB4MGMwYzBjMGNdLCAxMiksXG4gICAgY3J5cHRvX2pzX2J1aWxkX2xpYl90eXBlZGFycmF5c19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQuYS5jcmVhdGUoWzB4MGQwZDBkMGQsIDB4MGQwZDBkMGQsIDB4MGQwZDBkMGQsIDB4MGQwMDAwMDBdLCAxMyksXG4gICAgY3J5cHRvX2pzX2J1aWxkX2xpYl90eXBlZGFycmF5c19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQuYS5jcmVhdGUoWzB4MGUwZTBlMGUsIDB4MGUwZTBlMGUsIDB4MGUwZTBlMGUsIDB4MGUwZTAwMDBdLCAxNCksXG4gICAgY3J5cHRvX2pzX2J1aWxkX2xpYl90eXBlZGFycmF5c19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQuYS5jcmVhdGUoWzB4MGYwZjBmMGYsIDB4MGYwZjBmMGYsIDB4MGYwZjBmMGYsIDB4MGYwZjBmMGZdLCAxNSksXG4gICAgY3J5cHRvX2pzX2J1aWxkX2xpYl90eXBlZGFycmF5c19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQuYS5jcmVhdGUoWzB4MTAxMDEwMTAsIDB4MTAxMDEwMTAsIDB4MTAxMDEwMTAsIDB4MTAxMDEwMTBdLCAxNiksXG4gIF07XG5cbiAgLyoqXG4gICAqIFV0aWxpdHkgY2xhc3NlcyBhbmQgaW50ZXJmYWNlcyBmb3IgbWVzc2FnZSBwYXlsb2FkIGVuY3J5cHRpb24uXG4gICAqXG4gICAqIFRoaXMgY2xhc3Mgc3VwcG9ydHMgQUVTL0NCQy9QS0NTNSB3aXRoIGEgZGVmYXVsdCBrZXlsZW5ndGggb2YgMTI4IGJpdHNcbiAgICogYnV0IHN1cHBvcnRpbmcgb3RoZXIga2V5bGVuZ3Rocy4gT3RoZXIgYWxnb3JpdGhtcyBhbmQgY2hhaW5pbmcgbW9kZXMgYXJlXG4gICAqIG5vdCBzdXBwb3J0ZWQgZGlyZWN0bHksIGJ1dCBzdXBwb3J0YWJsZSBieSBleHRlbmRpbmcvaW1wbGVtZW50aW5nIHRoZSBiYXNlXG4gICAqIGNsYXNzZXMgYW5kIGludGVyZmFjZXMgaGVyZS5cbiAgICotXG4gICAqIFNlY3VyZSByYW5kb20gZGF0YSBmb3IgY3JlYXRpb24gb2YgSW5pdGlhbGl6YXRpb24gVmVjdG9ycyAoSVZzKSBhbmQga2V5c1xuICAgKiBpcyBvYnRhaW5lZCBmcm9tIHdpbmRvdy5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzIGlmIGF2YWlsYWJsZSwgb3IgZnJvbVxuICAgKiBNYXRoLnJhbmRvbSgpIGlmIG5vdC4gQ2xpZW50cyB3aG8gZG8gbm90IHdhbnQgdG8gZGVwZW5kIG9uIE1hdGgucmFuZG9tKClcbiAgICogc2hvdWxkIHBvbHlmaWxsIHdpbmRvdy5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzIHdpdGggYSBsaWJyYXJ5IHRoYXQgc2VlZHNcbiAgICogYSBQUk5HIHdpdGggcmVhbCBlbnRyb3B5LlxuICAgKlxuICAgKiBFYWNoIG1lc3NhZ2UgcGF5bG9hZCBpcyBlbmNyeXB0ZWQgd2l0aCBhbiBJViBpbiBDQkMgbW9kZSwgYW5kIHRoZSBJViBpc1xuICAgKiBjb25jYXRlbmF0ZWQgd2l0aCB0aGUgcmVzdWx0aW5nIHJhdyBjaXBoZXJ0ZXh0IHRvIGNvbnN0cnVjdCB0aGUgXCJjaXBoZXJ0ZXh0XCJcbiAgICogZGF0YSBwYXNzZWQgdG8gdGhlIHJlY2lwaWVudC5cbiAgICovXG4gIGZ1bmN0aW9uIENyeXB0bygpIHt9XG5cbiAgLyoqXG4gICAqIEEgY2xhc3MgZW5jYXBzdWxhdGluZyB0aGUgY2xpZW50LXNwZWNpZmlhYmxlIHBhcmFtZXRlcnMgZm9yXG4gICAqIHRoZSBjaXBoZXIuXG4gICAqXG4gICAqIGFsZ29yaXRobSBpcyB0aGUgbmFtZSBvZiB0aGUgYWxnb3JpdGhtIGluIHRoZSBkZWZhdWx0IHN5c3RlbSBwcm92aWRlcixcbiAgICogb3IgdGhlIGxvd2VyLWNhc2VkIHZlcnNpb24gb2YgaXQ7IGVnIFwiYWVzXCIgb3IgXCJBRVNcIi5cbiAgICpcbiAgICogQ2xpZW50cyBhcmUgcmVjb21tZW5kZWQgdG8gbm90IGNhbGwgdGhpcyBkaXJlY3RseSwgYnV0IGluc3RlYWQgdG8gdXNlIHRoZVxuICAgKiBDcnlwdG8uZ2V0RGVmYXVsdFBhcmFtcyBoZWxwZXIsIHdoaWNoIHdpbGwgZmlsbCBpbiBhbnkgZmllbGRzIG5vdCBzdXBwbGllZFxuICAgKiB3aXRoIGRlZmF1bHQgdmFsdWVzIGFuZCB2YWxpZGF0aW9uIHRoZSByZXN1bHQuXG4gICAqL1xuICBmdW5jdGlvbiBDaXBoZXJQYXJhbXMoKSB7XG4gICAgdGhpcy5hbGdvcml0aG0gPSBudWxsO1xuICAgIHRoaXMua2V5TGVuZ3RoID0gbnVsbDtcbiAgICB0aGlzLm1vZGUgPSBudWxsO1xuICAgIHRoaXMua2V5ID0gbnVsbDtcbiAgfVxuICBDcnlwdG8uQ2lwaGVyUGFyYW1zID0gQ2lwaGVyUGFyYW1zO1xuXG4gIC8qKlxuICAgKiBPYnRhaW4gYSBjb21wbGV0ZSBDaXBoZXJQYXJhbXMgaW5zdGFuY2UgZnJvbSB0aGUgcHJvdmlkZWQgcGFyYW1zLCBmaWxsaW5nXG4gICAqIGluIGFueSBub3QgcHJvdmlkZWQgd2l0aCBkZWZhdWx0IHZhbHVlcywgY2FsY3VsYXRpbmcgYSBrZXlMZW5ndGggZnJvbVxuICAgKiB0aGUgc3VwcGxpZWQga2V5LCBhbmQgdmFsaWRhdGluZyB0aGUgcmVzdWx0LlxuICAgKiBAcGFyYW0gcGFyYW1zIGFuIG9iamVjdCBjb250YWluaW5nIGF0IGEgbWluaW11bSBhIGBrZXlgIGtleSB3aXRoIHZhbHVlIHRoZVxuICAgKiBrZXksIGFzIGVpdGhlciBhIGJpbmFyeSAoQXJyYXlCdWZmZXIsIEFycmF5LCBXb3JkQXJyYXkpIG9yIGFcbiAgICogYmFzZTY0LWVuY29kZWQgc3RyaW5nLiBNYXkgb3B0aW9uYWxseSBhbHNvIGNvbnRhaW46IGFsZ29yaXRobSAoZGVmYXVsdHMgdG9cbiAgICogQUVTKSwgbW9kZSAoZGVmYXVsdHMgdG8gJ2NiYycpXG4gICAqL1xuICBDcnlwdG8uZ2V0RGVmYXVsdFBhcmFtcyA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICB2YXIga2V5O1xuICAgIC8qIEJhY2t3YXJkIGNvbXBhdGliaWxpdHkgKi9cbiAgICBpZiAodHlwZW9mIHBhcmFtcyA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgcGFyYW1zID09PSAnc3RyaW5nJykge1xuICAgICAgX2NvbW1vbl9saWJfdXRpbF9sb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX19kZWZhdWx0LmEuZGVwcmVjYXRlZCgnQ3J5cHRvLmdldERlZmF1bHRQYXJhbXMoa2V5LCBjYWxsYmFjayknLCAnQ3J5cHRvLmdldERlZmF1bHRQYXJhbXMoe2tleToga2V5fSknKTtcbiAgICAgIGlmICh0eXBlb2YgcGFyYW1zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIENyeXB0by5nZW5lcmF0ZVJhbmRvbUtleShmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgcGFyYW1zKG51bGwsIENyeXB0by5nZXREZWZhdWx0UGFyYW1zKHsga2V5OiBrZXkgfSkpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGFyZ3VtZW50c1sxXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBhcmd1bWVudHNbMV0obnVsbCwgQ3J5cHRvLmdldERlZmF1bHRQYXJhbXMoeyBrZXk6IHBhcmFtcyB9KSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgYXJndW1lbnRzIGZvciBDcnlwdG8uZ2V0RGVmYXVsdFBhcmFtcycpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghcGFyYW1zLmtleSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDcnlwdG8uZ2V0RGVmYXVsdFBhcmFtczogYSBrZXkgaXMgcmVxdWlyZWQnKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHBhcmFtcy5rZXkgPT09ICdzdHJpbmcnKSB7XG4gICAgICBrZXkgPSBPYmplY3QoY3J5cHRvX2pzX2J1aWxkX2VuY19iYXNlNjRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX1tcInBhcnNlXCJdKShub3JtYWxpc2VCYXNlNjQocGFyYW1zLmtleSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBrZXkgPSBidWZmZXJVdGlscy50b1dvcmRBcnJheShwYXJhbXMua2V5KTsgLy8gRXhwZWN0IGtleSB0byBiZSBhbiBBcnJheSwgQXJyYXlCdWZmZXIsIG9yIFdvcmRBcnJheSBhdCB0aGlzIHBvaW50XG4gICAgfVxuXG4gICAgdmFyIGNpcGhlclBhcmFtcyA9IG5ldyBDaXBoZXJQYXJhbXMoKTtcbiAgICBjaXBoZXJQYXJhbXMua2V5ID0ga2V5O1xuICAgIGNpcGhlclBhcmFtcy5hbGdvcml0aG0gPSBwYXJhbXMuYWxnb3JpdGhtIHx8IERFRkFVTFRfQUxHT1JJVEhNO1xuICAgIGNpcGhlclBhcmFtcy5rZXlMZW5ndGggPSBrZXkud29yZHMubGVuZ3RoICogKDQgKiA4KTtcbiAgICBjaXBoZXJQYXJhbXMubW9kZSA9IHBhcmFtcy5tb2RlIHx8IERFRkFVTFRfTU9ERTtcblxuICAgIGlmIChwYXJhbXMua2V5TGVuZ3RoICYmIHBhcmFtcy5rZXlMZW5ndGggIT09IGNpcGhlclBhcmFtcy5rZXlMZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0NyeXB0by5nZXREZWZhdWx0UGFyYW1zOiBhIGtleUxlbmd0aCBvZiAnICtcbiAgICAgICAgICBwYXJhbXMua2V5TGVuZ3RoICtcbiAgICAgICAgICAnIHdhcyBzcGVjaWZpZWQsIGJ1dCB0aGUga2V5IGFjdHVhbGx5IGhhcyBsZW5ndGggJyArXG4gICAgICAgICAgY2lwaGVyUGFyYW1zLmtleUxlbmd0aFxuICAgICAgKTtcbiAgICB9XG5cbiAgICB2YWxpZGF0ZUNpcGhlclBhcmFtcyhjaXBoZXJQYXJhbXMpO1xuICAgIHJldHVybiBjaXBoZXJQYXJhbXM7XG4gIH07XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlIGEgcmFuZG9tIGVuY3J5cHRpb24ga2V5IGZyb20gdGhlIHN1cHBsaWVkIGtleWxlbmd0aCAob3IgdGhlXG4gICAqIGRlZmF1bHQga2V5TGVuZ3RoIGlmIG5vbmUgc3VwcGxpZWQpIGFzIGEgQ3J5cHRvSlMgV29yZEFycmF5XG4gICAqIEBwYXJhbSBrZXlMZW5ndGggKG9wdGlvbmFsKSB0aGUgcmVxdWlyZWQga2V5TGVuZ3RoIGluIGJpdHNcbiAgICogQHBhcmFtIGNhbGxiYWNrIChvcHRpb25hbCkgKGVyciwga2V5KVxuICAgKi9cbiAgQ3J5cHRvLmdlbmVyYXRlUmFuZG9tS2V5ID0gZnVuY3Rpb24gKGtleUxlbmd0aCwgY2FsbGJhY2spIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSAxICYmIHR5cGVvZiBrZXlMZW5ndGggPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY2FsbGJhY2sgPSBrZXlMZW5ndGg7XG4gICAgICBrZXlMZW5ndGggPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgZ2VuZXJhdGVSYW5kb20oKGtleUxlbmd0aCB8fCBERUZBVUxUX0tFWUxFTkdUSCkgLyA4LCBmdW5jdGlvbiAoZXJyLCBidWYpIHtcbiAgICAgIGlmIChjYWxsYmFjayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNhbGxiYWNrKGVyciA/IGNvbW1vbl9saWJfdHlwZXNfZXJyb3JpbmZvX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19fZGVmYXVsdC5hLmZyb21WYWx1ZXMoZXJyKSA6IG51bGwsIGJ1Zik7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEludGVybmFsOyBnZXQgYSBDaGFubmVsQ2lwaGVyIGluc3RhbmNlIGJhc2VkIG9uIHRoZSBnaXZlbiBjaXBoZXJQYXJhbXNcbiAgICogQHBhcmFtIHBhcmFtcyBlaXRoZXIgYSBDaXBoZXJQYXJhbXMgaW5zdGFuY2Ugb3Igc29tZSBzdWJzZXQgb2YgaXRzXG4gICAqIGZpZWxkcyB0aGF0IGluY2x1ZGVzIGEga2V5XG4gICAqL1xuICBDcnlwdG8uZ2V0Q2lwaGVyID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgIHZhciBjaXBoZXJQYXJhbXMgPSBwYXJhbXMgaW5zdGFuY2VvZiBDaXBoZXJQYXJhbXMgPyBwYXJhbXMgOiBDcnlwdG8uZ2V0RGVmYXVsdFBhcmFtcyhwYXJhbXMpO1xuXG4gICAgcmV0dXJuIHsgY2lwaGVyUGFyYW1zOiBjaXBoZXJQYXJhbXMsIGNpcGhlcjogbmV3IENCQ0NpcGhlcihjaXBoZXJQYXJhbXMsIERFRkFVTFRfQkxPQ0tMRU5HVEhfV09SRFMsIHBhcmFtcy5pdikgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBDQkNDaXBoZXIocGFyYW1zLCBibG9ja0xlbmd0aFdvcmRzLCBpdikge1xuICAgIHRoaXMuYWxnb3JpdGhtID0gcGFyYW1zLmFsZ29yaXRobSArICctJyArIFN0cmluZyhwYXJhbXMua2V5TGVuZ3RoKSArICctJyArIHBhcmFtcy5tb2RlO1xuICAgIHRoaXMuY2pzQWxnb3JpdGhtID0gcGFyYW1zLmFsZ29yaXRobS50b1VwcGVyQ2FzZSgpLnJlcGxhY2UoLy1cXGQrJC8sICcnKTtcbiAgICB0aGlzLmtleSA9IGJ1ZmZlclV0aWxzLnRvV29yZEFycmF5KHBhcmFtcy5rZXkpO1xuICAgIGlmIChpdikge1xuICAgICAgdGhpcy5pdiA9IGJ1ZmZlclV0aWxzLnRvV29yZEFycmF5KGl2KS5jbG9uZSgpO1xuICAgIH1cbiAgICB0aGlzLmJsb2NrTGVuZ3RoV29yZHMgPSBibG9ja0xlbmd0aFdvcmRzO1xuICB9XG5cbiAgQ0JDQ2lwaGVyLnByb3RvdHlwZS5lbmNyeXB0ID0gZnVuY3Rpb24gKHBsYWludGV4dCwgY2FsbGJhY2spIHtcbiAgICBfY29tbW9uX2xpYl91dGlsX2xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fX2RlZmF1bHQuYS5sb2dBY3Rpb24oX2NvbW1vbl9saWJfdXRpbF9sb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX19kZWZhdWx0LmEuTE9HX01JQ1JPLCAnQ0JDQ2lwaGVyLmVuY3J5cHQoKScsICcnKTtcbiAgICBwbGFpbnRleHQgPSBidWZmZXJVdGlscy50b1dvcmRBcnJheShwbGFpbnRleHQpO1xuICAgIHZhciBwbGFpbnRleHRMZW5ndGggPSBwbGFpbnRleHQuc2lnQnl0ZXMsXG4gICAgICBwYWRkZWRMZW5ndGggPSBnZXRQYWRkZWRMZW5ndGgocGxhaW50ZXh0TGVuZ3RoKSxcbiAgICAgIHNlbGYgPSB0aGlzO1xuXG4gICAgdmFyIHRoZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICBzZWxmLmdldEl2KGZ1bmN0aW9uIChlcnIsIGl2KSB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICBjYWxsYmFjayhlcnIpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2lwaGVyT3V0ID0gc2VsZi5lbmNyeXB0Q2lwaGVyLnByb2Nlc3MocGxhaW50ZXh0LmNvbmNhdChwa2NzNVBhZGRpbmdbcGFkZGVkTGVuZ3RoIC0gcGxhaW50ZXh0TGVuZ3RoXSkpO1xuICAgICAgICB2YXIgY2lwaGVydGV4dCA9IGl2LmNvbmNhdChjaXBoZXJPdXQpO1xuICAgICAgICBjYWxsYmFjayhudWxsLCBjaXBoZXJ0ZXh0KTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBpZiAoIXRoaXMuZW5jcnlwdENpcGhlcikge1xuICAgICAgaWYgKHRoaXMuaXYpIHtcbiAgICAgICAgdGhpcy5lbmNyeXB0Q2lwaGVyID0gY3J5cHRvX2pzX2J1aWxkX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19fZGVmYXVsdC5hLmFsZ29bdGhpcy5janNBbGdvcml0aG1dLmNyZWF0ZUVuY3J5cHRvcih0aGlzLmtleSwgeyBpdjogdGhpcy5pdiB9KTtcbiAgICAgICAgdGhlbigpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZ2VuZXJhdGVSYW5kb20oREVGQVVMVF9CTE9DS0xFTkdUSCwgZnVuY3Rpb24gKGVyciwgaXYpIHtcbiAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhlcnIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzZWxmLmVuY3J5cHRDaXBoZXIgPSBjcnlwdG9fanNfYnVpbGRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX19kZWZhdWx0LmEuYWxnb1tzZWxmLmNqc0FsZ29yaXRobV0uY3JlYXRlRW5jcnlwdG9yKHNlbGYua2V5LCB7IGl2OiBpdiB9KTtcbiAgICAgICAgICBzZWxmLml2ID0gaXY7XG4gICAgICAgICAgdGhlbigpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhlbigpO1xuICAgIH1cbiAgfTtcblxuICBDQkNDaXBoZXIucHJvdG90eXBlLmRlY3J5cHQgPSBmdW5jdGlvbiAoY2lwaGVydGV4dCkge1xuICAgIF9jb21tb25fbGliX3V0aWxfbG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19fZGVmYXVsdC5hLmxvZ0FjdGlvbihfY29tbW9uX2xpYl91dGlsX2xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fX2RlZmF1bHQuYS5MT0dfTUlDUk8sICdDQkNDaXBoZXIuZGVjcnlwdCgpJywgJycpO1xuICAgIGNpcGhlcnRleHQgPSBidWZmZXJVdGlscy50b1dvcmRBcnJheShjaXBoZXJ0ZXh0KTtcbiAgICB2YXIgYmxvY2tMZW5ndGhXb3JkcyA9IHRoaXMuYmxvY2tMZW5ndGhXb3JkcyxcbiAgICAgIGNpcGhlcnRleHRXb3JkcyA9IGNpcGhlcnRleHQud29yZHMsXG4gICAgICBpdiA9IGNyeXB0b19qc19idWlsZF9saWJfdHlwZWRhcnJheXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0LmEuY3JlYXRlKGNpcGhlcnRleHRXb3Jkcy5zbGljZSgwLCBibG9ja0xlbmd0aFdvcmRzKSksXG4gICAgICBjaXBoZXJ0ZXh0Qm9keSA9IGNyeXB0b19qc19idWlsZF9saWJfdHlwZWRhcnJheXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0LmEuY3JlYXRlKGNpcGhlcnRleHRXb3Jkcy5zbGljZShibG9ja0xlbmd0aFdvcmRzKSk7XG5cbiAgICB2YXIgZGVjcnlwdENpcGhlciA9IGNyeXB0b19qc19idWlsZF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fX2RlZmF1bHQuYS5hbGdvW3RoaXMuY2pzQWxnb3JpdGhtXS5jcmVhdGVEZWNyeXB0b3IodGhpcy5rZXksIHsgaXY6IGl2IH0pO1xuICAgIHZhciBwbGFpbnRleHQgPSBkZWNyeXB0Q2lwaGVyLnByb2Nlc3MoY2lwaGVydGV4dEJvZHkpO1xuICAgIHZhciBlcGlsb2d1ZSA9IGRlY3J5cHRDaXBoZXIuZmluYWxpemUoKTtcbiAgICBkZWNyeXB0Q2lwaGVyLnJlc2V0KCk7XG4gICAgaWYgKGVwaWxvZ3VlICYmIGVwaWxvZ3VlLnNpZ0J5dGVzKSBwbGFpbnRleHQuY29uY2F0KGVwaWxvZ3VlKTtcbiAgICByZXR1cm4gcGxhaW50ZXh0O1xuICB9O1xuXG4gIENCQ0NpcGhlci5wcm90b3R5cGUuZ2V0SXYgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICBpZiAodGhpcy5pdikge1xuICAgICAgdmFyIGl2ID0gdGhpcy5pdjtcbiAgICAgIHRoaXMuaXYgPSBudWxsO1xuICAgICAgY2FsbGJhY2sobnVsbCwgaXYpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8qIFNpbmNlIHRoZSBpdiBmb3IgYSBuZXcgYmxvY2sgaXMgdGhlIGNpcGhlcnRleHQgb2YgdGhlIGxhc3QsIHRoaXNcbiAgICAgKiBzZXRzIGEgbmV3IGl2ICg9IGFlcyhyYW5kb21CbG9jayBYT1IgbGFzdENpcGhlclRleHQpKSBhcyB3ZWxsIGFzXG4gICAgICogcmV0dXJuaW5nIGl0ICovXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIGdlbmVyYXRlUmFuZG9tKERFRkFVTFRfQkxPQ0tMRU5HVEgsIGZ1bmN0aW9uIChlcnIsIHJhbmRvbUJsb2NrKSB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNhbGxiYWNrKG51bGwsIHNlbGYuZW5jcnlwdENpcGhlci5wcm9jZXNzKHJhbmRvbUJsb2NrKSk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIENyeXB0bztcbn07XG5cbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gX193ZWJwYWNrX2V4cG9ydHNfX1tcImRlZmF1bHRcIl0gPSAoQ3J5cHRvRmFjdG9yeSk7XG5cblxuLyoqKi8gfSksXG4vKiA1OCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG47KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7XG5cdGlmICh0cnVlKSB7XG5cdFx0Ly8gQ29tbW9uSlNcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KF9fd2VicGFja19yZXF1aXJlX18oNikpO1xuXHR9XG5cdGVsc2Uge31cbn0odGhpcywgZnVuY3Rpb24gKENyeXB0b0pTKSB7XG5cblx0KGZ1bmN0aW9uICgpIHtcblx0ICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgdmFyIEMgPSBDcnlwdG9KUztcblx0ICAgIHZhciBDX2xpYiA9IEMubGliO1xuXHQgICAgdmFyIFdvcmRBcnJheSA9IENfbGliLldvcmRBcnJheTtcblx0ICAgIHZhciBDX2VuYyA9IEMuZW5jO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFVURi0xNiBCRSBlbmNvZGluZyBzdHJhdGVneS5cblx0ICAgICAqL1xuXHQgICAgdmFyIFV0ZjE2QkUgPSBDX2VuYy5VdGYxNiA9IENfZW5jLlV0ZjE2QkUgPSB7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgYSB3b3JkIGFycmF5IHRvIGEgVVRGLTE2IEJFIHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fSB3b3JkQXJyYXkgVGhlIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBVVEYtMTYgQkUgc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgdXRmMTZTdHJpbmcgPSBDcnlwdG9KUy5lbmMuVXRmMTYuc3RyaW5naWZ5KHdvcmRBcnJheSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgc3RyaW5naWZ5OiBmdW5jdGlvbiAod29yZEFycmF5KSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgd29yZHMgPSB3b3JkQXJyYXkud29yZHM7XG5cdCAgICAgICAgICAgIHZhciBzaWdCeXRlcyA9IHdvcmRBcnJheS5zaWdCeXRlcztcblxuXHQgICAgICAgICAgICAvLyBDb252ZXJ0XG5cdCAgICAgICAgICAgIHZhciB1dGYxNkNoYXJzID0gW107XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2lnQnl0ZXM7IGkgKz0gMikge1xuXHQgICAgICAgICAgICAgICAgdmFyIGNvZGVQb2ludCA9ICh3b3Jkc1tpID4+PiAyXSA+Pj4gKDE2IC0gKGkgJSA0KSAqIDgpKSAmIDB4ZmZmZjtcblx0ICAgICAgICAgICAgICAgIHV0ZjE2Q2hhcnMucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGVQb2ludCkpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgcmV0dXJuIHV0ZjE2Q2hhcnMuam9pbignJyk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbnZlcnRzIGEgVVRGLTE2IEJFIHN0cmluZyB0byBhIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXRmMTZTdHIgVGhlIFVURi0xNiBCRSBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgd29yZEFycmF5ID0gQ3J5cHRvSlMuZW5jLlV0ZjE2LnBhcnNlKHV0ZjE2U3RyaW5nKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBwYXJzZTogZnVuY3Rpb24gKHV0ZjE2U3RyKSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0XG5cdCAgICAgICAgICAgIHZhciB1dGYxNlN0ckxlbmd0aCA9IHV0ZjE2U3RyLmxlbmd0aDtcblxuXHQgICAgICAgICAgICAvLyBDb252ZXJ0XG5cdCAgICAgICAgICAgIHZhciB3b3JkcyA9IFtdO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHV0ZjE2U3RyTGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIHdvcmRzW2kgPj4+IDFdIHw9IHV0ZjE2U3RyLmNoYXJDb2RlQXQoaSkgPDwgKDE2IC0gKGkgJSAyKSAqIDE2KTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHJldHVybiBXb3JkQXJyYXkuY3JlYXRlKHdvcmRzLCB1dGYxNlN0ckxlbmd0aCAqIDIpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cblx0ICAgIC8qKlxuXHQgICAgICogVVRGLTE2IExFIGVuY29kaW5nIHN0cmF0ZWd5LlxuXHQgICAgICovXG5cdCAgICBDX2VuYy5VdGYxNkxFID0ge1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbnZlcnRzIGEgd29yZCBhcnJheSB0byBhIFVURi0xNiBMRSBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheX0gd29yZEFycmF5IFRoZSB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgVVRGLTE2IExFIHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHV0ZjE2U3RyID0gQ3J5cHRvSlMuZW5jLlV0ZjE2TEUuc3RyaW5naWZ5KHdvcmRBcnJheSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgc3RyaW5naWZ5OiBmdW5jdGlvbiAod29yZEFycmF5KSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgd29yZHMgPSB3b3JkQXJyYXkud29yZHM7XG5cdCAgICAgICAgICAgIHZhciBzaWdCeXRlcyA9IHdvcmRBcnJheS5zaWdCeXRlcztcblxuXHQgICAgICAgICAgICAvLyBDb252ZXJ0XG5cdCAgICAgICAgICAgIHZhciB1dGYxNkNoYXJzID0gW107XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2lnQnl0ZXM7IGkgKz0gMikge1xuXHQgICAgICAgICAgICAgICAgdmFyIGNvZGVQb2ludCA9IHN3YXBFbmRpYW4oKHdvcmRzW2kgPj4+IDJdID4+PiAoMTYgLSAoaSAlIDQpICogOCkpICYgMHhmZmZmKTtcblx0ICAgICAgICAgICAgICAgIHV0ZjE2Q2hhcnMucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGVQb2ludCkpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgcmV0dXJuIHV0ZjE2Q2hhcnMuam9pbignJyk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbnZlcnRzIGEgVVRGLTE2IExFIHN0cmluZyB0byBhIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXRmMTZTdHIgVGhlIFVURi0xNiBMRSBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgd29yZEFycmF5ID0gQ3J5cHRvSlMuZW5jLlV0ZjE2TEUucGFyc2UodXRmMTZTdHIpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHBhcnNlOiBmdW5jdGlvbiAodXRmMTZTdHIpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICAgICAgdmFyIHV0ZjE2U3RyTGVuZ3RoID0gdXRmMTZTdHIubGVuZ3RoO1xuXG5cdCAgICAgICAgICAgIC8vIENvbnZlcnRcblx0ICAgICAgICAgICAgdmFyIHdvcmRzID0gW107XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdXRmMTZTdHJMZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgd29yZHNbaSA+Pj4gMV0gfD0gc3dhcEVuZGlhbih1dGYxNlN0ci5jaGFyQ29kZUF0KGkpIDw8ICgxNiAtIChpICUgMikgKiAxNikpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgcmV0dXJuIFdvcmRBcnJheS5jcmVhdGUod29yZHMsIHV0ZjE2U3RyTGVuZ3RoICogMik7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblxuXHQgICAgZnVuY3Rpb24gc3dhcEVuZGlhbih3b3JkKSB7XG5cdCAgICAgICAgcmV0dXJuICgod29yZCA8PCA4KSAmIDB4ZmYwMGZmMDApIHwgKCh3b3JkID4+PiA4KSAmIDB4MDBmZjAwZmYpO1xuXHQgICAgfVxuXHR9KCkpO1xuXG5cblx0cmV0dXJuIENyeXB0b0pTLmVuYy5VdGYxNjtcblxufSkpO1xuXG4vKioqLyB9KSxcbi8qIDU5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbjsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYgKHRydWUpIHtcblx0XHQvLyBDb21tb25KU1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkoX193ZWJwYWNrX3JlcXVpcmVfXyg2KSwgX193ZWJwYWNrX3JlcXVpcmVfXygyOCkpO1xuXHR9XG5cdGVsc2Uge31cbn0odGhpcywgZnVuY3Rpb24gKENyeXB0b0pTKSB7XG5cblx0KGZ1bmN0aW9uICh1bmRlZmluZWQpIHtcblx0ICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgdmFyIEMgPSBDcnlwdG9KUztcblx0ICAgIHZhciBDX2xpYiA9IEMubGliO1xuXHQgICAgdmFyIENpcGhlclBhcmFtcyA9IENfbGliLkNpcGhlclBhcmFtcztcblx0ICAgIHZhciBDX2VuYyA9IEMuZW5jO1xuXHQgICAgdmFyIEhleCA9IENfZW5jLkhleDtcblx0ICAgIHZhciBDX2Zvcm1hdCA9IEMuZm9ybWF0O1xuXG5cdCAgICB2YXIgSGV4Rm9ybWF0dGVyID0gQ19mb3JtYXQuSGV4ID0ge1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbnZlcnRzIHRoZSBjaXBoZXJ0ZXh0IG9mIGEgY2lwaGVyIHBhcmFtcyBvYmplY3QgdG8gYSBoZXhhZGVjaW1hbGx5IGVuY29kZWQgc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtDaXBoZXJQYXJhbXN9IGNpcGhlclBhcmFtcyBUaGUgY2lwaGVyIHBhcmFtcyBvYmplY3QuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBoZXhhZGVjaW1hbGx5IGVuY29kZWQgc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgaGV4U3RyaW5nID0gQ3J5cHRvSlMuZm9ybWF0LkhleC5zdHJpbmdpZnkoY2lwaGVyUGFyYW1zKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBzdHJpbmdpZnk6IGZ1bmN0aW9uIChjaXBoZXJQYXJhbXMpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIGNpcGhlclBhcmFtcy5jaXBoZXJ0ZXh0LnRvU3RyaW5nKEhleCk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbnZlcnRzIGEgaGV4YWRlY2ltYWxseSBlbmNvZGVkIGNpcGhlcnRleHQgc3RyaW5nIHRvIGEgY2lwaGVyIHBhcmFtcyBvYmplY3QuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gaW5wdXQgVGhlIGhleGFkZWNpbWFsbHkgZW5jb2RlZCBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtDaXBoZXJQYXJhbXN9IFRoZSBjaXBoZXIgcGFyYW1zIG9iamVjdC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGNpcGhlclBhcmFtcyA9IENyeXB0b0pTLmZvcm1hdC5IZXgucGFyc2UoaGV4U3RyaW5nKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBwYXJzZTogZnVuY3Rpb24gKGlucHV0KSB7XG5cdCAgICAgICAgICAgIHZhciBjaXBoZXJ0ZXh0ID0gSGV4LnBhcnNlKGlucHV0KTtcblx0ICAgICAgICAgICAgcmV0dXJuIENpcGhlclBhcmFtcy5jcmVhdGUoeyBjaXBoZXJ0ZXh0OiBjaXBoZXJ0ZXh0IH0pO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdH0oKSk7XG5cblxuXHRyZXR1cm4gQ3J5cHRvSlMuZm9ybWF0LkhleDtcblxufSkpO1xuXG4vKioqLyB9KSxcbi8qIDYwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbjsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYgKHRydWUpIHtcblx0XHQvLyBDb21tb25KU1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkoX193ZWJwYWNrX3JlcXVpcmVfXyg2KSwgX193ZWJwYWNrX3JlcXVpcmVfXygxMSksIF9fd2VicGFja19yZXF1aXJlX18oNjEpLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDI3KSwgX193ZWJwYWNrX3JlcXVpcmVfXygyOCkpO1xuXHR9XG5cdGVsc2Uge31cbn0odGhpcywgZnVuY3Rpb24gKENyeXB0b0pTKSB7XG5cblx0KGZ1bmN0aW9uICgpIHtcblx0ICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgdmFyIEMgPSBDcnlwdG9KUztcblx0ICAgIHZhciBDX2xpYiA9IEMubGliO1xuXHQgICAgdmFyIEJsb2NrQ2lwaGVyID0gQ19saWIuQmxvY2tDaXBoZXI7XG5cdCAgICB2YXIgQ19hbGdvID0gQy5hbGdvO1xuXG5cdCAgICAvLyBMb29rdXAgdGFibGVzXG5cdCAgICB2YXIgU0JPWCA9IFtdO1xuXHQgICAgdmFyIElOVl9TQk9YID0gW107XG5cdCAgICB2YXIgU1VCX01JWF8wID0gW107XG5cdCAgICB2YXIgU1VCX01JWF8xID0gW107XG5cdCAgICB2YXIgU1VCX01JWF8yID0gW107XG5cdCAgICB2YXIgU1VCX01JWF8zID0gW107XG5cdCAgICB2YXIgSU5WX1NVQl9NSVhfMCA9IFtdO1xuXHQgICAgdmFyIElOVl9TVUJfTUlYXzEgPSBbXTtcblx0ICAgIHZhciBJTlZfU1VCX01JWF8yID0gW107XG5cdCAgICB2YXIgSU5WX1NVQl9NSVhfMyA9IFtdO1xuXG5cdCAgICAvLyBDb21wdXRlIGxvb2t1cCB0YWJsZXNcblx0ICAgIChmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgLy8gQ29tcHV0ZSBkb3VibGUgdGFibGVcblx0ICAgICAgICB2YXIgZCA9IFtdO1xuXHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMjU2OyBpKyspIHtcblx0ICAgICAgICAgICAgaWYgKGkgPCAxMjgpIHtcblx0ICAgICAgICAgICAgICAgIGRbaV0gPSBpIDw8IDE7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICBkW2ldID0gKGkgPDwgMSkgXiAweDExYjtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIC8vIFdhbGsgR0YoMl44KVxuXHQgICAgICAgIHZhciB4ID0gMDtcblx0ICAgICAgICB2YXIgeGkgPSAwO1xuXHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMjU2OyBpKyspIHtcblx0ICAgICAgICAgICAgLy8gQ29tcHV0ZSBzYm94XG5cdCAgICAgICAgICAgIHZhciBzeCA9IHhpIF4gKHhpIDw8IDEpIF4gKHhpIDw8IDIpIF4gKHhpIDw8IDMpIF4gKHhpIDw8IDQpO1xuXHQgICAgICAgICAgICBzeCA9IChzeCA+Pj4gOCkgXiAoc3ggJiAweGZmKSBeIDB4NjM7XG5cdCAgICAgICAgICAgIFNCT1hbeF0gPSBzeDtcblx0ICAgICAgICAgICAgSU5WX1NCT1hbc3hdID0geDtcblxuXHQgICAgICAgICAgICAvLyBDb21wdXRlIG11bHRpcGxpY2F0aW9uXG5cdCAgICAgICAgICAgIHZhciB4MiA9IGRbeF07XG5cdCAgICAgICAgICAgIHZhciB4NCA9IGRbeDJdO1xuXHQgICAgICAgICAgICB2YXIgeDggPSBkW3g0XTtcblxuXHQgICAgICAgICAgICAvLyBDb21wdXRlIHN1YiBieXRlcywgbWl4IGNvbHVtbnMgdGFibGVzXG5cdCAgICAgICAgICAgIHZhciB0ID0gKGRbc3hdICogMHgxMDEpIF4gKHN4ICogMHgxMDEwMTAwKTtcblx0ICAgICAgICAgICAgU1VCX01JWF8wW3hdID0gKHQgPDwgMjQpIHwgKHQgPj4+IDgpO1xuXHQgICAgICAgICAgICBTVUJfTUlYXzFbeF0gPSAodCA8PCAxNikgfCAodCA+Pj4gMTYpO1xuXHQgICAgICAgICAgICBTVUJfTUlYXzJbeF0gPSAodCA8PCA4KSAgfCAodCA+Pj4gMjQpO1xuXHQgICAgICAgICAgICBTVUJfTUlYXzNbeF0gPSB0O1xuXG5cdCAgICAgICAgICAgIC8vIENvbXB1dGUgaW52IHN1YiBieXRlcywgaW52IG1peCBjb2x1bW5zIHRhYmxlc1xuXHQgICAgICAgICAgICB2YXIgdCA9ICh4OCAqIDB4MTAxMDEwMSkgXiAoeDQgKiAweDEwMDAxKSBeICh4MiAqIDB4MTAxKSBeICh4ICogMHgxMDEwMTAwKTtcblx0ICAgICAgICAgICAgSU5WX1NVQl9NSVhfMFtzeF0gPSAodCA8PCAyNCkgfCAodCA+Pj4gOCk7XG5cdCAgICAgICAgICAgIElOVl9TVUJfTUlYXzFbc3hdID0gKHQgPDwgMTYpIHwgKHQgPj4+IDE2KTtcblx0ICAgICAgICAgICAgSU5WX1NVQl9NSVhfMltzeF0gPSAodCA8PCA4KSAgfCAodCA+Pj4gMjQpO1xuXHQgICAgICAgICAgICBJTlZfU1VCX01JWF8zW3N4XSA9IHQ7XG5cblx0ICAgICAgICAgICAgLy8gQ29tcHV0ZSBuZXh0IGNvdW50ZXJcblx0ICAgICAgICAgICAgaWYgKCF4KSB7XG5cdCAgICAgICAgICAgICAgICB4ID0geGkgPSAxO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgeCA9IHgyIF4gZFtkW2RbeDggXiB4Ml1dXTtcblx0ICAgICAgICAgICAgICAgIHhpIF49IGRbZFt4aV1dO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfSgpKTtcblxuXHQgICAgLy8gUHJlY29tcHV0ZWQgUmNvbiBsb29rdXBcblx0ICAgIHZhciBSQ09OID0gWzB4MDAsIDB4MDEsIDB4MDIsIDB4MDQsIDB4MDgsIDB4MTAsIDB4MjAsIDB4NDAsIDB4ODAsIDB4MWIsIDB4MzZdO1xuXG5cdCAgICAvKipcblx0ICAgICAqIEFFUyBibG9jayBjaXBoZXIgYWxnb3JpdGhtLlxuXHQgICAgICovXG5cdCAgICB2YXIgQUVTID0gQ19hbGdvLkFFUyA9IEJsb2NrQ2lwaGVyLmV4dGVuZCh7XG5cdCAgICAgICAgX2RvUmVzZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgdmFyIHQ7XG5cblx0ICAgICAgICAgICAgLy8gU2tpcCByZXNldCBvZiBuUm91bmRzIGhhcyBiZWVuIHNldCBiZWZvcmUgYW5kIGtleSBkaWQgbm90IGNoYW5nZVxuXHQgICAgICAgICAgICBpZiAodGhpcy5fblJvdW5kcyAmJiB0aGlzLl9rZXlQcmlvclJlc2V0ID09PSB0aGlzLl9rZXkpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIga2V5ID0gdGhpcy5fa2V5UHJpb3JSZXNldCA9IHRoaXMuX2tleTtcblx0ICAgICAgICAgICAgdmFyIGtleVdvcmRzID0ga2V5LndvcmRzO1xuXHQgICAgICAgICAgICB2YXIga2V5U2l6ZSA9IGtleS5zaWdCeXRlcyAvIDQ7XG5cblx0ICAgICAgICAgICAgLy8gQ29tcHV0ZSBudW1iZXIgb2Ygcm91bmRzXG5cdCAgICAgICAgICAgIHZhciBuUm91bmRzID0gdGhpcy5fblJvdW5kcyA9IGtleVNpemUgKyA2O1xuXG5cdCAgICAgICAgICAgIC8vIENvbXB1dGUgbnVtYmVyIG9mIGtleSBzY2hlZHVsZSByb3dzXG5cdCAgICAgICAgICAgIHZhciBrc1Jvd3MgPSAoblJvdW5kcyArIDEpICogNDtcblxuXHQgICAgICAgICAgICAvLyBDb21wdXRlIGtleSBzY2hlZHVsZVxuXHQgICAgICAgICAgICB2YXIga2V5U2NoZWR1bGUgPSB0aGlzLl9rZXlTY2hlZHVsZSA9IFtdO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBrc1JvdyA9IDA7IGtzUm93IDwga3NSb3dzOyBrc1JvdysrKSB7XG5cdCAgICAgICAgICAgICAgICBpZiAoa3NSb3cgPCBrZXlTaXplKSB7XG5cdCAgICAgICAgICAgICAgICAgICAga2V5U2NoZWR1bGVba3NSb3ddID0ga2V5V29yZHNba3NSb3ddO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICB0ID0ga2V5U2NoZWR1bGVba3NSb3cgLSAxXTtcblxuXHQgICAgICAgICAgICAgICAgICAgIGlmICghKGtzUm93ICUga2V5U2l6ZSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgLy8gUm90IHdvcmRcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdCA9ICh0IDw8IDgpIHwgKHQgPj4+IDI0KTtcblxuXHQgICAgICAgICAgICAgICAgICAgICAgICAvLyBTdWIgd29yZFxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0ID0gKFNCT1hbdCA+Pj4gMjRdIDw8IDI0KSB8IChTQk9YWyh0ID4+PiAxNikgJiAweGZmXSA8PCAxNikgfCAoU0JPWFsodCA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8IFNCT1hbdCAmIDB4ZmZdO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1peCBSY29uXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHQgXj0gUkNPTlsoa3NSb3cgLyBrZXlTaXplKSB8IDBdIDw8IDI0O1xuXHQgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoa2V5U2l6ZSA+IDYgJiYga3NSb3cgJSBrZXlTaXplID09IDQpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3ViIHdvcmRcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdCA9IChTQk9YW3QgPj4+IDI0XSA8PCAyNCkgfCAoU0JPWFsodCA+Pj4gMTYpICYgMHhmZl0gPDwgMTYpIHwgKFNCT1hbKHQgPj4+IDgpICYgMHhmZl0gPDwgOCkgfCBTQk9YW3QgJiAweGZmXTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgICAgICBrZXlTY2hlZHVsZVtrc1Jvd10gPSBrZXlTY2hlZHVsZVtrc1JvdyAtIGtleVNpemVdIF4gdDtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIENvbXB1dGUgaW52IGtleSBzY2hlZHVsZVxuXHQgICAgICAgICAgICB2YXIgaW52S2V5U2NoZWR1bGUgPSB0aGlzLl9pbnZLZXlTY2hlZHVsZSA9IFtdO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpbnZLc1JvdyA9IDA7IGludktzUm93IDwga3NSb3dzOyBpbnZLc1JvdysrKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIga3NSb3cgPSBrc1Jvd3MgLSBpbnZLc1JvdztcblxuXHQgICAgICAgICAgICAgICAgaWYgKGludktzUm93ICUgNCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciB0ID0ga2V5U2NoZWR1bGVba3NSb3ddO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IGtleVNjaGVkdWxlW2tzUm93IC0gNF07XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIGlmIChpbnZLc1JvdyA8IDQgfHwga3NSb3cgPD0gNCkge1xuXHQgICAgICAgICAgICAgICAgICAgIGludktleVNjaGVkdWxlW2ludktzUm93XSA9IHQ7XG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIGludktleVNjaGVkdWxlW2ludktzUm93XSA9IElOVl9TVUJfTUlYXzBbU0JPWFt0ID4+PiAyNF1dIF4gSU5WX1NVQl9NSVhfMVtTQk9YWyh0ID4+PiAxNikgJiAweGZmXV0gXlxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElOVl9TVUJfTUlYXzJbU0JPWFsodCA+Pj4gOCkgJiAweGZmXV0gXiBJTlZfU1VCX01JWF8zW1NCT1hbdCAmIDB4ZmZdXTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBlbmNyeXB0QmxvY2s6IGZ1bmN0aW9uIChNLCBvZmZzZXQpIHtcblx0ICAgICAgICAgICAgdGhpcy5fZG9DcnlwdEJsb2NrKE0sIG9mZnNldCwgdGhpcy5fa2V5U2NoZWR1bGUsIFNVQl9NSVhfMCwgU1VCX01JWF8xLCBTVUJfTUlYXzIsIFNVQl9NSVhfMywgU0JPWCk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIGRlY3J5cHRCbG9jazogZnVuY3Rpb24gKE0sIG9mZnNldCkge1xuXHQgICAgICAgICAgICAvLyBTd2FwIDJuZCBhbmQgNHRoIHJvd3Ncblx0ICAgICAgICAgICAgdmFyIHQgPSBNW29mZnNldCArIDFdO1xuXHQgICAgICAgICAgICBNW29mZnNldCArIDFdID0gTVtvZmZzZXQgKyAzXTtcblx0ICAgICAgICAgICAgTVtvZmZzZXQgKyAzXSA9IHQ7XG5cblx0ICAgICAgICAgICAgdGhpcy5fZG9DcnlwdEJsb2NrKE0sIG9mZnNldCwgdGhpcy5faW52S2V5U2NoZWR1bGUsIElOVl9TVUJfTUlYXzAsIElOVl9TVUJfTUlYXzEsIElOVl9TVUJfTUlYXzIsIElOVl9TVUJfTUlYXzMsIElOVl9TQk9YKTtcblxuXHQgICAgICAgICAgICAvLyBJbnYgc3dhcCAybmQgYW5kIDR0aCByb3dzXG5cdCAgICAgICAgICAgIHZhciB0ID0gTVtvZmZzZXQgKyAxXTtcblx0ICAgICAgICAgICAgTVtvZmZzZXQgKyAxXSA9IE1bb2Zmc2V0ICsgM107XG5cdCAgICAgICAgICAgIE1bb2Zmc2V0ICsgM10gPSB0O1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBfZG9DcnlwdEJsb2NrOiBmdW5jdGlvbiAoTSwgb2Zmc2V0LCBrZXlTY2hlZHVsZSwgU1VCX01JWF8wLCBTVUJfTUlYXzEsIFNVQl9NSVhfMiwgU1VCX01JWF8zLCBTQk9YKSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0XG5cdCAgICAgICAgICAgIHZhciBuUm91bmRzID0gdGhpcy5fblJvdW5kcztcblxuXHQgICAgICAgICAgICAvLyBHZXQgaW5wdXQsIGFkZCByb3VuZCBrZXlcblx0ICAgICAgICAgICAgdmFyIHMwID0gTVtvZmZzZXRdICAgICBeIGtleVNjaGVkdWxlWzBdO1xuXHQgICAgICAgICAgICB2YXIgczEgPSBNW29mZnNldCArIDFdIF4ga2V5U2NoZWR1bGVbMV07XG5cdCAgICAgICAgICAgIHZhciBzMiA9IE1bb2Zmc2V0ICsgMl0gXiBrZXlTY2hlZHVsZVsyXTtcblx0ICAgICAgICAgICAgdmFyIHMzID0gTVtvZmZzZXQgKyAzXSBeIGtleVNjaGVkdWxlWzNdO1xuXG5cdCAgICAgICAgICAgIC8vIEtleSBzY2hlZHVsZSByb3cgY291bnRlclxuXHQgICAgICAgICAgICB2YXIga3NSb3cgPSA0O1xuXG5cdCAgICAgICAgICAgIC8vIFJvdW5kc1xuXHQgICAgICAgICAgICBmb3IgKHZhciByb3VuZCA9IDE7IHJvdW5kIDwgblJvdW5kczsgcm91bmQrKykge1xuXHQgICAgICAgICAgICAgICAgLy8gU2hpZnQgcm93cywgc3ViIGJ5dGVzLCBtaXggY29sdW1ucywgYWRkIHJvdW5kIGtleVxuXHQgICAgICAgICAgICAgICAgdmFyIHQwID0gU1VCX01JWF8wW3MwID4+PiAyNF0gXiBTVUJfTUlYXzFbKHMxID4+PiAxNikgJiAweGZmXSBeIFNVQl9NSVhfMlsoczIgPj4+IDgpICYgMHhmZl0gXiBTVUJfTUlYXzNbczMgJiAweGZmXSBeIGtleVNjaGVkdWxlW2tzUm93KytdO1xuXHQgICAgICAgICAgICAgICAgdmFyIHQxID0gU1VCX01JWF8wW3MxID4+PiAyNF0gXiBTVUJfTUlYXzFbKHMyID4+PiAxNikgJiAweGZmXSBeIFNVQl9NSVhfMlsoczMgPj4+IDgpICYgMHhmZl0gXiBTVUJfTUlYXzNbczAgJiAweGZmXSBeIGtleVNjaGVkdWxlW2tzUm93KytdO1xuXHQgICAgICAgICAgICAgICAgdmFyIHQyID0gU1VCX01JWF8wW3MyID4+PiAyNF0gXiBTVUJfTUlYXzFbKHMzID4+PiAxNikgJiAweGZmXSBeIFNVQl9NSVhfMlsoczAgPj4+IDgpICYgMHhmZl0gXiBTVUJfTUlYXzNbczEgJiAweGZmXSBeIGtleVNjaGVkdWxlW2tzUm93KytdO1xuXHQgICAgICAgICAgICAgICAgdmFyIHQzID0gU1VCX01JWF8wW3MzID4+PiAyNF0gXiBTVUJfTUlYXzFbKHMwID4+PiAxNikgJiAweGZmXSBeIFNVQl9NSVhfMlsoczEgPj4+IDgpICYgMHhmZl0gXiBTVUJfTUlYXzNbczIgJiAweGZmXSBeIGtleVNjaGVkdWxlW2tzUm93KytdO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBVcGRhdGUgc3RhdGVcblx0ICAgICAgICAgICAgICAgIHMwID0gdDA7XG5cdCAgICAgICAgICAgICAgICBzMSA9IHQxO1xuXHQgICAgICAgICAgICAgICAgczIgPSB0Mjtcblx0ICAgICAgICAgICAgICAgIHMzID0gdDM7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBTaGlmdCByb3dzLCBzdWIgYnl0ZXMsIGFkZCByb3VuZCBrZXlcblx0ICAgICAgICAgICAgdmFyIHQwID0gKChTQk9YW3MwID4+PiAyNF0gPDwgMjQpIHwgKFNCT1hbKHMxID4+PiAxNikgJiAweGZmXSA8PCAxNikgfCAoU0JPWFsoczIgPj4+IDgpICYgMHhmZl0gPDwgOCkgfCBTQk9YW3MzICYgMHhmZl0pIF4ga2V5U2NoZWR1bGVba3NSb3crK107XG5cdCAgICAgICAgICAgIHZhciB0MSA9ICgoU0JPWFtzMSA+Pj4gMjRdIDw8IDI0KSB8IChTQk9YWyhzMiA+Pj4gMTYpICYgMHhmZl0gPDwgMTYpIHwgKFNCT1hbKHMzID4+PiA4KSAmIDB4ZmZdIDw8IDgpIHwgU0JPWFtzMCAmIDB4ZmZdKSBeIGtleVNjaGVkdWxlW2tzUm93KytdO1xuXHQgICAgICAgICAgICB2YXIgdDIgPSAoKFNCT1hbczIgPj4+IDI0XSA8PCAyNCkgfCAoU0JPWFsoczMgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8IChTQk9YWyhzMCA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8IFNCT1hbczEgJiAweGZmXSkgXiBrZXlTY2hlZHVsZVtrc1JvdysrXTtcblx0ICAgICAgICAgICAgdmFyIHQzID0gKChTQk9YW3MzID4+PiAyNF0gPDwgMjQpIHwgKFNCT1hbKHMwID4+PiAxNikgJiAweGZmXSA8PCAxNikgfCAoU0JPWFsoczEgPj4+IDgpICYgMHhmZl0gPDwgOCkgfCBTQk9YW3MyICYgMHhmZl0pIF4ga2V5U2NoZWR1bGVba3NSb3crK107XG5cblx0ICAgICAgICAgICAgLy8gU2V0IG91dHB1dFxuXHQgICAgICAgICAgICBNW29mZnNldF0gICAgID0gdDA7XG5cdCAgICAgICAgICAgIE1bb2Zmc2V0ICsgMV0gPSB0MTtcblx0ICAgICAgICAgICAgTVtvZmZzZXQgKyAyXSA9IHQyO1xuXHQgICAgICAgICAgICBNW29mZnNldCArIDNdID0gdDM7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIGtleVNpemU6IDI1Ni8zMlxuXHQgICAgfSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogU2hvcnRjdXQgZnVuY3Rpb25zIHRvIHRoZSBjaXBoZXIncyBvYmplY3QgaW50ZXJmYWNlLlxuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlXG5cdCAgICAgKlxuXHQgICAgICogICAgIHZhciBjaXBoZXJ0ZXh0ID0gQ3J5cHRvSlMuQUVTLmVuY3J5cHQobWVzc2FnZSwga2V5LCBjZmcpO1xuXHQgICAgICogICAgIHZhciBwbGFpbnRleHQgID0gQ3J5cHRvSlMuQUVTLmRlY3J5cHQoY2lwaGVydGV4dCwga2V5LCBjZmcpO1xuXHQgICAgICovXG5cdCAgICBDLkFFUyA9IEJsb2NrQ2lwaGVyLl9jcmVhdGVIZWxwZXIoQUVTKTtcblx0fSgpKTtcblxuXG5cdHJldHVybiBDcnlwdG9KUy5BRVM7XG5cbn0pKTtcblxuLyoqKi8gfSksXG4vKiA2MSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG47KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7XG5cdGlmICh0cnVlKSB7XG5cdFx0Ly8gQ29tbW9uSlNcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KF9fd2VicGFja19yZXF1aXJlX18oNikpO1xuXHR9XG5cdGVsc2Uge31cbn0odGhpcywgZnVuY3Rpb24gKENyeXB0b0pTKSB7XG5cblx0KGZ1bmN0aW9uIChNYXRoKSB7XG5cdCAgICAvLyBTaG9ydGN1dHNcblx0ICAgIHZhciBDID0gQ3J5cHRvSlM7XG5cdCAgICB2YXIgQ19saWIgPSBDLmxpYjtcblx0ICAgIHZhciBXb3JkQXJyYXkgPSBDX2xpYi5Xb3JkQXJyYXk7XG5cdCAgICB2YXIgSGFzaGVyID0gQ19saWIuSGFzaGVyO1xuXHQgICAgdmFyIENfYWxnbyA9IEMuYWxnbztcblxuXHQgICAgLy8gQ29uc3RhbnRzIHRhYmxlXG5cdCAgICB2YXIgVCA9IFtdO1xuXG5cdCAgICAvLyBDb21wdXRlIGNvbnN0YW50c1xuXHQgICAgKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDY0OyBpKyspIHtcblx0ICAgICAgICAgICAgVFtpXSA9IChNYXRoLmFicyhNYXRoLnNpbihpICsgMSkpICogMHgxMDAwMDAwMDApIHwgMDtcblx0ICAgICAgICB9XG5cdCAgICB9KCkpO1xuXG5cdCAgICAvKipcblx0ICAgICAqIE1ENSBoYXNoIGFsZ29yaXRobS5cblx0ICAgICAqL1xuXHQgICAgdmFyIE1ENSA9IENfYWxnby5NRDUgPSBIYXNoZXIuZXh0ZW5kKHtcblx0ICAgICAgICBfZG9SZXNldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB0aGlzLl9oYXNoID0gbmV3IFdvcmRBcnJheS5pbml0KFtcblx0ICAgICAgICAgICAgICAgIDB4Njc0NTIzMDEsIDB4ZWZjZGFiODksXG5cdCAgICAgICAgICAgICAgICAweDk4YmFkY2ZlLCAweDEwMzI1NDc2XG5cdCAgICAgICAgICAgIF0pO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBfZG9Qcm9jZXNzQmxvY2s6IGZ1bmN0aW9uIChNLCBvZmZzZXQpIHtcblx0ICAgICAgICAgICAgLy8gU3dhcCBlbmRpYW5cblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgICAgIHZhciBvZmZzZXRfaSA9IG9mZnNldCArIGk7XG5cdCAgICAgICAgICAgICAgICB2YXIgTV9vZmZzZXRfaSA9IE1bb2Zmc2V0X2ldO1xuXG5cdCAgICAgICAgICAgICAgICBNW29mZnNldF9pXSA9IChcblx0ICAgICAgICAgICAgICAgICAgICAoKChNX29mZnNldF9pIDw8IDgpICB8IChNX29mZnNldF9pID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfFxuXHQgICAgICAgICAgICAgICAgICAgICgoKE1fb2Zmc2V0X2kgPDwgMjQpIHwgKE1fb2Zmc2V0X2kgPj4+IDgpKSAgJiAweGZmMDBmZjAwKVxuXHQgICAgICAgICAgICAgICAgKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgSCA9IHRoaXMuX2hhc2gud29yZHM7XG5cblx0ICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzAgID0gTVtvZmZzZXQgKyAwXTtcblx0ICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzEgID0gTVtvZmZzZXQgKyAxXTtcblx0ICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzIgID0gTVtvZmZzZXQgKyAyXTtcblx0ICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzMgID0gTVtvZmZzZXQgKyAzXTtcblx0ICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzQgID0gTVtvZmZzZXQgKyA0XTtcblx0ICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzUgID0gTVtvZmZzZXQgKyA1XTtcblx0ICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzYgID0gTVtvZmZzZXQgKyA2XTtcblx0ICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzcgID0gTVtvZmZzZXQgKyA3XTtcblx0ICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzggID0gTVtvZmZzZXQgKyA4XTtcblx0ICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzkgID0gTVtvZmZzZXQgKyA5XTtcblx0ICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzEwID0gTVtvZmZzZXQgKyAxMF07XG5cdCAgICAgICAgICAgIHZhciBNX29mZnNldF8xMSA9IE1bb2Zmc2V0ICsgMTFdO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfMTIgPSBNW29mZnNldCArIDEyXTtcblx0ICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzEzID0gTVtvZmZzZXQgKyAxM107XG5cdCAgICAgICAgICAgIHZhciBNX29mZnNldF8xNCA9IE1bb2Zmc2V0ICsgMTRdO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfMTUgPSBNW29mZnNldCArIDE1XTtcblxuXHQgICAgICAgICAgICAvLyBXb3JraW5nIHZhcmlhbGJlc1xuXHQgICAgICAgICAgICB2YXIgYSA9IEhbMF07XG5cdCAgICAgICAgICAgIHZhciBiID0gSFsxXTtcblx0ICAgICAgICAgICAgdmFyIGMgPSBIWzJdO1xuXHQgICAgICAgICAgICB2YXIgZCA9IEhbM107XG5cblx0ICAgICAgICAgICAgLy8gQ29tcHV0YXRpb25cblx0ICAgICAgICAgICAgYSA9IEZGKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzAsICA3LCAgVFswXSk7XG5cdCAgICAgICAgICAgIGQgPSBGRihkLCBhLCBiLCBjLCBNX29mZnNldF8xLCAgMTIsIFRbMV0pO1xuXHQgICAgICAgICAgICBjID0gRkYoYywgZCwgYSwgYiwgTV9vZmZzZXRfMiwgIDE3LCBUWzJdKTtcblx0ICAgICAgICAgICAgYiA9IEZGKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzMsICAyMiwgVFszXSk7XG5cdCAgICAgICAgICAgIGEgPSBGRihhLCBiLCBjLCBkLCBNX29mZnNldF80LCAgNywgIFRbNF0pO1xuXHQgICAgICAgICAgICBkID0gRkYoZCwgYSwgYiwgYywgTV9vZmZzZXRfNSwgIDEyLCBUWzVdKTtcblx0ICAgICAgICAgICAgYyA9IEZGKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzYsICAxNywgVFs2XSk7XG5cdCAgICAgICAgICAgIGIgPSBGRihiLCBjLCBkLCBhLCBNX29mZnNldF83LCAgMjIsIFRbN10pO1xuXHQgICAgICAgICAgICBhID0gRkYoYSwgYiwgYywgZCwgTV9vZmZzZXRfOCwgIDcsICBUWzhdKTtcblx0ICAgICAgICAgICAgZCA9IEZGKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzksICAxMiwgVFs5XSk7XG5cdCAgICAgICAgICAgIGMgPSBGRihjLCBkLCBhLCBiLCBNX29mZnNldF8xMCwgMTcsIFRbMTBdKTtcblx0ICAgICAgICAgICAgYiA9IEZGKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzExLCAyMiwgVFsxMV0pO1xuXHQgICAgICAgICAgICBhID0gRkYoYSwgYiwgYywgZCwgTV9vZmZzZXRfMTIsIDcsICBUWzEyXSk7XG5cdCAgICAgICAgICAgIGQgPSBGRihkLCBhLCBiLCBjLCBNX29mZnNldF8xMywgMTIsIFRbMTNdKTtcblx0ICAgICAgICAgICAgYyA9IEZGKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzE0LCAxNywgVFsxNF0pO1xuXHQgICAgICAgICAgICBiID0gRkYoYiwgYywgZCwgYSwgTV9vZmZzZXRfMTUsIDIyLCBUWzE1XSk7XG5cblx0ICAgICAgICAgICAgYSA9IEdHKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzEsICA1LCAgVFsxNl0pO1xuXHQgICAgICAgICAgICBkID0gR0coZCwgYSwgYiwgYywgTV9vZmZzZXRfNiwgIDksICBUWzE3XSk7XG5cdCAgICAgICAgICAgIGMgPSBHRyhjLCBkLCBhLCBiLCBNX29mZnNldF8xMSwgMTQsIFRbMThdKTtcblx0ICAgICAgICAgICAgYiA9IEdHKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzAsICAyMCwgVFsxOV0pO1xuXHQgICAgICAgICAgICBhID0gR0coYSwgYiwgYywgZCwgTV9vZmZzZXRfNSwgIDUsICBUWzIwXSk7XG5cdCAgICAgICAgICAgIGQgPSBHRyhkLCBhLCBiLCBjLCBNX29mZnNldF8xMCwgOSwgIFRbMjFdKTtcblx0ICAgICAgICAgICAgYyA9IEdHKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzE1LCAxNCwgVFsyMl0pO1xuXHQgICAgICAgICAgICBiID0gR0coYiwgYywgZCwgYSwgTV9vZmZzZXRfNCwgIDIwLCBUWzIzXSk7XG5cdCAgICAgICAgICAgIGEgPSBHRyhhLCBiLCBjLCBkLCBNX29mZnNldF85LCAgNSwgIFRbMjRdKTtcblx0ICAgICAgICAgICAgZCA9IEdHKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzE0LCA5LCAgVFsyNV0pO1xuXHQgICAgICAgICAgICBjID0gR0coYywgZCwgYSwgYiwgTV9vZmZzZXRfMywgIDE0LCBUWzI2XSk7XG5cdCAgICAgICAgICAgIGIgPSBHRyhiLCBjLCBkLCBhLCBNX29mZnNldF84LCAgMjAsIFRbMjddKTtcblx0ICAgICAgICAgICAgYSA9IEdHKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzEzLCA1LCAgVFsyOF0pO1xuXHQgICAgICAgICAgICBkID0gR0coZCwgYSwgYiwgYywgTV9vZmZzZXRfMiwgIDksICBUWzI5XSk7XG5cdCAgICAgICAgICAgIGMgPSBHRyhjLCBkLCBhLCBiLCBNX29mZnNldF83LCAgMTQsIFRbMzBdKTtcblx0ICAgICAgICAgICAgYiA9IEdHKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzEyLCAyMCwgVFszMV0pO1xuXG5cdCAgICAgICAgICAgIGEgPSBISChhLCBiLCBjLCBkLCBNX29mZnNldF81LCAgNCwgIFRbMzJdKTtcblx0ICAgICAgICAgICAgZCA9IEhIKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzgsICAxMSwgVFszM10pO1xuXHQgICAgICAgICAgICBjID0gSEgoYywgZCwgYSwgYiwgTV9vZmZzZXRfMTEsIDE2LCBUWzM0XSk7XG5cdCAgICAgICAgICAgIGIgPSBISChiLCBjLCBkLCBhLCBNX29mZnNldF8xNCwgMjMsIFRbMzVdKTtcblx0ICAgICAgICAgICAgYSA9IEhIKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzEsICA0LCAgVFszNl0pO1xuXHQgICAgICAgICAgICBkID0gSEgoZCwgYSwgYiwgYywgTV9vZmZzZXRfNCwgIDExLCBUWzM3XSk7XG5cdCAgICAgICAgICAgIGMgPSBISChjLCBkLCBhLCBiLCBNX29mZnNldF83LCAgMTYsIFRbMzhdKTtcblx0ICAgICAgICAgICAgYiA9IEhIKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzEwLCAyMywgVFszOV0pO1xuXHQgICAgICAgICAgICBhID0gSEgoYSwgYiwgYywgZCwgTV9vZmZzZXRfMTMsIDQsICBUWzQwXSk7XG5cdCAgICAgICAgICAgIGQgPSBISChkLCBhLCBiLCBjLCBNX29mZnNldF8wLCAgMTEsIFRbNDFdKTtcblx0ICAgICAgICAgICAgYyA9IEhIKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzMsICAxNiwgVFs0Ml0pO1xuXHQgICAgICAgICAgICBiID0gSEgoYiwgYywgZCwgYSwgTV9vZmZzZXRfNiwgIDIzLCBUWzQzXSk7XG5cdCAgICAgICAgICAgIGEgPSBISChhLCBiLCBjLCBkLCBNX29mZnNldF85LCAgNCwgIFRbNDRdKTtcblx0ICAgICAgICAgICAgZCA9IEhIKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzEyLCAxMSwgVFs0NV0pO1xuXHQgICAgICAgICAgICBjID0gSEgoYywgZCwgYSwgYiwgTV9vZmZzZXRfMTUsIDE2LCBUWzQ2XSk7XG5cdCAgICAgICAgICAgIGIgPSBISChiLCBjLCBkLCBhLCBNX29mZnNldF8yLCAgMjMsIFRbNDddKTtcblxuXHQgICAgICAgICAgICBhID0gSUkoYSwgYiwgYywgZCwgTV9vZmZzZXRfMCwgIDYsICBUWzQ4XSk7XG5cdCAgICAgICAgICAgIGQgPSBJSShkLCBhLCBiLCBjLCBNX29mZnNldF83LCAgMTAsIFRbNDldKTtcblx0ICAgICAgICAgICAgYyA9IElJKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzE0LCAxNSwgVFs1MF0pO1xuXHQgICAgICAgICAgICBiID0gSUkoYiwgYywgZCwgYSwgTV9vZmZzZXRfNSwgIDIxLCBUWzUxXSk7XG5cdCAgICAgICAgICAgIGEgPSBJSShhLCBiLCBjLCBkLCBNX29mZnNldF8xMiwgNiwgIFRbNTJdKTtcblx0ICAgICAgICAgICAgZCA9IElJKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzMsICAxMCwgVFs1M10pO1xuXHQgICAgICAgICAgICBjID0gSUkoYywgZCwgYSwgYiwgTV9vZmZzZXRfMTAsIDE1LCBUWzU0XSk7XG5cdCAgICAgICAgICAgIGIgPSBJSShiLCBjLCBkLCBhLCBNX29mZnNldF8xLCAgMjEsIFRbNTVdKTtcblx0ICAgICAgICAgICAgYSA9IElJKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzgsICA2LCAgVFs1Nl0pO1xuXHQgICAgICAgICAgICBkID0gSUkoZCwgYSwgYiwgYywgTV9vZmZzZXRfMTUsIDEwLCBUWzU3XSk7XG5cdCAgICAgICAgICAgIGMgPSBJSShjLCBkLCBhLCBiLCBNX29mZnNldF82LCAgMTUsIFRbNThdKTtcblx0ICAgICAgICAgICAgYiA9IElJKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzEzLCAyMSwgVFs1OV0pO1xuXHQgICAgICAgICAgICBhID0gSUkoYSwgYiwgYywgZCwgTV9vZmZzZXRfNCwgIDYsICBUWzYwXSk7XG5cdCAgICAgICAgICAgIGQgPSBJSShkLCBhLCBiLCBjLCBNX29mZnNldF8xMSwgMTAsIFRbNjFdKTtcblx0ICAgICAgICAgICAgYyA9IElJKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzIsICAxNSwgVFs2Ml0pO1xuXHQgICAgICAgICAgICBiID0gSUkoYiwgYywgZCwgYSwgTV9vZmZzZXRfOSwgIDIxLCBUWzYzXSk7XG5cblx0ICAgICAgICAgICAgLy8gSW50ZXJtZWRpYXRlIGhhc2ggdmFsdWVcblx0ICAgICAgICAgICAgSFswXSA9IChIWzBdICsgYSkgfCAwO1xuXHQgICAgICAgICAgICBIWzFdID0gKEhbMV0gKyBiKSB8IDA7XG5cdCAgICAgICAgICAgIEhbMl0gPSAoSFsyXSArIGMpIHwgMDtcblx0ICAgICAgICAgICAgSFszXSA9IChIWzNdICsgZCkgfCAwO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBfZG9GaW5hbGl6ZTogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIGRhdGEgPSB0aGlzLl9kYXRhO1xuXHQgICAgICAgICAgICB2YXIgZGF0YVdvcmRzID0gZGF0YS53b3JkcztcblxuXHQgICAgICAgICAgICB2YXIgbkJpdHNUb3RhbCA9IHRoaXMuX25EYXRhQnl0ZXMgKiA4O1xuXHQgICAgICAgICAgICB2YXIgbkJpdHNMZWZ0ID0gZGF0YS5zaWdCeXRlcyAqIDg7XG5cblx0ICAgICAgICAgICAgLy8gQWRkIHBhZGRpbmdcblx0ICAgICAgICAgICAgZGF0YVdvcmRzW25CaXRzTGVmdCA+Pj4gNV0gfD0gMHg4MCA8PCAoMjQgLSBuQml0c0xlZnQgJSAzMik7XG5cblx0ICAgICAgICAgICAgdmFyIG5CaXRzVG90YWxIID0gTWF0aC5mbG9vcihuQml0c1RvdGFsIC8gMHgxMDAwMDAwMDApO1xuXHQgICAgICAgICAgICB2YXIgbkJpdHNUb3RhbEwgPSBuQml0c1RvdGFsO1xuXHQgICAgICAgICAgICBkYXRhV29yZHNbKCgobkJpdHNMZWZ0ICsgNjQpID4+PiA5KSA8PCA0KSArIDE1XSA9IChcblx0ICAgICAgICAgICAgICAgICgoKG5CaXRzVG90YWxIIDw8IDgpICB8IChuQml0c1RvdGFsSCA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHxcblx0ICAgICAgICAgICAgICAgICgoKG5CaXRzVG90YWxIIDw8IDI0KSB8IChuQml0c1RvdGFsSCA+Pj4gOCkpICAmIDB4ZmYwMGZmMDApXG5cdCAgICAgICAgICAgICk7XG5cdCAgICAgICAgICAgIGRhdGFXb3Jkc1soKChuQml0c0xlZnQgKyA2NCkgPj4+IDkpIDw8IDQpICsgMTRdID0gKFxuXHQgICAgICAgICAgICAgICAgKCgobkJpdHNUb3RhbEwgPDwgOCkgIHwgKG5CaXRzVG90YWxMID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfFxuXHQgICAgICAgICAgICAgICAgKCgobkJpdHNUb3RhbEwgPDwgMjQpIHwgKG5CaXRzVG90YWxMID4+PiA4KSkgICYgMHhmZjAwZmYwMClcblx0ICAgICAgICAgICAgKTtcblxuXHQgICAgICAgICAgICBkYXRhLnNpZ0J5dGVzID0gKGRhdGFXb3Jkcy5sZW5ndGggKyAxKSAqIDQ7XG5cblx0ICAgICAgICAgICAgLy8gSGFzaCBmaW5hbCBibG9ja3Ncblx0ICAgICAgICAgICAgdGhpcy5fcHJvY2VzcygpO1xuXG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgaGFzaCA9IHRoaXMuX2hhc2g7XG5cdCAgICAgICAgICAgIHZhciBIID0gaGFzaC53b3JkcztcblxuXHQgICAgICAgICAgICAvLyBTd2FwIGVuZGlhblxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICAgICAgICAgIHZhciBIX2kgPSBIW2ldO1xuXG5cdCAgICAgICAgICAgICAgICBIW2ldID0gKCgoSF9pIDw8IDgpICB8IChIX2kgPj4+IDI0KSkgJiAweDAwZmYwMGZmKSB8XG5cdCAgICAgICAgICAgICAgICAgICAgICAgKCgoSF9pIDw8IDI0KSB8IChIX2kgPj4+IDgpKSAgJiAweGZmMDBmZjAwKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIFJldHVybiBmaW5hbCBjb21wdXRlZCBoYXNoXG5cdCAgICAgICAgICAgIHJldHVybiBoYXNoO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBjbG9uZTogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB2YXIgY2xvbmUgPSBIYXNoZXIuY2xvbmUuY2FsbCh0aGlzKTtcblx0ICAgICAgICAgICAgY2xvbmUuX2hhc2ggPSB0aGlzLl9oYXNoLmNsb25lKCk7XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGNsb25lO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXG5cdCAgICBmdW5jdGlvbiBGRihhLCBiLCBjLCBkLCB4LCBzLCB0KSB7XG5cdCAgICAgICAgdmFyIG4gPSBhICsgKChiICYgYykgfCAofmIgJiBkKSkgKyB4ICsgdDtcblx0ICAgICAgICByZXR1cm4gKChuIDw8IHMpIHwgKG4gPj4+ICgzMiAtIHMpKSkgKyBiO1xuXHQgICAgfVxuXG5cdCAgICBmdW5jdGlvbiBHRyhhLCBiLCBjLCBkLCB4LCBzLCB0KSB7XG5cdCAgICAgICAgdmFyIG4gPSBhICsgKChiICYgZCkgfCAoYyAmIH5kKSkgKyB4ICsgdDtcblx0ICAgICAgICByZXR1cm4gKChuIDw8IHMpIHwgKG4gPj4+ICgzMiAtIHMpKSkgKyBiO1xuXHQgICAgfVxuXG5cdCAgICBmdW5jdGlvbiBISChhLCBiLCBjLCBkLCB4LCBzLCB0KSB7XG5cdCAgICAgICAgdmFyIG4gPSBhICsgKGIgXiBjIF4gZCkgKyB4ICsgdDtcblx0ICAgICAgICByZXR1cm4gKChuIDw8IHMpIHwgKG4gPj4+ICgzMiAtIHMpKSkgKyBiO1xuXHQgICAgfVxuXG5cdCAgICBmdW5jdGlvbiBJSShhLCBiLCBjLCBkLCB4LCBzLCB0KSB7XG5cdCAgICAgICAgdmFyIG4gPSBhICsgKGMgXiAoYiB8IH5kKSkgKyB4ICsgdDtcblx0ICAgICAgICByZXR1cm4gKChuIDw8IHMpIHwgKG4gPj4+ICgzMiAtIHMpKSkgKyBiO1xuXHQgICAgfVxuXG5cdCAgICAvKipcblx0ICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBoYXNoZXIncyBvYmplY3QgaW50ZXJmYWNlLlxuXHQgICAgICpcblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBoYXNoLlxuXHQgICAgICpcblx0ICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIGhhc2guXG5cdCAgICAgKlxuXHQgICAgICogQHN0YXRpY1xuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlXG5cdCAgICAgKlxuXHQgICAgICogICAgIHZhciBoYXNoID0gQ3J5cHRvSlMuTUQ1KCdtZXNzYWdlJyk7XG5cdCAgICAgKiAgICAgdmFyIGhhc2ggPSBDcnlwdG9KUy5NRDUod29yZEFycmF5KTtcblx0ICAgICAqL1xuXHQgICAgQy5NRDUgPSBIYXNoZXIuX2NyZWF0ZUhlbHBlcihNRDUpO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBITUFDJ3Mgb2JqZWN0IGludGVyZmFjZS5cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC5cblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30ga2V5IFRoZSBzZWNyZXQga2V5LlxuXHQgICAgICpcblx0ICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIEhNQUMuXG5cdCAgICAgKlxuXHQgICAgICogQHN0YXRpY1xuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlXG5cdCAgICAgKlxuXHQgICAgICogICAgIHZhciBobWFjID0gQ3J5cHRvSlMuSG1hY01ENShtZXNzYWdlLCBrZXkpO1xuXHQgICAgICovXG5cdCAgICBDLkhtYWNNRDUgPSBIYXNoZXIuX2NyZWF0ZUhtYWNIZWxwZXIoTUQ1KTtcblx0fShNYXRoKSk7XG5cblxuXHRyZXR1cm4gQ3J5cHRvSlMuTUQ1O1xuXG59KSk7XG5cbi8qKiovIH0pLFxuLyogNjIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfYTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciB0c2xpYl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciBwbGF0Zm9ybV8xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygzKSk7XG52YXIgVXRpbHMgPSB0c2xpYl8xLl9faW1wb3J0U3RhcihfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKTtcbnZhciBkZWZhdWx0c18xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXyg4KSk7XG52YXIgZXJyb3JpbmZvXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xudmFyIEh0dHBNZXRob2RzXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKDE4KSk7XG52YXIgeGhycmVxdWVzdF8xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygxNikpO1xudmFyIFhIUlN0YXRlc18xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygyMSkpO1xudmFyIGxvZ2dlcl8xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygyKSk7XG52YXIganNvbnB0cmFuc3BvcnRfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMjkpO1xudmFyIGZldGNocmVxdWVzdF8xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXyg2MykpO1xudmFyIEh0dHBTdGF0dXNDb2Rlc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNSk7XG5mdW5jdGlvbiBzaG91bGRGYWxsYmFjayhlcnJvckluZm8pIHtcbiAgICB2YXIgc3RhdHVzQ29kZSA9IGVycm9ySW5mby5zdGF0dXNDb2RlO1xuICAgIC8qIDQwMCArIG5vIGNvZGUgPSBhIGdlbmVyaWMgeGhyIG9uZXJyb3IuIEJyb3dzZXIgZG9lc24ndCBnaXZlIHVzIGVub3VnaFxuICAgICAqIGRldGFpbCB0byBrbm93IHdoZXRoZXIgaXQncyBmYWxsYmFjay1maXhhYmxlLCBidXQgaXQgbWF5IGJlIChlZyBpZiBhXG4gICAgICogbmV0d29yayBpc3N1ZSksIHNvIHRyeSBqdXN0IGluIGNhc2UgKi9cbiAgICByZXR1cm4gKChzdGF0dXNDb2RlID09PSA0MDggJiYgIWVycm9ySW5mby5jb2RlKSB8fFxuICAgICAgICAoc3RhdHVzQ29kZSA9PT0gNDAwICYmICFlcnJvckluZm8uY29kZSkgfHxcbiAgICAgICAgKHN0YXR1c0NvZGUgPj0gNTAwICYmIHN0YXR1c0NvZGUgPD0gNTA0KSk7XG59XG5mdW5jdGlvbiBnZXRIb3N0cyhjbGllbnQpIHtcbiAgICAvKiBJZiB3ZSdyZSBhIGNvbm5lY3RlZCByZWFsdGltZSBjbGllbnQsIHRyeSB0aGUgZW5kcG9pbnQgd2UncmUgY29ubmVjdGVkXG4gICAgICogdG8gZmlyc3QgLS0gYnV0IHN0aWxsIGhhdmUgZmFsbGJhY2tzLCBiZWluZyBjb25uZWN0ZWQgaXMgbm90IGFuIGFic29sdXRlXG4gICAgICogZ3VhcmFudGVlIHRoYXQgYSBkYXRhY2VudGVyIGhhcyBmcmVlIGNhcGFjaXR5IHRvIHNlcnZpY2UgUkVTVCByZXF1ZXN0cy4gKi9cbiAgICB2YXIgY29ubmVjdGlvbiA9IGNsaWVudC5jb25uZWN0aW9uLCBjb25uZWN0aW9uSG9zdCA9IGNvbm5lY3Rpb24gJiYgY29ubmVjdGlvbi5jb25uZWN0aW9uTWFuYWdlci5ob3N0O1xuICAgIGlmIChjb25uZWN0aW9uSG9zdCkge1xuICAgICAgICByZXR1cm4gW2Nvbm5lY3Rpb25Ib3N0XS5jb25jYXQoZGVmYXVsdHNfMS5kZWZhdWx0LmdldEZhbGxiYWNrSG9zdHMoY2xpZW50Lm9wdGlvbnMpKTtcbiAgICB9XG4gICAgcmV0dXJuIGRlZmF1bHRzXzEuZGVmYXVsdC5nZXRIb3N0cyhjbGllbnQub3B0aW9ucyk7XG59XG52YXIgSHR0cCA9IChfYSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gY2xhc3NfMShvcHRpb25zKSB7XG4gICAgICAgICAgICB0aGlzLmNoZWNrc0luUHJvZ3Jlc3MgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5jaGVja0Nvbm5lY3Rpdml0eSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHRoaXMuc3VwcG9ydHNBdXRoSGVhZGVycyA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5zdXBwb3J0c0xpbmtIZWFkZXJzID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLl9nZXRIb3N0cyA9IGdldEhvc3RzO1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgICAgIHZhciBjb25uZWN0aXZpdHlDaGVja1VybCA9IHRoaXMub3B0aW9ucy5jb25uZWN0aXZpdHlDaGVja1VybCB8fCBkZWZhdWx0c18xLmRlZmF1bHQuY29ubmVjdGl2aXR5Q2hlY2tVcmw7XG4gICAgICAgICAgICB2YXIgY29ubmVjdGl2aXR5Q2hlY2tQYXJhbXMgPSB0aGlzLm9wdGlvbnMuY29ubmVjdGl2aXR5Q2hlY2tQYXJhbXM7XG4gICAgICAgICAgICB2YXIgY29ubmVjdGl2aXR5VXJsSXNEZWZhdWx0ID0gIXRoaXMub3B0aW9ucy5jb25uZWN0aXZpdHlDaGVja1VybDtcbiAgICAgICAgICAgIGlmIChwbGF0Zm9ybV8xLmRlZmF1bHQuQ29uZmlnLnhoclN1cHBvcnRlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3VwcG9ydHNBdXRoSGVhZGVycyA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5SZXF1ZXN0ID0gZnVuY3Rpb24gKG1ldGhvZCwgcmVzdCwgdXJpLCBoZWFkZXJzLCBwYXJhbXMsIGJvZHksIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXEgPSB4aHJyZXF1ZXN0XzEuZGVmYXVsdC5jcmVhdGVSZXF1ZXN0KHVyaSwgaGVhZGVycywgcGFyYW1zLCBib2R5LCBYSFJTdGF0ZXNfMS5kZWZhdWx0LlJFUV9TRU5ELCByZXN0ICYmIHJlc3Qub3B0aW9ucy50aW1lb3V0cywgbWV0aG9kKTtcbiAgICAgICAgICAgICAgICAgICAgcmVxLm9uY2UoJ2NvbXBsZXRlJywgY2FsbGJhY2spO1xuICAgICAgICAgICAgICAgICAgICByZXEuZXhlYygpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVxO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5kaXNhYmxlQ29ubmVjdGl2aXR5Q2hlY2spIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGVja0Nvbm5lY3Rpdml0eSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoZWNrQ29ubmVjdGl2aXR5ID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXJfMS5kZWZhdWx0LkxPR19NSUNSTywgJyhYSFJSZXF1ZXN0KUh0dHAuY2hlY2tDb25uZWN0aXZpdHkoKScsICdTZW5kaW5nOyAnICsgY29ubmVjdGl2aXR5Q2hlY2tVcmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kb1VyaShIdHRwTWV0aG9kc18xLmRlZmF1bHQuR2V0LCBudWxsLCBjb25uZWN0aXZpdHlDaGVja1VybCwgbnVsbCwgbnVsbCwgY29ubmVjdGl2aXR5Q2hlY2tQYXJhbXMsIGZ1bmN0aW9uIChlcnIsIHJlc3BvbnNlVGV4dCwgaGVhZGVycywgdW5wYWNrZWQsIHN0YXR1c0NvZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjb25uZWN0aXZpdHlVcmxJc0RlZmF1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gIWVyciAmJiAoMCwgSHR0cFN0YXR1c0NvZGVzXzEuaXNTdWNjZXNzQ29kZSkoc3RhdHVzQ29kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSAhZXJyICYmIChyZXNwb25zZVRleHQgPT09IG51bGwgfHwgcmVzcG9uc2VUZXh0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXNwb25zZVRleHQucmVwbGFjZSgvXFxuLywgJycpKSA9PSAneWVzJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlDUk8sICcoWEhSUmVxdWVzdClIdHRwLmNoZWNrQ29ubmVjdGl2aXR5KCknLCAnUmVzdWx0OiAnICsgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocGxhdGZvcm1fMS5kZWZhdWx0LkNvbmZpZy5qc29ucFN1cHBvcnRlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuUmVxdWVzdCA9IGZ1bmN0aW9uIChtZXRob2QsIHJlc3QsIHVyaSwgaGVhZGVycywgcGFyYW1zLCBib2R5LCBjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVxID0gKDAsIGpzb25wdHJhbnNwb3J0XzEuY3JlYXRlUmVxdWVzdCkodXJpLCBoZWFkZXJzLCBwYXJhbXMsIGJvZHksIFhIUlN0YXRlc18xLmRlZmF1bHQuUkVRX1NFTkQsIHJlc3QgJiYgcmVzdC5vcHRpb25zLnRpbWVvdXRzLCBtZXRob2QpO1xuICAgICAgICAgICAgICAgICAgICByZXEub25jZSgnY29tcGxldGUnLCBjYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgICAgIHBsYXRmb3JtXzEuZGVmYXVsdC5Db25maWcubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVxLmV4ZWMoKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXE7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmRpc2FibGVDb25uZWN0aXZpdHlDaGVjaykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoZWNrQ29ubmVjdGl2aXR5ID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tDb25uZWN0aXZpdHkgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXBVcmwgPSBkZWZhdWx0c18xLmRlZmF1bHQuanNvbnBJbnRlcm5ldFVwVXJsO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY2hlY2tzSW5Qcm9ncmVzcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tzSW5Qcm9ncmVzcy5wdXNoKGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNoZWNrc0luUHJvZ3Jlc3MgPSBbY2FsbGJhY2tdO1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyXzEuZGVmYXVsdC5MT0dfTUlDUk8sICcoSlNPTlApSHR0cC5jaGVja0Nvbm5lY3Rpdml0eSgpJywgJ1NlbmRpbmc7ICcgKyB1cFVybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVxID0gbmV3IGpzb25wdHJhbnNwb3J0XzEuUmVxdWVzdCgnaXNUaGVJbnRlcm5ldFVwJywgdXBVcmwsIG51bGwsIG51bGwsIG51bGwsIFhIUlN0YXRlc18xLmRlZmF1bHQuUkVRX1NFTkQsIGRlZmF1bHRzXzEuZGVmYXVsdC5USU1FT1VUUyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXEub25jZSgnY29tcGxldGUnLCBmdW5jdGlvbiAoZXJyLCByZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSAhZXJyICYmIHJlc3BvbnNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01JQ1JPLCAnKEpTT05QKUh0dHAuY2hlY2tDb25uZWN0aXZpdHkoKScsICdSZXN1bHQ6ICcgKyByZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgX3RoaXMuY2hlY2tzSW5Qcm9ncmVzcy5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuY2hlY2tzSW5Qcm9ncmVzc1tpXShudWxsLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmNoZWNrc0luUHJvZ3Jlc3MgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwbGF0Zm9ybV8xLmRlZmF1bHQuQ29uZmlnLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXEuZXhlYygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocGxhdGZvcm1fMS5kZWZhdWx0LkNvbmZpZy5mZXRjaFN1cHBvcnRlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3VwcG9ydHNBdXRoSGVhZGVycyA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5SZXF1ZXN0ID0gZmV0Y2hyZXF1ZXN0XzEuZGVmYXVsdDtcbiAgICAgICAgICAgICAgICB0aGlzLmNoZWNrQ29ubmVjdGl2aXR5ID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01JQ1JPLCAnKEZldGNoKUh0dHAuY2hlY2tDb25uZWN0aXZpdHkoKScsICdTZW5kaW5nOyAnICsgY29ubmVjdGl2aXR5Q2hlY2tVcmwpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvVXJpKEh0dHBNZXRob2RzXzEuZGVmYXVsdC5HZXQsIG51bGwsIGNvbm5lY3Rpdml0eUNoZWNrVXJsLCBudWxsLCBudWxsLCBudWxsLCBmdW5jdGlvbiAoZXJyLCByZXNwb25zZVRleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSAhZXJyICYmIChyZXNwb25zZVRleHQgPT09IG51bGwgfHwgcmVzcG9uc2VUZXh0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXNwb25zZVRleHQucmVwbGFjZSgvXFxuLywgJycpKSA9PSAneWVzJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQubG9nQWN0aW9uKGxvZ2dlcl8xLmRlZmF1bHQuTE9HX01JQ1JPLCAnKEZldGNoKUh0dHAuY2hlY2tDb25uZWN0aXZpdHkoKScsICdSZXN1bHQ6ICcgKyByZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuUmVxdWVzdCA9IGZ1bmN0aW9uIChtZXRob2QsIHJlc3QsIHVyaSwgaGVhZGVycywgcGFyYW1zLCBib2R5LCBjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhuZXcgZXJyb3JpbmZvXzEuUGFydGlhbEVycm9ySW5mbygnbm8gc3VwcG9ydGVkIEhUVFAgdHJhbnNwb3J0cyBhdmFpbGFibGUnLCBudWxsLCA0MDApLCBudWxsKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8qIFVubGlrZSBmb3IgZG9VcmksIHRoZSAncmVzdCcgcGFyYW0gaGVyZSBpcyBtYW5kYXRvcnksIGFzIGl0J3MgdXNlZCB0byBnZW5lcmF0ZSB0aGUgaG9zdHMgKi9cbiAgICAgICAgY2xhc3NfMS5wcm90b3R5cGUuZG8gPSBmdW5jdGlvbiAobWV0aG9kLCByZXN0LCBwYXRoLCBoZWFkZXJzLCBib2R5LCBwYXJhbXMsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIHVyaUZyb21Ib3N0ID0gdHlwZW9mIHBhdGggPT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICAgID8gcGF0aFxuICAgICAgICAgICAgICAgIDogZnVuY3Rpb24gKGhvc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3QuYmFzZVVyaShob3N0KSArIHBhdGg7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHZhciBjdXJyZW50RmFsbGJhY2sgPSByZXN0Ll9jdXJyZW50RmFsbGJhY2s7XG4gICAgICAgICAgICBpZiAoY3VycmVudEZhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRGYWxsYmFjay52YWxpZFVudGlsID4gVXRpbHMubm93KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgLyogVXNlIHN0b3JlZCBmYWxsYmFjayAqL1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuUmVxdWVzdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sgPT09IG51bGwgfHwgY2FsbGJhY2sgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNhbGxiYWNrKG5ldyBlcnJvcmluZm9fMS5QYXJ0aWFsRXJyb3JJbmZvKCdSZXF1ZXN0IGludm9rZWQgYmVmb3JlIGFzc2lnbmVkIHRvJywgbnVsbCwgNTAwKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5SZXF1ZXN0KG1ldGhvZCwgcmVzdCwgdXJpRnJvbUhvc3QoY3VycmVudEZhbGxiYWNrLmhvc3QpLCBoZWFkZXJzLCBwYXJhbXMsIGJvZHksIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3NbX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIHR5cGVjYXN0IGlzIHNhZmUgYmVjYXVzZSBFcnJub0V4Y2VwdGlvbnMgYXJlIG9ubHkgdGhyb3duIGluIE5vZGVKU1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVyciAmJiBzaG91bGRGYWxsYmFjayhlcnIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogdW5zdG9yZSB0aGUgZmFsbGJhY2sgYW5kIHN0YXJ0IGZyb20gdGhlIHRvcCB3aXRoIHRoZSBkZWZhdWx0IHNlcXVlbmNlICovXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdC5fY3VycmVudEZhbGxiYWNrID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5kbyhtZXRob2QsIHJlc3QsIHBhdGgsIGhlYWRlcnMsIGJvZHksIHBhcmFtcywgY2FsbGJhY2spO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrID09PSBudWxsIHx8IGNhbGxiYWNrID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjYWxsYmFjay5hcHBseSh2b2lkIDAsIHRzbGliXzEuX19zcHJlYWRBcnJheShbZXJyXSwgYXJncywgZmFsc2UpKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8qIEZhbGxiYWNrIGV4cGlyZWQ7IHJlbW92ZSBpdCBhbmQgZmFsbHRocm91Z2ggdG8gbm9ybWFsIHNlcXVlbmNlICovXG4gICAgICAgICAgICAgICAgICAgIHJlc3QuX2N1cnJlbnRGYWxsYmFjayA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGhvc3RzID0gZ2V0SG9zdHMocmVzdCk7XG4gICAgICAgICAgICAvKiBpZiB0aGVyZSBpcyBvbmx5IG9uZSBob3N0IGRvIGl0ICovXG4gICAgICAgICAgICBpZiAoaG9zdHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kb1VyaShtZXRob2QsIHJlc3QsIHVyaUZyb21Ib3N0KGhvc3RzWzBdKSwgaGVhZGVycywgYm9keSwgcGFyYW1zLCBjYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyogaG9zdHMgaXMgYW4gYXJyYXkgd2l0aCBwcmVmZXJyZWQgaG9zdCBwbHVzIGF0IGxlYXN0IG9uZSBmYWxsYmFjayAqL1xuICAgICAgICAgICAgdmFyIHRyeUFIb3N0ID0gZnVuY3Rpb24gKGNhbmRpZGF0ZUhvc3RzLCBwZXJzaXN0T25TdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGhvc3QgPSBjYW5kaWRhdGVIb3N0cy5zaGlmdCgpO1xuICAgICAgICAgICAgICAgIF90aGlzLmRvVXJpKG1ldGhvZCwgcmVzdCwgdXJpRnJvbUhvc3QoaG9zdCksIGhlYWRlcnMsIGJvZHksIHBhcmFtcywgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJnc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIHR5cGVjYXN0IGlzIHNhZmUgYmVjYXVzZSBFcnJub0V4Y2VwdGlvbnMgYXJlIG9ubHkgdGhyb3duIGluIE5vZGVKU1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyICYmIHNob3VsZEZhbGxiYWNrKGVycikgJiYgY2FuZGlkYXRlSG9zdHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnlBSG9zdChjYW5kaWRhdGVIb3N0cywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHBlcnNpc3RPblN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIFJTQzE1ZiAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdC5fY3VycmVudEZhbGxiYWNrID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvc3Q6IGhvc3QsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRVbnRpbDogVXRpbHMubm93KCkgKyByZXN0Lm9wdGlvbnMudGltZW91dHMuZmFsbGJhY2tSZXRyeVRpbWVvdXQsXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrID09PSBudWxsIHx8IGNhbGxiYWNrID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjYWxsYmFjay5hcHBseSh2b2lkIDAsIHRzbGliXzEuX19zcHJlYWRBcnJheShbZXJyXSwgYXJncywgZmFsc2UpKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0cnlBSG9zdChob3N0cyk7XG4gICAgICAgIH07XG4gICAgICAgIGNsYXNzXzEucHJvdG90eXBlLmRvVXJpID0gZnVuY3Rpb24gKG1ldGhvZCwgcmVzdCwgdXJpLCBoZWFkZXJzLCBib2R5LCBwYXJhbXMsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuUmVxdWVzdCkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKG5ldyBlcnJvcmluZm9fMS5QYXJ0aWFsRXJyb3JJbmZvKCdSZXF1ZXN0IGludm9rZWQgYmVmb3JlIGFzc2lnbmVkIHRvJywgbnVsbCwgNTAwKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5SZXF1ZXN0KG1ldGhvZCwgcmVzdCwgdXJpLCBoZWFkZXJzLCBwYXJhbXMsIGJvZHksIGNhbGxiYWNrKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGNsYXNzXzE7XG4gICAgfSgpKSxcbiAgICBfYS5tZXRob2RzID0gW0h0dHBNZXRob2RzXzEuZGVmYXVsdC5HZXQsIEh0dHBNZXRob2RzXzEuZGVmYXVsdC5EZWxldGUsIEh0dHBNZXRob2RzXzEuZGVmYXVsdC5Qb3N0LCBIdHRwTWV0aG9kc18xLmRlZmF1bHQuUHV0LCBIdHRwTWV0aG9kc18xLmRlZmF1bHQuUGF0Y2hdLFxuICAgIF9hLm1ldGhvZHNXaXRob3V0Qm9keSA9IFtIdHRwTWV0aG9kc18xLmRlZmF1bHQuR2V0LCBIdHRwTWV0aG9kc18xLmRlZmF1bHQuRGVsZXRlXSxcbiAgICBfYS5tZXRob2RzV2l0aEJvZHkgPSBbSHR0cE1ldGhvZHNfMS5kZWZhdWx0LlBvc3QsIEh0dHBNZXRob2RzXzEuZGVmYXVsdC5QdXQsIEh0dHBNZXRob2RzXzEuZGVmYXVsdC5QYXRjaF0sXG4gICAgX2EpO1xuZXhwb3J0cy5kZWZhdWx0ID0gSHR0cDtcblxuXG4vKioqLyB9KSxcbi8qIDYzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgdHNsaWJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG52YXIgZXJyb3JpbmZvXzEgPSB0c2xpYl8xLl9faW1wb3J0U3RhcihfX3dlYnBhY2tfcmVxdWlyZV9fKDQpKTtcbnZhciBwbGF0Zm9ybV8xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygzKSk7XG52YXIgZGVmYXVsdHNfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oOCkpO1xudmFyIFV0aWxzID0gdHNsaWJfMS5fX2ltcG9ydFN0YXIoX193ZWJwYWNrX3JlcXVpcmVfXygxKSk7XG52YXIgdXRpbHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5mdW5jdGlvbiBpc0FibHlFcnJvcihyZXNwb25zZUJvZHksIGhlYWRlcnMpIHtcbiAgICByZXR1cm4gISFoZWFkZXJzLmdldCgneC1hYmx5LWVycm9yY29kZScpO1xufVxuZnVuY3Rpb24gZ2V0QWJseUVycm9yKHJlc3BvbnNlQm9keSwgaGVhZGVycykge1xuICAgIGlmIChpc0FibHlFcnJvcihyZXNwb25zZUJvZHksIGhlYWRlcnMpKSB7XG4gICAgICAgIHJldHVybiByZXNwb25zZUJvZHkuZXJyb3IgJiYgZXJyb3JpbmZvXzEuZGVmYXVsdC5mcm9tVmFsdWVzKHJlc3BvbnNlQm9keS5lcnJvcik7XG4gICAgfVxufVxuZnVuY3Rpb24gZmV0Y2hSZXF1ZXN0KG1ldGhvZCwgcmVzdCwgdXJpLCBoZWFkZXJzLCBwYXJhbXMsIGJvZHksIGNhbGxiYWNrKSB7XG4gICAgdmFyIGZldGNoSGVhZGVycyA9IG5ldyBIZWFkZXJzKGhlYWRlcnMgfHwge30pO1xuICAgIHZhciBfbWV0aG9kID0gbWV0aG9kID8gbWV0aG9kLnRvVXBwZXJDYXNlKCkgOiBVdGlscy5pc0VtcHR5QXJnKGJvZHkpID8gJ0dFVCcgOiAnUE9TVCc7XG4gICAgdmFyIGNvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgdmFyIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29udHJvbGxlci5hYm9ydCgpO1xuICAgICAgICBjYWxsYmFjayhuZXcgZXJyb3JpbmZvXzEuUGFydGlhbEVycm9ySW5mbygnUmVxdWVzdCB0aW1lZCBvdXQnLCBudWxsLCA0MDgpKTtcbiAgICB9LCByZXN0ID8gcmVzdC5vcHRpb25zLnRpbWVvdXRzLmh0dHBSZXF1ZXN0VGltZW91dCA6IGRlZmF1bHRzXzEuZGVmYXVsdC5USU1FT1VUUy5odHRwUmVxdWVzdFRpbWVvdXQpO1xuICAgIHZhciByZXF1ZXN0SW5pdCA9IHtcbiAgICAgICAgbWV0aG9kOiBfbWV0aG9kLFxuICAgICAgICBoZWFkZXJzOiBmZXRjaEhlYWRlcnMsXG4gICAgICAgIGJvZHk6IGJvZHksXG4gICAgfTtcbiAgICBpZiAoIXBsYXRmb3JtXzEuZGVmYXVsdC5Db25maWcuaXNXZWJ3b3JrZXIpIHtcbiAgICAgICAgcmVxdWVzdEluaXQuY3JlZGVudGlhbHMgPSBmZXRjaEhlYWRlcnMuaGFzKCdhdXRob3JpemF0aW9uJykgPyAnaW5jbHVkZScgOiAnc2FtZS1vcmlnaW4nO1xuICAgIH1cbiAgICAoMCwgdXRpbHNfMS5nZXRHbG9iYWxPYmplY3QpKClcbiAgICAgICAgLmZldGNoKHVyaSArICc/JyArIG5ldyBVUkxTZWFyY2hQYXJhbXMocGFyYW1zIHx8IHt9KSwgcmVxdWVzdEluaXQpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICB2YXIgY29udGVudFR5cGUgPSByZXMuaGVhZGVycy5nZXQoJ0NvbnRlbnQtVHlwZScpO1xuICAgICAgICB2YXIgcHJvbTtcbiAgICAgICAgaWYgKGNvbnRlbnRUeXBlICYmIGNvbnRlbnRUeXBlLmluZGV4T2YoJ2FwcGxpY2F0aW9uL3gtbXNncGFjaycpID4gLTEpIHtcbiAgICAgICAgICAgIHByb20gPSByZXMuYXJyYXlCdWZmZXIoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjb250ZW50VHlwZSAmJiBjb250ZW50VHlwZS5pbmRleE9mKCdhcHBsaWNhdGlvbi9qc29uJykgPiAtMSkge1xuICAgICAgICAgICAgcHJvbSA9IHJlcy5qc29uKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwcm9tID0gcmVzLnRleHQoKTtcbiAgICAgICAgfVxuICAgICAgICBwcm9tLnRoZW4oZnVuY3Rpb24gKGJvZHkpIHtcbiAgICAgICAgICAgIHZhciB1bnBhY2tlZCA9ICEhY29udGVudFR5cGUgJiYgY29udGVudFR5cGUuaW5kZXhPZignYXBwbGljYXRpb24veC1tc2dwYWNrJykgPT09IC0xO1xuICAgICAgICAgICAgaWYgKCFyZXMub2spIHtcbiAgICAgICAgICAgICAgICB2YXIgZXJyID0gZ2V0QWJseUVycm9yKGJvZHksIHJlcy5oZWFkZXJzKSB8fFxuICAgICAgICAgICAgICAgICAgICBuZXcgZXJyb3JpbmZvXzEuUGFydGlhbEVycm9ySW5mbygnRXJyb3IgcmVzcG9uc2UgcmVjZWl2ZWQgZnJvbSBzZXJ2ZXI6ICcgKyByZXMuc3RhdHVzICsgJyBib2R5IHdhczogJyArIHBsYXRmb3JtXzEuZGVmYXVsdC5Db25maWcuaW5zcGVjdChib2R5KSwgbnVsbCwgcmVzLnN0YXR1cyk7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyLCBib2R5LCByZXMuaGVhZGVycywgdW5wYWNrZWQsIHJlcy5zdGF0dXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgYm9keSwgcmVzLmhlYWRlcnMsIHVucGFja2VkLCByZXMuc3RhdHVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSlcbiAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICBjYWxsYmFjayhlcnIpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gZmV0Y2hSZXF1ZXN0O1xuXG5cbi8qKiovIH0pLFxuLyogNjQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciB0c2xpYl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciBtc2dwYWNrXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKDQxKSk7XG52YXIgVXRpbHMgPSB0c2xpYl8xLl9faW1wb3J0U3RhcihfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKTtcbi8vIFdvcmthcm91bmQgZm9yIHNhbGVzZm9yY2UgbGlnaHRuaW5nIGxvY2tlciBjb21wYXRcbnZhciBnbG9iYWxPYmplY3QgPSBVdGlscy5nZXRHbG9iYWxPYmplY3QoKTtcbmlmICh0eXBlb2YgV2luZG93ID09PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgV29ya2VyR2xvYmFsU2NvcGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgY29uc29sZS5sb2coXCJXYXJuaW5nOiB0aGlzIGRpc3RyaWJ1dGlvbiBvZiBBYmx5IGlzIGludGVuZGVkIGZvciBicm93c2Vycy4gT24gbm9kZWpzLCBwbGVhc2UgdXNlIHRoZSAnYWJseScgcGFja2FnZSBvbiBucG1cIik7XG59XG5mdW5jdGlvbiBhbGxvd0NvbWV0KCkge1xuICAgIC8qIHhociByZXF1ZXN0cyBmcm9tIGxvY2FsIGZpbGVzIGFyZSB1bnJlbGlhYmxlIGluIHNvbWUgYnJvd3NlcnMsIHN1Y2ggYXMgQ2hyb21lIDY1IGFuZCBoaWdoZXIgLS0gc2VlIGVnXG4gICAgICogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNDkyNTY0MjkvY2hyb21lLTY1LXVuYWJsZS10by1tYWtlLXBvc3QtcmVxdWVzdHMtZnJvbS1sb2NhbC1maWxlcy10by1mbGFza1xuICAgICAqIFNvIGlmIHdlYnNvY2tldHMgYXJlIHN1cHBvcnRlZCwgdGhlbiBqdXN0IGZvcmdldCBhYm91dCBjb21ldCB0cmFuc3BvcnRzIGFuZCB1c2UgdGhhdCAqL1xuICAgIHZhciBsb2MgPSBnbG9iYWxPYmplY3QubG9jYXRpb247XG4gICAgcmV0dXJuICFnbG9iYWxPYmplY3QuV2ViU29ja2V0IHx8ICFsb2MgfHwgIWxvYy5vcmlnaW4gfHwgbG9jLm9yaWdpbi5pbmRleE9mKCdodHRwJykgPiAtMTtcbn1cbnZhciB1c2VyQWdlbnQgPSBnbG9iYWxPYmplY3QubmF2aWdhdG9yICYmIGdsb2JhbE9iamVjdC5uYXZpZ2F0b3IudXNlckFnZW50LnRvU3RyaW5nKCk7XG52YXIgY3VycmVudFVybCA9IGdsb2JhbE9iamVjdC5sb2NhdGlvbiAmJiBnbG9iYWxPYmplY3QubG9jYXRpb24uaHJlZjtcbnZhciBDb25maWcgPSB7XG4gICAgYWdlbnQ6ICdicm93c2VyJyxcbiAgICBsb2dUaW1lc3RhbXBzOiB0cnVlLFxuICAgIHVzZXJBZ2VudDogdXNlckFnZW50LFxuICAgIGN1cnJlbnRVcmw6IGN1cnJlbnRVcmwsXG4gICAgbm9VcGdyYWRlOiB1c2VyQWdlbnQgJiYgISF1c2VyQWdlbnQubWF0Y2goL01TSUVcXHM4XFwuMC8pLFxuICAgIGJpbmFyeVR5cGU6ICdhcnJheWJ1ZmZlcicsXG4gICAgV2ViU29ja2V0OiBnbG9iYWxPYmplY3QuV2ViU29ja2V0LFxuICAgIGZldGNoU3VwcG9ydGVkOiAhIWdsb2JhbE9iamVjdC5mZXRjaCxcbiAgICB4aHJTdXBwb3J0ZWQ6IGdsb2JhbE9iamVjdC5YTUxIdHRwUmVxdWVzdCAmJiAnd2l0aENyZWRlbnRpYWxzJyBpbiBuZXcgWE1MSHR0cFJlcXVlc3QoKSxcbiAgICBqc29ucFN1cHBvcnRlZDogdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyxcbiAgICBhbGxvd0NvbWV0OiBhbGxvd0NvbWV0KCksXG4gICAgc3RyZWFtaW5nU3VwcG9ydGVkOiB0cnVlLFxuICAgIHVzZVByb3RvY29sSGVhcnRiZWF0czogdHJ1ZSxcbiAgICBjcmVhdGVIbWFjOiBudWxsLFxuICAgIG1zZ3BhY2s6IG1zZ3BhY2tfMS5kZWZhdWx0LFxuICAgIHN1cHBvcnRzQmluYXJ5OiAhIWdsb2JhbE9iamVjdC5UZXh0RGVjb2RlcixcbiAgICBwcmVmZXJCaW5hcnk6IGZhbHNlLFxuICAgIEFycmF5QnVmZmVyOiBnbG9iYWxPYmplY3QuQXJyYXlCdWZmZXIsXG4gICAgYXRvYjogZ2xvYmFsT2JqZWN0LmF0b2IsXG4gICAgbmV4dFRpY2s6IHR5cGVvZiBnbG9iYWxPYmplY3Quc2V0SW1tZWRpYXRlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICA/IGdsb2JhbE9iamVjdC5zZXRJbW1lZGlhdGUuYmluZChnbG9iYWxPYmplY3QpXG4gICAgICAgIDogZnVuY3Rpb24gKGYpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZiwgMCk7XG4gICAgICAgIH0sXG4gICAgYWRkRXZlbnRMaXN0ZW5lcjogZ2xvYmFsT2JqZWN0LmFkZEV2ZW50TGlzdGVuZXIsXG4gICAgaW5zcGVjdDogSlNPTi5zdHJpbmdpZnksXG4gICAgc3RyaW5nQnl0ZVNpemU6IGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgICAgLyogc3RyLmxlbmd0aCB3aWxsIGJlIGFuIHVuZGVyZXN0aW1hdGUgZm9yIG5vbi1hc2NpaSBzdHJpbmdzLiBCdXQgaWYgd2UncmVcbiAgICAgICAgICogaW4gYSBicm93c2VyIHRvbyBvbGQgdG8gc3VwcG9ydCBUZXh0RGVjb2Rlciwgbm90IG11Y2ggd2UgY2FuIGRvLiBCZXR0ZXJcbiAgICAgICAgICogdG8gdW5kZXJlc3RpbWF0ZSwgc28gaWYgd2UgZG8gZ28gb3Zlci1zaXplLCB0aGUgc2VydmVyIHdpbGwgcmVqZWN0IHRoZVxuICAgICAgICAgKiBtZXNzYWdlICovXG4gICAgICAgIHJldHVybiAoZ2xvYmFsT2JqZWN0LlRleHREZWNvZGVyICYmIG5ldyBnbG9iYWxPYmplY3QuVGV4dEVuY29kZXIoKS5lbmNvZGUoc3RyKS5sZW5ndGgpIHx8IHN0ci5sZW5ndGg7XG4gICAgfSxcbiAgICBUZXh0RW5jb2RlcjogZ2xvYmFsT2JqZWN0LlRleHRFbmNvZGVyLFxuICAgIFRleHREZWNvZGVyOiBnbG9iYWxPYmplY3QuVGV4dERlY29kZXIsXG4gICAgUHJvbWlzZTogZ2xvYmFsT2JqZWN0LlByb21pc2UsXG4gICAgZ2V0UmFuZG9tVmFsdWVzOiAoZnVuY3Rpb24gKGNyeXB0bykge1xuICAgICAgICBpZiAoY3J5cHRvID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhcnIsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKGFycik7XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9KShnbG9iYWxPYmplY3QuY3J5cHRvIHx8IG1zQ3J5cHRvKSxcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBDb25maWc7XG5cblxuLyoqKi8gfSksXG4vKiA2NSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihnbG9iYWwpIHtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciB0c2xpYl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciBVdGlscyA9IHRzbGliXzEuX19pbXBvcnRTdGFyKF9fd2VicGFja19yZXF1aXJlX18oMSkpO1xudmFyIHRlc3QgPSAnYWJseWpzLXN0b3JhZ2UtdGVzdCc7XG52YXIgV2Vic3RvcmFnZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBXZWJzdG9yYWdlKCkge1xuICAgICAgICAvKiBFdmVuIGp1c3QgYWNjZXNzaW5nIHRoZSBzZXNzaW9uL2xvY2FsU3RvcmFnZSBvYmplY3QgY2FuIHRocm93IGFcbiAgICAgICAgICogc2VjdXJpdHkgZXhjZXB0aW9uIGluIHNvbWUgY2lyY3Vtc3RhbmNlcyB3aXRoIHNvbWUgYnJvd3NlcnMuIEluXG4gICAgICAgICAqIG90aGVycywgY2FsbGluZyBzZXRJdGVtIHdpbGwgdGhyb3cuIFNvIGhhdmUgdG8gY2hlY2sgaW4gdGhpc1xuICAgICAgICAgKiBzb21ld2hhdCByb3VuZGFib3V0IHdheS4gKElmIHVuc3VwcG9ydGVkIG9yIG5vIGdsb2JhbCBvYmplY3QsXG4gICAgICAgICAqIHdpbGwgdGhyb3cgb24gYWNjZXNzaW5nIGEgcHJvcGVydHkgb2YgdW5kZWZpbmVkKSAqL1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZ2xvYmFsLnNlc3Npb25TdG9yYWdlLnNldEl0ZW0odGVzdCwgdGVzdCk7XG4gICAgICAgICAgICBnbG9iYWwuc2Vzc2lvblN0b3JhZ2UucmVtb3ZlSXRlbSh0ZXN0KTtcbiAgICAgICAgICAgIHRoaXMuc2Vzc2lvblN1cHBvcnRlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHRoaXMuc2Vzc2lvblN1cHBvcnRlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBnbG9iYWwubG9jYWxTdG9yYWdlLnNldEl0ZW0odGVzdCwgdGVzdCk7XG4gICAgICAgICAgICBnbG9iYWwubG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0odGVzdCk7XG4gICAgICAgICAgICB0aGlzLmxvY2FsU3VwcG9ydGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdGhpcy5sb2NhbFN1cHBvcnRlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIFdlYnN0b3JhZ2UucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXQobmFtZSwgZmFsc2UpO1xuICAgIH07XG4gICAgV2Vic3RvcmFnZS5wcm90b3R5cGUuZ2V0U2Vzc2lvbiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXQobmFtZSwgdHJ1ZSk7XG4gICAgfTtcbiAgICBXZWJzdG9yYWdlLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVtb3ZlKG5hbWUsIGZhbHNlKTtcbiAgICB9O1xuICAgIFdlYnN0b3JhZ2UucHJvdG90eXBlLnJlbW92ZVNlc3Npb24gPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVtb3ZlKG5hbWUsIHRydWUpO1xuICAgIH07XG4gICAgV2Vic3RvcmFnZS5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlLCB0dGwpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NldChuYW1lLCB2YWx1ZSwgdHRsLCBmYWxzZSk7XG4gICAgfTtcbiAgICBXZWJzdG9yYWdlLnByb3RvdHlwZS5zZXRTZXNzaW9uID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlLCB0dGwpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NldChuYW1lLCB2YWx1ZSwgdHRsLCB0cnVlKTtcbiAgICB9O1xuICAgIFdlYnN0b3JhZ2UucHJvdG90eXBlLl9zZXQgPSBmdW5jdGlvbiAobmFtZSwgdmFsdWUsIHR0bCwgc2Vzc2lvbikge1xuICAgICAgICB2YXIgd3JhcHBlZFZhbHVlID0geyB2YWx1ZTogdmFsdWUgfTtcbiAgICAgICAgaWYgKHR0bCkge1xuICAgICAgICAgICAgd3JhcHBlZFZhbHVlLmV4cGlyZXMgPSBVdGlscy5ub3coKSArIHR0bDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5zdG9yYWdlSW50ZXJmYWNlKHNlc3Npb24pLnNldEl0ZW0obmFtZSwgSlNPTi5zdHJpbmdpZnkod3JhcHBlZFZhbHVlKSk7XG4gICAgfTtcbiAgICBXZWJzdG9yYWdlLnByb3RvdHlwZS5fZ2V0ID0gZnVuY3Rpb24gKG5hbWUsIHNlc3Npb24pIHtcbiAgICAgICAgaWYgKHNlc3Npb24gJiYgIXRoaXMuc2Vzc2lvblN1cHBvcnRlZClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignU2Vzc2lvbiBTdG9yYWdlIG5vdCBzdXBwb3J0ZWQnKTtcbiAgICAgICAgaWYgKCFzZXNzaW9uICYmICF0aGlzLmxvY2FsU3VwcG9ydGVkKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdMb2NhbCBTdG9yYWdlIG5vdCBzdXBwb3J0ZWQnKTtcbiAgICAgICAgdmFyIHJhd0l0ZW0gPSB0aGlzLnN0b3JhZ2VJbnRlcmZhY2Uoc2Vzc2lvbikuZ2V0SXRlbShuYW1lKTtcbiAgICAgICAgaWYgKCFyYXdJdGVtKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIHZhciB3cmFwcGVkVmFsdWUgPSBKU09OLnBhcnNlKHJhd0l0ZW0pO1xuICAgICAgICBpZiAod3JhcHBlZFZhbHVlLmV4cGlyZXMgJiYgd3JhcHBlZFZhbHVlLmV4cGlyZXMgPCBVdGlscy5ub3coKSkge1xuICAgICAgICAgICAgdGhpcy5zdG9yYWdlSW50ZXJmYWNlKHNlc3Npb24pLnJlbW92ZUl0ZW0obmFtZSk7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JhcHBlZFZhbHVlLnZhbHVlO1xuICAgIH07XG4gICAgV2Vic3RvcmFnZS5wcm90b3R5cGUuX3JlbW92ZSA9IGZ1bmN0aW9uIChuYW1lLCBzZXNzaW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0b3JhZ2VJbnRlcmZhY2Uoc2Vzc2lvbikucmVtb3ZlSXRlbShuYW1lKTtcbiAgICB9O1xuICAgIFdlYnN0b3JhZ2UucHJvdG90eXBlLnN0b3JhZ2VJbnRlcmZhY2UgPSBmdW5jdGlvbiAoc2Vzc2lvbikge1xuICAgICAgICByZXR1cm4gc2Vzc2lvbiA/IGdsb2JhbC5zZXNzaW9uU3RvcmFnZSA6IGdsb2JhbC5sb2NhbFN0b3JhZ2U7XG4gICAgfTtcbiAgICByZXR1cm4gV2Vic3RvcmFnZTtcbn0oKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBuZXcgV2Vic3RvcmFnZSgpO1xuXG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwodGhpcywgX193ZWJwYWNrX3JlcXVpcmVfXygxMykpKVxuXG4vKioqLyB9KSxcbi8qIDY2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgdHNsaWJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG52YXIgVHJhbnNwb3J0TmFtZXNfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oNjcpKTtcbnZhciBEZWZhdWx0cyA9IHtcbiAgICBjb25uZWN0aXZpdHlDaGVja1VybDogJ2h0dHBzOi8vaW50ZXJuZXQtdXAuYWJseS1yZWFsdGltZS5jb20vaXMtdGhlLWludGVybmV0LXVwLnR4dCcsXG4gICAganNvbnBJbnRlcm5ldFVwVXJsOiAnaHR0cHM6Ly9pbnRlcm5ldC11cC5hYmx5LXJlYWx0aW1lLmNvbS9pcy10aGUtaW50ZXJuZXQtdXAtMC05LmpzJyxcbiAgICAvKiBPcmRlciBtYXR0ZXJzIGhlcmU6IHRoZSBiYXNlIHRyYW5zcG9ydCBpcyB0aGUgbGVmdG1vc3Qgb25lIGluIHRoZVxuICAgICAqIGludGVyc2VjdGlvbiBvZiBiYXNlVHJhbnNwb3J0T3JkZXIgYW5kIHRoZSB0cmFuc3BvcnRzIGNsaWVudE9wdGlvbiB0aGF0J3NcbiAgICAgKiBzdXBwb3J0ZWQuICBUaGlzIGlzIG5vdCBxdWl0ZSB0aGUgc2FtZSBhcyB0aGUgcHJlZmVyZW5jZSBvcmRlciAtLSBlLmcuXG4gICAgICogeGhyX3BvbGxpbmcgaXMgcHJlZmVycmVkIHRvIGpzb25wLCBidXQgZm9yIGJyb3dzZXJzIHRoYXQgc3VwcG9ydCBpdCB3ZSB3YW50XG4gICAgICogdGhlIGJhc2UgdHJhbnNwb3J0IHRvIGJlIHhocl9wb2xsaW5nLCBub3QganNvbnAgKi9cbiAgICBkZWZhdWx0VHJhbnNwb3J0czogW1xuICAgICAgICBUcmFuc3BvcnROYW1lc18xLmRlZmF1bHQuWGhyUG9sbGluZyxcbiAgICAgICAgVHJhbnNwb3J0TmFtZXNfMS5kZWZhdWx0LlhoclN0cmVhbWluZyxcbiAgICAgICAgVHJhbnNwb3J0TmFtZXNfMS5kZWZhdWx0Lkpzb25QLFxuICAgICAgICBUcmFuc3BvcnROYW1lc18xLmRlZmF1bHQuV2ViU29ja2V0LFxuICAgIF0sXG4gICAgYmFzZVRyYW5zcG9ydE9yZGVyOiBbXG4gICAgICAgIFRyYW5zcG9ydE5hbWVzXzEuZGVmYXVsdC5YaHJQb2xsaW5nLFxuICAgICAgICBUcmFuc3BvcnROYW1lc18xLmRlZmF1bHQuWGhyU3RyZWFtaW5nLFxuICAgICAgICBUcmFuc3BvcnROYW1lc18xLmRlZmF1bHQuSnNvblAsXG4gICAgICAgIFRyYW5zcG9ydE5hbWVzXzEuZGVmYXVsdC5XZWJTb2NrZXQsXG4gICAgXSxcbiAgICB0cmFuc3BvcnRQcmVmZXJlbmNlT3JkZXI6IFtcbiAgICAgICAgVHJhbnNwb3J0TmFtZXNfMS5kZWZhdWx0Lkpzb25QLFxuICAgICAgICBUcmFuc3BvcnROYW1lc18xLmRlZmF1bHQuWGhyUG9sbGluZyxcbiAgICAgICAgVHJhbnNwb3J0TmFtZXNfMS5kZWZhdWx0LlhoclN0cmVhbWluZyxcbiAgICAgICAgVHJhbnNwb3J0TmFtZXNfMS5kZWZhdWx0LldlYlNvY2tldCxcbiAgICBdLFxuICAgIHVwZ3JhZGVUcmFuc3BvcnRzOiBbVHJhbnNwb3J0TmFtZXNfMS5kZWZhdWx0LlhoclN0cmVhbWluZywgVHJhbnNwb3J0TmFtZXNfMS5kZWZhdWx0LldlYlNvY2tldF0sXG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gRGVmYXVsdHM7XG5cblxuLyoqKi8gfSksXG4vKiA2NyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFRyYW5zcG9ydE5hbWVzO1xuKGZ1bmN0aW9uIChUcmFuc3BvcnROYW1lcykge1xuICAgIFRyYW5zcG9ydE5hbWVzW1wiV2ViU29ja2V0XCJdID0gXCJ3ZWJfc29ja2V0XCI7XG4gICAgVHJhbnNwb3J0TmFtZXNbXCJDb21ldFwiXSA9IFwiY29tZXRcIjtcbiAgICBUcmFuc3BvcnROYW1lc1tcIlhoclN0cmVhbWluZ1wiXSA9IFwieGhyX3N0cmVhbWluZ1wiO1xuICAgIFRyYW5zcG9ydE5hbWVzW1wiWGhyUG9sbGluZ1wiXSA9IFwieGhyX3BvbGxpbmdcIjtcbiAgICBUcmFuc3BvcnROYW1lc1tcIkpzb25QXCJdID0gXCJqc29ucFwiO1xufSkoVHJhbnNwb3J0TmFtZXMgfHwgKFRyYW5zcG9ydE5hbWVzID0ge30pKTtcbmV4cG9ydHMuZGVmYXVsdCA9IFRyYW5zcG9ydE5hbWVzO1xuXG5cbi8qKiovIH0pLFxuLyogNjggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vLyBFU00gQ09NUEFUIEZMQUdcbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcblxuLy8gRVhURVJOQUwgTU9EVUxFOiAuL3NyYy9wbGF0Zm9ybS93ZWIvbGliL3RyYW5zcG9ydC9qc29ucHRyYW5zcG9ydC50c1xudmFyIGpzb25wdHJhbnNwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOSk7XG52YXIganNvbnB0cmFuc3BvcnRfZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oanNvbnB0cmFuc3BvcnQpO1xuXG4vLyBFWFRFUk5BTCBNT0RVTEU6IC4vc3JjL2NvbW1vbi9saWIvdXRpbC91dGlscy50c1xudmFyIHV0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblxuLy8gRVhURVJOQUwgTU9EVUxFOiAuL3NyYy9jb21tb24vcGxhdGZvcm0udHNcbnZhciBwbGF0Zm9ybSA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG52YXIgcGxhdGZvcm1fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4ocGxhdGZvcm0pO1xuXG4vLyBFWFRFUk5BTCBNT0RVTEU6IC4vc3JjL2NvbW1vbi9saWIvdHJhbnNwb3J0L2NvbWV0dHJhbnNwb3J0LnRzXG52YXIgY29tZXR0cmFuc3BvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKTtcbnZhciBjb21ldHRyYW5zcG9ydF9kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihjb21ldHRyYW5zcG9ydCk7XG5cbi8vIEVYVEVSTkFMIE1PRFVMRTogLi9zcmMvcGxhdGZvcm0vd2ViL2xpYi90cmFuc3BvcnQveGhycmVxdWVzdC50c1xudmFyIHhocnJlcXVlc3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2KTtcbnZhciB4aHJyZXF1ZXN0X2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKHhocnJlcXVlc3QpO1xuXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9wbGF0Zm9ybS93ZWIvbGliL3RyYW5zcG9ydC94aHJwb2xsaW5ndHJhbnNwb3J0LmpzXG5cblxuXG5cblxudmFyIHhocnBvbGxpbmd0cmFuc3BvcnRfWEhSUG9sbGluZ1RyYW5zcG9ydCA9IGZ1bmN0aW9uIChjb25uZWN0aW9uTWFuYWdlcikge1xuICB2YXIgc2hvcnROYW1lID0gJ3hocl9wb2xsaW5nJztcblxuICBmdW5jdGlvbiBYSFJQb2xsaW5nVHJhbnNwb3J0KGNvbm5lY3Rpb25NYW5hZ2VyLCBhdXRoLCBwYXJhbXMpIHtcbiAgICBwYXJhbXMuc3RyZWFtID0gZmFsc2U7XG4gICAgY29tZXR0cmFuc3BvcnRfZGVmYXVsdC5hLmNhbGwodGhpcywgY29ubmVjdGlvbk1hbmFnZXIsIGF1dGgsIHBhcmFtcyk7XG4gICAgdGhpcy5zaG9ydE5hbWUgPSBzaG9ydE5hbWU7XG4gIH1cbiAgdXRpbHNbXCJpbmhlcml0c1wiXShYSFJQb2xsaW5nVHJhbnNwb3J0LCBjb21ldHRyYW5zcG9ydF9kZWZhdWx0LmEpO1xuXG4gIFhIUlBvbGxpbmdUcmFuc3BvcnQuaXNBdmFpbGFibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHBsYXRmb3JtX2RlZmF1bHQuYS5Db25maWcueGhyU3VwcG9ydGVkICYmIHBsYXRmb3JtX2RlZmF1bHQuYS5Db25maWcuYWxsb3dDb21ldDtcbiAgfTtcblxuICBYSFJQb2xsaW5nVHJhbnNwb3J0LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJ1hIUlBvbGxpbmdUcmFuc3BvcnQ7IHVyaT0nICsgdGhpcy5iYXNlVXJpICsgJzsgaXNDb25uZWN0ZWQ9JyArIHRoaXMuaXNDb25uZWN0ZWQ7XG4gIH07XG5cbiAgWEhSUG9sbGluZ1RyYW5zcG9ydC5wcm90b3R5cGUuY3JlYXRlUmVxdWVzdCA9IGZ1bmN0aW9uICh1cmksIGhlYWRlcnMsIHBhcmFtcywgYm9keSwgcmVxdWVzdE1vZGUpIHtcbiAgICByZXR1cm4geGhycmVxdWVzdF9kZWZhdWx0LmEuY3JlYXRlUmVxdWVzdCh1cmksIGhlYWRlcnMsIHBhcmFtcywgYm9keSwgcmVxdWVzdE1vZGUsIHRoaXMudGltZW91dHMpO1xuICB9O1xuXG4gIGlmICh0eXBlb2YgY29ubmVjdGlvbk1hbmFnZXIgIT09ICd1bmRlZmluZWQnICYmIFhIUlBvbGxpbmdUcmFuc3BvcnQuaXNBdmFpbGFibGUoKSkge1xuICAgIGNvbm5lY3Rpb25NYW5hZ2VyLnN1cHBvcnRlZFRyYW5zcG9ydHNbc2hvcnROYW1lXSA9IFhIUlBvbGxpbmdUcmFuc3BvcnQ7XG4gIH1cblxuICByZXR1cm4gWEhSUG9sbGluZ1RyYW5zcG9ydDtcbn07XG5cbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIHhocnBvbGxpbmd0cmFuc3BvcnQgPSAoeGhycG9sbGluZ3RyYW5zcG9ydF9YSFJQb2xsaW5nVHJhbnNwb3J0KTtcblxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvcGxhdGZvcm0vd2ViL2xpYi90cmFuc3BvcnQveGhyc3RyZWFtaW5ndHJhbnNwb3J0LmpzXG5cblxuXG5cblxudmFyIHhocnN0cmVhbWluZ3RyYW5zcG9ydF9YSFJTdHJlYW1pbmdUcmFuc3BvcnQgPSBmdW5jdGlvbiAoY29ubmVjdGlvbk1hbmFnZXIpIHtcbiAgdmFyIHNob3J0TmFtZSA9ICd4aHJfc3RyZWFtaW5nJztcblxuICAvKiBwdWJsaWMgY29uc3RydWN0b3IgKi9cbiAgZnVuY3Rpb24gWEhSU3RyZWFtaW5nVHJhbnNwb3J0KGNvbm5lY3Rpb25NYW5hZ2VyLCBhdXRoLCBwYXJhbXMpIHtcbiAgICBjb21ldHRyYW5zcG9ydF9kZWZhdWx0LmEuY2FsbCh0aGlzLCBjb25uZWN0aW9uTWFuYWdlciwgYXV0aCwgcGFyYW1zKTtcbiAgICB0aGlzLnNob3J0TmFtZSA9IHNob3J0TmFtZTtcbiAgfVxuICB1dGlsc1tcImluaGVyaXRzXCJdKFhIUlN0cmVhbWluZ1RyYW5zcG9ydCwgY29tZXR0cmFuc3BvcnRfZGVmYXVsdC5hKTtcblxuICBYSFJTdHJlYW1pbmdUcmFuc3BvcnQuaXNBdmFpbGFibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHBsYXRmb3JtX2RlZmF1bHQuYS5Db25maWcueGhyU3VwcG9ydGVkICYmIHBsYXRmb3JtX2RlZmF1bHQuYS5Db25maWcuc3RyZWFtaW5nU3VwcG9ydGVkICYmIHBsYXRmb3JtX2RlZmF1bHQuYS5Db25maWcuYWxsb3dDb21ldDtcbiAgfTtcblxuICBYSFJTdHJlYW1pbmdUcmFuc3BvcnQucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAnWEhSU3RyZWFtaW5nVHJhbnNwb3J0OyB1cmk9JyArIHRoaXMuYmFzZVVyaSArICc7IGlzQ29ubmVjdGVkPScgKyB0aGlzLmlzQ29ubmVjdGVkO1xuICB9O1xuXG4gIFhIUlN0cmVhbWluZ1RyYW5zcG9ydC5wcm90b3R5cGUuY3JlYXRlUmVxdWVzdCA9IGZ1bmN0aW9uICh1cmksIGhlYWRlcnMsIHBhcmFtcywgYm9keSwgcmVxdWVzdE1vZGUpIHtcbiAgICByZXR1cm4geGhycmVxdWVzdF9kZWZhdWx0LmEuY3JlYXRlUmVxdWVzdCh1cmksIGhlYWRlcnMsIHBhcmFtcywgYm9keSwgcmVxdWVzdE1vZGUsIHRoaXMudGltZW91dHMpO1xuICB9O1xuXG4gIGlmICh0eXBlb2YgY29ubmVjdGlvbk1hbmFnZXIgIT09ICd1bmRlZmluZWQnICYmIFhIUlN0cmVhbWluZ1RyYW5zcG9ydC5pc0F2YWlsYWJsZSgpKSB7XG4gICAgY29ubmVjdGlvbk1hbmFnZXIuc3VwcG9ydGVkVHJhbnNwb3J0c1tzaG9ydE5hbWVdID0gWEhSU3RyZWFtaW5nVHJhbnNwb3J0O1xuICB9XG5cbiAgcmV0dXJuIFhIUlN0cmVhbWluZ1RyYW5zcG9ydDtcbn07XG5cbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIHhocnN0cmVhbWluZ3RyYW5zcG9ydCA9ICh4aHJzdHJlYW1pbmd0cmFuc3BvcnRfWEhSU3RyZWFtaW5nVHJhbnNwb3J0KTtcblxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvcGxhdGZvcm0vd2ViL2xpYi90cmFuc3BvcnQvaW5kZXguanNcblxuXG5cblxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgdHJhbnNwb3J0ID0gX193ZWJwYWNrX2V4cG9ydHNfX1tcImRlZmF1bHRcIl0gPSAoW2pzb25wdHJhbnNwb3J0X2RlZmF1bHQuYSwgeGhycG9sbGluZ3RyYW5zcG9ydCwgeGhyc3RyZWFtaW5ndHJhbnNwb3J0XSk7XG5cblxuLyoqKi8gfSlcbi8qKioqKiovIF0pW1wiZGVmYXVsdFwiXTtcbn0pOyIsIid1c2Ugc3RyaWN0JztcbmZ1bmN0aW9uIHByb21pc2lmeU9wdGlvbnMob3B0aW9ucykge1xuICBpZiAodHlwZW9mIG9wdGlvbnMgPT0gJ3N0cmluZycpIHtcbiAgICBvcHRpb25zID0gb3B0aW9ucy5pbmRleE9mKCc6JykgPT0gLTEgPyB7IHRva2VuOiBvcHRpb25zIH0gOiB7IGtleTogb3B0aW9ucyB9O1xuICB9XG4gIG9wdGlvbnMucHJvbWlzZXMgPSB0cnVlO1xuICByZXR1cm4gb3B0aW9ucztcbn1cblxuLyogUGxlYXNlIG5vdGUgdGhhdCB0aGUgZmlsZSBpbXBvcnRlZCBiZWxvdyBpcyBvbmx5IGdlbmVyYXRlZCBhZnRlciBydW5uaW5nXG4gKiB0aGUgYnVpbGQgdGFzay4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdmFyLXJlcXVpcmVzXG52YXIgQWJseSA9IHJlcXVpcmUoJy4vYnVpbGQvYWJseS1ub2RlJyk7XG5cbnZhciBSZXN0UHJvbWlzZSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gIHJldHVybiBuZXcgQWJseS5SZXN0KHByb21pc2lmeU9wdGlvbnMob3B0aW9ucykpO1xufTtcbk9iamVjdC5hc3NpZ24oUmVzdFByb21pc2UsIEFibHkuUmVzdCk7XG5cbnZhciBSZWFsdGltZVByb21pc2UgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICByZXR1cm4gbmV3IEFibHkuUmVhbHRpbWUocHJvbWlzaWZ5T3B0aW9ucyhvcHRpb25zKSk7XG59O1xuT2JqZWN0LmFzc2lnbihSZWFsdGltZVByb21pc2UsIEFibHkuUmVhbHRpbWUpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgUmVzdDogUmVzdFByb21pc2UsXG4gIFJlYWx0aW1lOiBSZWFsdGltZVByb21pc2UsXG59O1xuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsImltcG9ydCBhYmx5IGZyb20gXCJhYmx5L3Byb21pc2VzXCI7XG5cbmNvbnN0IEFQSV9LRVkgPSBcIlo5b3Etdy5TZUMwc0E6UldjaFFWb2U1T1c2SEN4X29nay1wUnRfZzJxb0JrekUzaHVoeGRzU0lfQVwiO1xuXG5jb25zdCBtZXNzYWdlcyA9IHtcbiAgbW92ZTogXCJtb3ZlXCIsXG4gIG1lc3NhZ2U6IFwibWVzc2FnZVwiLFxufTtcblxuY2xhc3MgU2VydmVyIHtcbiAgYXN5bmMgaW5pdCgpIHtcbiAgICB0aGlzLnNlcnZlciA9IGF3YWl0IHRoaXMuY29ubmVjdCgpO1xuICAgIGF3YWl0IHRoaXMuY3JlYXRlQ2hhbm5lbChcImdhbWVcIik7XG4gIH1cblxuICBhc3luYyBjb25uZWN0KCkge1xuICAgIC8vIEZvciB0aGUgZnVsbCBjb2RlIHNhbXBsZSBzZWUgaGVyZTogaHR0cHM6Ly9naXRodWIuY29tL2FibHkvcXVpY2tzdGFydC1qc1xuICAgIGNvbnN0IHNlcnZlciA9IG5ldyBhYmx5LlJlYWx0aW1lLlByb21pc2UoQVBJX0tFWSk7XG5cbiAgICBhd2FpdCBzZXJ2ZXIuY29ubmVjdGlvbi5vbmNlKFwiY29ubmVjdGVkXCIpO1xuICAgIGNvbnNvbGUubG9nKFwiQ29ubmVjdGVkIHRvIEFibHkhXCIpO1xuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJiZWZvcmV1bmxvYWRcIiwgKCkgPT4gYWJseS5jbG9zZSgpKTtcblxuICAgIHJldHVybiBzZXJ2ZXI7XG4gIH1cblxuICBhc3luYyBjcmVhdGVDaGFubmVsKGNoYW5uZWxOYW1lKSB7XG4gICAgdGhpcy5jaGFubmVsID0gdGhpcy5zZXJ2ZXIuY2hhbm5lbHMuZ2V0KGNoYW5uZWxOYW1lKTtcblxuICAgIGF3YWl0IHRoaXMuY2hhbm5lbC5zdWJzY3JpYmUobWVzc2FnZXMubW92ZSwgKG1lc3NhZ2UpID0+XG4gICAgICB0aGlzLm9uU2VydmVyTWVzc2FnZShtZXNzYWdlKVxuICAgICk7XG4gIH1cblxuICBhc3luYyBtYWtlTW92ZShkYXRhKSB7XG4gICAgYXdhaXQgdGhpcy5jaGFubmVsLnB1Ymxpc2gobWVzc2FnZXMubW92ZSwgSlNPTi5zdHJpbmdpZnkoZGF0YSkpO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBzZXJ2ZXIgPSBuZXcgU2VydmVyKCk7XG4iLCJleHBvcnQgY2xhc3MgVmlldyB7XG4gIGFsbENlbGxzRnVsbCA9IDA7XG4gIGNlbGxzID0gW107XG5cblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnBhcmVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicGFyZW50XCIpO1xuXG4gICAgY29uc3QgdGljVGFjVG9lRGl2ID0gdGhpcy5jcmVhdGVEaXYoXCJ0aWN0YWN0b2VEaXZcIik7XG4gICAgdGhpcy5wYXJlbnQuYXBwZW5kQ2hpbGQodGljVGFjVG9lRGl2KTtcblxuICAgIHRoaXMuYnV0dG9uVG9waWMgPSB0aGlzLmNyZWF0ZUJ1dHRvbihcImJ1dHRvblRvcGljXCIpO1xuICAgIHRpY1RhY1RvZURpdi5hcHBlbmRDaGlsZCh0aGlzLmJ1dHRvblRvcGljKTtcblxuICAgIGNvbnN0IHBsYXllckRpdiA9IHRoaXMuY3JlYXRlRGl2KFwicGxheWVyRGl2XCIpO1xuICAgIHRpY1RhY1RvZURpdi5hcHBlbmRDaGlsZChwbGF5ZXJEaXYpO1xuXG4gICAgdGhpcy5wbGF5ZXIgPSB0aGlzLmNyZWF0ZURpdihcInBsYXllclwiKTtcbiAgICB0aGlzLnBsYXllci5pbm5lckhUTUwgPSBcIlggVHVyblwiO1xuICAgIHBsYXllckRpdi5hcHBlbmRDaGlsZCh0aGlzLnBsYXllcik7XG5cbiAgICB0aGlzLmNvbW1lbnRzID0gdGhpcy5jcmVhdGVEaXYoXCJwbGF5ZXJQXCIpO1xuICAgIHBsYXllckRpdi5hcHBlbmRDaGlsZCh0aGlzLmNvbW1lbnRzKTtcblxuICAgIGNvbnN0IGNlbGxEaXYgPSB0aGlzLmNyZWF0ZURpdihcImNlbGxEaXZcIik7XG4gICAgdGljVGFjVG9lRGl2LmFwcGVuZENoaWxkKGNlbGxEaXYpO1xuXG4gICAgdGhpcy5jcmVhdGVDZWxscyhjZWxsRGl2KTtcblxuICAgIC8vIHRoaXMuYnV0dG9uUGxheUFnYWluID0gdGhpcy5jcmVhdGVCdXR0b24oXCJidXR0b25cIik7XG4gICAgLy8gdGljVGFjVG9lRGl2LmFwcGVuZENoaWxkKHRoaXMuYnV0dG9uUGxheUFnYWluKTtcbiAgfVxuXG4gIGNyZWF0ZURpdihjbGFzc05hbWUpIHtcbiAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGRpdi5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XG5cbiAgICByZXR1cm4gZGl2O1xuICB9XG5cbiAgY3JlYXRlQ2VsbHMoY2VsbHNEaXYpIHtcbiAgICBmb3IgKGxldCBjZWxsTnVtID0gMDsgY2VsbE51bSA8IDk7IGNlbGxOdW0rKykge1xuICAgICAgY29uc3QgY2VsbCA9IHRoaXMuY3JlYXRlQnV0dG9uKFwiY2VsbCBmdWxsXCIpO1xuXG4gICAgICBjZWxsLm9uY2xpY2sgPSAoKSA9PiB0aGlzLm9uQ2VsbFByZXNzKGNlbGwpO1xuXG4gICAgICBjZWxsc0Rpdi5hcHBlbmRDaGlsZChjZWxsKTtcblxuICAgICAgdGhpcy5jZWxscy5wdXNoKGNlbGwpO1xuICAgIH1cbiAgfVxuXG4gIGNyZWF0ZUJ1dHRvbihjbGFzc05hbWUsIG9uY2xpY2spIHtcbiAgICBjb25zdCBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgIGJ1dHRvbi5jbGFzc05hbWUgPSBjbGFzc05hbWU7XG5cbiAgICByZXR1cm4gYnV0dG9uO1xuICB9XG5cbiAgc2V0U3R5bGUoc3R5bGUpIHtcbiAgICBpZiAoc3R5bGUgPT09IFwiZGFya1wiKSB7XG4gICAgICB0aGlzLnBhcmVudC5jbGFzc0xpc3QuYWRkKFwiZGFya1wiKTtcbiAgICB9IGVsc2UgaWYgKHN0eWxlID09PSBcImxpZ2h0XCIpIHtcbiAgICAgIHRoaXMucGFyZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJkYXJrXCIpO1xuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZUNlbGwoY2VsbCwgc3RlcCkge1xuICAgIGlmIChzdGVwID09PSBcInhcIikge1xuICAgICAgY2VsbC5jbGFzc0xpc3QuYWRkKFwieFwiLCBcImVtcHR5XCIsIFwic3RlcFhcIik7XG4gICAgICBjZWxsLmNsYXNzTGlzdC5yZW1vdmUoXCJmdWxsXCIpO1xuICAgICAgdGhpcy5wbGF5ZXIuaW5uZXJIVE1MID0gXCJPIFR1cm5cIjtcbiAgICB9IGVsc2UgaWYgKHN0ZXAgPT09IFwib1wiKSB7XG4gICAgICBjZWxsLmNsYXNzTGlzdC5hZGQoXCJvXCIsIFwiZW1wdHlcIiwgXCJzdGVwT1wiKTtcbiAgICAgIGNlbGwuY2xhc3NMaXN0LnJlbW92ZShcImNlbGxXYWl0XCIsIFwiZnVsbFwiKTtcblxuICAgICAgdGhpcy5wbGF5ZXIuaW5uZXJIVE1MID0gXCJYIFR1cm5cIjtcbiAgICB9XG4gIH1cblxuICBzZXRXaW4od2luU3ltYm9sKSB7XG4gICAgaWYgKHdpblN5bWJvbCA9PT0gXCJ4XCIpIHtcbiAgICAgIHRoaXMucGxheWVyLmlubmVySFRNTCA9IGBYIFdvbiFgO1xuICAgICAgdGhpcy5wYXJlbnQuY2xhc3NMaXN0LmFkZChcIndpblwiKTtcbiAgICAgIHRoaXMuY29tbWVudHMuaW5uZXJIVE1MID0gXCJOZXh0IHR1cm4gT1wiO1xuICAgIH1cblxuICAgIGlmICh3aW5TeW1ib2wgPT09IFwib1wiKSB7XG4gICAgICB0aGlzLnBsYXllci5pbm5lckhUTUwgPSBcIk8gV29uIVwiO1xuICAgICAgdGhpcy5wYXJlbnQuY2xhc3NMaXN0LmFkZChcIndpblwiKTtcbiAgICAgIHRoaXMuY29tbWVudHMuaW5uZXJIVE1MID0gXCJOZXh0IHR1cm4gWFwiO1xuICAgIH1cbiAgfVxuXG4gIHNldERyYXcobmV4dFR1cm4pIHtcbiAgICB0aGlzLnBsYXllci5pbm5lckhUTUwgPSBcIkRyYXchXCI7XG4gICAgdGhpcy5wYXJlbnQuY2xhc3NMaXN0LmFkZChcImRyYXdcIik7XG5cbiAgICBpZiAobmV4dFR1cm4gPT09IFwieFwiKSB7XG4gICAgICB0aGlzLmNvbW1lbnRzLmlubmVySFRNTCA9IFwiTmV4dCB0dXJuIFhcIjtcbiAgICB9IGVsc2UgaWYgKG5leHRUdXJuID09PSBcIm9cIikge1xuICAgICAgdGhpcy5jb21tZW50cy5pbm5lckhUTUwgPSBcIk5leHQgdHVybiBPXCI7XG4gICAgfVxuICB9XG5cbiAgY2xlYXJDZWxscyhuZXh0VHVybikge1xuICAgIGZvciAoY29uc3QgY2VsbCBvZiB0aGlzLmNlbGxzKSB7XG4gICAgICBjZWxsLmNsYXNzTGlzdC5hZGQoXCJmdWxsXCIpO1xuICAgICAgY2VsbC5jbGFzc0xpc3QucmVtb3ZlKFwib1wiLCBcInhcIiwgXCJzdGVwWFwiLCBcInN0ZXBPXCIsIFwiZW1wdHlcIik7XG4gICAgfVxuXG4gICAgaWYgKG5leHRUdXJuID09PSBcInhcIikge1xuICAgICAgdGhpcy5wbGF5ZXIuaW5uZXJIVE1MID0gXCJYIFR1cm5cIjtcbiAgICB9IGVsc2UgaWYgKG5leHRUdXJuID09PSBcIm9cIikge1xuICAgICAgdGhpcy5wbGF5ZXIuaW5uZXJIVE1MID0gXCJPIFR1cm5cIjtcbiAgICB9XG5cbiAgICB0aGlzLnBhcmVudC5jbGFzc0xpc3QucmVtb3ZlKFwid2luXCIsIFwiZHJhd1wiKTtcbiAgICB0aGlzLmNvbW1lbnRzLmlubmVySFRNTCA9IFwiXCI7XG5cbiAgICBjb25zb2xlLmxvZyhcImNsZWFyXCIpO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCB2aWV3ID0gbmV3IFZpZXcoKTtcbiIsImltcG9ydCB7IHNlcnZlciB9IGZyb20gXCIuL3NlcnZlclwiO1xuaW1wb3J0IHsgdmlldyB9IGZyb20gXCIuL3ZpZXdcIjtcblxuY2xhc3MgQ29udHJvbGxlciB7XG4gICAgc3R5bGUgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInN0eWxlXCIpID8/IFwibGlnaHRcIjtcbiAgICBzdGVwID0gXCJ4XCI7XG4gICAgY2VsbHNEYXRhID0gW1wiZW1wdHlcIiwgXCJlbXB0eVwiLCBcImVtcHR5XCIsIFwiZW1wdHlcIiwgXCJlbXB0eVwiLCBcImVtcHR5XCIsIFwiZW1wdHlcIiwgXCJlbXB0eVwiLCBcImVtcHR5XCJdO1xuICAgIGNlbGxzID0gdmlldy5jZWxscztcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzZXJ2ZXIuaW5pdCgpO1xuXG4gICAgICAgIHNlcnZlci5vblNlcnZlck1lc3NhZ2UgPSAobWVzc2FnZSkgPT4gdGhpcy5vblNlcnZlck1lc3NhZ2UobWVzc2FnZSk7XG5cbiAgICAgICAgdmlldy5zZXRTdHlsZSh0aGlzLnN0eWxlKTtcblxuICAgICAgICB2aWV3LmJ1dHRvblRvcGljLm9uY2xpY2sgPSAoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5zdHlsZSA9PT0gXCJsaWdodFwiKSB7XG4gICAgICAgICAgICAgICAgdmlldy5zZXRTdHlsZShcImRhcmtcIik7XG4gICAgICAgICAgICAgICAgdGhpcy5zdHlsZSA9IFwiZGFya1wiO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2aWV3LnNldFN0eWxlKFwibGlnaHRcIik7XG4gICAgICAgICAgICAgICAgdGhpcy5zdHlsZSA9IFwibGlnaHRcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHZpZXcuc2V0U3R5bGUodGhpcy5zdHlsZSA9PT0gXCJsaWdodFwiID8gXCJkYXJrXCIgOiBcImxpZ2h0XCIpO1xuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJzdHlsZVwiLCB0aGlzLnN0eWxlKTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyB2aWV3LmJ1dHRvblBsYXlBZ2Fpbi5vbmNsaWNrID0gKCkgPT4gdGhpcy5yZXNldEdhbWUoKTtcblxuICAgICAgICB2aWV3Lm9uQ2VsbFByZXNzID0gKGNlbGwpID0+IHRoaXMub25DZWxsUHJlc3MoY2VsbCk7XG4gICAgfVxuXG4gICAgcmVzZXRHYW1lKCkge1xuICAgICAgICB0aGlzLmNlbGxzRGF0YS5maWxsKFwiZW1wdHlcIik7XG4gICAgICAgIHZpZXcuY2xlYXJDZWxscyh0aGlzLnN0ZXApO1xuICAgIH1cblxuICAgIG9uU2VydmVyTWVzc2FnZShtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKG1lc3NhZ2UuZGF0YSk7XG5cbiAgICAgICAgdGhpcy5zdGVwID0gZGF0YS5zdGVwO1xuICAgICAgICB0aGlzLmNlbGwgPSB0aGlzLmNlbGxzW2RhdGEuY2VsbF07XG5cbiAgICAgICAgaWYgKHRoaXMuc3RlcCA9PT0gXCJ4XCIgJiYgdGhpcy5jZWxsc0RhdGFbZGF0YS5jZWxsXSA9PT0gXCJlbXB0eVwiKSB7XG4gICAgICAgICAgICB2aWV3LnVwZGF0ZUNlbGwodGhpcy5jZWxsc1tkYXRhLmNlbGxdLCB0aGlzLnN0ZXApO1xuXG4gICAgICAgICAgICB0aGlzLmNlbGxzRGF0YVtkYXRhLmNlbGxdID0gXCJ4XCI7XG5cbiAgICAgICAgICAgIHRoaXMuc3RlcCA9IFwib1wiO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc3RlcCA9PT0gXCJvXCIgJiYgdGhpcy5jZWxsc0RhdGFbZGF0YS5jZWxsXSA9PT0gXCJlbXB0eVwiKSB7XG4gICAgICAgICAgICB2aWV3LnVwZGF0ZUNlbGwodGhpcy5jZWxsc1tkYXRhLmNlbGxdLCB0aGlzLnN0ZXApO1xuXG4gICAgICAgICAgICB0aGlzLmNlbGxzRGF0YVtkYXRhLmNlbGxdID0gXCJvXCI7XG5cbiAgICAgICAgICAgIHRoaXMuc3RlcCA9IFwieFwiO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jaGVja0RyYXcoKTtcbiAgICAgICAgdGhpcy5jaGVja1dpbigpO1xuICAgIH1cblxuICAgIG9uQ2VsbFByZXNzKGNlbGwpIHtcbiAgICAgICAgc2VydmVyLm1ha2VNb3ZlKHtcbiAgICAgICAgICAgIGNlbGw6IHRoaXMuY2VsbHMuaW5kZXhPZihjZWxsKSxcbiAgICAgICAgICAgIHN0ZXA6IHRoaXMuc3RlcCxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgY2hlY2tXaW4oKSB7XG4gICAgICAgIGlmICh0aGlzLmNoZWNrV2lubmluZ1Bvc2l0aW9ucyhcInhcIikpIHtcbiAgICAgICAgICAgIHZpZXcuc2V0V2luKFwieFwiKTtcblxuICAgICAgICAgICAgdGhpcy5jZWxsc0RhdGEuZmlsbChcImZ1bGxcIik7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLnN0ZXApO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMucmVzZXRHYW1lKCksIDUwMDApO1xuXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIndpbiEhWFwiKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmNoZWNrV2lubmluZ1Bvc2l0aW9ucyhcIm9cIikpIHtcbiAgICAgICAgICAgIHZpZXcuc2V0V2luKFwib1wiKTtcblxuICAgICAgICAgICAgdGhpcy5jZWxsc0RhdGEuZmlsbChcImZ1bGxcIik7XG5cbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5yZXNldEdhbWUoKSwgNTAwMCk7XG5cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwid2luISFPXCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY2hlY2tXaW5uaW5nUG9zaXRpb25zKHdpbm5pbmdNYXJrKSB7XG4gICAgICAgIGxldCB3aW5uaW5nUG9zaXRpb25zID0gW1xuICAgICAgICAgICAgWzAsIDEsIDJdLFxuICAgICAgICAgICAgWzMsIDQsIDVdLFxuICAgICAgICAgICAgWzYsIDcsIDhdLFxuICAgICAgICAgICAgWzAsIDMsIDZdLFxuICAgICAgICAgICAgWzEsIDQsIDddLFxuICAgICAgICAgICAgWzIsIDUsIDhdLFxuICAgICAgICAgICAgWzAsIDQsIDhdLFxuICAgICAgICAgICAgWzIsIDQsIDZdLFxuICAgICAgICBdO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgd2lubmluZ1Bvc2l0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgW3BvczEsIHBvczIsIHBvczNdID0gd2lubmluZ1Bvc2l0aW9uc1tpXTtcblxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIHRoaXMuY2VsbHNEYXRhW3BvczFdID09PSB3aW5uaW5nTWFyayAmJlxuICAgICAgICAgICAgICAgIHRoaXMuY2VsbHNEYXRhW3BvczJdID09PSB3aW5uaW5nTWFyayAmJlxuICAgICAgICAgICAgICAgIHRoaXMuY2VsbHNEYXRhW3BvczNdID09PSB3aW5uaW5nTWFya1xuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgY2hlY2tEcmF3KCkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuY2VsbHNEYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jZWxsc0RhdGFbaV0gIT09IFwieFwiICYmIHRoaXMuY2VsbHNEYXRhW2ldICE9PSBcIm9cIikge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmxvZyhcIkRSQVdcIik7XG5cbiAgICAgICAgdmlldy5zZXREcmF3KHRoaXMuc3RlcCk7XG5cbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLnJlc2V0R2FtZSgpLCA1MDAwKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBjb250cm9sbGVyID0gbmV3IENvbnRyb2xsZXIoKTsiXSwibmFtZXMiOlsiZmFjdG9yeSIsIndpbmRvdyIsIm1vZHVsZXMiLCJpbnN0YWxsZWRNb2R1bGVzIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJfX2V4dGVuZHMiLCJfX2Fzc2lnbiIsIl9fcmVzdCIsIl9fZGVjb3JhdGUiLCJfX3BhcmFtIiwiX19tZXRhZGF0YSIsIl9fYXdhaXRlciIsIl9fZ2VuZXJhdG9yIiwiX19jcmVhdGVCaW5kaW5nIiwiX19leHBvcnRTdGFyIiwiX192YWx1ZXMiLCJfX3JlYWQiLCJfX3NwcmVhZCIsIl9fc3ByZWFkQXJyYXlzIiwiX19zcHJlYWRBcnJheSIsIl9fYXdhaXQiLCJfX2FzeW5jR2VuZXJhdG9yIiwiX19hc3luY0RlbGVnYXRvciIsIl9fYXN5bmNWYWx1ZXMiLCJfX21ha2VUZW1wbGF0ZU9iamVjdCIsIl9faW1wb3J0U3RhciIsIl9faW1wb3J0RGVmYXVsdCIsIl9fY2xhc3NQcml2YXRlRmllbGRHZXQiLCJfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0IiwiZXh0ZW5kU3RhdGljcyIsImIiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIkFycmF5IiwiVHlwZUVycm9yIiwiU3RyaW5nIiwiX18iLCJ0aGlzIiwiY29uc3RydWN0b3IiLCJhc3NpZ24iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJhcHBseSIsImUiLCJpbmRleE9mIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJkZWNvcmF0b3JzIiwidGFyZ2V0IiwiZGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIlJlZmxlY3QiLCJkZWNvcmF0ZSIsInBhcmFtSW5kZXgiLCJkZWNvcmF0b3IiLCJtZXRhZGF0YUtleSIsIm1ldGFkYXRhVmFsdWUiLCJtZXRhZGF0YSIsInRoaXNBcmciLCJfYXJndW1lbnRzIiwiUCIsImdlbmVyYXRvciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZnVsZmlsbGVkIiwic3RlcCIsIm5leHQiLCJyZWplY3RlZCIsInJlc3VsdCIsImRvbmUiLCJ0aGVuIiwiYm9keSIsImYiLCJ5IiwiZyIsIl8iLCJsYWJlbCIsInNlbnQiLCJ0cnlzIiwib3BzIiwidmVyYiIsIml0ZXJhdG9yIiwidiIsIm9wIiwicG9wIiwicHVzaCIsImsiLCJrMiIsInVuZGVmaW5lZCIsImFyIiwiZXJyb3IiLCJjb25jYXQiLCJpbCIsImEiLCJqIiwiamwiLCJ0byIsImZyb20iLCJwYWNrIiwic2xpY2UiLCJhc3luY0l0ZXJhdG9yIiwicSIsInJlc3VtZSIsImZ1bGZpbGwiLCJzZXR0bGUiLCJzaGlmdCIsImNvb2tlZCIsInJhdyIsIl9fc2V0TW9kdWxlRGVmYXVsdCIsIm1vZCIsImRlZmF1bHQiLCJyZWNlaXZlciIsInN0YXRlIiwia2luZCIsImhhcyIsInNldCIsImdsb2JhbCIsImFsbFRvVXBwZXJDYXNlIiwiYWxsVG9Mb3dlckNhc2UiLCJlbmNvZGVCb2R5IiwiZGVjb2RlQm9keSIsIkZvcm1hdCIsInByb21pc2lmeSIsInRyaW0iLCJhcnJDaG9vc2VOIiwicmFuZG9tSGV4U3RyaW5nIiwicmFuZG9tU3RyaW5nIiwiY2hlYXBSYW5kU3RyIiwiZGF0YVNpemVCeXRlcyIsImluc3BlY3RCb2R5IiwiaW5zcGVjdEVycm9yIiwiaXNFcnJvckluZm9PclBhcnRpYWxFcnJvckluZm8iLCJub3ciLCJwYXJzZVF1ZXJ5U3RyaW5nIiwidG9RdWVyeVN0cmluZyIsImFyclBvcFJhbmRvbUVsZW1lbnQiLCJkZWZhdWx0UG9zdEhlYWRlcnMiLCJkZWZhdWx0R2V0SGVhZGVycyIsImFsbFNhbWUiLCJhcnJFdmVyeSIsImFyckZpbHRlciIsImFyck1hcCIsInNhZmVBcnJGb3JFYWNoIiwiYXJyRm9yRWFjaCIsImZvckluT3duTm9uTnVsbFByb3BlcnRpZXMiLCJ2YWx1ZXNBcnJheSIsImtleXNBcnJheSIsImFycldpdGhvdXRWYWx1ZSIsImFyckRlbGV0ZVZhbHVlIiwiYXJySW4iLCJhcnJJbmRleE9mIiwiYXJyU3VidHJhY3QiLCJhcnJJbnRlcnNlY3RPYiIsImFyckludGVyc2VjdCIsImludGVyc2VjdCIsImNvbnRhaW5zVmFsdWUiLCJpbmhlcml0cyIsInByb3RvdHlwaWNhbENsb25lIiwic2hhbGxvd0Nsb25lIiwiaXNFbXB0eUFyZyIsImlzT25seVByb3BJbiIsImlzRW1wdHkiLCJpc09iamVjdCIsImVuc3VyZUFycmF5IiwiaXNBcnJheSIsImNvcHkiLCJtaXhpbiIsInRvQmFzZTY0IiwibWF0Y2hEZXJpdmVkQ2hhbm5lbCIsInNoYWxsb3dFcXVhbHMiLCJnZXRHbG9iYWxPYmplY3QiLCJnZXRSZXRyeVRpbWUiLCJnZXRKaXR0ZXJDb2VmZmljaWVudCIsImdldEJhY2tvZmZDb2VmZmljaWVudCIsInRzbGliXzEiLCJwbGF0Zm9ybV8xIiwiZGVmYXVsdHNfMSIsImVycm9yaW5mb18xIiwiZW5jX2Jhc2U2NF8xIiwiZW5jX3V0ZjhfMSIsInJhbmRvbVBvc24iLCJhcnJPclN0ciIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsImFyZ3MiLCJfaSIsInNvdXJjZSIsImFyZyIsIm9iIiwib3duUHJvcGVydGllcyIsIkYiLCJhcnIxIiwiYXJyMiIsIm1lbWJlciIsImFyciIsInZhbCIsImlkeCIsInJlcyIsInNwbGljZSIsInNyYyIsInRvU3RyaW5nIiwib2JqIiwicHJvcCIsImN0b3IiLCJzdXBlckN0b3IiLCJDb25maWciLCJzdXBlcl8iLCJlbGVtZW50IiwiZWxlbSIsImZyb21JbmRleCIsImxlbiIsIm5ld0FyciIsIm93bk9ubHkiLCJmbiIsImZvckVhY2giLCJtYXAiLCJmaWx0ZXIiLCJldmVyeSIsImZpcnN0IiwiaXRlbSIsImNvbnRlbnRUeXBlcyIsImpzb24iLCJqc29ucCIsInhtbCIsImh0bWwiLCJtc2dwYWNrIiwiY291bnQiLCJtaW4iLCJvcHRpb25zIiwiZm9ybWF0IiwiYWNjZXB0IiwicHJvdG9jb2xWZXJzaW9uIiwiZ2V0QWdlbnRTdHJpbmciLCJjb250ZW50VHlwZSIsInBhcmFtcyIsInBhcnRzIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwiam9pbiIsInF1ZXJ5IiwibWF0Y2giLCJzZWFyY2giLCJleGVjIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiRGF0ZSIsImdldFRpbWUiLCJlcnIiLCJfYSIsIl9iIiwiRXJyb3IiLCJpbnNwZWN0IiwiQnVmZmVyVXRpbHMiLCJpc0J1ZmZlciIsImRhdGEiLCJieXRlTGVuZ3RoIiwic3RyaW5nQnl0ZVNpemUiLCJzdWJzdHIiLCJudW1CeXRlcyIsImdldFJhbmRvbVZhbHVlcyIsIlVpbnQ4QXJyYXkiLCJ1SW50QXJyIiwiYmFzZTY0RW5jb2RlIiwiY2hhcnNldCIsImJhc2U2NENoYXJTZXQiLCJyb3VuZCIsImhleEVuY29kZSIsImhleENoYXJTZXQiLCJudW1JdGVtcyIsIm11dGFibGVBcnIiLCJzdHIiLCJyZXBsYWNlIiwiZm5OYW1lIiwiZGVjb2RlIiwiSlNPTiIsInBhcnNlIiwiZW5jb2RlIiwic3RyaW5naWZ5IiwidG9Mb3dlckNhc2UiLCJ0b1VwcGVyQ2FzZSIsImluaXRpYWxUaW1lb3V0IiwicmV0cnlBdHRlbXB0Iiwic2VsZiIsImtleXMiLCJxdWFsaWZpZXJQYXJhbSIsImNoYW5uZWxOYW1lIiwiY3JlYXRlSG1hYyIsIkJ1ZmZlciIsIkxvZ0xldmVscyIsImdsb2JhbE9iamVjdCIsInBhZCIsInRpbWVTZWdtZW50IiwidGhyZWUiLCJwYWRTdGFydCIsImdldEhhbmRsZXIiLCJsb2dnZXIiLCJsb2dUaW1lc3RhbXBzIiwibXNnIiwidGltZSIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsImdldFNlY29uZHMiLCJnZXRNaWxsaXNlY29uZHMiLCJMb2dnZXIiLCJsb2dMZXZlbCIsIkxPR19ERUZBVUxUIiwiaW5pdExvZ0hhbmRsZXJzIiwiY29uc29sZUxvZ2dlciIsImVycm9yTG9nZ2VyIiwiV2luZG93IiwiV29ya2VyR2xvYmFsU2NvcGUiLCJjb25zb2xlIiwibG9nIiwid2FybiIsIkZ1bmN0aW9uIiwiZ2V0RGVmYXVsdExvZ2dlcnMiLCJsb2dIYW5kbGVyIiwibG9nRXJyb3JIYW5kbGVyIiwiTE9HX05PTkUiLCJOb25lIiwiTE9HX0VSUk9SIiwiTE9HX01BSk9SIiwiTWFqb3IiLCJMT0dfTUlOT1IiLCJNaW5vciIsIkxPR19NSUNSTyIsIk1pY3JvIiwiTE9HX0RFQlVHIiwibG9nQWN0aW9uIiwibGV2ZWwiLCJhY3Rpb24iLCJtZXNzYWdlIiwic2hvdWxkTG9nIiwiZGVwcmVjYXRlZCIsIm9yaWdpbmFsIiwicmVwbGFjZW1lbnQiLCJkZXByZWNhdGVkV2l0aE1zZyIsImZ1bmNOYW1lIiwic2V0TG9nIiwiaGFuZGxlciIsIl9fd2VicGFja19yZXF1aXJlX18iLCJQYXJ0aWFsRXJyb3JJbmZvIiwiVXRpbHMiLCJzdGF0dXNDb2RlIiwiY29kZSIsImNhdXNlIiwiaHJlZiIsIkVycm9ySW5mbyIsIl9zdXBlciIsIl90aGlzIiwiZnJvbVZhbHVlcyIsInZhbHVlcyIsIkNyeXB0b0pTIiwiQXJyYXlCdWZmZXIiLCJXb3JkQXJyYXkiLCJsaWIiLCJzdXBlckluaXQiLCJpbml0Iiwic3ViSW5pdCIsInR5cGVkQXJyYXkiLCJJbnQ4QXJyYXkiLCJVaW50OENsYW1wZWRBcnJheSIsIkludDE2QXJyYXkiLCJVaW50MTZBcnJheSIsIkludDMyQXJyYXkiLCJVaW50MzJBcnJheSIsIkZsb2F0MzJBcnJheSIsIkZsb2F0NjRBcnJheSIsImJ1ZmZlciIsImJ5dGVPZmZzZXQiLCJ0eXBlZEFycmF5Qnl0ZUxlbmd0aCIsIndvcmRzIiwiY3J5cHRvIiwibXNDcnlwdG8iLCJjcnlwdG9TZWN1cmVSYW5kb21JbnQiLCJyYW5kb21CeXRlcyIsInJlYWRJbnQzMkxFIiwic3VidHlwZSIsIkMiLCJDX2xpYiIsIkJhc2UiLCJleHRlbmQiLCJvdmVycmlkZXMiLCJtaXhJbiIsIiRzdXBlciIsImluc3RhbmNlIiwicHJvcGVydGllcyIsInByb3BlcnR5TmFtZSIsImNsb25lIiwic2lnQnl0ZXMiLCJlbmNvZGVyIiwiSGV4Iiwid29yZEFycmF5IiwidGhpc1dvcmRzIiwidGhhdFdvcmRzIiwidGhpc1NpZ0J5dGVzIiwidGhhdFNpZ0J5dGVzIiwiY2xhbXAiLCJ0aGF0Qnl0ZSIsImNlaWwiLCJuQnl0ZXMiLCJDX2VuYyIsImVuYyIsImhleENoYXJzIiwiYml0ZSIsImhleFN0ciIsImhleFN0ckxlbmd0aCIsInBhcnNlSW50IiwiTGF0aW4xIiwibGF0aW4xQ2hhcnMiLCJmcm9tQ2hhckNvZGUiLCJsYXRpbjFTdHIiLCJsYXRpbjFTdHJMZW5ndGgiLCJjaGFyQ29kZUF0IiwiVXRmOCIsImVzY2FwZSIsInV0ZjhTdHIiLCJ1bmVzY2FwZSIsIkJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0iLCJyZXNldCIsIl9kYXRhIiwiX25EYXRhQnl0ZXMiLCJfYXBwZW5kIiwiX3Byb2Nlc3MiLCJkb0ZsdXNoIiwicHJvY2Vzc2VkV29yZHMiLCJkYXRhV29yZHMiLCJkYXRhU2lnQnl0ZXMiLCJibG9ja1NpemUiLCJuQmxvY2tzUmVhZHkiLCJuV29yZHNSZWFkeSIsIm1heCIsIl9taW5CdWZmZXJTaXplIiwibkJ5dGVzUmVhZHkiLCJvZmZzZXQiLCJfZG9Qcm9jZXNzQmxvY2siLCJDX2FsZ28iLCJIYXNoZXIiLCJjZmciLCJfZG9SZXNldCIsInVwZGF0ZSIsIm1lc3NhZ2VVcGRhdGUiLCJmaW5hbGl6ZSIsIl9kb0ZpbmFsaXplIiwiX2NyZWF0ZUhlbHBlciIsImhhc2hlciIsIl9jcmVhdGVIbWFjSGVscGVyIiwiSE1BQyIsImFsZ28iLCJsb2dnZXJfMSIsImNhbGxMaXN0ZW5lciIsImV2ZW50VGhpcyIsImxpc3RlbmVyIiwic3RhY2siLCJyZW1vdmVMaXN0ZW5lciIsInRhcmdldExpc3RlbmVycyIsImV2ZW50RmlsdGVyIiwibGlzdGVuZXJzIiwiaW5kZXgiLCJldmVudE5hbWUiLCJ0YXJnZXRMaXN0ZW5lcnNJbmRleCIsIkV2ZW50RW1pdHRlciIsImFueSIsImV2ZW50cyIsImFueU9uY2UiLCJldmVudHNPbmNlIiwib24iLCJldmVudF8xIiwibGlzdGVuZXJfMSIsIm9mZiIsImZpcnN0QXJnIiwic2Vjb25kQXJnIiwiZXZlbnQiLCJlbWl0IiwiZXZlbnRzT25jZUxpc3RlbmVycyIsImV2ZW50c0xpc3RlbmVycyIsIm9uY2UiLCJhcmdDb3VudCIsImV2ZW50XzIiLCJzZWxmXzEiLCJsaXN0ZW5lcldyYXBwZXJfMSIsImlubmVyQXJncyIsIndoZW5TdGF0ZSIsInRhcmdldFN0YXRlIiwiY3VycmVudFN0YXRlIiwibGlzdGVuZXJBcmdzIiwiZ2V0RGVmYXVsdHMiLCJub3JtYWxpc2VPcHRpb25zIiwib2JqZWN0aWZ5T3B0aW9ucyIsImdldEhvc3RzIiwiZ2V0RmFsbGJhY2tIb3N0cyIsImVudmlyb25tZW50RmFsbGJhY2tIb3N0cyIsImdldEh0dHBTY2hlbWUiLCJnZXRQb3J0IiwiZ2V0SG9zdCIsInBhY2thZ2VfanNvbl8xIiwiYWdlbnQiLCJ2ZXJzaW9uIiwiRGVmYXVsdHMiLCJFTlZJUk9OTUVOVCIsIlJFU1RfSE9TVCIsIlJFQUxUSU1FX0hPU1QiLCJGQUxMQkFDS19IT1NUUyIsIlBPUlQiLCJUTFNfUE9SVCIsIlRJTUVPVVRTIiwiZGlzY29ubmVjdGVkUmV0cnlUaW1lb3V0Iiwic3VzcGVuZGVkUmV0cnlUaW1lb3V0IiwiaHR0cFJlcXVlc3RUaW1lb3V0IiwiY2hhbm5lbFJldHJ5VGltZW91dCIsImZhbGxiYWNrUmV0cnlUaW1lb3V0IiwiY29ubmVjdGlvblN0YXRlVHRsIiwicmVhbHRpbWVSZXF1ZXN0VGltZW91dCIsInJlY3ZUaW1lb3V0IiwicHJlZmVyZW5jZUNvbm5lY3RUaW1lb3V0IiwicGFyYWxsZWxVcGdyYWRlRGVsYXkiLCJodHRwTWF4UmV0cnlDb3VudCIsIm1heE1lc3NhZ2VTaXplIiwiY2hlY2tIb3N0IiwiaG9zdCIsIndzIiwicmVzdEhvc3QiLCJyZWFsdGltZUhvc3QiLCJ0bHMiLCJ0bHNQb3J0IiwicG9ydCIsImVudmlyb25tZW50IiwiZmFsbGJhY2tIb3N0cyIsInRva2VuIiwid3NIb3N0IiwicXVldWVFdmVudHMiLCJxdWV1ZU1lc3NhZ2VzIiwiZmFsbGJhY2tIb3N0c1VzZURlZmF1bHQiLCJyZWNvdmVyIiwibGFzdENvbm5lY3Rpb25EZXRhaWxzIiwiY2IiLCJjbG9zZU9uVW5sb2FkIiwidHJhbnNwb3J0cyIsInByb2R1Y3Rpb24iLCJnZXRSZWFsdGltZUhvc3QiLCJ0aW1lb3V0cyIsImdldFRpbWVvdXRzIiwidXNlQmluYXJ5UHJvdG9jb2wiLCJzdXBwb3J0c0JpbmFyeSIsInByZWZlckJpbmFyeSIsImNsaWVudElkIiwiaGVhZGVycyIsInV0ZjhFbmNvZGUiLCJpZGVtcG90ZW50UmVzdFB1Ymxpc2hpbmciLCJwcm9taXNlcyIsImNvbm5lY3Rpdml0eUNoZWNrUGFyYW1zIiwiY29ubmVjdGl2aXR5Q2hlY2tVcmwiLCJzcGxpdCIsInVyaSIsInFzIiwiYWdlbnRTdHIiLCJhZ2VudHMiLCJwbGF0Zm9ybURlZmF1bHRzIiwiZ2V0TWVzc2FnZVNpemUiLCJzaXplIiwiZXh0cmFzIiwiTWVzc2FnZSIsInRvSlNPTiIsImVuY29kaW5nIiwidG9CdWZmZXIiLCJpZCIsImNvbm5lY3Rpb25JZCIsImNvbm5lY3Rpb25LZXkiLCJ0aW1lc3RhbXAiLCJlbmNyeXB0IiwiY2FsbGJhY2siLCJjaXBoZXIiLCJjaGFubmVsQ2lwaGVyIiwiYWxnb3JpdGhtIiwiZW5jb2RlQXJyYXkiLCJtZXNzYWdlcyIsInByb2Nlc3NlZCIsImlucHV0Q29udGV4dCIsImNvbnRleHQiLCJjaGFubmVsT3B0aW9ucyIsInBsdWdpbnMiLCJiYXNlRW5jb2RlZFByZXZpb3VzUGF5bG9hZCIsIm5vcm1hbGlzZUNvbnRleHQiLCJsYXN0UGF5bG9hZCIsInhmb3JtcyIsImxhc3RQcm9jZXNzZWRFbmNvZGluZ0luZGV4IiwiZW5jb2RpbmdzVG9Qcm9jZXNzIiwieGZvcm0iLCJiYXNlNjREZWNvZGUiLCJ1dGY4RGVjb2RlIiwieGZvcm1BbGdvcml0aG0iLCJkZWNyeXB0IiwidmNkaWZmIiwiZGVsdGFCYXNlIiwidHlwZWRBcnJheVRvQnVmZmVyIiwiZnJvbVJlc3BvbnNlQm9keSIsImZyb21WYWx1ZXNBcnJheSIsImZyb21FbmNvZGVkIiwiZW5jb2RlZCIsImlucHV0T3B0aW9ucyIsIkNyeXB0byIsImdldENpcGhlciIsImNpcGhlclBhcmFtcyIsIm5vcm1hbGl6ZUNpcGhlck9wdGlvbnMiLCJmcm9tRW5jb2RlZEFycmF5IiwiZW5jb2RlZEFycmF5IiwiZ2V0TWVzc2FnZXNTaXplIiwidG90YWwiLCJzZXJpYWxpemUiLCJtZXNzYWdlXzEiLCJwcmVzZW5jZW1lc3NhZ2VfMSIsImFjdGlvbnMiLCJIRUFSVEJFQVQiLCJBQ0siLCJOQUNLIiwiQ09OTkVDVCIsIkNPTk5FQ1RFRCIsIkRJU0NPTk5FQ1QiLCJESVNDT05ORUNURUQiLCJDTE9TRSIsIkNMT1NFRCIsIkVSUk9SIiwiQVRUQUNIIiwiQVRUQUNIRUQiLCJERVRBQ0giLCJERVRBQ0hFRCIsIlBSRVNFTkNFIiwiTUVTU0FHRSIsIlNZTkMiLCJBVVRIIiwiQUNUSVZBVEUiLCJBY3Rpb25OYW1lIiwiZmxhZ3MiLCJIQVNfUFJFU0VOQ0UiLCJIQVNfQkFDS0xPRyIsIlJFU1VNRUQiLCJUUkFOU0lFTlQiLCJBVFRBQ0hfUkVTVU1FIiwiUFVCTElTSCIsIlNVQlNDUklCRSIsIlBSRVNFTkNFX1NVQlNDUklCRSIsImZsYWdOYW1lcyIsInRvU3RyaW5nQXJyYXkiLCJhcnJheSIsIk1PREVfQUxMIiwic2ltcGxlQXR0cmlidXRlcyIsIlByb3RvY29sTWVzc2FnZSIsImhhc0ZsYWciLCJmbGFnIiwic2V0RmxhZyIsImdldE1vZGUiLCJlbmNvZGVNb2Rlc1RvRmxhZ3MiLCJtb2RlcyIsImRlY29kZU1vZGVzRnJvbUZsYWdzIiwiY2hhbm5lbE1vZGVzIiwiQWN0aW9uIiwiZGVzZXJpYWxpemUiLCJzZXJpYWxpemVkIiwiZGVzZXJpYWxpemVkIiwiZnJvbURlc2VyaWFsaXplZCIsInByZXNlbmNlIiwiYXR0cmlidXRlIiwiYXR0cmliSW5kZXgiLCJhdXRoIiwiYWNjZXNzVG9rZW4iLCJzdHJpbmdpZmllZFBhcmFtc18xIiwiQmFzZTY0IiwiYmFzZTY0Q2hhcnMiLCJ0cmlwbGV0IiwiY2hhckF0IiwicGFkZGluZ0NoYXIiLCJiYXNlNjRTdHIiLCJiYXNlNjRTdHJMZW5ndGgiLCJyZXZlcnNlTWFwIiwiX3JldmVyc2VNYXAiLCJwYWRkaW5nSW5kZXgiLCJiaXRzQ29tYmluZWQiLCJwYXJzZUxvb3AiLCJwcm90b2NvbG1lc3NhZ2VfMSIsInRyYW5zcG9ydF8xIiwiY29ubmVjdGlvbmVycm9yc18xIiwiYXV0aF8xIiwiWEhSU3RhdGVzXzEiLCJwcm90b2NvbE1lc3NhZ2VGcm9tUmF3RXJyb3IiLCJpc1Rva2VuRXJyIiwic2hvdWxkQmVFcnJvckFjdGlvbiIsIkNvbWV0VHJhbnNwb3J0IiwiY29ubmVjdGlvbk1hbmFnZXIiLCJvbkF1dGhVcGRhdGVkIiwidG9rZW5EZXRhaWxzIiwiYXV0aFBhcmFtcyIsImFjY2Vzc190b2tlbiIsInN0cmVhbSIsInNlbmRSZXF1ZXN0IiwicmVjdlJlcXVlc3QiLCJwZW5kaW5nQ2FsbGJhY2siLCJwZW5kaW5nSXRlbXMiLCJjb25uZWN0IiwiY29tZXRTY2hlbWUiLCJiYXNlVXJpIiwiY29ubmVjdFVyaSIsImdldEF1dGhQYXJhbXMiLCJkaXNjb25uZWN0IiwiaXNEaXNwb3NlZCIsImNvbm5lY3RQYXJhbXMiLCJnZXRDb25uZWN0UGFyYW1zIiwicHJlY29ubmVjdGVkIiwiY29ubmVjdFJlcXVlc3QiLCJjcmVhdGVSZXF1ZXN0IiwiUkVRX1JFQ1ZfU1RSRUFNIiwiUkVRX1JFQ1YiLCJvbkRhdGEiLCJvbkFjdGl2aXR5IiwibmV4dFRpY2siLCJyZWN2IiwicmVxdWVzdENsb3NlIiwiX3JlcXVlc3RDbG9zZU9yRGlzY29ubmVjdCIsInJlcXVlc3REaXNjb25uZWN0IiwiY2xvc2luZyIsImNsb3NlT3JEaXNjb25uZWN0VXJpIiwiY2xvc2VVcmkiLCJkaXNjb25uZWN0VXJpIiwicmVxdWVzdCIsIlJFUV9TRU5EIiwiZmluaXNoIiwiZGlzcG9zZSIsImFib3J0IiwiZGlzY29ubmVjdGVkIiwib25Db25uZWN0IiwiY29ubmVjdGlvblN0ciIsImNvbm5lY3Rpb25EZXRhaWxzIiwiYmFzZUNvbm5lY3Rpb25VcmkiLCJzZW5kVXJpIiwicmVjdlVyaSIsInNlbmQiLCJzZW5kSXRlbXMiLCJzZW5kQW55UGVuZGluZyIsIml0ZW1zIiwiZW5jb2RlUmVxdWVzdCIsImlzQ29ubmVjdGVkIiwiUkVRX1JFQ1ZfUE9MTCIsInJlc3BvbnNlRGF0YSIsImRlY29kZVJlc3BvbnNlIiwib25Qcm90b2NvbE1lc3NhZ2UiLCJyZXF1ZXN0SXRlbXMiLCJIdHRwTWV0aG9kc18xIiwid2l0aEF1dGhEZXRhaWxzIiwicmVzdCIsImVyckNhbGxiYWNrIiwib3BDYWxsYmFjayIsImh0dHAiLCJzdXBwb3J0c0F1dGhIZWFkZXJzIiwiZ2V0QXV0aEhlYWRlcnMiLCJhdXRoSGVhZGVycyIsInBhcmFtU3RyaW5nIiwicGFyYW1QYWlycyIsIm5lZWRsZSIsInVybEZyb21QYXRoQW5kUGFyYW1zIiwicGF0aCIsIlJlc291cmNlIiwiZW52ZWxvcGUiLCJkbyIsIkdldCIsImRlbGV0ZSIsIkRlbGV0ZSIsInBvc3QiLCJQb3N0IiwicGF0Y2giLCJQYXRjaCIsInB1dCIsIlB1dCIsIm1ldGhvZCIsInVucGFja2VkIiwibG9nUmVzcG9uc2VIYW5kbGVyIiwib3V0ZXJIZWFkZXJzIiwib3V0ZXJTdGF0dXNDb2RlIiwid3JhcHBlZFN0YXR1c0NvZGUiLCJyZXNwb25zZSIsIndyYXBwZWRIZWFkZXJzIiwid3JhcHBlZEVyciIsInVuZW52ZWxvcGUiLCJkb1JlcXVlc3QiLCJkZWNvZGVkQm9keSIsImRlY29kZUVyciIsImF1dGhvcml6ZSIsInRvQWN0aW9uVmFsdWUiLCJhY3Rpb25TdHJpbmciLCJQcmVzZW5jZU1lc3NhZ2UiLCJBY3Rpb25zIiwiaXNTeW50aGVzaXplZCIsInN1YnN0cmluZyIsInBhcnNlSWQiLCJtc2dTZXJpYWwiLCJzdHJpbmdpZnlBY3Rpb24iLCJmcm9tRGF0YSIsImV2ZW50ZW1pdHRlcl8xIiwibm9vcCIsImlkQ291bnRlciIsInBlbmRpbmdSZXF1ZXN0cyIsImlzSUUiLCJYRG9tYWluUmVxdWVzdCIsIlhIUlJlcXVlc3QiLCJyZXF1ZXN0TW9kZSIsInJuZCIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsIk51bWJlciIsInRpbWVkT3V0IiwicmVxdWVzdENvbXBsZXRlIiwiX3RpbWVvdXRzIiwiY29tcGxldGUiLCJ0aW1lb3V0IiwidGltZXIiLCJzZXRUaW1lb3V0IiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJyZXNwb25zZVR5cGUiLCJoIiwib3BlbiIsIndpdGhDcmVkZW50aWFscyIsInNldFJlcXVlc3RIZWFkZXIiLCJzdHJlYW1pbmciLCJzdWNjZXNzUmVzcG9uc2UiLCJlcnJvckhhbmRsZXIiLCJlcnJvckV2ZW50IiwiZXJyb3JNZXNzYWdlIiwidHlwZSIsInN0YXR1c1RleHQiLCJvbmVycm9yIiwib25hYm9ydCIsIm9udGltZW91dCIsInN0cmVhbVBvcyIsIm9uRW5kIiwicGFyc2VkUmVzcG9uc2UiLCJoZWFkZXIiLCJnZXRSZXNwb25zZUhlYWRlciIsImdldEhlYWRlciIsImpzb25SZXNwb25zZUJvZHkiLCJyZXNwb25zZVRleHQiLCJoZWFkZXJQYWlycyIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsImdldEhlYWRlcnNBc09iamVjdCIsInJlc3BvbnNlQm9keSIsImlzQWJseUVycm9yIiwiZ2V0QWJseUVycm9yIiwib25Qcm9ncmVzcyIsImNodW5rIiwiYm9keUVuZCIsIm9uQ2h1bmsiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwic3RhdHVzIiwiY2xlYXJUaW1lb3V0IiwiaXNFbmNvZGluZ0NodW5rZWQiLCJzdHJlYW1Db21wbGV0ZSIsIm11bHRpY2FzdGVyXzEiLCJobWFjX3NoYTI1Nl8xIiwiSHR0cFN0YXR1c0NvZGVzXzEiLCJyZXNvdXJjZV8xIiwiTUFYX1RPS0VOX0xFTkdUSCIsInBvdyIsIm5vcm1hbGlzZUF1dGhjYWxsYmFja0Vycm9yIiwiaG1hYyIsInRleHQiLCJpbnN0IiwiZGlnZXN0IiwiYzE0biIsImNhcGFiaWxpdHkiLCJjMTRuQ2FwYWJpbGl0eSIsInNvcnQiLCJsb2dBbmRWYWxpZGF0ZVRva2VuQXV0aE1ldGhvZCIsImF1dGhPcHRpb25zIiwiYXV0aENhbGxiYWNrIiwiYXV0aFVybCIsInVzZVRva2VuQXV0aCIsImJhc2ljQXV0aEZvcmNlZCIsInRySWQiLCJBdXRoIiwiY2xpZW50IiwidG9rZW5QYXJhbXMiLCJkZWZhdWx0VG9rZW5QYXJhbXMiLCJjdXJyZW50VG9rZW5SZXF1ZXN0SWQiLCJ3YWl0aW5nRm9yVG9rZW5SZXF1ZXN0Iiwibm9XYXlUb1JlbmV3IiwiX3NhdmVUb2tlbk9wdGlvbnMiLCJfc2F2ZUJhc2ljT3B0aW9ucyIsIl9hdXRoT3B0aW9ucyIsIl9mb3JjZU5ld1Rva2VuIiwiY29ubmVjdGlvbiIsIkZvcmJpZGRlbiIsImFjdE9uRXJyb3JGcm9tQXV0aG9yaXplIiwiYXV0aG9yaXNlIiwiX2Vuc3VyZVZhbGlkQXV0aENyZWRlbnRpYWxzIiwicXVlcnlUaW1lIiwicmVxdWVzdFRva2VuIiwidG9rZW5SZXF1ZXN0Q2FsbGJhY2siLCJfY2FsbGJhY2siLCJwcm92aWRlZFFzUGFyYW1zIiwidXNlUG9zdCIsImF1dGhNZXRob2QiLCJxdWVyeUlkeCIsImF1dGhVcmxSZXF1ZXN0Q2FsbGJhY2siLCJkb1VyaSIsImNyZWF0ZVRva2VuUmVxdWVzdCIsInRva2VuUmVxdWVzdENhbGxiYWNrVGltZW91dEV4cGlyZWQiLCJ0aW1lb3V0TGVuZ3RoIiwidG9rZW5SZXF1ZXN0Q2FsbGJhY2tUaW1lb3V0IiwidG9rZW5SZXF1ZXN0T3JEZXRhaWxzIiwib2JqZWN0U2l6ZSIsInN1cHByZXNzTWF4TGVuZ3RoQ2hlY2siLCJzaWduZWRUb2tlblBhcmFtcyIsInRva2VuQ2IiLCJyZXF1ZXN0SGVhZGVycyIsInRva2VuUmVzcG9uc2UiLCJrZXlOYW1lIiwia2V5UGFydHMiLCJrZXlTZWNyZXQiLCJhdXRob3Jpc2VDYiIsInR0bCIsIm5vbmNlIiwic2lnblRleHQiLCJtYWMiLCJnZXRUaW1lc3RhbXAiLCJhdXRob3JpemF0aW9uIiwiYmFzaWNLZXkiLCJpc1RpbWVPZmZzZXRTZXQiLCJnZXRUaW1lc3RhbXBVc2luZ09mZnNldCIsInNlcnZlclRpbWVPZmZzZXQiLCJfdXNlclNldENsaWVudElkIiwiZm9yY2VTdXBlcnNlZGUiLCJfdG9rZW5DbGllbnRJZE1pc21hdGNoIiwiZXhwaXJlcyIsInRva2VuUmVxdWVzdElkIiwiY2FsbGJhY2tzIiwiX3VuY2hlY2tlZFNldENsaWVudElkIiwidG9rZW5DbGllbnRJZCIsInJldm9rZVRva2VucyIsInNwZWNpZmllcnMiLCJvcHRpb25zT3JDYWxsYmFja0FyZyIsImNhbGxiYWNrQXJnIiwicmVzb2x2ZWRPcHRpb25zIiwicmVxdWVzdEJvZHlEVE8iLCJ0YXJnZXRzIiwic3BlY2lmaWVyIiwicmVxdWVzdEJvZHkiLCJuZXdCYXRjaFJlc3BvbnNlIiwiYmF0Y2hSZXN1bHQiLCJIdHRwTWV0aG9kcyIsIkh0dHBQYWdpbmF0ZWRSZXNwb25zZSIsIlBhZ2luYXRlZFJlc3VsdCIsIlBhZ2luYXRlZFJlc291cmNlIiwiYm9keUhhbmRsZXIiLCJ1c2VIdHRwUGFnaW5hdGVkUmVzcG9uc2UiLCJoYW5kbGVQYWdlIiwidXNlSFBSIiwicmV0dXJuRXJyT25seSIsImxpbmtIZWFkZXIiLCJyZWxQYXJhbXMiLCJ1cmxNYXRjaCIsImxpbmtNYXRjaCIsInBhcnNlUmVsTGlua3MiLCJyZXNvdXJjZSIsImN1cnJlbnQiLCJoYXNOZXh0IiwiaXNMYXN0Iiwic3VjY2VzcyIsImVycm9yQ29kZSIsImlzUmV0cmlhYmxlIiwiQ29ubmVjdGlvbkVycm9yQ29kZXMiLCJTVVNQRU5ERUQiLCJGQUlMRUQiLCJDTE9TSU5HIiwiVU5LTk9XTl9DT05ORUNUSU9OX0VSUiIsIlVOS05PV05fQ0hBTk5FTF9FUlIiLCJDb25uZWN0aW9uRXJyb3JzIiwic3VzcGVuZGVkIiwiZmFpbGVkIiwiY2xvc2VkIiwidW5rbm93bkNvbm5lY3Rpb25FcnIiLCJ1bmtub3duQ2hhbm5lbEVyciIsImluY2x1ZGVzIiwiWEhSU3RhdGVzIiwiTXVsdGljYXN0ZXIiLCJtZW1iZXJzIiwiX2hhc2hlciIsImhhc2hlckJsb2NrU2l6ZSIsImhhc2hlckJsb2NrU2l6ZUJ5dGVzIiwib0tleSIsIl9vS2V5IiwiaUtleSIsIl9pS2V5Iiwib0tleVdvcmRzIiwiaUtleVdvcmRzIiwiaW5uZXJIYXNoIiwiSHR0cFN0YXR1c0NvZGVzIiwiaXNTdWNjZXNzQ29kZSIsIlN1Y2Nlc3MiLCJCYWRSZXF1ZXN0IiwiY2xvc2VNZXNzYWdlIiwiZGlzY29ubmVjdE1lc3NhZ2UiLCJUcmFuc3BvcnQiLCJmb3JjZUpzb25Qcm90b2NvbCIsImhlYXJ0YmVhdHMiLCJyZWdpc3RlclByb3Bvc2VkVHJhbnNwb3J0IiwiaXNGaW5pc2hlZCIsIm1heElkbGVJbnRlcnZhbCIsImlkbGVUaW1lciIsImxhc3RBY3Rpdml0eSIsImNsb3NlIiwiZmFpbCIsInNob3J0TmFtZSIsIm9uQ2xvc2UiLCJvbkRpc2Nvbm5lY3QiLCJvbkNoYW5uZWxNZXNzYWdlIiwiY2hhbm5lbCIsIm9uRmF0YWxFcnJvciIsIm1heFByb21pc2VkSWRsZSIsInBpbmciLCJzZXRJZGxlVGltZXIiLCJvbklkbGVUaW1lckV4cGlyZSIsInNpbmNlTGFzdCIsInRpbWVSZW1haW5pbmciLCJ0cnlDb25uZWN0IiwidHJhbnNwb3J0Q3RvciIsInRyYW5zcG9ydFBhcmFtcyIsInRyYW5zcG9ydEF0dGVtcHRUaW1lciIsInRyYW5zcG9ydCIsImVycm9yQ2IiLCJNRDUiLCJFdnBLREYiLCJrZXlTaXplIiwiaXRlcmF0aW9ucyIsImNvbXB1dGUiLCJwYXNzd29yZCIsInNhbHQiLCJibG9jayIsImRlcml2ZWRLZXkiLCJkZXJpdmVkS2V5V29yZHMiLCJDaXBoZXIiLCJDX21vZGUiLCJCbG9ja0NpcGhlck1vZGUiLCJDQkMiLCJQa2NzNyIsIkNpcGhlclBhcmFtcyIsIk9wZW5TU0xGb3JtYXR0ZXIiLCJTZXJpYWxpemFibGVDaXBoZXIiLCJPcGVuU1NMS2RmIiwiUGFzc3dvcmRCYXNlZENpcGhlciIsImNyZWF0ZUVuY3J5cHRvciIsIl9FTkNfWEZPUk1fTU9ERSIsImNyZWF0ZURlY3J5cHRvciIsIl9ERUNfWEZPUk1fTU9ERSIsInhmb3JtTW9kZSIsIl94Zm9ybU1vZGUiLCJfa2V5IiwicHJvY2VzcyIsImRhdGFVcGRhdGUiLCJpdlNpemUiLCJzZWxlY3RDaXBoZXJTdHJhdGVneSIsImNpcGhlcnRleHQiLCJTdHJlYW1DaXBoZXIiLCJpdiIsIkVuY3J5cHRvciIsIkRlY3J5cHRvciIsIl9jaXBoZXIiLCJfaXYiLCJ4b3JCbG9jayIsIl9wcmV2QmxvY2siLCJwcm9jZXNzQmxvY2siLCJlbmNyeXB0QmxvY2siLCJ0aGlzQmxvY2siLCJkZWNyeXB0QmxvY2siLCJibG9ja1NpemVCeXRlcyIsIm5QYWRkaW5nQnl0ZXMiLCJwYWRkaW5nV29yZCIsInBhZGRpbmdXb3JkcyIsInBhZGRpbmciLCJ1bnBhZCIsIkJsb2NrQ2lwaGVyIiwibW9kZUNyZWF0b3IiLCJfbW9kZSIsIl9fY3JlYXRvciIsImZpbmFsUHJvY2Vzc2VkQmxvY2tzIiwiZm9ybWF0dGVyIiwiT3BlblNTTCIsIm9wZW5TU0xTdHIiLCJjaXBoZXJ0ZXh0V29yZHMiLCJlbmNyeXB0b3IiLCJjaXBoZXJDZmciLCJfcGFyc2UiLCJrZGYiLCJleGVjdXRlIiwiZGVyaXZlZFBhcmFtcyIsIlJlcXVlc3QiLCJjb21ldHRyYW5zcG9ydF8xIiwiX2FibHlqc19qc29ucCIsIkpTT05QVHJhbnNwb3J0IiwiaXNBdmFpbGFibGUiLCJqc29ucFN1cHBvcnRlZCIsImFsbG93Q29tZXQiLCJzY3JpcHQiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJhc3luYyIsImhlYWQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImluc2VydEJlZm9yZSIsImZpcnN0Q2hpbGQiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJzdXBwb3J0ZWRUcmFuc3BvcnRzIiwicHVzaF8xIiwicGFnaW5hdGVkcmVzb3VyY2VfMSIsImNoYW5uZWxfMSIsInN0YXRzXzEiLCJSZXN0Iiwib3B0aW9uc09iaiIsIm5vcm1hbE9wdGlvbnMiLCJrZXlNYXRjaCIsImF1dGhvcml0eSIsIl9jdXJyZW50RmFsbGJhY2siLCJIdHRwIiwiY2hhbm5lbHMiLCJDaGFubmVscyIsInN0YXRzIiwic3VwcG9ydHNMaW5rSGVhZGVycyIsInN0YXRzVmFsdWVzIiwiY3VzdG9tSGVhZGVycyIsInVzZUJpbmFyeSIsImRlY29kZXIiLCJfbWV0aG9kIiwicGFnaW5hdGVkUmVzb3VyY2UiLCJyZXNib2R5IiwibWV0aG9kcyIsIm1ldGhvZHNXaXRoQm9keSIsImJhdGNoUHVibGlzaCIsInNwZWNPclNwZWNzIiwic2luZ2xlU3BlY01vZGUiLCJiYXRjaFJlc3VsdHMiLCJiYXRjaFByZXNlbmNlIiwiY2hhbm5lbHNQYXJhbSIsImxvZ09wdGlvbnMiLCJDYWxsYmFja3MiLCJQbGF0Zm9ybSIsImFsbCIsInNldE9wdGlvbnMiLCJyZWxlYXNlIiwiSCIsIksiLCJpc1ByaW1lIiwic3FydE4iLCJzcXJ0IiwiZmFjdG9yIiwiZ2V0RnJhY3Rpb25hbEJpdHMiLCJuUHJpbWUiLCJXIiwiU0hBMjU2IiwiX2hhc2giLCJNIiwiZ2FtbWEweCIsImdhbW1hMCIsImdhbW1hMXgiLCJnYW1tYTEiLCJtYWoiLCJzaWdtYTAiLCJ0MSIsIm5CaXRzVG90YWwiLCJuQml0c0xlZnQiLCJIbWFjU0hBMjU2IiwicHJlc2VuY2VfMSIsIm5vcm1hbGlzZUNoYW5uZWxPcHRpb25zIiwiQ2hhbm5lbCIsImJhc2VQYXRoIiwiaGlzdG9yeSIsIl9oaXN0b3J5IiwicHVibGlzaCIsInNlY29uZCIsImFsbEVtcHR5SWRzIiwibXNnSWRCYXNlXzEiLCJfcHVibGlzaCIsIlByZXNlbmNlIiwiVHJhbnNwb3J0UGFyYW1zIiwicHJvdG9jb2xfMSIsIm1lc3NhZ2VxdWV1ZV8xIiwiY29ubmVjdGlvbnN0YXRlY2hhbmdlXzEiLCJ3ZWJzb2NrZXR0cmFuc3BvcnRfMSIsImhhdmVXZWJTdG9yYWdlIiwiV2ViU3RvcmFnZSIsImxvY2FsU3VwcG9ydGVkIiwiaGF2ZVNlc3Npb25TdG9yYWdlIiwic2Vzc2lvblN1cHBvcnRlZCIsInRyYW5zcG9ydFByZWZlcmVuY2VOYW1lIiwic2Vzc2lvblJlY292ZXJ5TmFtZSIsImRlY29kZVJlY292ZXJ5S2V5IiwicmVjb3ZlcnlLZXkiLCJ1cGdyYWRlIiwicmVjb3ZlcnlDb250ZXh0IiwiZWNob01lc3NhZ2VzIiwiZWNobyIsIkNvbm5lY3Rpb25NYW5hZ2VyIiwicmVhbHRpbWUiLCJkaXNjb25uZWN0ZWRSZXRyeUNvdW50IiwiaW5pdFRyYW5zcG9ydHMiLCJjb25uZWN0aW5nVGltZW91dCIsInN0YXRlcyIsImluaXRpYWxpemVkIiwidGVybWluYWwiLCJzZW5kRXZlbnRzIiwiZmFpbFN0YXRlIiwiY29ubmVjdGluZyIsInJldHJ5RGVsYXkiLCJjb25uZWN0ZWQiLCJzeW5jaHJvbml6aW5nIiwiZm9yY2VRdWV1ZUV2ZW50cyIsImVycm9yUmVhc29uIiwicXVldWVkTWVzc2FnZXMiLCJkZWZhdWx0VHJhbnNwb3J0cyIsImJhc2VUcmFuc3BvcnQiLCJiYXNlVHJhbnNwb3J0T3JkZXIiLCJ1cGdyYWRlVHJhbnNwb3J0cyIsInRyYW5zcG9ydFByZWZlcmVuY2UiLCJodHRwSG9zdHMiLCJhY3RpdmVQcm90b2NvbCIsInByb3Bvc2VkVHJhbnNwb3J0cyIsInBlbmRpbmdUcmFuc3BvcnRzIiwibGFzdEF1dG9SZWNvbm5lY3RBdHRlbXB0IiwiZm9yY2VGYWxsYmFja0hvc3QiLCJjb25uZWN0Q291bnRlciIsImFkZEV2ZW50TGlzdGVuZXIiLCJwZXJzaXN0Q29ubmVjdGlvbiIsInJlcXVlc3RTdGF0ZSIsImRpc2Nvbm5lY3RBbGxUcmFuc3BvcnRzIiwic3RhcnRDb25uZWN0IiwiVHJhbnNwb3J0cyIsImluaXRGbiIsImNyZWF0ZVRyYW5zcG9ydFBhcmFtcyIsImdldFRyYW5zcG9ydFBhcmFtcyIsIm1vZGVDYiIsInJlY292ZXJGbiIsImxhc3RTZXNzaW9uRGF0YSIsImdldFNlc3Npb24iLCJzaG91bGRSZWNvdmVyIiwiZGVjaWRlTW9kZSIsInRyeUFUcmFuc3BvcnQiLCJjYW5kaWRhdGUiLCJub3RpZnlTdGF0ZSIsInNldFRyYW5zcG9ydFBlbmRpbmciLCJvcHRpbWFsVHJhbnNwb3J0IiwidHJhbnNwb3J0UHJlZmVyZW5jZU9yZGVyIiwiZ2V0VXBncmFkZVBvc3NpYmlsaXRpZXMiLCJzY2hlZHVsZVRyYW5zcG9ydEFjdGl2YXRpb24iLCJhY3RpdmF0ZVRyYW5zcG9ydCIsImNvbm5lY3RJbXBsIiwidW5wZXJzaXN0Q29ubmVjdGlvbiIsImRlYWN0aXZhdGVUcmFuc3BvcnQiLCJjdXJyZW50VHJhbnNwb3J0IiwiZ2V0VHJhbnNwb3J0IiwiYWJhbmRvbiIsIm9sZFByb3RvY29sIiwiZmluaXNoVXBncmFkZSIsInNlbmRRdWV1ZWRNZXNzYWdlcyIsIm9uY2VJZGxlIiwicGVyc2lzdFRyYW5zcG9ydFByZWZlcmVuY2UiLCJleGlzdGluZ1N0YXRlIiwiY29ubmVjdGVkU3RhdGUiLCJleGlzdGluZ0FjdGl2ZVByb3RvY29sIiwic2V0Q29ubmVjdGlvbiIsIm9uQ29ubmVjdGlvbkRldGFpbHNVcGRhdGUiLCJjb25uZWN0ZWRFcnIiLCJfY29ubmVjdGlvbklkIiwibWVzc2FnZVF1ZXVlIiwicGVuZGluZ1RyYW5zcG9ydCIsInByb3Bvc2VkVHJhbnNwb3J0IiwiY3VycmVudFByb3RvY29sIiwid2FzQWN0aXZlIiwid2FzUGVuZGluZyIsIndhc1Byb3Bvc2VkIiwibm9UcmFuc3BvcnRzU2NoZWR1bGVkRm9yQWN0aXZhdGlvbiIsInF1ZXVlUGVuZGluZ01lc3NhZ2VzIiwiZ2V0UGVuZGluZ01lc3NhZ2VzIiwiY2xlYXJQZW5kaW5nTWVzc2FnZXMiLCJ1bnBlcnNpc3RUcmFuc3BvcnRQcmVmZXJlbmNlIiwicmV0cnlJbW1lZGlhdGVseSIsIm5ld0Nvbm5lY3Rpb25TdGF0ZSIsInN0YXJ0U3VzcGVuZFRpbWVyIiwic3RhcnRUcmFuc2l0aW9uVGltZXIiLCJoYXNDb25uZWN0aW9uRXJyb3IiLCJwcmV2Q29ubklkIiwicmVzZXRTZW5kQXR0ZW1wdGVkIiwiY2xlYXJDb25uZWN0aW9uIiwiY3JlYXRlUmVjb3ZlcnlLZXkiLCJjaGFubmVsU2VyaWFscyIsImNoZWNrQ29ubmVjdGlvblN0YXRlRnJlc2huZXNzIiwiZGlzY29ubmVjdGVkQXQiLCJsb2NhdGlvbiIsInNldFNlc3Npb24iLCJyZW1vdmVTZXNzaW9uIiwiZ2V0RXJyb3IiLCJnZXRTdGF0ZUVycm9yIiwiYWN0aXZlU3RhdGUiLCJlbmFjdFN0YXRlQ2hhbmdlIiwic3RhdGVDaGFuZ2UiLCJyZWFzb24iLCJuZXdTdGF0ZSIsInRyYW5zaXRpb25TdGF0ZSIsInRyYW5zaXRpb25UaW1lciIsImNhbmNlbFRyYW5zaXRpb25UaW1lciIsInN1c3BlbmRUaW1lciIsImNoZWNrU3VzcGVuZFRpbWVyIiwiY2FuY2VsU3VzcGVuZFRpbWVyIiwic3RhcnRSZXRyeVRpbWVyIiwiaW50ZXJ2YWwiLCJyZXRyeVRpbWVyIiwiY2FuY2VsUmV0cnlUaW1lciIsImluZGljYXRlZCIsImNoYW5nZSIsImF1dG9SZWNvbm5lY3QiLCJwcm9wb2dhdGVDb25uZWN0aW9uSW50ZXJydXB0aW9uIiwiZmFpbFF1ZXVlZE1lc3NhZ2VzIiwiY2xvc2VJbXBsIiwiY29ubmVjdENvdW50IiwicmVjb3ZlckNoYW5uZWxzIiwiYXV0aENiIiwidXBncmFkZUlmTmVlZGVkIiwiZ2V0VHJhbnNwb3J0UHJlZmVyZW5jZSIsImNvbm5lY3RQcmVmZXJlbmNlIiwiY29ubmVjdEJhc2UiLCJwcmVmZXJlbmNlIiwicHJlZmVyZW5jZVRpbWVvdXRFeHBpcmVkIiwicHJlZmVyZW5jZVRpbWVvdXQiLCJmYXRhbCIsImdpdmVVcCIsImNhbmRpZGF0ZUhvc3RzIiwiaG9zdEF0dGVtcHRDYiIsInRyeUZhbGxiYWNrSG9zdHMiLCJjaGVja0Nvbm5lY3Rpdml0eSIsImNvbm5lY3Rpdml0eSIsImN1cnJlbnRTZXJpYWwiLCJ1cGdyYWRlUG9zc2liaWxpdGllcyIsInVwZ3JhZGVUcmFuc3BvcnQiLCJ1cGdyYWRlVHJhbnNwb3J0UGFyYW1zIiwidHJhbnNwb3J0UGFyYW1zXzEiLCJhY3RpdmVUcmFuc3BvcnQiLCJhdXRoTXNnIiwic3VjY2Vzc0xpc3RlbmVyXzEiLCJmYWlsdXJlTGlzdGVuZXJfMSIsImV4Y2VwdEFjdGl2ZSIsInF1ZXVlRXZlbnQiLCJzZW5kSW1wbCIsIlBlbmRpbmdNZXNzYWdlIiwicXVldWUiLCJwZW5kaW5nTWVzc2FnZSIsImFja1JlcXVpcmVkIiwic2VuZEF0dGVtcHRlZCIsImxhc3RRdWV1ZWQiLCJsYXN0IiwibWF4U2l6ZSIsImRlc3QiLCJwcm9wb3NlZCIsImJ1bmRsZVdpdGgiLCJtZXJnZWQiLCJwZW5kaW5nTWVzc2FnZXMiLCJwcmVwZW5kIiwibnVtUXVldWVkIiwiY29tcGxldGVBbGxNZXNzYWdlcyIsIm9uQWN0aXZlVHJhbnNwb3J0Iiwib25VcGdyYWRlVHJhbnNwb3J0IiwicGluZ1N0YXJ0XzEiLCJpZF8xIiwib25IZWFydGJlYXRfMSIsInJlc3BvbnNlSWQiLCJ0aW1lcl8xIiwicmVzcG9uc2VUaW1lIiwiY29tcGxldGVkIiwib25UcmFuc3BvcnRBY3RpdmUiLCJyZW1vdmUiLCJNZXNzYWdlUXVldWUiLCJjb3B5QWxsIiwiYXBwZW5kIiwidW5zaGlmdCIsImNvbXBsZXRlTWVzc2FnZXMiLCJzZXJpYWwiLCJzdGFydFNlcmlhbCIsImVuZFNlcmlhbCIsImNvbXBsZXRlTWVzc2FnZXNfMSIsIk1BWF9TQUZFX0lOVEVHRVIiLCJNQVhfVkFMVUUiLCJjbGVhciIsInByZXZpb3VzIiwicmV0cnlJbiIsInJlYWx0aW1lcHJlc2VuY2VfMSIsImNoYW5uZWxzdGF0ZWNoYW5nZV8xIiwiUmVhbHRpbWVDaGFubmVsIiwicmV0cnlDb3VudCIsInVudGlsQXR0YWNoIiwiYXR0YWNoU2VyaWFsIiwiZnJvbV9zZXJpYWwiLCJzdWJzY3JpcHRpb25zIiwic3luY0NoYW5uZWxTZXJpYWwiLCJjaGFubmVsU2VyaWFsIiwiX3JlcXVlc3RlZEZsYWdzIiwiX2F0dGFjaFJlc3VtZSIsIl9kZWNvZGluZ0NvbnRleHQiLCJfbGFzdFBheWxvYWQiLCJtZXNzYWdlSWQiLCJwcm90b2NvbE1lc3NhZ2VDaGFubmVsU2VyaWFsIiwiZGVjb2RlRmFpbHVyZVJlY292ZXJ5SW5Qcm9ncmVzcyIsIl9hbGxDaGFubmVsQ2hhbmdlcyIsImludmFsaWRTdGF0ZUVycm9yIiwicHJvY2Vzc0xpc3RlbmVyQXJncyIsImN1cnJlbnRNb2RlIiwidmFsaWRhdGVDaGFubmVsT3B0aW9ucyIsIl9zaG91bGRSZWF0dGFjaFRvU2V0T3B0aW9ucyIsImF0dGFjaEltcGwiLCJfX3B1Ymxpc2giLCJzZW5kTWVzc2FnZSIsIm9uRXZlbnQiLCJhdHRhY2giLCJfZmxhZ3MiLCJfYXR0YWNoIiwiZm9yY2VSZWF0dGFjaCIsImF0dGFjaFJlYXNvbiIsImF0dGFjaE1zZyIsImRldGFjaCIsImRldGFjaEltcGwiLCJzdWJzY3JpYmUiLCJfc3Vic2NyaWJlRmlsdGVyIiwiZmlsdGVyZWRMaXN0ZW5lciIsIl9jIiwiX2QiLCJfZSIsIl9mIiwibWFwcGluZyIsInJlZlRpbWVzZXJpYWwiLCJyZWYiLCJ0aW1lc2VyaWFsIiwicmVmVHlwZSIsImlzUmVmIiwiZW50cmllcyIsImZpbmQiLCJfYWRkRmlsdGVyZWRTdWJzY3JpcHRpb24iLCJyZWFsTGlzdGVuZXIiLCJmaWx0ZXJlZFN1YnNjcmlwdGlvbnMiLCJNYXAiLCJyZWFsTGlzdGVuZXJNYXAiLCJfZ2V0QW5kRGVsZXRlRmlsdGVyZWRTdWJzY3JpcHRpb25zIiwiZmlsdGVyTWFwcyIsImxpc3RlbmVyTWFwcyIsInJlZHVjZSIsInByZXYiLCJjdXIiLCJsaXN0ZW5lcnNfMSIsInVuc3Vic2NyaWJlIiwic3luYyIsInN5bmNNZXNzYWdlIiwic2VuZFByZXNlbmNlIiwib25NZXNzYWdlIiwic2V0Q2hhbm5lbFNlcmlhbCIsImlzU3luYyIsIm1vZGVzRnJvbUZsYWdzIiwicmVzdW1lZCIsImhhc1ByZXNlbmNlIiwiaGFzQmFja2xvZyIsIm9uQXR0YWNoZWQiLCJ1cGRhdGVPbkF0dGFjaGVkIiwiY2hlY2tQZW5kaW5nU3RhdGUiLCJkZXRhY2hFcnIiLCJwcmVzZW5jZU1zZyIsInNldFByZXNlbmNlIiwiZmlyc3RNZXNzYWdlIiwibGFzdE1lc3NhZ2UiLCJkZWx0YSIsIl9zdGFydERlY29kZUZhaWx1cmVSZWNvdmVyeSIsImNsZWFyU3RhdGVUaW1lciIsImFjdE9uQ2hhbm5lbFN0YXRlIiwiY21TdGF0ZSIsInN0YXJ0U3RhdGVUaW1lcklmTm90UnVubmluZyIsInRpbWVvdXRQZW5kaW5nU3RhdGUiLCJzdGF0ZVRpbWVyIiwiZ2V0UmVsZWFzZUVyciIsIlNIQTEiLCJIbWFjU0hBMSIsInV0ZjhXcml0ZSIsInZpZXciLCJzdHJpbmciLCJjb2RlUG9pbnQiLCJzZXRVaW50OCIsInV0ZjhSZWFkIiwiZW5kIiwiYnl0ZV8iLCJnZXRVaW50OCIsInV0ZjhCeXRlQ291bnQiLCJTSF9MXzMyIiwiU0hfUl8zMiIsIkRlY29kZXIiLCJiaW4iLCJidWYiLCJleHQiLCJnZXRJbnQ4IiwiZ2V0VWludDE2IiwiZ2V0VWludDMyIiwiZ2V0RmxvYXQzMiIsImdldEZsb2F0NjQiLCJnZXRVaW50NjQiLCJnZXRJbnQxNiIsImdldEludDMyIiwiZ2V0SW50NjQiLCJlbmNvZGVhYmxlS2V5cyIsInNwYXJzZSIsIl9lbmNvZGUiLCJsZW5ndGhfMSIsInNldFVpbnQxNiIsInNldFVpbnQzMiIsImlzVmlldyIsImxlbmd0aF8yIiwic2V0RmxvYXQ2NCIsInNldEludDMyIiwic2V0VWludDY0Iiwic2V0SW50OCIsInNldEludDE2Iiwic2V0SW50NjQiLCJsZW5ndGhfMyIsInNpemVvZiIsImxlbmd0aF80IiwibGVuZ3RoXzUiLCJsZW5ndGhfNiIsIkRhdGFWaWV3IiwiYnl0ZXMiLCJyZXN0XzEiLCJyZWFsdGltZV8xIiwiYnVmZmVydXRpbHNfMSIsImNyeXB0b18xIiwiaHR0cF8xIiwiY29uZmlnXzEiLCJ3ZWJzdG9yYWdlXzEiLCJkZWZhdWx0c18yIiwibXNncGFja18xIiwibm9VcGdyYWRlIiwiUmVhbHRpbWUiLCJkZXZpY2VkZXRhaWxzXzEiLCJwdXNoY2hhbm5lbHN1YnNjcmlwdGlvbl8xIiwiQWRtaW4iLCJkZXZpY2VSZWdpc3RyYXRpb25zIiwiRGV2aWNlUmVnaXN0cmF0aW9ucyIsImNoYW5uZWxTdWJzY3JpcHRpb25zIiwiQ2hhbm5lbFN1YnNjcmlwdGlvbnMiLCJyZWNpcGllbnQiLCJwYXlsb2FkIiwicHVzaEZ1bGxXYWl0IiwiZnVsbFdhaXQiLCJzYXZlIiwiZGV2aWNlIiwiZGV2aWNlSWRPckRldGFpbHMiLCJkZXZpY2VJZCIsImxpc3QiLCJyZW1vdmVXaGVyZSIsInN1YnNjcmlwdGlvbiIsImxpc3RDaGFubmVscyIsInBhcnNlZEJvZHkiLCJhZG1pbiIsIkRldmljZUZvcm1GYWN0b3IiLCJEZXZpY2VQbGF0Zm9ybSIsIkRldmljZURldGFpbHMiLCJkZXZpY2VTZWNyZXQiLCJwbGF0Zm9ybSIsImZvcm1GYWN0b3IiLCJkZXZpY2VJZGVudGl0eVRva2VuIiwidG9SZXF1ZXN0Qm9keSIsIlB1c2hDaGFubmVsU3Vic2NyaXB0aW9uIiwiTWVzc2FnZUNvdW50IiwidW5jb21wcmVzc2VkRGF0YSIsInJlZnVzZWQiLCJNZXNzYWdlQ2F0ZWdvcnkiLCJjYXRlZ29yeSIsIlJlc291cmNlQ291bnQiLCJwZWFrIiwibWVhbiIsIm9wZW5lZCIsIlJlcXVlc3RDb3VudCIsInN1Y2NlZWRlZCIsIkNvbm5lY3Rpb25UeXBlcyIsInBsYWluIiwiTWVzc2FnZVR5cGVzIiwiTWVzc2FnZVRyYWZmaWMiLCJ3ZWJob29rIiwic2hhcmVkUXVldWUiLCJleHRlcm5hbFF1ZXVlIiwiaHR0cEV2ZW50IiwiTWVzc2FnZURpcmVjdGlvbnMiLCJpbmJvdW5kIiwib3V0Ym91bmQiLCJYY2hnTWVzc2FnZXMiLCJwcm9kdWNlclBhaWQiLCJjb25zdW1lclBhaWQiLCJQdXNoU3RhdHMiLCJub3RpZmljYXRpb25zIiwiaW52YWxpZCIsImF0dGVtcHRlZCIsInN1Y2Nlc3NmdWwiLCJkaXJlY3RQdWJsaXNoZXMiLCJQcm9jZXNzZWRDb3VudCIsInNraXBwZWQiLCJQcm9jZXNzZWRNZXNzYWdlcyIsIlN0YXRzIiwicGVyc2lzdGVkIiwiY29ubmVjdGlvbnMiLCJhcGlSZXF1ZXN0cyIsInRva2VuUmVxdWVzdHMiLCJ4Y2hnUHJvZHVjZXIiLCJ4Y2hnQ29uc3VtZXIiLCJwdXNoU3RhdHMiLCJpblByb2dyZXNzIiwidW5pdCIsImludGVydmFsSWQiLCJjb25uZWN0aW9uXzEiLCJyZWFsdGltZWNoYW5uZWxfMSIsImNvbm5lY3Rpb25tYW5hZ2VyXzEiLCJhdXRvQ29ubmVjdCIsInNlcmlhbHMiLCJuYW1lXzEiLCJuYW1lXzIiLCJjb25uZWN0aW9uU3RhdGUiLCJmcm9tQ2hhbm5lbFN0YXRlcyIsInRvQ2hhbm5lbFN0YXRlIiwiY2hhbm5lbElkIiwiZ2V0RGVyaXZlZCIsImRlcml2ZU9wdGlvbnMiLCJyZWxlYXNlRXJyIiwiQ29ubmVjdGlvbiIsImFibHkiLCJjb25maWd1cmFibGUiLCJQcm90b2NvbCIsIm9uQWNrIiwib25OYWNrIiwiV2ViU29ja2V0VHJhbnNwb3J0IiwidXNlUHJvdG9jb2xIZWFydGJlYXRzIiwiV2ViU29ja2V0IiwiY3JlYXRlV2ViU29ja2V0Iiwid3NVcmkiLCJwYXJhbVN0ciIsInBhcmFtIiwid3NDb25uZWN0aW9uIiwiYmluYXJ5VHlwZSIsIm9ub3BlbiIsIm9uV3NPcGVuIiwib25jbG9zZSIsImV2Iiwib25Xc0Nsb3NlIiwib25tZXNzYWdlIiwib25Xc0RhdGEiLCJvbldzRXJyb3IiLCJ3YXNDbGVhbiIsImlzQW5vbnltb3VzT3JXaWxkY2FyZCIsInJlYWx0aW1lUHJlc2VuY2UiLCJuZXdlclRoYW4iLCJleGlzdGluZyIsIml0ZW1PcmRlcmluZ3MiLCJleGlzdGluZ09yZGVyaW5ncyIsIlJlYWx0aW1lUHJlc2VuY2UiLCJzeW5jQ29tcGxldGUiLCJQcmVzZW5jZU1hcCIsIl9teU1lbWJlcnMiLCJwZW5kaW5nUHJlc2VuY2UiLCJlbnRlciIsIl9lbnRlck9yVXBkYXRlQ2xpZW50IiwiZW50ZXJDbGllbnQiLCJ1cGRhdGVDbGllbnQiLCJsZWF2ZSIsImxlYXZlQ2xpZW50Iiwid2FpdEZvclN5bmMiLCJyZXR1cm5NZW1iZXJzIiwid2FpdEF0dGFjaGVkIiwid2FpdFN5bmMiLCJwcmVzZW5jZVNldCIsInN5bmNDdXJzb3IiLCJteU1lbWJlcnMiLCJicm9hZGNhc3RNZXNzYWdlcyIsImNvbm5JZCIsInN0YXJ0U3luYyIsImVuZFN5bmMiLCJfc3ludGhlc2l6ZUxlYXZlcyIsIl9lbnN1cmVNeU1lbWJlcnNQcmVzZW50IiwicGVuZGluZ1ByZXNDb3VudCIsInByZXNlbmNlQXJyYXkiLCJtdWx0aWNhc3RlciIsIl9jbGVhck15TWVtYmVycyIsImZhaWxQZW5kaW5nUHJlc2VuY2UiLCJyZWVudGVyQ2IiLCJtZW1iZXJLZXkiLCJlbnRyeSIsIl9hcmdzIiwic3luY0luUHJvZ3Jlc3MiLCJyZXNpZHVhbE1lbWJlcnMiLCJnZXRDbGllbnQiLCJleGlzdGluZ0l0ZW0iLCJzZXRJblByb2dyZXNzIiwiZW5jX2hleF8xIiwibGliX3R5cGVkYXJyYXlzXzEiLCJpc1dvcmRBcnJheSIsImlzQXJyYXlCdWZmZXIiLCJpc1R5cGVkQXJyYXkiLCJ1aW50OFZpZXdUb0Jhc2U2NCIsImJhc2U2NCIsImVuY29kaW5ncyIsImJ5dGVSZW1haW5kZXIiLCJtYWluTGVuZ3RoIiwiYmFzZTY0VG9BcnJheUJ1ZmZlciIsImJpbmFyeV9zdHJpbmciLCJhdG9iIiwiYXNjaWkiLCJhcnJheUJ1ZmZlciIsInVpbnQ4VmlldyIsInRvQXJyYXlCdWZmZXIiLCJ0b1dvcmRBcnJheSIsImhleERlY29kZSIsIlRleHRFbmNvZGVyIiwiVGV4dERlY29kZXIiLCJidWZmZXJDb21wYXJlIiwiYnVmZmVyMSIsImJ1ZmZlcjIiLCJ3b3JkQXJyYXkxIiwid29yZEFycmF5MiIsImNtcCIsIndvcmRzMSIsIndvcmRzMiIsImNyeXB0b19qc19idWlsZF9saWJfdHlwZWRhcnJheXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsImNyeXB0b19qc19idWlsZF9saWJfdHlwZWRhcnJheXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0IiwiY3J5cHRvX2pzX2J1aWxkX2VuY19iYXNlNjRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsImNyeXB0b19qc19idWlsZF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fIiwiY3J5cHRvX2pzX2J1aWxkX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19fZGVmYXVsdCIsIl9jb21tb25fbGliX3V0aWxfbG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18iLCJfY29tbW9uX2xpYl91dGlsX2xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fX2RlZmF1bHQiLCJjb21tb25fbGliX3R5cGVzX2Vycm9yaW5mb19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fIiwiY29tbW9uX2xpYl90eXBlc19lcnJvcmluZm9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX19kZWZhdWx0IiwiY29uZmlnIiwiYnVmZmVyVXRpbHMiLCJnZW5lcmF0ZVJhbmRvbSIsImdldFJhbmRvbVdvcmRBcnJheSIsImJsb2NrUmFuZG9tQXJyYXkiLCJuYXRpdmVBcnJheSIsInBrY3M1UGFkZGluZyIsImtleUxlbmd0aCIsIkNCQ0NpcGhlciIsImJsb2NrTGVuZ3RoV29yZHMiLCJjanNBbGdvcml0aG0iLCJnZXREZWZhdWx0UGFyYW1zIiwidmFsaWRhdGVDaXBoZXJQYXJhbXMiLCJnZW5lcmF0ZVJhbmRvbUtleSIsInBsYWludGV4dCIsInBsYWludGV4dExlbmd0aCIsInBhZGRlZExlbmd0aCIsImdldFBhZGRlZExlbmd0aCIsImdldEl2IiwiY2lwaGVyT3V0IiwiZW5jcnlwdENpcGhlciIsImNpcGhlcnRleHRCb2R5IiwiZGVjcnlwdENpcGhlciIsImVwaWxvZ3VlIiwicmFuZG9tQmxvY2siLCJzd2FwRW5kaWFuIiwid29yZCIsIlV0ZjE2IiwiVXRmMTZCRSIsInV0ZjE2Q2hhcnMiLCJ1dGYxNlN0ciIsInV0ZjE2U3RyTGVuZ3RoIiwiVXRmMTZMRSIsImlucHV0IiwiU0JPWCIsIklOVl9TQk9YIiwiU1VCX01JWF8wIiwiU1VCX01JWF8xIiwiU1VCX01JWF8yIiwiU1VCX01JWF8zIiwiSU5WX1NVQl9NSVhfMCIsIklOVl9TVUJfTUlYXzEiLCJJTlZfU1VCX01JWF8yIiwiSU5WX1NVQl9NSVhfMyIsIngiLCJ4aSIsInN4IiwieDIiLCJ4NCIsIng4IiwiUkNPTiIsIkFFUyIsIl9uUm91bmRzIiwiX2tleVByaW9yUmVzZXQiLCJrZXlXb3JkcyIsImtzUm93cyIsImtleVNjaGVkdWxlIiwiX2tleVNjaGVkdWxlIiwia3NSb3ciLCJpbnZLZXlTY2hlZHVsZSIsIl9pbnZLZXlTY2hlZHVsZSIsImludktzUm93IiwiX2RvQ3J5cHRCbG9jayIsIm5Sb3VuZHMiLCJzMCIsInMxIiwiczIiLCJzMyIsInQwIiwidDIiLCJ0MyIsIlQiLCJhYnMiLCJzaW4iLCJvZmZzZXRfaSIsIk1fb2Zmc2V0X2kiLCJNX29mZnNldF8wIiwiTV9vZmZzZXRfMSIsIk1fb2Zmc2V0XzIiLCJNX29mZnNldF8zIiwiTV9vZmZzZXRfNCIsIk1fb2Zmc2V0XzUiLCJNX29mZnNldF82IiwiTV9vZmZzZXRfNyIsIk1fb2Zmc2V0XzgiLCJNX29mZnNldF85IiwiTV9vZmZzZXRfMTAiLCJNX29mZnNldF8xMSIsIk1fb2Zmc2V0XzEyIiwiTV9vZmZzZXRfMTMiLCJNX29mZnNldF8xNCIsIk1fb2Zmc2V0XzE1IiwiRkYiLCJHRyIsIkhIIiwiSUkiLCJuQml0c1RvdGFsSCIsIm5CaXRzVG90YWxMIiwiaGFzaCIsIkhfaSIsIkhtYWNNRDUiLCJ4aHJyZXF1ZXN0XzEiLCJqc29ucHRyYW5zcG9ydF8xIiwiZmV0Y2hyZXF1ZXN0XzEiLCJzaG91bGRGYWxsYmFjayIsImVycm9ySW5mbyIsImNvbm5lY3Rpb25Ib3N0IiwiY2xhc3NfMSIsImNoZWNrc0luUHJvZ3Jlc3MiLCJfZ2V0SG9zdHMiLCJjb25uZWN0aXZpdHlVcmxJc0RlZmF1bHQiLCJ4aHJTdXBwb3J0ZWQiLCJyZXEiLCJkaXNhYmxlQ29ubmVjdGl2aXR5Q2hlY2siLCJ1cFVybCIsImpzb25wSW50ZXJuZXRVcFVybCIsImZldGNoU3VwcG9ydGVkIiwidXJpRnJvbUhvc3QiLCJjdXJyZW50RmFsbGJhY2siLCJ2YWxpZFVudGlsIiwiaG9zdHMiLCJ0cnlBSG9zdCIsInBlcnNpc3RPblN1Y2Nlc3MiLCJtZXRob2RzV2l0aG91dEJvZHkiLCJ1dGlsc18xIiwiZmV0Y2hIZWFkZXJzIiwiSGVhZGVycyIsImNvbnRyb2xsZXIiLCJBYm9ydENvbnRyb2xsZXIiLCJyZXF1ZXN0SW5pdCIsImlzV2Vid29ya2VyIiwiY3JlZGVudGlhbHMiLCJmZXRjaCIsIlVSTFNlYXJjaFBhcmFtcyIsIm9rIiwiY2F0Y2giLCJsb2MiLCJjdXJyZW50VXJsIiwib3JpZ2luIiwic3RyZWFtaW5nU3VwcG9ydGVkIiwic2V0SW1tZWRpYXRlIiwidGVzdCIsIldlYnN0b3JhZ2UiLCJzZXNzaW9uU3RvcmFnZSIsInNldEl0ZW0iLCJyZW1vdmVJdGVtIiwibG9jYWxTdG9yYWdlIiwiX2dldCIsIl9yZW1vdmUiLCJfc2V0Iiwic2Vzc2lvbiIsIndyYXBwZWRWYWx1ZSIsInN0b3JhZ2VJbnRlcmZhY2UiLCJyYXdJdGVtIiwiZ2V0SXRlbSIsIlRyYW5zcG9ydE5hbWVzXzEiLCJYaHJQb2xsaW5nIiwiWGhyU3RyZWFtaW5nIiwiSnNvblAiLCJUcmFuc3BvcnROYW1lcyIsImpzb25wdHJhbnNwb3J0IiwianNvbnB0cmFuc3BvcnRfZGVmYXVsdCIsInV0aWxzIiwicGxhdGZvcm1fZGVmYXVsdCIsImNvbWV0dHJhbnNwb3J0IiwiY29tZXR0cmFuc3BvcnRfZGVmYXVsdCIsInhocnJlcXVlc3QiLCJ4aHJyZXF1ZXN0X2RlZmF1bHQiLCJYSFJQb2xsaW5nVHJhbnNwb3J0IiwiWEhSU3RyZWFtaW5nVHJhbnNwb3J0IiwicHJvbWlzaWZ5T3B0aW9ucyIsIkFibHkiLCJSZXN0UHJvbWlzZSIsIlJlYWx0aW1lUHJvbWlzZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJkZWZpbml0aW9uIiwic2VydmVyIiwiY3JlYXRlQ2hhbm5lbCIsIm9uU2VydmVyTWVzc2FnZSIsIm1ha2VNb3ZlIiwiYWxsQ2VsbHNGdWxsIiwiY2VsbHMiLCJwYXJlbnQiLCJnZXRFbGVtZW50QnlJZCIsInRpY1RhY1RvZURpdiIsImNyZWF0ZURpdiIsImFwcGVuZENoaWxkIiwiYnV0dG9uVG9waWMiLCJjcmVhdGVCdXR0b24iLCJwbGF5ZXJEaXYiLCJwbGF5ZXIiLCJpbm5lckhUTUwiLCJjb21tZW50cyIsImNlbGxEaXYiLCJjcmVhdGVDZWxscyIsImNsYXNzTmFtZSIsImRpdiIsImNsYXNzTGlzdCIsImFkZCIsImNlbGxzRGl2IiwiY2VsbE51bSIsImNlbGwiLCJvbmNsaWNrIiwib25DZWxsUHJlc3MiLCJidXR0b24iLCJzZXRTdHlsZSIsInN0eWxlIiwidXBkYXRlQ2VsbCIsInNldFdpbiIsIndpblN5bWJvbCIsInNldERyYXciLCJuZXh0VHVybiIsImNsZWFyQ2VsbHMiLCJjZWxsc0RhdGEiLCJyZXNldEdhbWUiLCJmaWxsIiwiY2hlY2tEcmF3IiwiY2hlY2tXaW4iLCJjaGVja1dpbm5pbmdQb3NpdGlvbnMiLCJ3aW5uaW5nTWFyayIsIndpbm5pbmdQb3NpdGlvbnMiLCJwb3MxIiwicG9zMiIsInBvczMiXSwic291cmNlUm9vdCI6IiJ9